post-0.90:
	high priority items
		review serialization & seeding interface
		add regression tests for more RNGs
	add more self-tests, regression tests, etc
		checks that serialization works correctly
		add self-test to SHA2-512 implementation (why isn't there one there already?)
		add regression tests for a wider variety of recommended RNGs
	review / reorganize header files
		some headers protect against multiple inclusion, some don't
		some headers protect against inclusion prior to dependencies, some don't
		test_helpers should probably be split in two
	RNG testing
		consider splitting in to a separate library
			yes, it's already a semi-separate .lib file, but...
			maybe it should also have separate:
				names, SourceForge project pages, VC solution files, downloads?
		revise specific RNG testing algorithms
			Gap16
				possibly count sequential identical gaps
			DC6
				investigate Bob Jenkins suggestion of applying to x^(x>>1)
			BCFN
				many variations to investigate
				in particular check the assymetric probability variation
			CoupGap
				try to get more testable factors per run
			FPF
				optimize strides 2,4,8,16
			Rares
				publish
			BCN_generic
				worth more investigation
			...others
				most of the others don't appear to be worth the effort
		create new tests
			as BCFN, but calc the avg # of 1s in blocks after each sequence of #s of 1s
			something gapish on more than 16 bits at a time
			consider more autowindowing / leveling
			investigate idea: design a test for running on GPUs
		possible modifications to test interfaces
			allow a single test to be multithread?
				a bit nasty to code, and the interface might be nasty too, but it is quite doable
	tools
		add an adaptor to produce a polymorphic RNG from a raw RNG automatically
			(to simplify users sticking their own RNG in to the test program at full performance)
		possibly move TestManager class in to library?
	choices in library to be reconsidered:
		names of randlf, randli
			perhaps: rand_sint32, rand_sint64, rand_uint32, rand_uint64, rand_float, rand_double, fast_uint32
		ranges to randf, randi, randlf, randli: [min..max) or [min..max]
		should unseeded RNGs require explicit SEED_NONE flag?
		change return type of RNG::get_name to something that doesn't require STL (ie write to buffer)?
		should split add_entropy* methods off from vRNG in to a new child class?
		serialization interface needs more work & thought I think
			same for seeding of non-polymorphic RNGs
		???
	review and add to documentation
		detailed descriptions of RNGs, particularly recommended RNGs
		RNG basics
		RNG selection
		RNG qualities
		RNG distributions
		RNG seed management and entropy collection
		RNGs and multithreading
		RNGs and parallel computing
		RNGs and exotic platforms
		RNGs and cryptography
		RNG testing / RNG tests
		RNG theory and analysis

