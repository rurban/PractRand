post-0.82:
	double-check licenses/patents on RNG algorithms & code
		mt19937 - revise to eliminate any code other than my own?
	ack, the sha2 code requires reproduction of its copyright notice
		use my own sha-2 code?  it's not as good IIRC
		find another sha-2 implementation?
	add some bad to mediocre RNGs to full version, put together chart showing which RNGs fail which tests when
		RNGs on list should include various qualities in each category:
			simple w/o multiplication
				bin48_16, sapparot, ...
			simple w/ multiplication
				lcg32_16, lcg48_16, cmwc, semigarth16, semigarth32, ...
			cyclic buffer
				mm, mwc4691, mt19937_unhashed, ...
			indirection
				rc4_weakened, ibaa8x4, ibaa16x4, rc4, isaac32x16, ...
			special
				icg32_16, ???
	add self-tests, regression tests, etc
	revise RNG "efiix"
		possibly split it in to two RNGs, one for speed one for security
	consider revising RNG mwlac
		some variants offer guarantees of no short cycles, but may be slower and/or lower quality
	test program(s)
		add multithreading (using SDL?  or maybe native WIN32?)
	choices in library to be reconsidered:
		names of randlf, randli
		ranges to randf, randi, randlf, randli: [min..max) or [min..max]
		should unseeded RNGs require explicit SEED_NONE flag?
		should rename vRNG to PolymorphicRNG?
		change return type of RNG::get_name to something that doesn't require STL (ie write to buffer)?
		should split add_entropy* methods off from vRNG in to a new child class?
		???
	review and add to documentation
		detailed descriptions of RNGs, particularly recommended RNGs
		RNG basics
		RNG selection
		RNG qualities
		RNG distributions
		RNG seed management and entropy collection
		RNGs and multithreading
		RNGs and exotic platforms
		RNGs and cryptography
		RNG testing / RNG tests
		apply_standard_tests(RNG, length)
		apply_common_standard_test_foldings(RNG, length)
		apply_all_standard_test_foldings(RNG, length)
		RNG theory and analysis

