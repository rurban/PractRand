post-0.83:
(* = high priority)
	add self-tests, regression tests, etc
*		test vectors for MT19937, ISAAC, ISAAC64, HC-256, SHA2-512
		???
	review / reorganize header files
		some headers protect against multiple inclusion, some don't
		some headers protect against inclusion prior to dependencies, some don't
		test_helpers should probably be split in two
	revise the RNG algorithms of my own creation
		not other RNG algorithms as they tend to have defined correct behaviors
		EFIIX
			possibly split it in to two RNGs, one for speed one for security
		MWLAC
			some variants offer guarantees of no short cycles, but may be slower and/or lower quality
			consider SFC:
				lower quality, but faster
				does not require multiplication
				64 bit version has no short cycles
	RNG testing
		consider splitting in to a separate library
			yes, it's already a semi-separate .lib file, but...
			maybe it should also have separate:
				names, SourceForge project pages, VC project files, downloads
		revise specific RNG testing algorithms
			Gap16
				possible minor bug in get_result, fix and recalibrate
			DC6
				investigate Bob Jenkins suggestion of applying to x^(x>>1)
			BCFN
				many variations to investigate; currently focused on BCACN
			CoupGap
				try to get more testable factors per run
			FPF
				optimize strides 2,4,8,16
			Rares
				publish
			BCN_generic
				worth more investigation
			...others
				most of the others don't appear to be worth the effort
		create new tests
			consider more autowindowing / leveling
			investigate idea: design a test for running on GPUs
		possible modifications to test interfaces
			allow a single test to be multithread?
		increase automation & quality of calibration process
		improve clarity & quality of example code (TestManager)
			possibly move TestManager class in to library
	test program(s)
		add multithreading (using SDL?  or maybe native WIN32?)
	choices in library to be reconsidered:
		names of randlf, randli
		ranges to randf, randi, randlf, randli: [min..max) or [min..max]
		should unseeded RNGs require explicit SEED_NONE flag?
		should rename vRNG to PolymorphicRNG?
		change return type of RNG::get_name to something that doesn't require STL (ie write to buffer)?
		should split add_entropy* methods off from vRNG in to a new child class?
		???
	review and add to documentation
		detailed descriptions of RNGs, particularly recommended RNGs
		RNG basics
		RNG selection
		RNG qualities
		RNG distributions
		RNG seed management and entropy collection
		RNGs and multithreading
		RNGs and exotic platforms
		RNGs and cryptography
		RNG testing / RNG tests
		RNG theory and analysis

