PractRand (Practically Random) is a C++ library of pseudo-random number 
generators (PRNGs, or just RNGs) and statistical tests for RNGs.  

version 0.87


1. Randon Number Generation with PractRand

Most development platforms come with random number generators that have 
major statistical flaws, are a bit slow, and/or have inconvenient 
interfaces.  PractRand can help.  

features:

A. Very convenient interface for practical use, not just research.  

A1: Abstraction layer hides details of the RNG algorithms native output 
format, as users have better things to worry about.  
A2: Natively supports uniform integer and floating point distributions, 
compatible with the more complex distributions offered by Boost / C++0x TR1.  
A3: Common interface available for a variety of RNG algorithms, making 
switching underlying algorithms trivial.  
A4: Automatic seeding, or seeding from any type(s) you want, with a simple 
seeding interface for the common cases and powerful seeding helpers for 
exotic cases.  

B. A variety of very high quality RNG algorithms.  

B1: Lists of recommended RNG algorithms and their strengths, to make it 
easy to find one appropriate for specific circumstances quickly.  
B2: RNGs suitable for a wide variety of needs - cryptographically secure 
RNGs, random access RNGs, RNGs that can be implemented with less than 1000 
gates, etc.  
B3: Many of the included RNGs are appropriate for use in parallel 
computing and multithreaded applications, and there is documentation to 
help.  
B4: All recommended RNGs are unencumbered.  See license.txt for 
details.  

Other libraries including multiple RNG algorithms with a common interface:
Boost / C++0x TR1 - http://www.boost.org/
TestU01 - http://www.iro.umontreal.ca/~simardr/testu01/tu01.html
hasard - http://bytebucket.org/haypo/hasard/wiki/Home
GSL - http://www.gnu.org/software/gsl/


2. Statistical testing of RNGs with PractRand

features:

A. Includes a standard battery of tests, in the tradition of Diehard.  
Many competitors include only raw tests with no obvious means for 
someone unfamiliar with them to pick parameterizations, or a default 
test set that is simply one parameterization of each test regardless 
of the relative strengths and breadths of the tests involved.  

B. Standard battery of tests can detect bias in a wide variety of RNGs 
quickly.  In my testing it can find bias in a wider variety of RNGs 
than any other suite of statistical tests, and on average needs less 
time than other suites of statistical tests.  

C. Tests are provided as legally unencumbered source code and static 
libraries, so that data can be passed directly to them bypassing the 
hard disk speed and size limitations.  To the best of my knowledge 
PractRand is the *only* such software package (many competitors are 
not intended to be linked with, and even those that are have license 
restrictions on what they can be linked with and redistributed with).  
Some competitors are intended to have RNG output piped to them... in 
my experience this imposes a substantial performance overhead.  

D. No realistic maximum sequence length for testing.  Competing 
software packages generally either have either interface issues or 
bugs that make testing very long sequences impossible or meaningless, 
but PractRand has been tested on sequence lengths over 100 terabytes 
and is expected to work on sequence lengths up to a few exabytes.  

E. Mostly original tests.  Competing software packages tend to mainly 
use duplicates of tests that appeared in the literature decades ago, 
with only a few unusual tests.  There is nothing wrong with that, but 
it means that if you are testing with at least two test suites then 
you are likely to have less redundancy (and better breadth) if one of 
the test suites is PractRand.  

F. PractRands testing interface allows preliminary results to be 
requested at any time without having to start the testing over again.  
Most competitors require that results be evaluated just once at the 
end of a test.  If you are testing an RNG using dynamic test sequence 
lengths - progressively longer until the RNG fails a test - then this 
is a very important feature.  

G. Now comes as either a library (for performance and vesatility) or 
as a command line tool (for convenience).  

Those are the pros.  The main con is that it requires more random bits 
than most comparable test suites.  

Other packages for testing PRNGs:
TestU01 - http://www.iro.umontreal.ca/~simardr/testu01/tu01.html
	TestU01 is pretty decent.  Not as good as PractRand in my 
	testing, but the best alternative if PractRand is unsuitable for 
	some reason.  
	It's rather difficult to build on win32 though.  
	Source code is available for non-commercial use. 
NIST STS - http://csrc.nist.gov/groups/ST/toolkit/rng/index.html
	Widely used, but by reputation not as good as TestU01.  
	I haven't tried it.  
	Source code is available for any use.  
Dieharder - http://www.phy.duke.edu/~rgb/General/dieharder.php
	Intended for use on *nix - I was unable to build it on win32.  
	The default test set is awful.  Even with a better test set it 
	generally can't compete with PractRand or TestU01.  However 
	it has a command line interface that is better for scripting 
	than most competitors.  
	Dieharder has some unfortunate problems with false positives.  
	Source code is available, license is GPL.  
RaBiGeTe - http://cristianopi.altervista.org/RaBiGeTe_MT/
	Not as good as PractRand or TestU01 in my testing.  
	It is more efficient on a per-bit basis though, and comes with a 
	GUI that can help visualize the distribution of results from 
	multiple samples if desired.  
	This is the only test suite besides PractRand that can easily 
	do multithreaded testing.  
	Source code is available, but only for older versions.  I'm not 
	sure what the license is like.  
	RaBiGeTe has a tendency to crash a bit, but it's still usable.  
Diehard - http://www.stat.fsu.edu/pub/diehard/
	A very weak test, with an output format that is difficult to read.  
	Avoid this, it is only of historical interest.  
	Dieharder (see above) was named after this.  
ENT - http://www.fourmilab.ch/random/
	A very weak test.  
gjrand - http://gjrand.sourceforge.net/
	Fairly obscure.  I have not tried it.  

Documentation:

PractRand.txt - this file
installation.txt - some minimal discussion of how to install PractRand
tools.txt - the command line tools included in PractRand
license.txt - some minimal discussion of legal issue with PractRand
RNG_usage.txt - basic RNG usage in PractRand
RNG_engines.txt - overview of various RNG algorithms and their merits
RNG_multithreading.txt - brief overview of the intended methods 
	for multithreaded programs using PractRand RNGs
RNG_interface_variations.txt - while PractRand offers a common interface 
	to all RNGs in it, there are actually several minor variations on 
	that common interface, ie polymorphic RNGs vs light-weight RNGs.  
RNG_entropy_pools.txt - overview of the subset of RNGs in PractRand 
	known as "entropy pools".  These RNGs are useful in exotic seeding 
	scenarios.  
Tests_usage.txt - brief discusion of how to use the statitical tests
Tests_results.txt - tables showing the relative performance of 
	PractRands standard tests vs TestU01 *Crush
Tests_batteries.txt - a very brief look at the sets of tests that 
	PractRand defines
Tests_engines.txt - a list of the tests that PractRand defines, with 
	brief descriptions of each
Tests_overview.txt - a general description of statistical tests for 
	randomness and a few thoughts.  
versions.txt - what has changed between different versions of PractRand
to_do.txt - Things left to do for PractRand.  There are lots.  
