PractRand (Practically Random) is a C++ library of pseudo-random number 
generators (PRNGs, or just RNGs) and statistical tests for RNGs.  

version 0.80

1. Randon Number Generation with PractRand

features:

A. Very convenient interface for practical use, not just research.  
A.1: Abstracts away details of the RNG algorithms native output format
A.2: Natively supports uniform integer and floating point distributions, 
compatible with the more complex distributions offered by Boost / C++0x TR1.  
A.3: Automatic seeding, or seeding from any type you want.  
A.4: Common interface available for a variety of RNG algorithms, making 
switching underlying algorithms trivial.  

C. A variety of very high quality RNG algorithms optimized for 
several different scenarios.  
C.1: Lists of RNG algorithms and their strengths, to make it easy 
to find one appropriate for specific circumstances quickly.  
C.2: RNG algorithms that pass all statistical tests.  
C.3: RNG algorithms that are very fast.  
C.4: RNG algorithms that are cryptographically secure.  
C.5: RNG algorithms that are easy to implement in hardware.  
C.6: RNG algorithms that allow seeking / random access.  
C.7: RNG algorithms appropriate just about any type of CPU (except 
floating point DSPs... will add some for those later).  

Other libraries including multiple RNG algorithms:
Boost / C++0x TR1 - http://www.boost.org/
TestU01 - http://www.iro.umontreal.ca/~simardr/testu01/tu01.html
hasard - http://bytebucket.org/haypo/hasard/wiki/Home
GSL - http://www.gnu.org/software/gsl/

2. Statistical testing of RNGs with PractRand

features:

A. Includes a standard battery of tests, in the tradition of Diehard 
and TestU01 Crush / BigCrush.  
B. Standard battery of tests can detect bias in a wide variety of RNGs 
quickly.  
C. Tests are provided as legally unencumbered source code and static 
libraries, so that data can be passed directly to them bypassing the 
hard disk speed and size limitations.  

Other packages for testing PRNGs:
TestU01 - http://www.iro.umontreal.ca/~simardr/testu01/tu01.html
NIST RNG tests - http://csrc.nist.gov/groups/ST/toolkit/rng/index.html
RaBiGeTe - http://www.webalice.it/cristiano.pi/rabigete/
Dieharder - http://www.phy.duke.edu/~rgb/General/dieharder.php
Diehard - http://www.stat.fsu.edu/pub/diehard/
ENT - http://www.fourmilab.ch/random/

Documentation:

PractRand.txt - this file
installation.txt - some minimal discussion of how to install PractRand
license.txt - some minimal discussion of legal issue with PractRand
RNG_usage.txt - basic RNG usage in PractRand
RNG_engines.txt - overview of various RNG algorithms and their merits
RNG_multithreading.txt - brief overview of the intended methods 
	for multithreaded programs using PractRand RNGs
RNG_interface_variations.txt - while PractRand offers a common interface 
	to all RNGs in it, there are actually several minor variations on 
	that common interface, ie polymorphic RNGs vs light-weight RNGs.  
RNG_entropy_pools.txt - not yet written
Tests.txt - brief discusion of how to use the statitical tests... 
	examining the sample program is probably more useful in that regard.  
versions.txt - what has changed between different versions of PractRand
to_do.txt - Things left to do for PractRand.  There are lots.  
