*****************************************************************************
columns:
	RNG
		The name of the RNG algorithm used;
		The name used is the name it is called in PractRand, not necessarily 
		its real full name - for instance, hc256 instead of HC-256.  
	PractRand standard
		The PractRand standard tests are those returned by 
		PractRand::Tests::Batteries::get_standard_tests().  
		quirks:
			test set is (slightly) dependent upon RNG metadata
			p-values are *very* crudely aproximated
		speed on a fast RNG on my computer:
			1 GB: ~15 seconds
			1 TB: ~4 hours
		format:
			The length of sequence required for the PractRand standard tests 
			to detect bias.  If multiple seeds were tested, and bias was 
			found in them at different sequence lengths, then the median 
			result is used.  If bias was not found then the length of the 
			longest sequence tested is recorded, with a ">" prefixed in 
			front of it.  
			Bias is considered to have been found when the p-value 
			approaches zero or one to within 1.0e-10.  
			The length is recorded as a number followed by KB, MB, GB, or 
			TB.  Those stand for kilobyte, megabyte, gigabyte, or terabyte 
			respectively.  
			All lengths are rounded up to the nearest power of 2.  
	TestU01 *Crush
		This refers to the batteries "SmallCrush", "Crush", and "BigCrush" 
		in TestU01.
		quirks:
			does not accept a sequence length parameter
			works on RNGs outputing 31 bits per call:
				on 32 bit RNGs it works but disregards the lowest bit
				on 8/16 bit RNGs, I concatonate multiple outputs together to produce a 32 bit output
				on 64 bit RNGs... I am currently discarding the upper 32 bits to produce a 32 bit output
					might, in the future, change that to returning half and buffering half for the next call
			does not print any results until all are ready
		speed on a fast RNG on my computer:
			SmallCrush: ~8 seconds
			Crush:      ~35 minutes
			BigCrush:   ~4 hours
		format:
			If all 3 are passed then the result is recorded as "pass".  
			Otherwise, the result is recorded as X/Y/Z, where X is the 
			number of tests failed in SmallCrush, Y is the number failed in 
			Crush, and Z is the number failed in BigCrush.  
			Failure is defined as a p-value <= 1.0e-10 or >= (1 - 1.0e-10)
	
	If a result is listed as "?" that means that that test has not been run 
	on that RNG.  If a result has a normal value followed by a "?" that 
	means that either that result is strongly implied by tests on nearly 
	equivalent RNGs, or that the test was run and is believed to have 
	produced that result but the record-keeping involved was incomplete and 
	I can't be sure without re-running the test.  


*****************************************************************************

tests that were not included:
	PractRand expanded standard
		This test was not used because:
			p-values are unavailable on most tests, justs pass/fail results
	TestU01 Rabbit
		This test was not used because:
			A. It consistently crashes if used on a long sequence
			B. Its time to complete a test does not increase linearly with 
				sequence length - in some cases it actually decreases with 
				length.  This appears to be partially caused by the test 
				set being a function of the testing length.  
			C. Its results do not seem to improve in power with sequence 
				length consistently enough.  
	TestU01 Pseudo-diehard
		This test was not used because it is too low quality.  
	NIST RNG tests
		???
	RaBiGeTe, default configuration
		This test was not used because:
			A. The currently released code is incapable of multiple test 
				runs on RNGs linked with it in a single run, making 
				administering the tests somewhat difficult.  
	Dieharder, default set of tests (-a)
		Not used because it was too inefficient.  

*****************************************************************************

A brief analysis of relative performance of PractRand standard battery & 
	TestU01 SmallCrush / Crush / BigCrush, by RNG category:

recommended RNGs: looks like a tie to me; both test suites have severe 
	difficulty finding any bias in the recommended RNGs

simple RNGs: PractRand seems to outperform TestU01, but only barely

multiplication based RNGs: PractRand tends to outperform TestU01 on the 
	multi-cyclic ones, TestU01 seems to barely outperform PractRand on the 
	single-cycle ones.  

cyclic buffer based RNGs: PractRand outperforms TestU01 here.  

indirection based RNGs: PractRand outperforms TestU01 here.  

Bays-Durham shuffles applied to low quality RNGs: TestU01 outperforms here, 
	at least on single-cycle RNGs.  

*****************************************************************************

recommended RNGs
	RNG             Quality     PractRand   TestU01
	                rating      standard    *Crush
	hc256           5           > 1 TB      pass
	efiix64x256     5           > 1 TB      pass?
	efiix32x256     5           > 2 TB      pass
	efiix16x256     5           > 1 TB      pass
	efiix8x256      5           > 2 TB      pass
	isaac64x256     5           > 1 TB?     pass?
	isaac32x256     5           > 4 TB      pass
	arbee           4           > 1 TB      pass?
	jsf64           4           > 2 TB      pass?
	jsf32           4           > 4 TB      pass
	jsf16           3           > 2 TB      pass
	sfc64           3           > 2 TB      pass?
	sfc32           2-3         > 4 TB      pass
	sfc16           1-2         128 GB      pass
	mt19937         3           > 4 TB      0/2/2
	mcx32           3           > 8 TB      pass
	mcx64           4           > 1 TB      pass?


candidate RNGs
	ranrotvar64     2-3         ?           ?
	ranrotvar32     2-3         ?           ?
	ranrotvar16     1-3         ?           ?
	ranrotvar8      0-3         ?           ?
	veryfast64      2-4         ?           ?
	veryfast32      2-4         2 TB        pass?
	sfc64_v4cand                ?           ?
	sfc32_v4cand                ?           ?
	sfc16_v4cand                32 TB !!    ?
	clcg96_32       2-3         > 4 TB      pass
	lcg64_32        1           32 GB       0/4/?

other RNGs - simple
	RNG             Quality     PractRand   TestU01
	                rating      standard    *Crush
	xorshift64                  8 MB        ?
	xorshift32                  ?           5/53/?
	xorshift64_32               512 KB      6/50/?
	xorshift128_32              > 1 TB      0/6/?
	xorshift32x4                8 GB        0/8/?
	sapparot        0           128 MB      0/0/1
	sap48_16        0           1 GB        0/3/2
	sap96_32        2           > 4 TB      pass
	flea32x1        2           > 1 TB      pass
	sfc_v1_16       1           4 GB        pass
	sfc_v1_32       1-2         > 4 TB      pass
	sfc_v2_16       0-1         1 GB        pass
	sfc_v2_32       1-2         > 2 TB      0/0/1
	simpleA         0-1         2 GB        pass
	simpleB         0           64 MB       1/6/2
	simpleC         0-2         16 GB       1/6/2
	simpleD         0-3         64 GB       pass
	simpleE         0-3         ?           pass

other RNGs - multiplication based
	RNG              Quality     PractRand   TestU01
	                 rating      standard    *Crush
	lcg32_16         0           16 MB       6/48/??
	lcg40_16         0           16 MB       1/29/??
	lcg48_16         0-1         4 GB        1/7/??
	lcg56_16         0-1         256 GB      1/6/??
	lcg64_16         1-2         > 2 TB      0/3/4
	xlcg32_16        0           16 MB       10/?/?
	xlcg40_16        0?          64 MB       1/11/?
	xlcg48_16        0-1         8 GB        0/2/3
	xlcg56_16        1?          512 GB      pass
	xlcg64_16        1-3?        > 8 TB      pass
	clcg64_16        0-2         1 GB        0/4/?
	clcg68_16        0-2         32 GB       ?
	clcg72_16        0-3         1 TB        0/1/1
	clcg80_16        1-3         > 2 TB      pass
	cxlcg64_16       ?           1 GB        0/1/2
	cxlcg68_16       ?           64 GB       pass
	cxlcg72_16       ?           1 TB        pass
	binarymult16     0-1         2 GB        1/31/2
	binarymult32     1-2         32 GB       pass
	garthy16         0-1         32 MB       0/15/?
	garthy32         1-2         256 GB      pass
	rxmult16         0-1         512 MB      1/72/135
	multish3x32      1-2         16 GB       0/0/1
	multish4x16      1-2         64 GB       0/2/1
	old_mwlac16      2           128 GB      pass

other RNGs - cyclic buffer based
	RNG              Quality     PractRand   TestU01
	                 rating      standard    *Crush
	mm32             0           4 MB        1/8/12
	mm32_16          1           1 GB        0/0/2
	mm32_awc         1           8 GB        0/8/11
	mwc4691          1           1 GB        pass
	cbuf_accum       1           4 GB        pass
	dual_cbuf        2           128 GB      pass
	dual_cbuf_accum  3           1 TB        pass
	fibmul32_16      0-2         2 GB        pass
	fibmul64_32      1-3         512 GB      pass
	ranrot32         2           4 GB        pass
	ranrot3tap32     2-3         64 GB       pass?
	mt19937_unhashed 1           32 GB       0/2/2

other RNGs - indirection based
	RNG              Quality     PractRand   TestU01
	                 rating      standard    *Crush
	ibaa8x2          0-1         2 GB        0/8/19
	ibaa8x4          1-2         128 GB ?    pass
	ibaa8x8          2-3         > 1 TB      pass
	ibaa16x2         1-2         16 GB       pass
	ibaa16x4         2-3         > 2 TB      pass?
	ibaa32x2         1-3         2 TB        pass?
	rc4_weakened     0-2         32 GB       0/1/1
	rc4              3           4 TB        pass
	isaac32x4        0-2         8 GB        pass
	isaac32x8        1-2         64 GB       pass
	isaac32x16       3           16 TB       pass?
	isaac64x4        ?           ?           ?

Bays-Durham Shuffle applied to various low quality RNGs
	RNG                       PractRand   TestU01
	                          standard    *Crush
	[BDS16]lcg32_16           ?           ?
	[BDS256]lcg32_16          64 MB       0/0/20
	[BDS4]clcg64_16           ?           ?
	[BDS16]clcg64_16          ?           ?
	[BDS256]clcg64_16         16 GB       pass
	[BDS4]cxlcg64_16          ?           ?
	[BDS16]cxlcg64_16         ?           ?
	[BDS256]cxlcg64_16        16 GB       ?
	[BDS4]mm32                ?           ?
	[BDS16]mm32               ?           ?
	[BDS256]mm32              128 MB      0/0/6
	[BDS4]mm32_16             ?           ?
	[BDS16]mm32_16            ?           ?
	[BDS256]mm32_16           > 1 TB      0/0/3
	[BDS4]mm32_awc            ?           ?
	[BDS16]mm32_awc           ?           ?
	[BDS256]mm32_awc          > 1 TB      0/0/6
	[BDS4]xorshift32          64 MB       1/26/?
	[BDS16]xorshift32         1 GB        0/4/9
	[BDS256]xorshift32        16 GB       0/4/9
	[BDS4]xorshift64_32       8 MB        2/21/?
	[BDS16]xorshift64_32      128 GB      0/14/8
	[BDS256]xorshift64_32     > 1 TB      0/0/2
	[BDS4]xorshift32x4        8 GB        0/7/5
	[BDS16]xorshift32x4       1 TB        0/0/1
	[BDS256]xorshift32x4      > 1 TB      pass
	[BDS4]xorshift64          16 GB       ?
	[BDS16]xorshift64         16 GB       ?
	[BDS256]xorshift64        ?           ?
	[BDS4]sapparot            16 GB       pass?
	[BDS16]sapparot           > 1 TB      pass?


*****************************************************************************

An interesting pattern in the results: TestU01 seems to do better finding 
bias in single-cycle / linear RNGs while PractRand seems to do better on 
multicyclic / chaotic RNGs.  Not really enough information to establish 
significance though.  
The single-cycle / linear RNGs on that list include all the LCGs and LCG 
variants, all the xorshifts, mt19937, mt19937_unhashed, mm32, mm32_16, 
cmwc4691, and rarns.  Rarns uses a non-linear output function but a linear 
state transition function; all of the other single-cycle RNGs there use both 
linear state transition functions and linear output functions.  

*****************************************************************************
