#include <string>
//#include <ostream>
#include <sstream>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <cmath>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <algorithm>

#include "PractRand/config.h"
#include "PractRand/rng_basics.h"
#include "PractRand/rng_helpers.h"
#include "PractRand/tests.h"
#include "PractRand/rng_internals.h"
#include "PractRand/test_helpers.h"
#include "PractRand/test_batteries.h"
#include "PractRand/Tests/Gap16.h"
#include "PractRand/Tests/DistC6.h"
#include "PractRand/Tests/Pat5.h"
#include "PractRand/Tests/BCFN.h"
#include "PractRand/Tests/BCFN_MT.h"
#include "PractRand/Tests/FPF.h"
#include "PractRand/Tests/FPMulti.h"
#include "PractRand/Tests/Birthday.h"
#include "PractRand/Tests/CoupGap.h"
#include "PractRand/Tests/BRank.h"
#include "PractRand/Tests/mod3.h"
#include "PractRand/Tests/NearSeq.h"
#include "PractRand/Tests/coup16.h"
#include "PractRand/Tests/DistFreq4.h"
#include "PractRand/Tests/transforms.h"

using namespace PractRand;

static long double gap_probs(int first, int last, long double chance_of_not_gap1) {
	return std::pow(chance_of_not_gap1, (long double)first) - std::pow(chance_of_not_gap1, (long double)last + 1);
}
static long double gap_expected(long double chance_of_gap1 = 1.0 / 65536) {
	long double e = 0;
	long double t = 0;
	long double end = 20.0 / chance_of_gap1 + 100;
	for (long double i = 1; i < end; i++) {
		long double p = chance_of_gap1 * std::pow(1 - chance_of_gap1, i - 1);
		e += i * p;
		t += p;
	}
	return e;
}
static long double gap_variance(long double chance_of_gap1 = 1.0 / 65536) {
	long double e = gap_expected(chance_of_gap1);
	long double var = 0;
	long double t = 0;
	long double end = 20.0 / chance_of_gap1 + 100;
	for (long double i = 1; i < end; i++) {
		long double p = chance_of_gap1 * std::pow(1 - chance_of_gap1, i - 1);
		long double sqr = i - e; sqr *= sqr;
		var += sqr * p;
		t += p;
	}
	return var;
}
static long double gap_log2_expected(long double chance_of_gap1 = 1.0 / 65536) {
	long double Le = 0;
	long double t = 0;
	long double end = 30.0 / chance_of_gap1 + 100;
	long double partial_Le = 0;
	long double partial_t = 0;
	for (long double i = 1; i < end; i++) {
		long double p = chance_of_gap1 * std::pow(1 - chance_of_gap1, i - 1);
		partial_Le += std::log2(i) * p;
		partial_t += p;
		if (partial_t >= 0.001) {
			Le += partial_Le;
			t += partial_t;
			partial_Le = 0;
			partial_t = 0;
		}
	}
	Le += partial_Le;
	t += partial_t;
	return Le;
}
static long double gap_log2_variance(long double chance_of_gap1 = 1.0 / 65536) {
	long double Le = gap_log2_expected(chance_of_gap1);
	long double var = 0;
	long double t = 0;
	long double end = 20.0 / chance_of_gap1 + 100;
	long double partial_var = 0;
	long double partial_t = 0;
	for (long double i = 1; i < end; i++) {
		long double p = chance_of_gap1 * std::pow(1 - chance_of_gap1, i - 1);
		long double sqr = std::log2(i) - Le; sqr *= sqr;
		partial_var += sqr * p;
		partial_t += p;
		if (partial_t >= 0.001) {
			var += partial_var;
			t += partial_t;
			partial_var = 0;
			partial_t = 0;
		}
	}
	var += partial_var;
	t += partial_t;
	return var;
}

static const Uint8 distance_table[256] = {
	0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4,
	1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
	1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
	2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
	1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
	2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
	2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
	3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
	1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
	2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
	2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
	3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
	2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
	3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
	3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
	4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8
};
int PractRand::Tests::count_bits8 (Uint8 a) {
	return distance_table[a];
}
int PractRand::Tests::count_bits16(Uint16 a) {
	return distance_table[Uint8(a)] + distance_table[Uint8(a>>8)];
}
int PractRand::Tests::count_bits32(Uint32 a) {
	return distance_table[Uint8(a)] + distance_table[Uint8(a>>8)] + distance_table[Uint8(a>>16)] + distance_table[Uint8(a>>24)];
}
int PractRand::Tests::count_bits64(Uint64 a) {
//	return distance_table[Uint8(a)] + distance_table[Uint8(a>>8)] + distance_table[Uint8(a>>16)] + distance_table[Uint8(a>>24)] +
//		distance_table[Uint8(a>>32)] + distance_table[Uint8(a>>40)] + distance_table[Uint8(a>>48)] + distance_table[Uint8(a>>56)];

	// at some point it makes sense to stop using the tables and start using bitwise math
	//... I *think* that point is around 64 bits on 64 bit hardware + compilers
	Uint64 b;
	b = a & 0xAAAAAAAAAAAAAAAAull; a ^= b; // 1 -> 2
	b >>= 1; a += b;//0-2
	b = a & 0xCCCCCCCCCCCCCCCCull; a ^= b; // 2 -> 4
	b >>= 2; a += b;//0-4
	b = a & 0xF0F0F0F0F0F0F0F0ull; a ^= b; // 4 -> 8
	b >>= 4; a += b;//0-8
	b = a;// & 0xFF00FF00FF00FF00ull; a ^= b; // 8 -> 16
	b >>= 8; a += b;//0-16
	b = a;// & 0xFFFF0000FFFF0000ull; a ^= b; // 16 -> 32
	b >>= 16; a += b;//0-32
	b = a;// & 0xFFFFFFFF00000000ull; a ^= b; // 32 -> 64
	b >>= 32; a += b;//0-64
	return Uint8(a);
	//*/
}

double PractRand::TestResult::pvalue_to_suspicion(double pvalue) {
	if (pvalue > 0.5) return -1 * pvalue_to_suspicion(1 - pvalue);
	return std::log(pvalue) / std::log(2.0) + 1;
}
double PractRand::TestResult::suspicion_to_pvalue(double suspicion) {
	return (suspicion < 0) ? std::pow(2.0, suspicion-1) : (1 - std::pow(0.5, suspicion+1));
}
double PractRand::TestResult::get_pvalue() const {
	if (type == TYPE_RAW) return 0.5;
	else if (type == TYPE_RAW_NORMAL) return suspicion_to_pvalue(get_suspicion());
	else if (type == TYPE_BAD_P || type == TYPE_GOOD_P) return processed;
	else if (type == TYPE_BAD_S || type == TYPE_GOOD_S) return suspicion_to_pvalue(processed);
	else if (type == TYPE_PASSFAIL) return processed ? 0 : 0.5;
	else if (type == TYPE_UNKNOWN) return 0.5;
	else issue_error();
	return 0;//just to avoid the warning
}
double PractRand::TestResult::get_suspicion() const {
	if (type == TYPE_RAW) return 0;
	else if (type == TYPE_RAW_NORMAL) {
		double m = std::fabs(raw);
		double s = (raw < 0) ? 1 : -1;//backwards to make normal failures occur at p=0 instead of p=1
		if (m < 8) return s * m * 0.5;
		else if (m < 12) return ((m - 8) * .75 + 4) * s;
		else if (m < 16) return ((m - 12) * 1 + 7) * s;
		else if (m < 20) return ((m - 16) * 1.25 + 11) * s;
		else if (m < 24) return ((m - 20) * 1.5 + 16) * s;
		else if (m < 28) return ((m - 24) * 1.75 + 22) * s;
		return ((m - 28) * 2.0 + 29) * s;
	}
	else if (type == TYPE_BAD_P || type == TYPE_GOOD_P) return pvalue_to_suspicion(processed);
	else if (type == TYPE_BAD_S || type == TYPE_GOOD_S) return processed;
	else if (type == TYPE_PASSFAIL) return processed ? -9999 : 0;
	else if (type == TYPE_UNKNOWN) return 0;
	else issue_error();
	return 0;//just to avoid the warning
}
static double interp_s2i(double value, double low, double high) {
	if (high == low) return 0;
	return (value - low) / (high - low);
}
double PractRand::Tests::RawTestCalibrationData_117::sample_to_index(double sample) const {
	if (sample <= table[0]) return 0;
	if (sample >= table[116]) return 116;
	int min = 1, max = 115, mid = (max+min)/2;
	while (true) {
		double v = table[mid];
		if (v < sample) {
			min = mid + 1;
			if (max < min) return mid + interp_s2i(sample, table[mid], table[mid+1]);
		}
		else if (v > sample) {
			max = mid - 1;
			if (max < min) return mid - 1 + interp_s2i(sample, table[mid-1], table[mid]);
		}
		else if (v == sample) return mid;
		else {
			issue_error("sample_to_index117: sample is NaN");
		}
		mid = (min + max) / 2;
	}
}
double PractRand::Tests::RawTestCalibrationData_117::index_to_sample(double index) const {
	if (index <= 0) return table[0];
	if (index >= 116) return table[116];
	return table[int(floor(index))] + table[int(floor(index+1))] * (index - floor(index));
}
double PractRand::Tests::RawTestCalibrationData_117::pvalue_to_index(double pvalue) {
	if (pvalue > 0.5) return 116 - pvalue_to_index(1 - pvalue);
	if (pvalue >= 0.01) return pvalue * 100 + 8;
	int pos = 0;
	while (pvalue >= ref_p[pos+1]) pos++;
	pvalue -= ref_p[pos];
	if (pvalue <= 0) return pos;
	return pos + pvalue / (ref_p[pos+1] - ref_p[pos]);
}
double PractRand::Tests::RawTestCalibrationData_117::index_to_pvalue(double index) {
	if (index <= 0) return ref_p[0];
	if (index >= 116) return ref_p[116];
	int low_i = int(floor(index));
	int high_i = int(floor(index+1));
	double low = ref_p[low_i];
	double high = ref_p[high_i];
	double scale = index - low_i;
	return low + (high - low) * scale;
}
const double PractRand::Tests::RawTestCalibrationData_117::ref_p[117] = {
	0.00001, 0.00002, 0.00005, 0.0001, 0.0002, 0.0005, 0.001, 0.002, 0.005, 
	0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10, 
	0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.20, 
	0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.30, 
	0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.40, 
	0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.50, 
	0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.60, 
	0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.70, 
	0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.80, 
	0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.90, 
	0.91, 0.92, 0.93, 0.94, 0.95, 0.96,	0.97, 0.98, 0.99, 
	0.995, 0.998, 0.999, 0.9995, 0.9998, 0.9999, 0.99995, 0.99998, 0.99999
};
double PractRand::Tests::RawTestCalibrationData_129::sample_to_index(double sample) const {
	if (sample <= table[limit]) return limit;
	if (sample >= table[128 - limit]) return 128 - limit;
	int min = limit + 1, max = 128 - limit - 1, mid = (max + min) / 2;
	while (true) {
		double v = table[mid];
		if (v < sample) {
			min = mid + 1;
			if (max < min) return mid + interp_s2i(sample, table[mid], table[mid + 1]);
		}
		else if (v > sample) {
			max = mid - 1;
			if (max < min) return mid - 1 + interp_s2i(sample, table[mid - 1], table[mid]);
		}
		else if (v == sample) return mid;
		else {
			issue_error("sample_to_index129: sample is NaN");
		}
		mid = (min + max) / 2;
	}
}
double PractRand::Tests::RawTestCalibrationData_129::index_to_sample(double index) const {
	if (index <= limit) return table[limit];
	if (index >= 128 - limit) return table[128 - limit];
	return table[int(floor(index))] + table[int(floor(index + 1))] * (index - floor(index));
}
double PractRand::Tests::RawTestCalibrationData_129::pvalue_to_index(double pvalue, int limit) {
	if (pvalue > 0.5) return 128 - pvalue_to_index(1 - pvalue, limit);
	if (pvalue >= 0.01) return pvalue * 100 + 14;
	int pos = limit;
	while (pvalue >= ref_p[pos + 1]) pos++;
	if (pvalue <= ref_p[pos]) return pos;
	return pos + (pvalue - ref_p[pos]) / (ref_p[pos + 1] - ref_p[pos]);
}
double PractRand::Tests::RawTestCalibrationData_129::index_to_pvalue(double index, int limit) {
	if (index <= limit) return ref_p[limit];
	if (index >= 128 - limit) return ref_p[128 - limit];
	int low_i = int(std::floor(index));
	int high_i = low_i + 1;
	double low = ref_p[low_i];
	double high = ref_p[high_i];
	double scale = index - low_i;
	return low + (high - low) * scale;
}
const double PractRand::Tests::RawTestCalibrationData_129::ref_p[129] = {
	0.0000001, 0.0000002, 0.0000005, 
	0.000001, 0.000002, 0.000005, 0.00001, 0.00002, 0.00005, 
	0.0001, 0.0002, 0.0005, 0.001, 0.002, 0.005,
	0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10,
	0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.20,
	0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.30,
	0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.40,
	0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.50,
	0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.60,
	0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.70,
	0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.80,
	0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.90,
	0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99,
	0.995, 0.998, 0.999, 0.9995, 0.9998, 0.9999, 
	0.99995, 0.99998, 0.99999, 0.999995, 0.999998, 0.999999, 
	0.9999995, 0.9999998, 0.9999999
};
PractRand::Tests::RawTestCalibrationData_129 *PractRand::Tests::RawTestCalibrationData_129::convert117to129(const PractRand::Tests::RawTestCalibrationData_117 *old) {
	PractRand::Tests::RawTestCalibrationData_129 *rv = new PractRand::Tests::RawTestCalibrationData_129();
	rv->name = old->name;
	rv->blocks = old->blocks;
	rv->num_samples = old->num_samples;
	rv->num_duplicates = old->num_duplicates;
	std::memcpy(&rv->table[6], &old->table[0], 117 * sizeof(rv->table[0]));
	for (int i = 0; i < 6; i++) rv->table[i] = rv->table[6];
	for (int i = 128-6; i < 128; i++) rv->table[i] = rv->table[128-6];
	rv->median = old->median;
	rv->mean = old->mean;
	rv->stddev = old->stddev;
	rv->limit = 6;
	return rv;
}
class TestCalibrationData {
	//const PractRand::Tests::RawTestCalibrationData_117 * raw;
	const PractRand::Tests::RawTestCalibrationData_129 * raw;
	double p_threshold;
	double low_sample, high_sample;
	double low_a, high_a;
	double low_b, high_b;
	double mid_sample;
	void init() {
		Uint64 n = raw->num_samples;
		double p1, p2;
		// p1 >= 1/sqrt(num_samples)
		// p2 >= p1 + 1/sqrt(num_samples)
		//asside from that, p1 & p2 should be as small as possible
		if (false);
		else if (n >= 8192 * 8192) {
			p1 = 0.0001;
			p2 = 0.0002;
		}
		else if (n >= 4096 * 4096) {
			p1 = 0.0002;
			p2 = 0.0005;
		}
		else if (n >= 2048 * 2048) {
			p1 = 0.0005;
			p2 = 0.001;
		}
		else if (n >= 1024 * 1024) {
			p1 = 0.001;
			p2 = 0.002;
		}
		else if (n >= 512 * 512) {
			p1 = 0.002;
			p2 = 0.005;
		}
		else if (n >= 256 * 256) {
			p1 = 0.005;
			p2 = 0.01;
		}
		else if (n >= 128 * 128) {
			p1 = 0.01;
			p2 = 0.02;
		}
		else if (n >= 64 * 64) {
			p1 = 0.02;
			p2 = 0.05;
		}
		else if (n >= 1024) {
			p1 = 0.04;
			p2 = 0.08;
		}
		else if (n >= 256) {
			p1 = 0.07;
			p2 = 0.14;
		}
		else if (n >= 144) {
			p1 = 0.09;
			p2 = 0.18;
		}
		else if (n >= 100) {
			p1 = 0.1;
			p2 = 0.2;
		}
		else {
			p1 = 0;
			p2 = 0;
		}
		p_threshold = p1;
		if (!p1) {
			low_a = high_a = low_b = high_b = 0;
			low_sample = high_sample = mid_sample = 0;
		}
		else {
			low_sample = raw->pvalue_to_sample(p1);
			high_sample = raw->pvalue_to_sample(1 - p1);
			mid_sample = raw->pvalue_to_sample(0.5);
			double x1, x2, y1, y2, dx, dy;
			x1 = TestResult::pvalue_to_suspicion(p1);
			x2 = TestResult::pvalue_to_suspicion(p2);
			y1 = raw->pvalue_to_sample(p1);
			y2 = raw->pvalue_to_sample(p2);
			dx = x2 - x1;//dx > 0
			dy = y2 - y1;//dy >= 0
			low_a = dy / dx;//should be a semi-large positive number
			if (low_a < 0) {
				std::printf("%s   dy:%f  dx:%f  \n", raw->name, dy, dx);
				issue_error("calibration data has negative slope for low region?");
			}
			if (low_a > 100) low_a = 100;//I'd rather not have it be THAT large, even if the data supports it... maybe?
			low_b = y1 - x1 * low_a;
			x1 = TestResult::pvalue_to_suspicion(1 - p1);
			x2 = TestResult::pvalue_to_suspicion(1 - p2);
			y1 = raw->pvalue_to_sample(1 - p1);
			y2 = raw->pvalue_to_sample(1 - p2);
			dx = x2 - x1;//dx < 0
			dy = y2 - y1;//dy <= 0
			high_a = dy / dx;
			if (high_a < 0) issue_error("calibration data has negative slope for high region?");
			if (high_a > 100) high_a = 100;
			high_b = y1 - x1 * high_a;
		}
	}
public:
	TestCalibrationData(const PractRand::Tests::RawTestCalibrationData_117 *raw_) {
		raw = PractRand::Tests::RawTestCalibrationData_129::convert117to129(raw_);
		init();
	}
	TestCalibrationData(const PractRand::Tests::RawTestCalibrationData_129 *raw_) : raw(raw_) {
		init();
	}

	double sample_to_suspicion_no_extrapolation(double sample) const {
		if (sample < mid_sample - 0.001) sample += 0.001;//we only record 3 digits after the zero for these samples
		else if (sample > mid_sample + 0.001) sample -= 0.001;
		return TestResult::pvalue_to_suspicion(raw->sample_to_pvalue(sample));
	}
	double sample_to_suspicion(double sample) const {
		if (sample < mid_sample - 0.001) sample += 0.001;//we only record 3 digits after the zero for these samples
		else if (sample > mid_sample + 0.001) sample -= 0.001;

		if (p_threshold) {
			if (sample < low_sample) {
				return (sample - low_b) / low_a;
			}
			else if (sample > high_sample) {
				return (sample - high_b) / high_a;
			}
		}
		return TestResult::pvalue_to_suspicion(raw->sample_to_pvalue(sample));
	}
	double suspicion_to_sample(double suspicion) const {
		double p = TestResult::suspicion_to_pvalue(suspicion);
		if (p_threshold) {
			if (p < p_threshold) {
				return suspicion * low_a + low_b;
			}
			else if (p > 1 - p_threshold) {
				return suspicion * high_a + high_b;
			}
		}
		return raw->pvalue_to_sample(p);
	}

	double sample_to_pvalue(double sample) const {return TestResult::suspicion_to_pvalue(sample_to_suspicion(sample));}
	double pvalue_to_sample(double pvalue) const {return suspicion_to_sample(TestResult::pvalue_to_suspicion(pvalue));}

	//static double index_to_pvalue(double index);
	//static double pvalue_to_index(double pvalue);
	//static double index_to_suspicion(double index);
	//static double suspicion_to_index(double suspicion);
};

class TestCalibrationManager {
	std::map<std::string, std::map< Uint64, TestCalibrationData * > > data;
public:
	TestCalibrationManager(PractRand::Tests::RawTestCalibrationData_117 *raw_data_array117, PractRand::Tests::RawTestCalibrationData_129 *raw_data_array129) {
		for (int i = 0; raw_data_array117[i].name; i++) {
			data[raw_data_array117[i].name][raw_data_array117[i].blocks] = new TestCalibrationData(&raw_data_array117[i]);
		}
		for (int i = 0; raw_data_array129[i].name; i++) {
			data[raw_data_array129[i].name][raw_data_array129[i].blocks] = new TestCalibrationData(&raw_data_array129[i]);
		}
	}
	Uint64 get_minimum_length(std::string name) {
		std::map<std::string, std::map< Uint64, TestCalibrationData * > >::iterator dit = data.find(name);
		if (dit == data.end()) return 0;
		std::map< Uint64, TestCalibrationData * > &ts = dit->second;
		if (ts.empty()) return 0;
		return ts.begin()->first;
	}
	TestCalibrationData *get_calibration_data(std::string name, Uint64 blocks) {
		std::map<std::string, std::map< Uint64, TestCalibrationData * > >::iterator dit = data.find(name);
		if (dit == data.end()) return NULL;
		std::map< Uint64, TestCalibrationData * > &ts = dit->second;
		if (ts.empty()) return NULL;
		std::map< Uint64, TestCalibrationData * >::iterator current = ts.lower_bound(blocks);
		if (current == ts.end()) return (--current)->second;
		if (current == ts.begin() || current->first == blocks) return current->second;
		std::map< Uint64, TestCalibrationData * >::iterator upper = current--;
		double logblocks = std::log((double)blocks);
		if (std::fabs(std::log((double)upper->first) - logblocks) < std::fabs(std::log((double)current->first) - logblocks)) return upper->second;
		else return current->second;
	}
};
PractRand::Tests::RawTestCalibrationData_117 raw_calibration_data_array117[] = {
	/*	This is raw calibration data - I take known good RNGs and run them through tests a bunch of times.
	Which produced an empirically determined distribution.  
	Anyway:
		the format for the distribution here is {name, # of blocks per sample, # of samples tested, { empirically determined samples at reference p-values points }, mean, median, standard deviation }
		the "reference p-values points" can be found below in PractRand::Tests::RawTestCalibrationData_117::ref_p
		if you draw a graph with x=log(p) and y=sample(p) (where high p is defined to correspond to high samples for this purpose):
			the far left side should tend towards increasing slope (more vertical)
		if you draw a graph with x=log(1-p) and y=sample(1-p):
			the far left side should tend towards increasingly negative slope (more vertical)
		if you draw a graph with x=p and y=sample(p) the middle of the graph should mostly look contiguous
		the code demands at least 16 samples, but I wouldn't even consider using this approach with less than 64, 
			and I wouldn't put much faith in any resulting p-values without 1024+ samples
*/

	//balanced BCFN, 4-16 overlapping samples, stride is relatively unimportant
	{"BCFN-4/4",        1,16777216,8792086,{ -3.762, -3.725, -3.688, -3.654, -3.617, -3.547, -3.501, -3.418, -3.280, -3.144, -2.972, -2.848, -2.746, -2.655, -2.575, -2.501, -2.433, -2.368, -2.306, -2.247, -2.189, -2.134, -2.080, -2.028, -1.977, -1.927, -1.877, -1.829, -1.781, -1.733, -1.687, -1.641, -1.595, -1.549, -1.504, -1.459, -1.414, -1.369, -1.325, -1.280, -1.236, -1.191, -1.147, -1.102, -1.057, -1.012, -0.967, -0.922, -0.876, -0.831, -0.784, -0.738, -0.691, -0.644, -0.597, -0.549, -0.501, -0.452, -0.403, -0.353, -0.302, -0.251, -0.199, -0.147, -0.094, -0.039, +0.016, +0.072, +0.129, +0.187, +0.246, +0.306, +0.367, +0.430, +0.494, +0.560, +0.626, +0.695, +0.766, +0.839, +0.913, +0.990, +1.070, +1.152, +1.237, +1.326, +1.417, +1.513, +1.612, +1.717, +1.826, +1.941, +2.062, +2.191, +2.327, +2.474, +2.632, +2.801, +2.988, +3.192, +3.418, +3.675, +3.971, +4.317, +4.740, +5.285, +6.054, +7.364, +8.679,+10.419,+11.745,+13.084,+14.836,+16.121,+17.497,+19.226,+20.542}, -0.4026, +0.0539, 2.2366},
	{"BCFN-4/4",        2,16777216,3256100,{ -3.758, -3.739, -3.701, -3.664, -3.626, -3.565, -3.503, -3.424, -3.290, -3.157, -2.985, -2.861, -2.758, -2.669, -2.589, -2.516, -2.447, -2.383, -2.322, -2.263, -2.206, -2.151, -2.098, -2.046, -1.995, -1.946, -1.897, -1.849, -1.801, -1.754, -1.708, -1.662, -1.616, -1.571, -1.526, -1.481, -1.436, -1.392, -1.348, -1.303, -1.259, -1.215, -1.170, -1.126, -1.081, -1.036, -0.992, -0.946, -0.901, -0.856, -0.810, -0.764, -0.717, -0.670, -0.623, -0.575, -0.527, -0.478, -0.429, -0.379, -0.329, -0.278, -0.226, -0.174, -0.121, -0.067, -0.012, +0.044, +0.100, +0.158, +0.217, +0.277, +0.337, +0.400, +0.464, +0.529, +0.596, +0.664, +0.735, +0.807, +0.882, +0.959, +1.038, +1.120, +1.205, +1.293, +1.384, +1.479, +1.579, +1.682, +1.791, +1.906, +2.027, +2.155, +2.291, +2.438, +2.595, +2.765, +2.950, +3.154, +3.382, +3.637, +3.931, +4.278, +4.700, +5.244, +6.006, +7.311, +8.612,+10.345,+11.656,+13.003,+14.784,+16.064,+17.403,+19.265,+20.881}, -0.4287, +0.0268, 2.2281},
	{"BCFN-4/4",        3,16777216, 702364,{ -3.760, -3.735, -3.709, -3.672, -3.633, -3.569, -3.505, -3.425, -3.293, -3.160, -2.989, -2.865, -2.763, -2.675, -2.595, -2.522, -2.454, -2.390, -2.328, -2.269, -2.213, -2.158, -2.105, -2.053, -2.002, -1.952, -1.904, -1.856, -1.808, -1.761, -1.715, -1.669, -1.624, -1.579, -1.534, -1.489, -1.444, -1.400, -1.356, -1.312, -1.267, -1.223, -1.179, -1.134, -1.090, -1.046, -1.001, -0.956, -0.910, -0.865, -0.819, -0.773, -0.727, -0.680, -0.633, -0.585, -0.537, -0.489, -0.440, -0.390, -0.340, -0.289, -0.238, -0.186, -0.133, -0.079, -0.024, +0.031, +0.088, +0.145, +0.204, +0.264, +0.325, +0.387, +0.451, +0.516, +0.583, +0.651, +0.722, +0.794, +0.869, +0.945, +1.024, +1.106, +1.191, +1.279, +1.370, +1.465, +1.564, +1.668, +1.777, +1.891, +2.012, +2.140, +2.277, +2.422, +2.578, +2.748, +2.933, +3.137, +3.363, +3.619, +3.914, +4.257, +4.681, +5.223, +5.983, +7.288, +8.593,+10.320,+11.634,+12.955,+14.742,+16.109,+17.420,+19.093,+20.428}, -0.4396, +0.0157, 2.2238},
	{"BCFN-4/4",        4,16777216, 199690,{ -3.769, -3.742, -3.704, -3.675, -3.636, -3.568, -3.506, -3.428, -3.295, -3.162, -2.991, -2.868, -2.766, -2.678, -2.598, -2.525, -2.456, -2.391, -2.330, -2.272, -2.215, -2.161, -2.107, -2.056, -2.005, -1.955, -1.907, -1.859, -1.812, -1.765, -1.719, -1.672, -1.627, -1.582, -1.537, -1.492, -1.448, -1.403, -1.359, -1.315, -1.270, -1.226, -1.182, -1.137, -1.093, -1.048, -1.004, -0.959, -0.914, -0.868, -0.822, -0.776, -0.730, -0.683, -0.636, -0.589, -0.541, -0.492, -0.443, -0.394, -0.343, -0.293, -0.241, -0.189, -0.136, -0.083, -0.028, +0.028, +0.084, +0.142, +0.200, +0.260, +0.322, +0.384, +0.448, +0.513, +0.580, +0.648, +0.719, +0.791, +0.866, +0.942, +1.022, +1.104, +1.189, +1.277, +1.368, +1.463, +1.562, +1.665, +1.775, +1.889, +2.010, +2.137, +2.273, +2.420, +2.576, +2.746, +2.930, +3.133, +3.360, +3.616, +3.910, +4.258, +4.679, +5.222, +5.985, +7.289, +8.598,+10.328,+11.653,+12.971,+14.727,+16.091,+17.399,+19.316,+20.447}, -0.4433, +0.0129, 2.2245},
	{"BCFN-4/4",        6,16777216,  29153,{ -3.763, -3.741, -3.709, -3.677, -3.636, -3.570, -3.507, -3.429, -3.295, -3.163, -2.994, -2.871, -2.769, -2.681, -2.601, -2.528, -2.459, -2.395, -2.333, -2.275, -2.219, -2.164, -2.111, -2.059, -2.009, -1.959, -1.910, -1.862, -1.815, -1.768, -1.722, -1.676, -1.630, -1.585, -1.540, -1.496, -1.451, -1.407, -1.363, -1.318, -1.274, -1.230, -1.186, -1.142, -1.097, -1.053, -1.008, -0.963, -0.918, -0.872, -0.827, -0.781, -0.734, -0.688, -0.640, -0.593, -0.545, -0.497, -0.448, -0.398, -0.348, -0.297, -0.246, -0.194, -0.141, -0.087, -0.033, +0.023, +0.079, +0.137, +0.195, +0.255, +0.316, +0.379, +0.442, +0.507, +0.574, +0.643, +0.713, +0.785, +0.860, +0.936, +1.015, +1.097, +1.182, +1.270, +1.361, +1.456, +1.555, +1.659, +1.767, +1.882, +2.002, +2.130, +2.266, +2.411, +2.567, +2.737, +2.923, +3.127, +3.354, +3.610, +3.903, +4.250, +4.671, +5.215, +5.977, +7.279, +8.587,+10.327,+11.632,+12.974,+14.748,+16.130,+17.444,+19.291,+20.558}, -0.4477, +0.0080, 2.2230},
	{"_BCFN-4/4",       8,16777216,   5468,{ -3.760, -3.742, -3.708, -3.675, -3.634, -3.568, -3.506, -3.428, -3.296, -3.164, -2.994, -2.870, -2.769, -2.681, -2.602, -2.529, -2.460, -2.396, -2.335, -2.276, -2.220, -2.165, -2.112, -2.061, -2.010, -1.960, -1.911, -1.863, -1.816, -1.769, -1.723, -1.677, -1.632, -1.587, -1.542, -1.497, -1.453, -1.409, -1.365, -1.320, -1.276, -1.232, -1.188, -1.143, -1.099, -1.055, -1.010, -0.965, -0.920, -0.874, -0.829, -0.783, -0.736, -0.690, -0.643, -0.595, -0.548, -0.499, -0.450, -0.400, -0.350, -0.300, -0.248, -0.196, -0.143, -0.090, -0.035, +0.020, +0.077, +0.134, +0.193, +0.253, +0.314, +0.376, +0.439, +0.505, +0.572, +0.640, +0.711, +0.783, +0.857, +0.933, +1.013, +1.095, +1.179, +1.267, +1.358, +1.453, +1.552, +1.656, +1.765, +1.879, +2.000, +2.128, +2.264, +2.410, +2.567, +2.736, +2.920, +3.123, +3.350, +3.605, +3.898, +4.244, +4.667, +5.212, +5.974, +7.280, +8.581,+10.300,+11.614,+12.943,+14.652,+15.964,+17.302,+19.028,+20.211}, -0.4499, +0.0058, 2.2218},
	{"_BCFN-4/4",      16,16777216,    84, { -3.767, -3.744, -3.709, -3.676, -3.637, -3.572, -3.509, -3.431, -3.298, -3.166, -2.996, -2.873, -2.771, -2.683, -2.604, -2.531, -2.463, -2.398, -2.337, -2.278, -2.222, -2.167, -2.114, -2.063, -2.012, -1.963, -1.914, -1.866, -1.819, -1.772, -1.725, -1.680, -1.634, -1.589, -1.544, -1.500, -1.455, -1.411, -1.366, -1.322, -1.278, -1.234, -1.190, -1.146, -1.101, -1.057, -1.012, -0.967, -0.922, -0.877, -0.831, -0.785, -0.739, -0.693, -0.646, -0.598, -0.550, -0.502, -0.453, -0.403, -0.354, -0.303, -0.251, -0.199, -0.146, -0.093, -0.038, +0.017, +0.074, +0.131, +0.189, +0.249, +0.310, +0.372, +0.436, +0.501, +0.568, +0.637, +0.707, +0.779, +0.854, +0.930, +1.009, +1.091, +1.176, +1.263, +1.354, +1.450, +1.549, +1.652, +1.761, +1.875, +1.997, +2.125, +2.261, +2.407, +2.563, +2.732, +2.917, +3.121, +3.346, +3.601, +3.894, +4.240, +4.662, +5.205, +5.967, +7.271, +8.567,+10.300,+11.611,+12.948,+14.719,+16.030,+17.332,+19.229,+20.413}, -0.4530, +0.0028, 2.2210},
	{"_BCFN-5/4",      16,16777216,     0, { -4.964, -4.903, -4.809, -4.724, -4.631, -4.489, -4.359, -4.212, -3.977, -3.760, -3.497, -3.314, -3.168, -3.044, -2.935, -2.836, -2.745, -2.660, -2.580, -2.504, -2.432, -2.363, -2.295, -2.231, -2.167, -2.106, -2.046, -1.987, -1.929, -1.872, -1.817, -1.762, -1.707, -1.653, -1.600, -1.548, -1.495, -1.443, -1.392, -1.340, -1.289, -1.238, -1.188, -1.137, -1.086, -1.036, -0.985, -0.935, -0.884, -0.833, -0.782, -0.730, -0.679, -0.627, -0.575, -0.523, -0.470, -0.417, -0.364, -0.310, -0.256, -0.201, -0.145, -0.089, -0.032, +0.025, +0.083, +0.143, +0.203, +0.264, +0.325, +0.388, +0.452, +0.518, +0.584, +0.652, +0.721, +0.792, +0.865, +0.939, +1.015, +1.094, +1.175, +1.259, +1.345, +1.433, +1.525, +1.621, +1.721, +1.825, +1.933, +2.047, +2.166, +2.293, +2.427, +2.570, +2.723, +2.887, +3.066, +3.260, +3.478, +3.722, +4.000, +4.326, +4.723, +5.230, +5.935, +7.124, +8.300, +9.845,+11.008,+12.160,+13.701,+14.909,+16.090,+17.589,+18.618}, -0.3637, +0.0083, 2.3160},
	{"_BCFN-5/4",      32,16777216,     1, { -4.966, -4.911, -4.808, -4.726, -4.635, -4.492, -4.364, -4.216, -3.980, -3.761, -3.499, -3.316, -3.170, -3.047, -2.938, -2.839, -2.748, -2.664, -2.584, -2.508, -2.435, -2.366, -2.299, -2.233, -2.171, -2.109, -2.049, -1.990, -1.933, -1.876, -1.820, -1.765, -1.711, -1.657, -1.604, -1.551, -1.499, -1.447, -1.395, -1.344, -1.293, -1.242, -1.191, -1.141, -1.090, -1.040, -0.989, -0.938, -0.888, -0.837, -0.786, -0.735, -0.683, -0.632, -0.580, -0.528, -0.475, -0.422, -0.368, -0.314, -0.260, -0.205, -0.149, -0.093, -0.036, +0.021, +0.079, +0.138, +0.198, +0.259, +0.322, +0.385, +0.449, +0.514, +0.581, +0.649, +0.718, +0.789, +0.862, +0.936, +1.013, +1.091, +1.172, +1.256, +1.342, +1.431, +1.523, +1.619, +1.718, +1.822, +1.930, +2.044, +2.163, +2.289, +2.423, +2.565, +2.718, +2.883, +3.061, +3.256, +3.473, +3.716, +3.995, +4.322, +4.718, +5.222, +5.924, +7.108, +8.284, +9.843,+11.012,+12.165,+13.694,+14.808,+16.038,+17.607,+18.740}, -0.3682, +0.0044, 2.3151},
	{"_BCFN-5/4",      64,16777216,     0, { -4.976, -4.913, -4.819, -4.732, -4.636, -4.491, -4.364, -4.217, -3.982, -3.764, -3.501, -3.319, -3.173, -3.049, -2.940, -2.841, -2.750, -2.665, -2.585, -2.510, -2.437, -2.368, -2.301, -2.236, -2.173, -2.111, -2.052, -1.993, -1.935, -1.878, -1.823, -1.768, -1.713, -1.660, -1.606, -1.554, -1.501, -1.450, -1.398, -1.347, -1.296, -1.245, -1.194, -1.143, -1.093, -1.042, -0.991, -0.940, -0.890, -0.839, -0.788, -0.736, -0.685, -0.633, -0.581, -0.529, -0.476, -0.423, -0.370, -0.315, -0.261, -0.206, -0.150, -0.094, -0.037, +0.020, +0.079, +0.138, +0.198, +0.259, +0.321, +0.384, +0.448, +0.513, +0.580, +0.648, +0.717, +0.788, +0.861, +0.935, +1.011, +1.090, +1.171, +1.254, +1.340, +1.429, +1.521, +1.616, +1.716, +1.819, +1.927, +2.041, +2.161, +2.287, +2.421, +2.563, +2.716, +2.880, +3.058, +3.253, +3.470, +3.713, +3.992, +4.319, +4.713, +5.219, +5.921, +7.107, +8.278, +9.822,+10.992,+12.155,+13.723,+14.898,+16.079,+17.528,+18.575}, -0.3695, +0.0024, 2.3147},
	{"_BCFN-6/4",      64,16777216,     0, { -6.089, -5.980, -5.807, -5.677, -5.521, -5.292, -5.099, -4.880, -4.544, -4.247, -3.898, -3.662, -3.478, -3.324, -3.189, -3.068, -2.957, -2.855, -2.759, -2.669, -2.583, -2.501, -2.422, -2.346, -2.273, -2.202, -2.133, -2.065, -1.999, -1.935, -1.872, -1.810, -1.748, -1.688, -1.628, -1.569, -1.511, -1.453, -1.396, -1.339, -1.283, -1.227, -1.172, -1.116, -1.061, -1.006, -0.951, -0.896, -0.841, -0.786, -0.731, -0.676, -0.621, -0.565, -0.510, -0.454, -0.398, -0.342, -0.285, -0.228, -0.171, -0.113, -0.055, +0.004, +0.063, +0.123, +0.184, +0.245, +0.307, +0.370, +0.434, +0.498, +0.564, +0.631, +0.699, +0.768, +0.838, +0.910, +0.984, +1.059, +1.136, +1.215, +1.296, +1.379, +1.465, +1.553, +1.644, +1.739, +1.837, +1.939, +2.045, +2.156, +2.273, +2.396, +2.526, +2.664, +2.811, +2.969, +3.140, +3.326, +3.531, +3.761, +4.024, +4.328, +4.697, +5.164, +5.807, +6.876, +7.921, +9.278,+10.297,+11.299,+12.621,+13.619,+14.705,+16.026,+17.109}, -0.2852, +0.0065, 2.3717},
	{"_BCFN-6/4",     128,16777216,     0, { -6.085, -5.974, -5.814, -5.674, -5.521, -5.293, -5.097, -4.880, -4.545, -4.247, -3.898, -3.662, -3.478, -3.323, -3.189, -3.067, -2.957, -2.855, -2.759, -2.670, -2.584, -2.502, -2.424, -2.348, -2.275, -2.204, -2.135, -2.068, -2.002, -1.938, -1.874, -1.812, -1.751, -1.690, -1.631, -1.572, -1.514, -1.456, -1.399, -1.342, -1.286, -1.229, -1.174, -1.119, -1.063, -1.008, -0.953, -0.898, -0.843, -0.788, -0.733, -0.678, -0.623, -0.568, -0.512, -0.456, -0.401, -0.344, -0.288, -0.231, -0.174, -0.116, -0.058, +0.001, +0.060, +0.120, +0.181, +0.242, +0.304, +0.368, +0.431, +0.496, +0.561, +0.628, +0.696, +0.764, +0.835, +0.907, +0.981, +1.056, +1.133, +1.212, +1.293, +1.376, +1.462, +1.550, +1.641, +1.736, +1.834, +1.936, +2.043, +2.154, +2.271, +2.394, +2.523, +2.661, +2.807, +2.965, +3.136, +3.322, +3.528, +3.758, +4.020, +4.326, +4.692, +5.158, +5.800, +6.871, +7.919, +9.264,+10.262,+11.254,+12.579,+13.534,+14.602,+15.897,+16.870}, -0.2877, +0.0038, 2.3705},
	{"_BCFN-6/4",     256,16777216,     0, { -6.107, -5.992, -5.815, -5.672, -5.519, -5.292, -5.098, -4.879, -4.548, -4.251, -3.901, -3.665, -3.481, -3.327, -3.192, -3.071, -2.960, -2.858, -2.762, -2.672, -2.586, -2.504, -2.426, -2.350, -2.277, -2.205, -2.136, -2.069, -2.003, -1.939, -1.876, -1.814, -1.752, -1.692, -1.632, -1.574, -1.515, -1.458, -1.401, -1.344, -1.288, -1.232, -1.176, -1.121, -1.066, -1.010, -0.955, -0.900, -0.845, -0.790, -0.735, -0.680, -0.625, -0.570, -0.514, -0.459, -0.402, -0.346, -0.290, -0.233, -0.175, -0.118, -0.060, -0.001, +0.058, +0.118, +0.179, +0.240, +0.302, +0.365, +0.428, +0.493, +0.559, +0.625, +0.694, +0.763, +0.834, +0.906, +0.979, +1.054, +1.131, +1.210, +1.291, +1.374, +1.460, +1.549, +1.640, +1.734, +1.832, +1.934, +2.040, +2.151, +2.267, +2.390, +2.520, +2.658, +2.805, +2.963, +3.134, +3.320, +3.525, +3.755, +4.018, +4.322, +4.690, +5.155, +5.795, +6.864, +7.903, +9.251,+10.272,+11.284,+12.607,+13.585,+14.559,+15.862,+16.889}, -0.2896, +0.0016, 2.3701},
	{"_BCFN-7/4",     128, 1048576,     0, { -6.969, -6.876, -6.689, -6.465, -6.262, -5.969, -5.706, -5.414, -4.995, -4.630, -4.210, -3.928, -3.713, -3.528, -3.375, -3.236, -3.109, -2.992, -2.885, -2.783, -2.686, -2.594, -2.507, -2.423, -2.342, -2.263, -2.187, -2.113, -2.039, -1.969, -1.899, -1.831, -1.763, -1.698, -1.633, -1.569, -1.507, -1.444, -1.383, -1.321, -1.262, -1.201, -1.142, -1.083, -1.024, -0.965, -0.907, -0.849, -0.792, -0.734, -0.676, -0.618, -0.560, -0.502, -0.444, -0.385, -0.327, -0.269, -0.211, -0.153, -0.093, -0.033, +0.026, +0.086, +0.146, +0.208, +0.270, +0.332, +0.396, +0.460, +0.524, +0.590, +0.656, +0.722, +0.791, +0.859, +0.930, +1.002, +1.076, +1.150, +1.227, +1.307, +1.387, +1.470, +1.554, +1.642, +1.732, +1.827, +1.921, +2.019, +2.123, +2.230, +2.344, +2.463, +2.587, +2.720, +2.861, +3.013, +3.177, +3.356, +3.551, +3.771, +4.014, +4.294, +4.631, +5.057, +5.639, +6.599, +7.538, +8.767, +9.630,+10.467,+11.641,+12.354,+13.213,+14.428,+15.094}, -0.2113, +0.0073, 2.4043},
	{"_BCFN-7/4",     256, 1048576,     0, { -6.976, -6.838, -6.649, -6.452, -6.258, -5.966, -5.714, -5.430, -5.010, -4.645, -4.216, -3.933, -3.715, -3.533, -3.377, -3.237, -3.110, -2.994, -2.887, -2.786, -2.690, -2.599, -2.511, -2.426, -2.344, -2.265, -2.188, -2.116, -2.044, -1.973, -1.903, -1.836, -1.769, -1.704, -1.639, -1.577, -1.514, -1.452, -1.392, -1.330, -1.270, -1.210, -1.149, -1.089, -1.031, -0.972, -0.914, -0.856, -0.798, -0.739, -0.682, -0.624, -0.565, -0.507, -0.449, -0.391, -0.332, -0.274, -0.215, -0.156, -0.097, -0.036, +0.023, +0.084, +0.145, +0.207, +0.268, +0.331, +0.394, +0.458, +0.522, +0.587, +0.653, +0.721, +0.788, +0.859, +0.929, +1.000, +1.073, +1.148, +1.223, +1.302, +1.382, +1.465, +1.548, +1.634, +1.726, +1.818, +1.914, +2.016, +2.119, +2.229, +2.341, +2.459, +2.585, +2.721, +2.862, +3.016, +3.177, +3.354, +3.547, +3.766, +4.015, +4.297, +4.641, +5.075, +5.655, +6.624, +7.549, +8.738, +9.617,+10.512,+11.673,+12.592,+13.462,+14.429,+15.374}, -0.2152, +0.0039, 2.4069},
	{"_BCFN-8/4",     512, 1048576,     0, { -7.916, -7.751, -7.438, -7.190, -6.907, -6.505, -6.188, -5.839, -5.347, -4.920, -4.434, -4.118, -3.874, -3.678, -3.502, -3.349, -3.210, -3.081, -2.962, -2.850, -2.747, -2.649, -2.555, -2.463, -2.375, -2.291, -2.210, -2.132, -2.055, -1.978, -1.906, -1.834, -1.763, -1.693, -1.625, -1.558, -1.492, -1.427, -1.362, -1.298, -1.236, -1.174, -1.113, -1.052, -0.992, -0.932, -0.872, -0.812, -0.753, -0.692, -0.633, -0.574, -0.515, -0.456, -0.397, -0.337, -0.277, -0.217, -0.158, -0.098, -0.039, +0.022, +0.082, +0.143, +0.204, +0.267, +0.331, +0.394, +0.458, +0.523, +0.588, +0.654, +0.720, +0.787, +0.855, +0.926, +0.996, +1.068, +1.141, +1.215, +1.292, +1.369, +1.450, +1.532, +1.616, +1.701, +1.790, +1.881, +1.976, +2.074, +2.174, +2.280, +2.390, +2.507, +2.626, +2.756, +2.890, +3.035, +3.193, +3.364, +3.550, +3.755, +3.989, +4.255, +4.579, +4.982, +5.517, +6.398, +7.244, +8.296, +9.068, +9.830,+10.757,+11.448,+12.232,+13.179,+13.925}, -0.1581, +0.0088, 2.4248},
	{"_BCFN-8/4",    1024, 1048576,     0, { -7.838, -7.618, -7.308, -7.063, -6.841, -6.486, -6.183, -5.862, -5.364, -4.927, -4.443, -4.125, -3.883, -3.681, -3.506, -3.354, -3.214, -3.085, -2.967, -2.857, -2.750, -2.652, -2.558, -2.468, -2.381, -2.296, -2.215, -2.134, -2.057, -1.983, -1.909, -1.837, -1.768, -1.699, -1.630, -1.564, -1.499, -1.432, -1.368, -1.306, -1.242, -1.180, -1.117, -1.057, -0.995, -0.935, -0.874, -0.814, -0.754, -0.695, -0.635, -0.577, -0.517, -0.458, -0.399, -0.340, -0.281, -0.222, -0.162, -0.103, -0.043, +0.017, +0.078, +0.138, +0.199, +0.260, +0.323, +0.385, +0.450, +0.515, +0.580, +0.645, +0.713, +0.780, +0.848, +0.918, +0.988, +1.060, +1.134, +1.208, +1.286, +1.363, +1.444, +1.523, +1.605, +1.691, +1.780, +1.872, +1.966, +2.063, +2.163, +2.268, +2.379, +2.496, +2.618, +2.747, +2.881, +3.028, +3.185, +3.355, +3.543, +3.750, +3.984, +4.254, +4.570, +4.976, +5.521, +6.418, +7.237, +8.286, +9.055, +9.766,+10.645,+11.283,+12.106,+12.812,+13.617}, -0.1622, +0.0030, 2.4241},
	{"_BCFN-9/4",    2048, 1048576,     0, { -8.579, -8.308, -7.952, -7.659, -7.344, -6.922, -6.546, -6.156, -5.605, -5.130, -4.600, -4.262, -4.002, -3.782, -3.595, -3.430, -3.281, -3.142, -3.017, -2.900, -2.789, -2.686, -2.585, -2.489, -2.399, -2.310, -2.224, -2.142, -2.062, -1.984, -1.907, -1.831, -1.759, -1.688, -1.617, -1.548, -1.480, -1.413, -1.347, -1.280, -1.216, -1.151, -1.088, -1.025, -0.963, -0.901, -0.839, -0.778, -0.716, -0.655, -0.594, -0.534, -0.474, -0.415, -0.355, -0.296, -0.236, -0.175, -0.114, -0.053, +0.008, +0.068, +0.130, +0.192, +0.253, +0.315, +0.377, +0.440, +0.503, +0.567, +0.633, +0.698, +0.766, +0.834, +0.903, +0.973, +1.043, +1.114, +1.186, +1.260, +1.336, +1.414, +1.493, +1.573, +1.656, +1.742, +1.829, +1.917, +2.009, +2.104, +2.204, +2.307, +2.414, +2.524, +2.641, +2.766, +2.898, +3.039, +3.190, +3.351, +3.528, +3.724, +3.946, +4.198, +4.503, +4.880, +5.387, +6.218, +7.000, +7.976, +8.665, +9.374,+10.266,+10.996,+11.521,+12.182,+12.948}, -0.1142, +0.0076, 2.4343},
	{"_BCFN-10/4",   8192, 1048576,     0, { -9.047, -8.848, -8.363, -8.009, -7.702, -7.229, -6.852, -6.433, -5.823, -5.297, -4.730, -4.369, -4.093, -3.865, -3.667, -3.494, -3.339, -3.197, -3.066, -2.943, -2.828, -2.721, -2.619, -2.520, -2.424, -2.331, -2.242, -2.157, -2.074, -1.993, -1.915, -1.838, -1.763, -1.690, -1.617, -1.546, -1.476, -1.407, -1.338, -1.271, -1.206, -1.140, -1.075, -1.011, -0.947, -0.885, -0.823, -0.760, -0.696, -0.635, -0.573, -0.512, -0.451, -0.390, -0.328, -0.267, -0.207, -0.145, -0.084, -0.024, +0.037, +0.098, +0.159, +0.221, +0.284, +0.347, +0.410, +0.473, +0.536, +0.600, +0.665, +0.731, +0.797, +0.866, +0.934, +1.003, +1.072, +1.144, +1.216, +1.289, +1.364, +1.441, +1.517, +1.597, +1.679, +1.762, +1.847, +1.936, +2.027, +2.122, +2.220, +2.321, +2.427, +2.536, +2.650, +2.772, +2.898, +3.033, +3.177, +3.336, +3.509, +3.701, +3.916, +4.160, +4.450, +4.813, +5.301, +6.079, +6.803, +7.675, +8.311, +8.946, +9.716,+10.241,+10.710,+11.523,+11.899}, -0.0845, +0.0014, 2.4434},
	{"_BCFN-11/4",  16384, 1048576,     0, { -9.535, -9.117, -8.607, -8.288, -7.929, -7.442, -7.053, -6.617, -5.956, -5.427, -4.830, -4.445, -4.155, -3.915, -3.711, -3.531, -3.368, -3.222, -3.084, -2.957, -2.840, -2.729, -2.621, -2.519, -2.423, -2.329, -2.240, -2.155, -2.069, -1.987, -1.906, -1.828, -1.751, -1.676, -1.603, -1.531, -1.460, -1.390, -1.321, -1.253, -1.187, -1.120, -1.054, -0.988, -0.923, -0.859, -0.796, -0.733, -0.673, -0.610, -0.549, -0.488, -0.426, -0.364, -0.303, -0.242, -0.181, -0.120, -0.057, +0.003, +0.065, +0.126, +0.189, +0.250, +0.313, +0.375, +0.437, +0.500, +0.565, +0.628, +0.691, +0.757, +0.822, +0.889, +0.956, +1.024, +1.095, +1.165, +1.236, +1.309, +1.383, +1.458, +1.535, +1.615, +1.695, +1.777, +1.862, +1.949, +2.036, +2.130, +2.225, +2.324, +2.427, +2.535, +2.648, +2.766, +2.890, +3.024, +3.167, +3.323, +3.490, +3.676, +3.883, +4.120, +4.404, +4.748, +5.220, +5.970, +6.657, +7.504, +8.093, +8.633, +9.396, +9.964,+10.658,+11.356,+11.681}, -0.0575, +0.0021, 2.4446},
	{"_BCFN-12/4",  32768, 1048576,     0, { -9.824, -9.378, -9.019, -8.579, -8.155, -7.620, -7.192, -6.722, -6.042, -5.496, -4.883, -4.488, -4.191, -3.947, -3.740, -3.556, -3.390, -3.240, -3.103, -2.972, -2.850, -2.737, -2.630, -2.527, -2.427, -2.331, -2.240, -2.153, -2.067, -1.984, -1.901, -1.822, -1.745, -1.669, -1.594, -1.522, -1.449, -1.380, -1.311, -1.242, -1.175, -1.109, -1.044, -0.979, -0.915, -0.851, -0.787, -0.723, -0.659, -0.597, -0.535, -0.473, -0.411, -0.350, -0.290, -0.229, -0.167, -0.106, -0.046, +0.016, +0.077, +0.138, +0.200, +0.262, +0.323, +0.385, +0.447, +0.511, +0.575, +0.640, +0.705, +0.770, +0.837, +0.904, +0.971, +1.039, +1.109, +1.179, +1.250, +1.324, +1.397, +1.473, +1.550, +1.626, +1.706, +1.788, +1.872, +1.958, +2.046, +2.136, +2.230, +2.329, +2.433, +2.541, +2.653, +2.770, +2.894, +3.025, +3.166, +3.319, +3.481, +3.662, +3.870, +4.100, +4.378, +4.719, +5.178, +5.892, +6.554, +7.381, +7.940, +8.462, +9.160, +9.649,+10.225,+10.789,+11.154}, -0.0460, +0.0017, 2.447},
	{"_BCFN-13/4",  98304, 1048576,     0, { -9.776, -9.459, -9.088, -8.739, -8.275, -7.761, -7.315, -6.831, -6.141, -5.564, -4.927, -4.527, -4.218, -3.970, -3.756, -3.573, -3.406, -3.254, -3.115, -2.985, -2.863, -2.746, -2.637, -2.532, -2.432, -2.335, -2.242, -2.151, -2.065, -1.981, -1.899, -1.821, -1.743, -1.665, -1.590, -1.516, -1.444, -1.372, -1.301, -1.233, -1.165, -1.098, -1.031, -0.965, -0.901, -0.836, -0.770, -0.707, -0.643, -0.581, -0.519, -0.456, -0.396, -0.333, -0.271, -0.210, -0.148, -0.088, -0.027, +0.034, +0.095, +0.157, +0.219, +0.281, +0.342, +0.404, +0.467, +0.531, +0.595, +0.659, +0.724, +0.790, +0.855, +0.922, +0.988, +1.057, +1.126, +1.196, +1.266, +1.338, +1.411, +1.485, +1.560, +1.637, +1.717, +1.796, +1.880, +1.966, +2.053, +2.145, +2.239, +2.336, +2.436, +2.542, +2.652, +2.769, +2.891, +3.021, +3.160, +3.309, +3.472, +3.650, +3.852, +4.080, +4.349, +4.683, +5.131, +5.844, +6.503, +7.282, +7.845, +8.324, +9.046, +9.519,+10.061,+10.824,+11.436}, -0.0270, +0.0030, 2.449},
	{"_BCFN-14/4", 262144,  262144,     0, {-10.419,-10.136, -9.275, -8.956, -8.580, -7.948, -7.401, -6.927, -6.210, -5.621, -4.960, -4.552, -4.233, -3.987, -3.765, -3.576, -3.408, -3.255, -3.112, -2.978, -2.853, -2.738, -2.625, -2.523, -2.424, -2.325, -2.233, -2.143, -2.055, -1.970, -1.889, -1.811, -1.732, -1.656, -1.579, -1.506, -1.433, -1.362, -1.294, -1.223, -1.157, -1.088, -1.020, -0.954, -0.889, -0.825, -0.759, -0.695, -0.632, -0.569, -0.508, -0.447, -0.384, -0.321, -0.258, -0.196, -0.133, -0.072, -0.011, +0.050, +0.113, +0.177, +0.238, +0.301, +0.361, +0.423, +0.487, +0.549, +0.611, +0.675, +0.741, +0.805, +0.870, +0.935, +1.004, +1.073, +1.141, +1.209, +1.279, +1.352, +1.424, +1.498, +1.573, +1.651, +1.732, +1.812, +1.897, +1.985, +2.072, +2.164, +2.254, +2.351, +2.452, +2.554, +2.665, +2.780, +2.902, +3.034, +3.169, +3.317, +3.480, +3.651, +3.855, +4.089, +4.354, +4.682, +5.129, +5.808, +6.416, +7.199, +7.739, +8.254, +8.910, +9.403, +9.624,+10.109,+10.315}, -0.0110, +0.0112, 2.453},
	{"_BCFN-15/4", 524288, 1048576,     0, {-10.048, -9.743, -9.227, -8.794, -8.377, -7.867, -7.408, -6.914, -6.199, -5.601, -4.964, -4.552, -4.245, -3.990, -3.774, -3.585, -3.417, -3.264, -3.120, -2.987, -2.863, -2.745, -2.634, -2.527, -2.427, -2.328, -2.234, -2.143, -2.054, -1.969, -1.885, -1.804, -1.724, -1.647, -1.572, -1.499, -1.426, -1.354, -1.283, -1.213, -1.145, -1.077, -1.012, -0.946, -0.881, -0.816, -0.751, -0.688, -0.625, -0.563, -0.499, -0.437, -0.375, -0.312, -0.251, -0.189, -0.127, -0.066, -0.005, +0.057, +0.118, +0.179, +0.241, +0.303, +0.365, +0.427, +0.490, +0.552, +0.616, +0.680, +0.743, +0.808, +0.872, +0.938, +1.004, +1.071, +1.140, +1.209, +1.281, +1.352, +1.425, +1.499, +1.574, +1.651, +1.730, +1.811, +1.892, +1.977, +2.064, +2.153, +2.245, +2.342, +2.440, +2.546, +2.654, +2.768, +2.889, +3.017, +3.153, +3.302, +3.463, +3.640, +3.836, +4.059, +4.321, +4.651, +5.088, +5.766, +6.405, +7.180, +7.727, +8.255, +8.842, +9.249, +9.675,+10.149,+10.476}, -0.0049, +0.0094, 2.447},
	{"_BCFN-16/4",1048576,   65536,     0, {-10.247, -9.788, -9.132, -8.946, -8.558, -7.992, -7.449, -6.946, -6.210, -5.577, -4.952, -4.548, -4.231, -3.994, -3.779, -3.585, -3.413, -3.259, -3.111, -2.985, -2.870, -2.749, -2.638, -2.529, -2.430, -2.330, -2.232, -2.144, -2.050, -1.967, -1.878, -1.796, -1.716, -1.642, -1.567, -1.501, -1.429, -1.361, -1.289, -1.218, -1.149, -1.080, -1.014, -0.948, -0.883, -0.826, -0.763, -0.707, -0.643, -0.581, -0.517, -0.455, -0.393, -0.331, -0.265, -0.205, -0.143, -0.079, -0.019, +0.044, +0.105, +0.167, +0.232, +0.296, +0.363, +0.423, +0.483, +0.549, +0.609, +0.676, +0.738, +0.803, +0.866, +0.931, +0.997, +1.062, +1.128, +1.196, +1.270, +1.341, +1.415, +1.486, +1.561, +1.639, +1.718, +1.794, +1.874, +1.960, +2.045, +2.138, +2.232, +2.327, +2.424, +2.526, +2.644, +2.754, +2.880, +3.003, +3.129, +3.268, +3.422, +3.597, +3.800, +4.030, +4.272, +4.586, +5.035, +5.724, +6.422, +7.219, +7.758, +8.267, +8.903, +9.245, +9.855,+10.621,+11.583}, -0.0188, -0.0008, 2.437},

	{ "DC6-9x1Bytes-1", 1ull << (10 - 10), 65536, 0, {-4.283,-4.292,-4.237,-4.127,-3.994,-3.885,-3.743,-3.593,-3.387,-3.177,-2.898,-2.717,-2.575,-2.464,-2.363,-2.268,-2.184,-2.102,-2.024,-1.953,-1.884,-1.818,-1.753,-1.692,-1.632,-1.576,-1.518,-1.465,-1.411,-1.359,-1.306,-1.251,-1.203,-1.153,-1.103,-1.052,-1.004,-0.954,-0.908,-0.862,-0.816,-0.771,-0.726,-0.680,-0.632,-0.585,-0.541,-0.495,-0.449,-0.406,-0.356,-0.312,-0.264,-0.218,-0.172,-0.127,-0.080,-0.035,+0.011,+0.059,+0.108,+0.155,+0.206,+0.256,+0.309,+0.363,+0.413,+0.467,+0.520,+0.576,+0.633,+0.688,+0.743,+0.805,+0.867,+0.927,+0.988,+1.056,+1.126,+1.193,+1.261,+1.325,+1.395,+1.468,+1.545,+1.625,+1.712,+1.802,+1.894,+1.978,+2.069,+2.167,+2.274,+2.380,+2.501,+2.617,+2.745,+2.890,+3.053,+3.221,+3.423,+3.620,+3.853,+4.139,+4.493,+4.927,+5.553,+6.594,+7.686,+9.050,+10.047,+11.167,+13.347,+14.467,+16.689,+17.427,+17.270}},//10
	{ "DC6-9x1Bytes-1", 1ull << (11 - 10), 65536, 0, {-5.136,-5.188,-4.968,-4.935,-4.639,-4.431,-4.256,-4.046,-3.734,-3.467,-3.158,-2.939,-2.760,-2.619,-2.501,-2.389,-2.293,-2.204,-2.122,-2.037,-1.953,-1.879,-1.803,-1.732,-1.667,-1.607,-1.545,-1.487,-1.429,-1.369,-1.314,-1.258,-1.204,-1.147,-1.094,-1.043,-0.990,-0.938,-0.883,-0.833,-0.782,-0.733,-0.682,-0.634,-0.585,-0.534,-0.485,-0.435,-0.385,-0.341,-0.294,-0.247,-0.199,-0.147,-0.099,-0.051,-0.004,+0.047,+0.099,+0.150,+0.202,+0.251,+0.306,+0.356,+0.408,+0.463,+0.519,+0.575,+0.630,+0.684,+0.744,+0.799,+0.856,+0.922,+0.982,+1.044,+1.104,+1.168,+1.232,+1.293,+1.356,+1.420,+1.488,+1.560,+1.638,+1.712,+1.793,+1.879,+1.965,+2.056,+2.149,+2.240,+2.343,+2.439,+2.556,+2.673,+2.795,+2.927,+3.086,+3.243,+3.415,+3.617,+3.861,+4.147,+4.449,+4.849,+5.405,+6.313,+7.245,+8.209, +9.251, +9.940,+11.271,+12.112,+12.966,+15.252,+14.451}},
	{"DC6-9x1Bytes-1",                  3, 98304, 0, { -5.801, -5.642, -5.404, -5.245, -5.075, -4.847, -4.634, -4.395, -4.020, -3.711, -3.369, -3.134, -2.955, -2.796, -2.660, -2.541, -2.437, -2.338, -2.249, -2.163, -2.080, -1.999, -1.926, -1.860, -1.792, -1.725, -1.657, -1.594, -1.531, -1.469, -1.413, -1.352, -1.295, -1.242, -1.190, -1.138, -1.082, -1.028, -0.980, -0.930, -0.880, -0.830, -0.779, -0.726, -0.674, -0.622, -0.572, -0.522, -0.473, -0.424, -0.375, -0.326, -0.276, -0.228, -0.177, -0.126, -0.075, -0.027, +0.020, +0.071, +0.121, +0.171, +0.221, +0.274, +0.326, +0.379, +0.431, +0.485, +0.539, +0.594, +0.649, +0.704, +0.761, +0.819, +0.880, +0.942, +1.003, +1.062, +1.121, +1.186, +1.249, +1.318, +1.384, +1.459, +1.531, +1.603, +1.682, +1.763, +1.846, +1.927, +2.019, +2.109, +2.212, +2.313, +2.417, +2.533, +2.656, +2.788, +2.918, +3.062, +3.227, +3.401, +3.607, +3.845, +4.137, +4.494, +4.996, +5.833, +6.627, +7.673, +8.395, +9.197,+10.123,+10.611,+11.109,+12.553,+13.366},  +0.211,  +0.020,   2.046},
	{"DC6-9x1Bytes-1",                  4, 98304, 0, { -5.906, -5.769, -5.554, -5.419, -5.252, -5.002, -4.746, -4.475, -4.121, -3.830, -3.418, -3.180, -2.986, -2.831, -2.683, -2.554, -2.441, -2.338, -2.242, -2.151, -2.069, -1.994, -1.921, -1.846, -1.775, -1.705, -1.640, -1.577, -1.514, -1.454, -1.397, -1.337, -1.278, -1.218, -1.164, -1.111, -1.055, -1.001, -0.948, -0.894, -0.841, -0.788, -0.736, -0.683, -0.634, -0.583, -0.534, -0.484, -0.435, -0.385, -0.337, -0.288, -0.240, -0.192, -0.142, -0.091, -0.042, +0.007, +0.058, +0.110, +0.161, +0.214, +0.263, +0.314, +0.368, +0.420, +0.473, +0.527, +0.580, +0.635, +0.691, +0.744, +0.802, +0.861, +0.920, +0.980, +1.040, +1.101, +1.161, +1.228, +1.291, +1.355, +1.421, +1.489, +1.561, +1.634, +1.707, +1.786, +1.863, +1.947, +2.037, +2.125, +2.218, +2.322, +2.428, +2.538, +2.664, +2.794, +2.932, +3.079, +3.236, +3.417, +3.610, +3.845, +4.122, +4.473, +4.949, +5.789, +6.572, +7.518, +8.265, +9.151,+10.309,+10.707,+11.423,+11.532,+12.415},  +0.229,  +0.058,   2.047},
	//{ "DC6-9x1Bytes-1", 1ull << (12 - 10), 65536, 0, {-6.037,-6.057,-5.890,-5.658,-5.218,-4.944,-4.713,-4.478,-4.073,-3.773,-3.406,-3.149,-2.964,-2.821,-2.682,-2.556,-2.451,-2.351,-2.256,-2.165,-2.086,-2.004,-1.930,-1.856,-1.784,-1.714,-1.644,-1.579,-1.516,-1.456,-1.396,-1.339,-1.280,-1.223,-1.167,-1.111,-1.058,-1.004,-0.950,-0.898,-0.845,-0.791,-0.741,-0.686,-0.637,-0.585,-0.537,-0.487,-0.436,-0.386,-0.338,-0.290,-0.241,-0.191,-0.143,-0.091,-0.042,+0.009,+0.059,+0.109,+0.158,+0.208,+0.263,+0.313,+0.362,+0.414,+0.467,+0.519,+0.574,+0.623,+0.676,+0.740,+0.794,+0.856,+0.916,+0.977,+1.041,+1.104,+1.167,+1.230,+1.289,+1.352,+1.416,+1.483,+1.550,+1.623,+1.702,+1.781,+1.858,+1.944,+2.028,+2.123,+2.217,+2.315,+2.421,+2.530,+2.646,+2.771,+2.899,+3.054,+3.205,+3.386,+3.591,+3.849,+4.126,+4.500,+4.974,+5.755,+6.521,+7.564, +8.361, +9.146,+10.466,+11.118,+12.647,+14.136,+13.637}},
	{ "DC6-9x1Bytes-1", 1ull << (13 - 10), 65536, 0, {-6.772,-6.956,-6.244,-5.926,-5.695,-5.421,-5.115,-4.791,-4.373,-3.998,-3.570,-3.320,-3.122,-2.954,-2.797,-2.667,-2.554,-2.446,-2.344,-2.244,-2.156,-2.073,-1.993,-1.918,-1.846,-1.775,-1.708,-1.643,-1.580,-1.512,-1.448,-1.384,-1.323,-1.263,-1.205,-1.148,-1.093,-1.036,-0.984,-0.929,-0.878,-0.829,-0.776,-0.723,-0.667,-0.615,-0.560,-0.510,-0.461,-0.412,-0.362,-0.311,-0.259,-0.208,-0.158,-0.111,-0.063,-0.009,+0.043,+0.091,+0.140,+0.190,+0.241,+0.292,+0.347,+0.398,+0.447,+0.495,+0.544,+0.596,+0.651,+0.702,+0.759,+0.814,+0.875,+0.930,+0.991,+1.047,+1.105,+1.165,+1.231,+1.299,+1.364,+1.434,+1.503,+1.576,+1.648,+1.723,+1.803,+1.886,+1.972,+2.060,+2.149,+2.252,+2.351,+2.455,+2.569,+2.684,+2.806,+2.956,+3.104,+3.272,+3.465,+3.685,+3.941,+4.276,+4.721,+5.420,+6.127,+6.981, +7.618, +8.412, +9.002, +9.511, +9.738,+10.540,+10.448}},
	{ "DC6-9x1Bytes-1", 1ull << (14 - 10), 65536, 0, {-6.618,-6.997,-6.142,-5.983,-5.849,-5.607,-5.353,-5.051,-4.585,-4.166,-3.703,-3.418,-3.186,-2.998,-2.829,-2.683,-2.554,-2.440,-2.338,-2.236,-2.147,-2.059,-1.977,-1.893,-1.816,-1.738,-1.662,-1.588,-1.522,-1.457,-1.394,-1.332,-1.270,-1.207,-1.147,-1.094,-1.034,-0.977,-0.921,-0.862,-0.808,-0.750,-0.696,-0.643,-0.592,-0.540,-0.487,-0.441,-0.390,-0.340,-0.288,-0.233,-0.182,-0.130,-0.078,-0.027,+0.024,+0.076,+0.128,+0.176,+0.227,+0.280,+0.332,+0.382,+0.430,+0.482,+0.537,+0.589,+0.641,+0.694,+0.748,+0.803,+0.862,+0.923,+0.979,+1.037,+1.097,+1.158,+1.218,+1.280,+1.340,+1.404,+1.467,+1.534,+1.603,+1.671,+1.745,+1.825,+1.898,+1.978,+2.056,+2.140,+2.230,+2.324,+2.421,+2.520,+2.629,+2.741,+2.871,+3.008,+3.155,+3.314,+3.498,+3.695,+3.950,+4.234,+4.647,+5.285,+5.895,+6.705, +7.237, +7.878, +8.761, +9.146,+10.129,+12.224,+11.543}},
	{ "DC6-9x1Bytes-1", 1ull << (15 - 10), 65536, 0, {-7.128,-7.300,-6.844,-6.624,-6.281,-5.937,-5.618,-5.264,-4.741,-4.282,-3.824,-3.498,-3.244,-3.031,-2.860,-2.718,-2.580,-2.463,-2.352,-2.244,-2.148,-2.050,-1.967,-1.881,-1.800,-1.725,-1.648,-1.581,-1.510,-1.441,-1.379,-1.317,-1.250,-1.189,-1.130,-1.073,-1.016,-0.955,-0.895,-0.840,-0.788,-0.734,-0.680,-0.624,-0.569,-0.514,-0.460,-0.399,-0.348,-0.296,-0.244,-0.189,-0.137,-0.085,-0.036,+0.013,+0.060,+0.110,+0.161,+0.213,+0.261,+0.314,+0.365,+0.415,+0.465,+0.515,+0.567,+0.617,+0.668,+0.720,+0.775,+0.829,+0.884,+0.941,+0.996,+1.053,+1.115,+1.177,+1.239,+1.296,+1.363,+1.425,+1.489,+1.555,+1.625,+1.690,+1.758,+1.831,+1.906,+1.980,+2.061,+2.145,+2.230,+2.327,+2.418,+2.517,+2.626,+2.733,+2.856,+2.993,+3.129,+3.281,+3.458,+3.656,+3.895,+4.167,+4.591,+5.218,+5.827,+6.623, +6.996, +7.426, +8.234, +8.698, +9.292,+10.200, +9.778}},//15
	{ "DC6-9x1Bytes-1", 1ull << (16 - 10), 65536, 0, {-7.503,-7.517,-7.003,-6.818,-6.639,-6.143,-5.672,-5.325,-4.814,-4.353,-3.830,-3.494,-3.255,-3.061,-2.890,-2.737,-2.598,-2.481,-2.370,-2.262,-2.161,-2.072,-1.984,-1.902,-1.822,-1.739,-1.660,-1.588,-1.513,-1.443,-1.374,-1.310,-1.243,-1.179,-1.117,-1.053,-0.993,-0.937,-0.877,-0.824,-0.771,-0.713,-0.659,-0.606,-0.552,-0.497,-0.444,-0.393,-0.344,-0.289,-0.237,-0.190,-0.143,-0.091,-0.039,+0.011,+0.059,+0.110,+0.158,+0.207,+0.261,+0.314,+0.363,+0.412,+0.464,+0.520,+0.571,+0.623,+0.675,+0.728,+0.784,+0.843,+0.897,+0.951,+1.008,+1.066,+1.118,+1.176,+1.234,+1.292,+1.356,+1.420,+1.486,+1.550,+1.614,+1.680,+1.750,+1.824,+1.895,+1.972,+2.046,+2.126,+2.212,+2.295,+2.391,+2.484,+2.586,+2.699,+2.822,+2.939,+3.074,+3.226,+3.400,+3.598,+3.835,+4.105,+4.514,+5.110,+5.718,+6.373, +6.891, +7.538, +8.272, +8.491, +9.068, +9.576, +9.535}},
	{ "DC6-9x1Bytes-1", 1ull << (17 - 10), 65536, 0, {-7.565,-7.586,-7.189,-6.768,-6.334,-5.933,-5.649,-5.315,-4.741,-4.258,-3.770,-3.439,-3.189,-2.976,-2.795,-2.640,-2.506,-2.387,-2.273,-2.158,-2.052,-1.960,-1.869,-1.782,-1.703,-1.622,-1.545,-1.474,-1.400,-1.326,-1.260,-1.199,-1.138,-1.076,-1.016,-0.954,-0.897,-0.840,-0.785,-0.729,-0.672,-0.615,-0.560,-0.509,-0.457,-0.405,-0.353,-0.303,-0.251,-0.200,-0.148,-0.097,-0.048,+0.002,+0.052,+0.104,+0.156,+0.207,+0.257,+0.311,+0.364,+0.415,+0.465,+0.513,+0.564,+0.616,+0.669,+0.723,+0.776,+0.830,+0.884,+0.941,+0.996,+1.049,+1.103,+1.162,+1.219,+1.277,+1.336,+1.396,+1.457,+1.518,+1.579,+1.641,+1.700,+1.769,+1.840,+1.912,+1.984,+2.058,+2.136,+2.218,+2.305,+2.387,+2.478,+2.574,+2.678,+2.788,+2.902,+3.029,+3.164,+3.317,+3.482,+3.664,+3.905,+4.177,+4.565,+5.178,+5.723,+6.436, +6.865, +7.349, +8.020, +8.504, +8.746, +8.792, +8.790}},
	{ "DC6-9x1Bytes-1", 1ull << (18 - 10), 65536, 0, {-8.010,-8.066,-7.249,-6.941,-6.512,-6.008,-5.618,-5.177,-4.686,-4.246,-3.696,-3.357,-3.099,-2.894,-2.727,-2.561,-2.427,-2.304,-2.195,-2.087,-1.981,-1.884,-1.800,-1.706,-1.627,-1.550,-1.472,-1.400,-1.327,-1.255,-1.190,-1.124,-1.059,-0.995,-0.934,-0.872,-0.812,-0.753,-0.700,-0.641,-0.586,-0.532,-0.474,-0.415,-0.360,-0.305,-0.251,-0.198,-0.149,-0.102,-0.051,+0.002,+0.055,+0.104,+0.153,+0.206,+0.254,+0.305,+0.356,+0.405,+0.454,+0.506,+0.555,+0.607,+0.657,+0.710,+0.761,+0.813,+0.864,+0.919,+0.974,+1.025,+1.078,+1.134,+1.191,+1.246,+1.299,+1.357,+1.416,+1.473,+1.528,+1.587,+1.649,+1.709,+1.773,+1.838,+1.908,+1.973,+2.046,+2.117,+2.197,+2.281,+2.366,+2.453,+2.544,+2.635,+2.727,+2.833,+2.945,+3.065,+3.202,+3.348,+3.520,+3.712,+3.934,+4.209,+4.561,+5.103,+5.623,+6.281, +6.802, +7.438, +8.144, +8.467, +8.679, +9.077, +8.969}},
	{ "DC6-9x1Bytes-1", 1ull << (19 - 10), 65536, 0, {-8.433,-8.525,-7.489,-7.196,-6.505,-5.854,-5.560,-5.187,-4.633,-4.136,-3.617,-3.303,-3.055,-2.852,-2.674,-2.518,-2.379,-2.249,-2.127,-2.015,-1.915,-1.826,-1.739,-1.651,-1.568,-1.484,-1.407,-1.331,-1.255,-1.183,-1.116,-1.052,-0.991,-0.929,-0.868,-0.804,-0.742,-0.684,-0.629,-0.571,-0.516,-0.461,-0.404,-0.350,-0.297,-0.247,-0.197,-0.148,-0.096,-0.045,+0.004,+0.055,+0.103,+0.153,+0.203,+0.252,+0.305,+0.355,+0.406,+0.458,+0.512,+0.561,+0.609,+0.660,+0.712,+0.765,+0.817,+0.868,+0.916,+0.971,+1.023,+1.077,+1.133,+1.186,+1.239,+1.297,+1.355,+1.411,+1.471,+1.527,+1.586,+1.646,+1.708,+1.771,+1.836,+1.904,+1.972,+2.039,+2.106,+2.177,+2.252,+2.328,+2.405,+2.491,+2.572,+2.669,+2.771,+2.877,+2.984,+3.104,+3.228,+3.367,+3.534,+3.709,+3.948,+4.229,+4.612,+5.187,+5.698,+6.283, +6.749, +7.117, +7.544, +7.954, +8.420, +8.928, +8.820}},
	{ "DC6-9x1Bytes-1", 1ull << (20 - 10), 65536, 0, {-7.363,-7.394,-7.190,-6.807,-6.407,-5.743,-5.394,-4.995,-4.405,-3.955,-3.463,-3.117,-2.869,-2.682,-2.512,-2.357,-2.222,-2.099,-1.978,-1.863,-1.761,-1.667,-1.576,-1.488,-1.406,-1.328,-1.247,-1.173,-1.105,-1.038,-0.970,-0.903,-0.842,-0.779,-0.717,-0.656,-0.603,-0.548,-0.491,-0.435,-0.379,-0.322,-0.268,-0.215,-0.164,-0.113,-0.055,-0.004,+0.045,+0.093,+0.146,+0.198,+0.248,+0.298,+0.347,+0.395,+0.447,+0.498,+0.545,+0.591,+0.638,+0.684,+0.739,+0.788,+0.841,+0.889,+0.940,+0.995,+1.047,+1.097,+1.152,+1.202,+1.253,+1.308,+1.364,+1.421,+1.478,+1.535,+1.591,+1.650,+1.708,+1.772,+1.835,+1.897,+1.956,+2.023,+2.087,+2.150,+2.222,+2.292,+2.367,+2.447,+2.524,+2.613,+2.702,+2.797,+2.895,+2.989,+3.099,+3.214,+3.349,+3.497,+3.653,+3.828,+4.048,+4.311,+4.684,+5.244,+5.765,+6.460, +6.923, +7.313, +7.762, +8.053, +8.447, +9.300, +9.085}},//20
	{ "DC6-9x1Bytes-1", 1ull << (21 - 10), 65536, 0, {-7.023,-7.248,-6.717,-6.317,-6.105,-5.812,-5.370,-4.999,-4.426,-3.905,-3.417,-3.082,-2.818,-2.620,-2.455,-2.305,-2.173,-2.040,-1.928,-1.815,-1.707,-1.612,-1.525,-1.440,-1.352,-1.271,-1.197,-1.125,-1.058,-0.989,-0.919,-0.856,-0.792,-0.729,-0.668,-0.607,-0.549,-0.489,-0.436,-0.380,-0.323,-0.268,-0.210,-0.156,-0.103,-0.050,+0.001,+0.052,+0.099,+0.149,+0.201,+0.249,+0.300,+0.350,+0.398,+0.447,+0.499,+0.549,+0.598,+0.646,+0.698,+0.748,+0.798,+0.850,+0.898,+0.950,+1.000,+1.048,+1.098,+1.149,+1.200,+1.252,+1.304,+1.356,+1.409,+1.463,+1.516,+1.572,+1.629,+1.688,+1.751,+1.810,+1.870,+1.930,+1.993,+2.058,+2.121,+2.192,+2.263,+2.338,+2.414,+2.486,+2.567,+2.652,+2.743,+2.832,+2.924,+3.024,+3.136,+3.256,+3.383,+3.518,+3.680,+3.858,+4.067,+4.313,+4.650,+5.236,+5.749,+6.337, +6.772, +7.276, +7.926, +8.225, +8.612, +9.655, +9.439}},
	{ "DC6-9x1Bytes-1", 1ull << (22 - 10), 65536, 0, {-6.909,-6.952,-6.767,-6.201,-5.994,-5.732,-5.210,-4.795,-4.279,-3.818,-3.313,-2.983,-2.739,-2.524,-2.357,-2.207,-2.070,-1.941,-1.825,-1.712,-1.608,-1.519,-1.427,-1.345,-1.265,-1.186,-1.111,-1.039,-0.968,-0.899,-0.831,-0.767,-0.701,-0.639,-0.581,-0.523,-0.461,-0.400,-0.343,-0.285,-0.231,-0.178,-0.125,-0.071,-0.017,+0.031,+0.082,+0.132,+0.185,+0.233,+0.284,+0.332,+0.382,+0.432,+0.478,+0.526,+0.573,+0.622,+0.671,+0.719,+0.771,+0.820,+0.869,+0.916,+0.967,+1.016,+1.062,+1.113,+1.162,+1.212,+1.266,+1.318,+1.369,+1.421,+1.474,+1.525,+1.575,+1.628,+1.685,+1.743,+1.800,+1.859,+1.922,+1.981,+2.042,+2.106,+2.170,+2.236,+2.309,+2.386,+2.460,+2.535,+2.605,+2.690,+2.781,+2.871,+2.967,+3.066,+3.175,+3.289,+3.411,+3.558,+3.712,+3.882,+4.093,+4.341,+4.680,+5.249,+5.783,+6.442, +6.867, +7.219, +7.801, +8.206, +8.964,+10.092, +9.734}},
	{ "DC6-9x1Bytes-1", 1ull << (23 - 10), 65536, 0, {-6.604,-6.760,-6.364,-6.166,-5.967,-5.538,-5.154,-4.773,-4.197,-3.701,-3.230,-2.891,-2.630,-2.416,-2.245,-2.088,-1.946,-1.831,-1.714,-1.602,-1.504,-1.407,-1.317,-1.232,-1.154,-1.070,-0.993,-0.924,-0.853,-0.788,-0.723,-0.663,-0.598,-0.534,-0.471,-0.415,-0.353,-0.297,-0.243,-0.187,-0.139,-0.084,-0.035,+0.017,+0.065,+0.116,+0.167,+0.219,+0.271,+0.320,+0.368,+0.416,+0.467,+0.513,+0.560,+0.605,+0.653,+0.703,+0.751,+0.800,+0.847,+0.899,+0.948,+0.996,+1.044,+1.091,+1.138,+1.186,+1.238,+1.289,+1.344,+1.393,+1.448,+1.503,+1.556,+1.613,+1.667,+1.721,+1.779,+1.834,+1.891,+1.950,+2.009,+2.069,+2.133,+2.194,+2.263,+2.329,+2.403,+2.474,+2.549,+2.623,+2.705,+2.782,+2.868,+2.962,+3.055,+3.150,+3.261,+3.380,+3.504,+3.639,+3.797,+3.977,+4.193,+4.457,+4.811,+5.337,+5.907,+6.556, +7.036, +7.434, +7.827, +8.380, +8.917, +9.167, +9.055}},
	{ "DC6-9x1Bytes-1", 1ull << (24 - 10), 65536, 0, {-6.604,-6.699,-6.435,-6.272,-6.114,-5.672,-5.219,-4.778,-4.196,-3.714,-3.157,-2.844,-2.594,-2.401,-2.229,-2.075,-1.936,-1.819,-1.708,-1.593,-1.497,-1.401,-1.314,-1.231,-1.153,-1.079,-1.002,-0.932,-0.864,-0.793,-0.728,-0.664,-0.603,-0.541,-0.478,-0.417,-0.360,-0.305,-0.245,-0.190,-0.135,-0.084,-0.032,+0.021,+0.071,+0.121,+0.173,+0.227,+0.276,+0.324,+0.373,+0.419,+0.466,+0.515,+0.566,+0.617,+0.665,+0.716,+0.764,+0.813,+0.860,+0.909,+0.959,+1.008,+1.056,+1.104,+1.152,+1.201,+1.249,+1.299,+1.352,+1.399,+1.449,+1.500,+1.551,+1.602,+1.655,+1.710,+1.767,+1.827,+1.881,+1.942,+1.997,+2.057,+2.120,+2.184,+2.249,+2.317,+2.389,+2.458,+2.531,+2.611,+2.689,+2.769,+2.853,+2.939,+3.033,+3.133,+3.243,+3.350,+3.475,+3.608,+3.754,+3.931,+4.133,+4.391,+4.739,+5.230,+5.750,+6.386, +6.877, +7.251, +7.950, +8.508, +9.265,+10.599,+10.236}},
	{ "DC6-9x1Bytes-1", 1ull << (25 - 10), 65536, 0, {-7.202,-7.230,-7.132,-6.539,-5.801,-5.484,-5.117,-4.675,-4.126,-3.639,-3.122,-2.788,-2.561,-2.363,-2.190,-2.034,-1.900,-1.783,-1.676,-1.568,-1.475,-1.383,-1.295,-1.208,-1.127,-1.054,-0.980,-0.909,-0.839,-0.768,-0.701,-0.637,-0.572,-0.509,-0.451,-0.394,-0.340,-0.281,-0.226,-0.171,-0.117,-0.063,-0.011,+0.038,+0.093,+0.143,+0.193,+0.242,+0.292,+0.340,+0.389,+0.438,+0.484,+0.536,+0.584,+0.630,+0.677,+0.725,+0.773,+0.821,+0.870,+0.920,+0.970,+1.017,+1.066,+1.113,+1.157,+1.206,+1.257,+1.305,+1.354,+1.404,+1.455,+1.507,+1.555,+1.607,+1.662,+1.710,+1.765,+1.823,+1.882,+1.943,+1.998,+2.060,+2.123,+2.181,+2.242,+2.303,+2.367,+2.436,+2.505,+2.583,+2.661,+2.739,+2.826,+2.912,+3.010,+3.109,+3.218,+3.334,+3.454,+3.596,+3.750,+3.931,+4.134,+4.384,+4.720,+5.254,+5.701,+6.214, +6.710, +7.093, +7.536, +7.816, +8.081, +9.279, +8.809}},//25
	{ "DC6-9x1Bytes-1", 1ull << (26 - 10), 65536, 0, {-6.921,-7.015,-6.783,-6.684,-5.980,-5.395,-5.039,-4.606,-4.090,-3.598,-3.069,-2.748,-2.507,-2.306,-2.147,-2.008,-1.873,-1.745,-1.640,-1.536,-1.439,-1.345,-1.259,-1.175,-1.093,-1.011,-0.936,-0.866,-0.794,-0.726,-0.666,-0.603,-0.543,-0.482,-0.425,-0.368,-0.311,-0.254,-0.194,-0.137,-0.085,-0.030,+0.023,+0.075,+0.131,+0.180,+0.227,+0.275,+0.323,+0.371,+0.418,+0.462,+0.509,+0.557,+0.607,+0.651,+0.699,+0.748,+0.793,+0.841,+0.892,+0.942,+0.988,+1.037,+1.085,+1.135,+1.182,+1.231,+1.279,+1.328,+1.381,+1.429,+1.476,+1.527,+1.575,+1.626,+1.676,+1.733,+1.790,+1.845,+1.900,+1.956,+2.014,+2.076,+2.136,+2.201,+2.261,+2.328,+2.398,+2.465,+2.538,+2.616,+2.697,+2.776,+2.861,+2.946,+3.038,+3.139,+3.239,+3.341,+3.465,+3.606,+3.751,+3.933,+4.147,+4.397,+4.720,+5.252,+5.724,+6.223, +6.654, +7.008, +7.395, +7.696, +7.808, +7.918, +7.883}},
	{ "DC6-9x1Bytes-1", 1ull << (27 - 10), 65536, 0, {-7.038,-7.058,-6.690,-6.347,-5.781,-5.384,-5.104,-4.748,-4.192,-3.707,-3.187,-2.851,-2.605,-2.402,-2.235,-2.084,-1.959,-1.845,-1.725,-1.619,-1.527,-1.435,-1.342,-1.258,-1.178,-1.101,-1.028,-0.959,-0.891,-0.828,-0.764,-0.697,-0.636,-0.577,-0.518,-0.458,-0.403,-0.345,-0.290,-0.237,-0.187,-0.138,-0.083,-0.032,+0.020,+0.070,+0.121,+0.170,+0.220,+0.267,+0.317,+0.368,+0.414,+0.459,+0.506,+0.554,+0.599,+0.644,+0.691,+0.741,+0.789,+0.834,+0.881,+0.930,+0.981,+1.029,+1.076,+1.125,+1.170,+1.218,+1.271,+1.321,+1.368,+1.417,+1.469,+1.517,+1.572,+1.623,+1.679,+1.733,+1.788,+1.845,+1.898,+1.960,+2.020,+2.080,+2.141,+2.209,+2.276,+2.345,+2.415,+2.486,+2.568,+2.652,+2.735,+2.818,+2.908,+2.998,+3.102,+3.223,+3.351,+3.482,+3.634,+3.796,+4.004,+4.259,+4.575,+5.112,+5.602,+6.165, +6.633, +6.940, +7.566, +8.052, +8.535, +9.162, +8.908}},
	{ "DC6-9x1Bytes-1", 1ull << (28 - 10), 16384, 0, {-7.028,-7.013,-6.969,-6.390,-5.983,-5.551,-5.189,-4.740,-4.158,-3.648,-3.114,-2.779,-2.542,-2.329,-2.183,-2.036,-1.921,-1.789,-1.678,-1.576,-1.471,-1.376,-1.295,-1.216,-1.127,-1.059,-0.989,-0.925,-0.854,-0.799,-0.744,-0.678,-0.606,-0.538,-0.484,-0.422,-0.364,-0.315,-0.262,-0.206,-0.153,-0.106,-0.052,-0.007,+0.043,+0.093,+0.138,+0.187,+0.238,+0.281,+0.332,+0.378,+0.420,+0.461,+0.505,+0.552,+0.600,+0.644,+0.693,+0.738,+0.785,+0.837,+0.884,+0.929,+0.974,+1.023,+1.081,+1.130,+1.178,+1.230,+1.282,+1.335,+1.386,+1.438,+1.494,+1.542,+1.595,+1.651,+1.704,+1.764,+1.815,+1.870,+1.923,+1.982,+2.047,+2.109,+2.161,+2.234,+2.300,+2.376,+2.445,+2.510,+2.581,+2.658,+2.751,+2.826,+2.927,+3.014,+3.115,+3.222,+3.335,+3.471,+3.615,+3.773,+3.997,+4.269,+4.614,+5.188,+5.640,+6.234, +6.521, +6.816, +7.243, +7.412, +7.523, +7.539, +7.545}},
	{ "DC6-9x1Bytes-1", 1ull << (29 - 10), 16384, 0, {-7.536,-7.368,-6.863,-6.384,-5.658,-5.440,-5.101,-4.695,-4.102,-3.692,-3.176,-2.900,-2.620,-2.414,-2.257,-2.131,-2.007,-1.893,-1.776,-1.669,-1.578,-1.499,-1.415,-1.330,-1.260,-1.177,-1.104,-1.032,-0.956,-0.897,-0.833,-0.773,-0.708,-0.641,-0.591,-0.542,-0.485,-0.427,-0.375,-0.322,-0.265,-0.208,-0.159,-0.108,-0.054,-0.004,+0.041,+0.089,+0.139,+0.183,+0.241,+0.289,+0.338,+0.389,+0.435,+0.486,+0.535,+0.584,+0.631,+0.676,+0.714,+0.756,+0.797,+0.847,+0.893,+0.934,+0.984,+1.039,+1.086,+1.132,+1.180,+1.237,+1.287,+1.341,+1.393,+1.445,+1.494,+1.547,+1.603,+1.658,+1.716,+1.774,+1.836,+1.894,+1.945,+2.011,+2.076,+2.135,+2.187,+2.255,+2.322,+2.394,+2.472,+2.549,+2.633,+2.717,+2.814,+2.901,+3.004,+3.119,+3.248,+3.393,+3.547,+3.726,+3.942,+4.190,+4.532,+5.045,+5.512,+6.024, +6.377, +6.849, +7.196, +7.322, +7.485, +7.531, +7.546}},
	{ "DC6-9x1Bytes-1", 1ull << (30 - 10), 16384, 0, {-5.738,-5.729,-5.702,-5.561,-5.470,-5.253,-5.024,-4.732,-4.172,-3.742,-3.245,-2.929,-2.689,-2.535,-2.370,-2.230,-2.099,-1.969,-1.853,-1.752,-1.662,-1.569,-1.488,-1.407,-1.331,-1.264,-1.194,-1.127,-1.057,-0.986,-0.926,-0.861,-0.809,-0.743,-0.694,-0.628,-0.578,-0.524,-0.468,-0.414,-0.357,-0.297,-0.237,-0.186,-0.141,-0.092,-0.040,+0.005,+0.050,+0.099,+0.147,+0.196,+0.242,+0.288,+0.332,+0.373,+0.415,+0.459,+0.506,+0.555,+0.600,+0.650,+0.696,+0.748,+0.800,+0.852,+0.901,+0.946,+0.991,+1.037,+1.086,+1.137,+1.182,+1.238,+1.290,+1.339,+1.395,+1.447,+1.503,+1.555,+1.612,+1.663,+1.721,+1.784,+1.853,+1.908,+1.973,+2.036,+2.105,+2.174,+2.249,+2.319,+2.389,+2.463,+2.538,+2.634,+2.733,+2.834,+2.933,+3.039,+3.169,+3.304,+3.471,+3.636,+3.815,+4.056,+4.362,+4.944,+5.363,+5.906, +6.297, +6.612, +7.147, +7.876, +8.672, +8.894, +8.969}},//30
	{ "DC6-9x1Bytes-1", 1ull << (31 - 10),  8192, 0, {-6.474,-6.458,-6.408,-6.325,-6.275,-5.727,-5.234,-4.655,-4.345,-3.802,-3.202,-2.938,-2.693,-2.485,-2.353,-2.198,-2.069,-1.961,-1.858,-1.761,-1.677,-1.593,-1.493,-1.428,-1.351,-1.278,-1.201,-1.139,-1.063,-1.007,-0.938,-0.876,-0.819,-0.761,-0.699,-0.642,-0.586,-0.537,-0.485,-0.434,-0.385,-0.342,-0.293,-0.239,-0.187,-0.133,-0.082,-0.034,+0.017,+0.063,+0.110,+0.156,+0.203,+0.243,+0.287,+0.329,+0.373,+0.423,+0.470,+0.523,+0.567,+0.615,+0.663,+0.716,+0.763,+0.808,+0.852,+0.902,+0.941,+0.982,+1.020,+1.072,+1.110,+1.171,+1.221,+1.281,+1.341,+1.401,+1.462,+1.514,+1.570,+1.623,+1.675,+1.735,+1.787,+1.846,+1.912,+1.973,+2.048,+2.118,+2.181,+2.254,+2.339,+2.418,+2.503,+2.592,+2.714,+2.811,+2.903,+3.016,+3.136,+3.248,+3.394,+3.568,+3.743,+4.001,+4.314,+4.807,+5.193,+5.689, +6.296, +6.473, +6.925, +8.262, +9.657,+10.494,+10.773}},
	{ "DC6-9x1Bytes-1", 1ull << (32 - 10),  8192, 0, {-6.438,-6.410,-6.323,-6.178,-5.805,-5.443,-5.181,-4.998,-4.198,-3.753,-3.302,-3.041,-2.808,-2.622,-2.451,-2.319,-2.178,-2.056,-1.963,-1.852,-1.763,-1.677,-1.585,-1.490,-1.421,-1.348,-1.276,-1.203,-1.145,-1.076,-1.013,-0.956,-0.900,-0.852,-0.789,-0.728,-0.674,-0.617,-0.574,-0.530,-0.474,-0.419,-0.377,-0.337,-0.284,-0.232,-0.191,-0.142,-0.091,-0.035,+0.009,+0.055,+0.113,+0.158,+0.204,+0.251,+0.296,+0.333,+0.389,+0.438,+0.480,+0.531,+0.577,+0.636,+0.689,+0.736,+0.781,+0.832,+0.883,+0.927,+0.979,+1.028,+1.072,+1.123,+1.172,+1.210,+1.258,+1.307,+1.365,+1.423,+1.475,+1.524,+1.578,+1.631,+1.686,+1.739,+1.801,+1.853,+1.907,+1.987,+2.053,+2.125,+2.191,+2.263,+2.349,+2.434,+2.531,+2.632,+2.741,+2.851,+2.979,+3.118,+3.259,+3.397,+3.617,+3.863,+4.244,+4.704,+5.164,+5.604, +6.069, +6.527, +6.778, +6.982, +7.256, +7.421, +7.476}},
	{ "DC6-9x1Bytes-1", 1ull << (33 - 10),  8192, 0, {-6.517,-6.496,-6.432,-6.325,-6.234,-5.919,-5.536,-5.037,-4.329,-3.849,-3.435,-3.098,-2.841,-2.655,-2.484,-2.341,-2.213,-2.113,-2.009,-1.903,-1.808,-1.717,-1.634,-1.557,-1.480,-1.413,-1.335,-1.259,-1.202,-1.133,-1.074,-1.007,-0.949,-0.891,-0.838,-0.779,-0.733,-0.678,-0.621,-0.572,-0.515,-0.469,-0.418,-0.361,-0.312,-0.266,-0.214,-0.176,-0.129,-0.090,-0.038,+0.009,+0.062,+0.096,+0.137,+0.172,+0.223,+0.284,+0.331,+0.369,+0.414,+0.460,+0.502,+0.546,+0.585,+0.643,+0.690,+0.738,+0.781,+0.818,+0.870,+0.926,+0.974,+1.021,+1.075,+1.126,+1.176,+1.235,+1.291,+1.337,+1.383,+1.439,+1.499,+1.560,+1.621,+1.688,+1.756,+1.819,+1.880,+1.940,+2.006,+2.072,+2.133,+2.208,+2.296,+2.375,+2.465,+2.574,+2.678,+2.782,+2.881,+3.024,+3.178,+3.333,+3.530,+3.793,+4.082,+4.796,+5.388,+5.910, +6.175, +6.477, +6.951, +7.286, +7.534, +7.682, +7.732}},
	{"DC6-9x1Bytes-1",           16777216,  4096, 0, {-7.644,-7.644,-7.644,-7.644,-7.215,-6.010,-5.377,-5.090,-4.404,-4.090,-3.591,-3.213,-2.983,-2.810,-2.654,-2.513,-2.373,-2.250,-2.141,-2.044,-1.945,-1.836,-1.761,-1.676,-1.609,-1.539,-1.472,-1.391,-1.329,-1.278,-1.204,-1.149,-1.084,-1.041,-0.992,-0.952,-0.898,-0.851,-0.797,-0.753,-0.706,-0.661,-0.610,-0.553,-0.498,-0.445,-0.401,-0.355,-0.313,-0.271,-0.228,-0.156,-0.115,-0.058,-0.004,+0.049,+0.100,+0.141,+0.181,+0.214,+0.261,+0.304,+0.343,+0.389,+0.425,+0.474,+0.537,+0.581,+0.634,+0.678,+0.731,+0.784,+0.829,+0.862,+0.913,+0.973,+1.012,+1.060,+1.107,+1.152,+1.208,+1.272,+1.331,+1.384,+1.452,+1.514,+1.585,+1.642,+1.697,+1.771,+1.845,+1.909,+1.983,+2.072,+2.164,+2.244,+2.337,+2.458,+2.577,+2.678,+2.803,+2.937,+3.036,+3.146,+3.363,+3.538,+3.919,+4.374,+4.723,+5.392, +6.098, +6.340, +6.858, +7.036, +7.036, +7.036, +7.036},  +0.174,  +0.181,   1.819},
	//{ "DC6-9x1Bytes-1",1ull << (34 - 10), 1024, 0, {-4.779,-4.779,-4.779,-4.779,-4.779,-4.772,-4.481,-4.131,-3.831,-3.441,-3.150,-2.868,-2.693,-2.547,-2.427,-2.319,-2.255,-2.177,-2.073,-1.958,-1.871,-1.753,-1.691,-1.617,-1.567,-1.518,-1.445,-1.366,-1.318,-1.271,-1.227,-1.169,-1.106,-1.052,-1.025,-0.961,-0.891,-0.824,-0.787,-0.745,-0.707,-0.659,-0.591,-0.548,-0.488,-0.443,-0.401,-0.337,-0.316,-0.252,-0.195,-0.152,-0.110,-0.062,-0.039,+0.026,+0.082,+0.133,+0.191,+0.230,+0.262,+0.297,+0.333,+0.365,+0.425,+0.461,+0.501,+0.564,+0.601,+0.627,+0.663,+0.715,+0.744,+0.789,+0.851,+0.898,+0.966,+1.017,+1.070,+1.116,+1.194,+1.239,+1.288,+1.363,+1.418,+1.472,+1.505,+1.569,+1.624,+1.696,+1.760,+1.843,+1.934,+2.016,+2.075,+2.159,+2.214,+2.309,+2.416,+2.560,+2.646,+2.777,+3.043,+3.215,+3.361,+3.531,+3.833,+4.392,+4.596,+5.589, +7.665, +9.704, +9.752, +9.752, +9.752, +9.752, +9.752}},
	{ "DC6-9x1Bytes-1", 1ull << (35 - 10),  1024, 0, {-4.748,-4.748,-4.748,-4.748,-4.748,-4.744,-4.613,-4.342,-4.087,-3.796,-3.469,-3.163,-2.901,-2.786,-2.659,-2.540,-2.434,-2.268,-2.174,-2.054,-1.940,-1.864,-1.752,-1.670,-1.579,-1.490,-1.407,-1.367,-1.318,-1.261,-1.217,-1.162,-1.130,-1.093,-0.992,-0.924,-0.854,-0.817,-0.783,-0.731,-0.649,-0.614,-0.541,-0.500,-0.472,-0.419,-0.390,-0.313,-0.237,-0.202,-0.156,-0.121,-0.085,-0.059,-0.013,+0.030,+0.076,+0.140,+0.197,+0.231,+0.262,+0.329,+0.378,+0.423,+0.483,+0.516,+0.568,+0.620,+0.680,+0.733,+0.770,+0.797,+0.861,+0.885,+0.927,+0.971,+1.034,+1.079,+1.134,+1.204,+1.254,+1.324,+1.360,+1.398,+1.450,+1.471,+1.568,+1.634,+1.709,+1.757,+1.821,+1.861,+1.927,+2.000,+2.090,+2.192,+2.278,+2.387,+2.500,+2.611,+2.741,+2.839,+2.944,+3.076,+3.189,+3.539,+4.000,+4.710,+5.087,+5.819, +6.319, +6.418, +6.420, +6.420, +6.420, +6.420, +6.420}},//35
	{ "DC6-9x1Bytes-1", 1ull << (36 - 10),  1024, 0, {-7.017,-7.017,-7.017,-7.017,-7.017,-7.001,-6.315,-5.629,-4.490,-3.942,-3.588,-3.294,-3.090,-2.867,-2.760,-2.587,-2.455,-2.353,-2.278,-2.158,-2.080,-1.980,-1.867,-1.740,-1.654,-1.584,-1.530,-1.470,-1.424,-1.330,-1.262,-1.196,-1.109,-1.052,-0.986,-0.921,-0.895,-0.844,-0.781,-0.717,-0.635,-0.597,-0.550,-0.507,-0.472,-0.406,-0.371,-0.345,-0.295,-0.214,-0.160,-0.108,-0.062,+0.005,+0.062,+0.123,+0.167,+0.200,+0.253,+0.294,+0.338,+0.389,+0.427,+0.478,+0.512,+0.574,+0.629,+0.671,+0.726,+0.762,+0.819,+0.849,+0.884,+0.913,+0.960,+1.021,+1.092,+1.138,+1.172,+1.222,+1.276,+1.353,+1.397,+1.487,+1.543,+1.621,+1.685,+1.715,+1.812,+1.925,+1.973,+2.015,+2.091,+2.176,+2.240,+2.322,+2.379,+2.462,+2.534,+2.630,+2.772,+2.961,+3.168,+3.349,+3.641,+3.849,+4.097,+4.718,+4.987,+5.349, +7.122, +8.778, +8.817, +8.817, +8.817, +8.817, +8.817}},
	/*
{"DC6-9x1Bytes-1",     1, 2048, 0, { -3.770, -3.770, -3.770, -3.770, -3.770, -3.682, -3.599, -3.510, -3.372, -3.202, -2.971, -2.736, -2.566, -2.450, -2.334, -2.272, -2.179, -2.093, -2.017, -1.973, -1.925, -1.847, -1.777, -1.728, -1.647, -1.597, -1.523, -1.468, -1.409, -1.353, -1.293, -1.239, -1.195, -1.143, -1.100, -1.061, -1.007, -0.962, -0.921, -0.875, -0.838, -0.770, -0.717, -0.665, -0.639, -0.600, -0.561, -0.521, -0.474, -0.426, -0.388, -0.331, -0.283, -0.224, -0.179, -0.111, -0.056, +0.000, +0.058, +0.125, +0.166, +0.214, +0.284, +0.329, +0.382, +0.426, +0.477, +0.530, +0.591, +0.626, +0.690, +0.735, +0.793, +0.851, +0.920, +0.965, +0.998, +1.072, +1.122, +1.181, +1.261, +1.303, +1.381, +1.468, +1.550, +1.658, +1.720, +1.812, +1.899, +1.990, +2.077, +2.174, +2.315, +2.414, +2.557, +2.676, +2.753, +3.012, +3.118, +3.253, +3.448, +3.693, +3.934, +4.186, +4.433, +4.748, +5.387, +6.211, +7.016, +7.941, +8.315, +8.713, +8.897, +8.897, +8.897, +8.897, +8.897},  +0.325,  +0.058,   2.034},
{"DC6-9x1Bytes-1",     2, 2048, 0, { -4.510, -4.510, -4.510, -4.510, -4.510, -4.335, -4.157, -4.035, -3.680, -3.366, -3.070, -2.837, -2.631, -2.535, -2.429, -2.296, -2.192, -2.113, -2.016, -1.940, -1.881, -1.806, -1.749, -1.689, -1.647, -1.595, -1.516, -1.466, -1.400, -1.358, -1.311, -1.265, -1.213, -1.160, -1.095, -1.056, -1.015, -0.963, -0.916, -0.847, -0.784, -0.722, -0.673, -0.628, -0.575, -0.544, -0.489, -0.452, -0.386, -0.349, -0.302, -0.247, -0.210, -0.172, -0.125, -0.064, -0.021, +0.035, +0.074, +0.116, +0.152, +0.199, +0.273, +0.318, +0.390, +0.437, +0.491, +0.557, +0.602, +0.651, +0.719, +0.768, +0.827, +0.882, +0.934, +0.998, +1.048, +1.100, +1.161, +1.236, +1.332, +1.396, +1.468, +1.555, +1.633, +1.750, +1.821, +1.935, +2.015, +2.122, +2.211, +2.332, +2.439, +2.545, +2.716, +2.841, +2.930, +3.069, +3.222, +3.372, +3.542, +3.782, +3.994, +4.171, +4.588, +4.852, +5.336, +6.305, +7.727, +9.672, +9.930,+10.372,+10.793,+10.793,+10.793,+10.793,+10.793},  +0.368,  +0.074,   2.110},
{"DC6-9x1Bytes-1",     3, 2048, 0, { -4.423, -4.423, -4.423, -4.423, -4.423, -4.400, -4.377, -4.153, -3.793, -3.452, -3.202, -2.942, -2.784, -2.591, -2.451, -2.340, -2.244, -2.189, -2.099, -2.026, -1.920, -1.858, -1.790, -1.749, -1.699, -1.649, -1.576, -1.534, -1.468, -1.402, -1.343, -1.313, -1.262, -1.213, -1.167, -1.116, -1.055, -0.990, -0.918, -0.875, -0.796, -0.758, -0.714, -0.668, -0.607, -0.557, -0.520, -0.463, -0.414, -0.367, -0.306, -0.261, -0.227, -0.162, -0.108, -0.064, -0.027, +0.024, +0.087, +0.128, +0.178, +0.227, +0.284, +0.332, +0.399, +0.447, +0.508, +0.564, +0.613, +0.681, +0.740, +0.776, +0.816, +0.870, +0.927, +0.997, +1.059, +1.123, +1.187, +1.260, +1.321, +1.380, +1.443, +1.525, +1.620, +1.705, +1.779, +1.860, +1.952, +2.029, +2.092, +2.227, +2.315, +2.438, +2.538, +2.676, +2.782, +2.870, +2.997, +3.120, +3.298, +3.538, +3.768, +3.972, +4.315, +4.715, +5.511, +6.236, +6.856, +8.204, +8.428, +8.470, +8.498, +8.498, +8.498, +8.498, +8.498},  +0.309,  +0.087,   2.056},
{"DC6-9x1Bytes-1",     4, 2048, 0, { -5.357, -5.357, -5.357, -5.357, -5.357, -5.206, -4.895, -4.435, -4.111, -3.780, -3.388, -3.107, -2.878, -2.733, -2.636, -2.483, -2.399, -2.280, -2.204, -2.148, -2.079, -1.959, -1.829, -1.768, -1.717, -1.644, -1.545, -1.488, -1.427, -1.361, -1.316, -1.275, -1.214, -1.172, -1.078, -1.020, -0.977, -0.913, -0.871, -0.833, -0.765, -0.718, -0.665, -0.634, -0.588, -0.552, -0.500, -0.462, -0.416, -0.354, -0.317, -0.256, -0.193, -0.147, -0.079, -0.029, +0.033, +0.087, +0.138, +0.197, +0.255, +0.324, +0.365, +0.406, +0.477, +0.534, +0.591, +0.655, +0.702, +0.742, +0.777, +0.829, +0.892, +0.929, +0.998, +1.069, +1.118, +1.187, +1.246, +1.316, +1.375, +1.435, +1.514, +1.574, +1.655, +1.751, +1.822, +1.918, +1.984, +2.071, +2.159, +2.280, +2.396, +2.480, +2.596, +2.789, +2.907, +3.036, +3.207, +3.376, +3.543, +3.702, +3.941, +4.265, +4.591, +4.903, +5.378, +6.116, +6.589, +7.229, +7.394, +7.607, +7.840, +7.840, +7.840, +7.840, +7.840},  +0.339,  +0.138,   2.110},
{"DC6-9x1Bytes-1",     5, 2048, 0, { -5.405, -5.405, -5.405, -5.405, -5.405, -5.088, -4.716, -4.408, -4.172, -3.898, -3.528, -3.232, -2.995, -2.846, -2.665, -2.538, -2.427, -2.335, -2.231, -2.140, -2.050, -1.973, -1.900, -1.824, -1.753, -1.692, -1.625, -1.538, -1.471, -1.417, -1.346, -1.264, -1.214, -1.142, -1.074, -1.030, -0.986, -0.939, -0.884, -0.812, -0.759, -0.702, -0.640, -0.604, -0.557, -0.512, -0.469, -0.426, -0.387, -0.343, -0.288, -0.228, -0.183, -0.130, -0.075, -0.021, +0.027, +0.068, +0.118, +0.160, +0.201, +0.248, +0.315, +0.379, +0.421, +0.473, +0.517, +0.562, +0.609, +0.665, +0.722, +0.776, +0.847, +0.902, +0.949, +1.008, +1.052, +1.117, +1.160, +1.208, +1.282, +1.364, +1.429, +1.501, +1.588, +1.665, +1.736, +1.812, +1.914, +2.032, +2.138, +2.219, +2.312, +2.444, +2.583, +2.741, +2.883, +2.975, +3.082, +3.269, +3.464, +3.628, +3.886, +4.138, +4.372, +4.676, +5.204, +6.015, +6.465, +7.115, +7.657, +7.864, +7.937, +7.937, +7.937, +7.937, +7.937},  +0.291,  +0.118,   2.085},
{"DC6-9x1Bytes-1",     6, 2048, 0, { -5.245, -5.245, -5.245, -5.245, -5.245, -5.121, -4.815, -4.496, -4.252, -3.934, -3.434, -3.287, -3.128, -2.967, -2.810, -2.674, -2.573, -2.458, -2.346, -2.268, -2.193, -2.118, -2.053, -1.985, -1.927, -1.850, -1.784, -1.700, -1.599, -1.501, -1.424, -1.376, -1.318, -1.274, -1.219, -1.159, -1.087, -1.011, -0.952, -0.900, -0.826, -0.744, -0.697, -0.649, -0.608, -0.566, -0.501, -0.430, -0.368, -0.324, -0.265, -0.207, -0.172, -0.110, -0.064, -0.020, +0.034, +0.078, +0.125, +0.163, +0.203, +0.277, +0.347, +0.384, +0.452, +0.500, +0.560, +0.611, +0.659, +0.738, +0.799, +0.862, +0.926, +0.977, +1.027, +1.095, +1.159, +1.228, +1.305, +1.368, +1.461, +1.520, +1.591, +1.698, +1.769, +1.840, +1.919, +2.004, +2.082, +2.137, +2.214, +2.297, +2.380, +2.507, +2.594, +2.684, +2.806, +2.968, +3.134, +3.228, +3.371, +3.532, +3.692, +3.853, +4.070, +4.489, +5.099, +5.889, +6.249, +6.841, +7.220, +7.336, +7.422, +7.422, +7.422, +7.422, +7.422},  +0.268,  +0.125,   2.106},
{"DC6-9x1Bytes-1",     7, 2048, 0, { -5.054, -5.054, -5.054, -5.054, -5.054, -4.857, -4.446, -4.229, -4.106, -3.887, -3.518, -3.310, -3.116, -2.978, -2.857, -2.710, -2.560, -2.459, -2.362, -2.272, -2.198, -2.108, -2.028, -1.961, -1.916, -1.855, -1.783, -1.711, -1.596, -1.520, -1.457, -1.394, -1.322, -1.275, -1.224, -1.180, -1.123, -1.085, -1.030, -0.976, -0.910, -0.825, -0.787, -0.735, -0.682, -0.623, -0.563, -0.493, -0.439, -0.394, -0.357, -0.312, -0.254, -0.195, -0.144, -0.094, -0.035, +0.008, +0.068, +0.117, +0.158, +0.225, +0.286, +0.341, +0.393, +0.481, +0.536, +0.597, +0.671, +0.729, +0.825, +0.887, +0.951, +0.991, +1.060, +1.100, +1.148, +1.202, +1.265, +1.324, +1.393, +1.468, +1.554, +1.611, +1.682, +1.775, +1.829, +1.925, +2.027, +2.117, +2.181, +2.276, +2.345, +2.480, +2.539, +2.642, +2.780, +2.901, +3.036, +3.203, +3.336, +3.542, +3.742, +4.005, +4.331, +4.721, +5.194, +5.926, +6.503, +7.200, +8.350, +8.529, +8.618, +8.618, +8.618, +8.618, +8.618},  +0.249,  +0.068,   2.132},
{"DC6-9x1Bytes-1",     8, 2048, 0, { -6.054, -6.054, -6.054, -6.054, -6.054, -5.662, -5.246, -5.054, -4.607, -3.952, -3.561, -3.357, -3.067, -2.924, -2.817, -2.712, -2.572, -2.460, -2.351, -2.283, -2.217, -2.134, -2.047, -1.974, -1.886, -1.801, -1.737, -1.666, -1.625, -1.552, -1.492, -1.442, -1.358, -1.310, -1.249, -1.186, -1.130, -1.060, -1.011, -0.953, -0.904, -0.859, -0.816, -0.752, -0.710, -0.633, -0.567, -0.525, -0.447, -0.393, -0.358, -0.315, -0.257, -0.207, -0.158, -0.110, -0.064, -0.002, +0.064, +0.122, +0.168, +0.222, +0.275, +0.338, +0.399, +0.432, +0.510, +0.575, +0.636, +0.676, +0.751, +0.802, +0.849, +0.895, +0.975, +1.039, +1.107, +1.156, +1.232, +1.320, +1.417, +1.514, +1.580, +1.643, +1.731, +1.796, +1.851, +1.960, +2.040, +2.111, +2.202, +2.306, +2.409, +2.500, +2.620, +2.710, +2.849, +2.993, +3.158, +3.252, +3.380, +3.580, +3.757, +4.003, +4.187, +4.425, +4.913, +5.764, +6.590, +7.266, +8.535, +9.130, +9.655, +9.655, +9.655, +9.655, +9.655},  +0.234,  +0.064,   2.136},
{"DC6-9x1Bytes-1",    10, 2048, 0, { -5.391, -5.391, -5.391, -5.391, -5.391, -5.391, -5.302, -5.070, -4.679, -4.102, -3.605, -3.306, -3.185, -2.989, -2.837, -2.720, -2.619, -2.513, -2.376, -2.331, -2.211, -2.121, -2.001, -1.932, -1.872, -1.823, -1.746, -1.688, -1.591, -1.529, -1.439, -1.374, -1.327, -1.251, -1.195, -1.134, -1.074, -1.017, -0.963, -0.922, -0.876, -0.813, -0.760, -0.714, -0.667, -0.598, -0.524, -0.446, -0.396, -0.354, -0.293, -0.253, -0.208, -0.163, -0.090, -0.036, +0.018, +0.078, +0.141, +0.195, +0.241, +0.270, +0.346, +0.423, +0.468, +0.524, +0.560, +0.608, +0.659, +0.714, +0.772, +0.822, +0.868, +0.913, +0.981, +1.037, +1.097, +1.153, +1.228, +1.288, +1.354, +1.410, +1.477, +1.551, +1.614, +1.704, +1.770, +1.842, +1.911, +1.965, +2.083, +2.150, +2.241, +2.345, +2.458, +2.550, +2.625, +2.692, +2.819, +2.970, +3.160, +3.294, +3.524, +3.705, +3.984, +4.250, +4.780, +5.553, +6.221, +6.880, +7.306, +7.840, +8.409, +8.409, +8.409, +8.409, +8.409},  +0.202,  +0.141,   2.064},
{"DC6-9x1Bytes-1",    12, 2048, 0, { -5.345, -5.345, -5.345, -5.345, -5.345, -5.345, -5.330, -4.898, -4.319, -3.999, -3.581, -3.332, -3.089, -2.928, -2.806, -2.674, -2.558, -2.447, -2.371, -2.234, -2.142, -2.053, -1.955, -1.895, -1.838, -1.774, -1.682, -1.624, -1.545, -1.467, -1.418, -1.336, -1.264, -1.206, -1.150, -1.092, -1.036, -0.983, -0.933, -0.865, -0.803, -0.753, -0.709, -0.664, -0.616, -0.546, -0.480, -0.432, -0.388, -0.326, -0.254, -0.214, -0.153, -0.090, -0.039, +0.014, +0.088, +0.136, +0.172, +0.232, +0.291, +0.339, +0.385, +0.423, +0.479, +0.529, +0.575, +0.628, +0.687, +0.727, +0.779, +0.836, +0.890, +0.943, +0.999, +1.064, +1.119, +1.185, +1.245, +1.320, +1.394, +1.454, +1.507, +1.542, +1.582, +1.658, +1.740, +1.811, +1.893, +1.985, +2.050, +2.147, +2.228, +2.316, +2.396, +2.532, +2.641, +2.796, +2.890, +3.043, +3.231, +3.514, +3.683, +3.851, +4.061, +4.406, +4.758, +5.608, +5.851, +6.668, +7.141, +7.292, +7.305, +7.305, +7.305, +7.305, +7.305},  +0.239,  +0.172,   2.048},
{"DC6-9x1Bytes-1",    14, 2048, 0, { -6.694, -6.694, -6.694, -6.694, -6.694, -5.841, -4.940, -4.793, -4.500, -4.290, -3.694, -3.439, -3.185, -2.967, -2.840, -2.691, -2.596, -2.455, -2.348, -2.268, -2.183, -2.071, -1.984, -1.922, -1.874, -1.819, -1.759, -1.667, -1.596, -1.528, -1.470, -1.407, -1.325, -1.268, -1.205, -1.133, -1.069, -1.020, -0.965, -0.915, -0.852, -0.804, -0.743, -0.681, -0.621, -0.544, -0.496, -0.443, -0.405, -0.338, -0.300, -0.231, -0.195, -0.154, -0.111, -0.086, -0.056, +0.022, +0.064, +0.112, +0.153, +0.200, +0.256, +0.295, +0.344, +0.382, +0.452, +0.515, +0.582, +0.641, +0.714, +0.759, +0.841, +0.909, +0.973, +1.041, +1.089, +1.158, +1.233, +1.295, +1.363, +1.480, +1.550, +1.589, +1.642, +1.718, +1.809, +1.894, +2.012, +2.116, +2.187, +2.281, +2.354, +2.463, +2.568, +2.655, +2.765, +2.848, +2.957, +3.105, +3.251, +3.432, +3.571, +3.884, +4.211, +4.489, +4.838, +5.484, +6.093, +6.762, +6.998, +7.200, +7.273, +7.273, +7.273, +7.273, +7.273},  +0.215,  +0.064,   2.089},
{"DC6-9x1Bytes-1",    16, 2048, 0, { -5.140, -5.140, -5.140, -5.140, -5.140, -5.108, -5.078, -4.896, -4.382, -4.044, -3.652, -3.342, -3.160, -2.985, -2.868, -2.738, -2.619, -2.527, -2.408, -2.306, -2.161, -2.092, -2.019, -1.963, -1.868, -1.773, -1.715, -1.646, -1.591, -1.546, -1.478, -1.397, -1.340, -1.272, -1.193, -1.128, -1.073, -1.006, -0.946, -0.894, -0.829, -0.787, -0.727, -0.694, -0.645, -0.584, -0.540, -0.501, -0.459, -0.397, -0.347, -0.313, -0.261, -0.229, -0.170, -0.126, -0.072, -0.011, +0.052, +0.117, +0.156, +0.239, +0.272, +0.304, +0.365, +0.441, +0.489, +0.549, +0.592, +0.653, +0.706, +0.754, +0.791, +0.865, +0.899, +0.953, +1.011, +1.082, +1.130, +1.184, +1.254, +1.331, +1.391, +1.462, +1.534, +1.606, +1.695, +1.784, +1.851, +1.976, +2.071, +2.150, +2.231, +2.352, +2.481, +2.584, +2.682, +2.777, +2.917, +3.089, +3.253, +3.496, +3.630, +3.784, +4.024, +4.355, +4.905, +5.516, +6.108, +6.605, +7.070, +7.596, +7.846, +7.846, +7.846, +7.846, +7.846},  +0.184,  +0.052,   2.065},
{"DC6-9x1Bytes-1",    20, 2048, 0, { -5.270, -5.270, -5.270, -5.270, -5.270, -5.232, -5.192, -5.083, -4.724, -4.190, -3.736, -3.555, -3.327, -3.086, -2.888, -2.812, -2.686, -2.528, -2.415, -2.303, -2.235, -2.144, -2.081, -1.990, -1.885, -1.807, -1.734, -1.669, -1.605, -1.525, -1.448, -1.381, -1.307, -1.265, -1.202, -1.124, -1.084, -1.027, -0.969, -0.911, -0.852, -0.783, -0.714, -0.667, -0.586, -0.534, -0.500, -0.447, -0.401, -0.322, -0.277, -0.228, -0.175, -0.130, -0.070, -0.015, +0.044, +0.098, +0.147, +0.189, +0.248, +0.323, +0.369, +0.416, +0.459, +0.521, +0.576, +0.630, +0.684, +0.721, +0.789, +0.857, +0.915, +0.976, +1.058, +1.117, +1.176, +1.241, +1.314, +1.386, +1.430, +1.502, +1.557, +1.632, +1.661, +1.716, +1.773, +1.843, +1.903, +1.972, +2.041, +2.119, +2.192, +2.330, +2.404, +2.466, +2.548, +2.642, +2.760, +2.886, +3.000, +3.112, +3.287, +3.506, +3.760, +4.025, +4.479, +5.480, +6.044, +6.767, +7.531, +8.325, +9.047, +9.047, +9.047, +9.047, +9.047},  +0.185,  +0.147,   2.045},
{"DC6-9x1Bytes-1",    24, 2048, 0, { -5.791, -5.791, -5.791, -5.791, -5.791, -5.630, -5.318, -5.015, -4.533, -4.067, -3.690, -3.505, -3.241, -3.024, -2.861, -2.730, -2.592, -2.485, -2.380, -2.292, -2.216, -2.128, -2.034, -1.945, -1.812, -1.764, -1.710, -1.609, -1.542, -1.455, -1.400, -1.354, -1.293, -1.230, -1.168, -1.096, -1.045, -0.994, -0.952, -0.904, -0.840, -0.802, -0.731, -0.672, -0.625, -0.572, -0.531, -0.457, -0.399, -0.341, -0.279, -0.225, -0.139, -0.092, -0.044, +0.003, +0.067, +0.104, +0.151, +0.222, +0.272, +0.323, +0.365, +0.427, +0.464, +0.527, +0.571, +0.633, +0.696, +0.750, +0.798, +0.882, +0.934, +0.966, +1.018, +1.065, +1.117, +1.188, +1.249, +1.302, +1.379, +1.422, +1.473, +1.529, +1.593, +1.679, +1.740, +1.804, +1.881, +1.962, +2.067, +2.152, +2.202, +2.268, +2.357, +2.434, +2.534, +2.636, +2.733, +2.831, +2.956, +3.130, +3.327, +3.524, +3.825, +4.209, +4.491, +5.055, +5.852, +6.667, +7.217, +7.921, +8.419, +8.419, +8.419, +8.419, +8.419},  +0.189,  +0.151,   2.017},
{"DC6-9x1Bytes-1",    28, 2048, 0, { -5.779, -5.779, -5.779, -5.779, -5.779, -5.650, -5.470, -5.033, -4.427, -4.076, -3.623, -3.321, -3.144, -3.006, -2.847, -2.719, -2.622, -2.524, -2.411, -2.269, -2.141, -2.079, -2.005, -1.935, -1.853, -1.782, -1.708, -1.633, -1.555, -1.485, -1.408, -1.350, -1.305, -1.245, -1.206, -1.152, -1.091, -1.025, -0.935, -0.879, -0.811, -0.766, -0.710, -0.653, -0.598, -0.552, -0.490, -0.433, -0.390, -0.357, -0.286, -0.245, -0.205, -0.162, -0.105, -0.052, -0.006, +0.058, +0.093, +0.175, +0.232, +0.294, +0.325, +0.384, +0.432, +0.478, +0.522, +0.552, +0.604, +0.662, +0.731, +0.764, +0.816, +0.853, +0.921, +0.982, +1.036, +1.112, +1.163, +1.216, +1.261, +1.337, +1.401, +1.446, +1.520, +1.593, +1.679, +1.730, +1.808, +1.871, +1.947, +2.019, +2.105, +2.204, +2.265, +2.373, +2.466, +2.589, +2.716, +2.847, +2.985, +3.136, +3.316, +3.512, +3.842, +4.074, +4.420, +5.174, +5.651, +6.518, +7.408, +7.786, +8.080, +8.080, +8.080, +8.080, +8.080},  +0.157,  +0.093,   1.987},
{"DC6-9x1Bytes-1",    32, 2048, 0, { -5.818, -5.818, -5.818, -5.818, -5.818, -5.524, -5.117, -4.901, -4.509, -4.169, -3.653, -3.406, -3.204, -2.990, -2.772, -2.659, -2.517, -2.423, -2.296, -2.216, -2.107, -1.996, -1.915, -1.854, -1.772, -1.703, -1.621, -1.528, -1.441, -1.397, -1.311, -1.266, -1.204, -1.159, -1.116, -1.052, -1.002, -0.955, -0.912, -0.855, -0.806, -0.747, -0.710, -0.652, -0.608, -0.560, -0.502, -0.445, -0.408, -0.367, -0.301, -0.255, -0.224, -0.170, -0.146, -0.089, -0.043, +0.001, +0.055, +0.094, +0.157, +0.228, +0.286, +0.316, +0.363, +0.432, +0.473, +0.524, +0.567, +0.615, +0.658, +0.715, +0.774, +0.812, +0.877, +0.939, +1.008, +1.067, +1.129, +1.185, +1.241, +1.299, +1.373, +1.447, +1.518, +1.578, +1.655, +1.706, +1.785, +1.835, +1.896, +1.986, +2.084, +2.158, +2.265, +2.359, +2.485, +2.589, +2.728, +2.828, +2.938, +3.077, +3.278, +3.445, +3.661, +3.942, +4.399, +4.859, +5.304, +5.649, +6.349, +6.639, +6.717, +6.717, +6.717, +6.717, +6.717},  +0.146,  +0.055,   1.938},
{"DC6-9x1Bytes-1",    40, 2048, 0, { -6.058, -6.058, -6.058, -6.058, -6.058, -5.784, -5.481, -5.352, -4.712, -4.295, -3.784, -3.419, -3.214, -2.997, -2.845, -2.654, -2.551, -2.462, -2.365, -2.254, -2.168, -2.069, -1.973, -1.896, -1.785, -1.711, -1.603, -1.554, -1.492, -1.418, -1.374, -1.313, -1.248, -1.212, -1.155, -1.071, -1.020, -0.956, -0.879, -0.819, -0.782, -0.745, -0.686, -0.641, -0.612, -0.543, -0.491, -0.435, -0.379, -0.344, -0.284, -0.229, -0.184, -0.139, -0.101, -0.069, -0.005, +0.036, +0.089, +0.141, +0.202, +0.256, +0.317, +0.376, +0.428, +0.495, +0.552, +0.606, +0.662, +0.695, +0.744, +0.785, +0.842, +0.900, +0.948, +1.017, +1.056, +1.103, +1.154, +1.206, +1.253, +1.327, +1.386, +1.449, +1.506, +1.573, +1.643, +1.701, +1.776, +1.830, +1.887, +1.975, +2.055, +2.174, +2.262, +2.341, +2.463, +2.528, +2.716, +2.849, +2.941, +3.112, +3.351, +3.551, +3.799, +4.086, +4.446, +5.325, +5.815, +6.595, +7.718, +8.942, +9.273, +9.273, +9.273, +9.273, +9.273},  +0.165,  +0.089,   1.998},
{"DC6-9x1Bytes-1",    48, 2048, 0, { -6.319, -6.319, -6.319, -6.319, -6.319, -6.253, -6.123, -5.856, -5.053, -4.004, -3.625, -3.316, -3.140, -3.005, -2.837, -2.696, -2.560, -2.499, -2.402, -2.317, -2.212, -2.098, -2.046, -1.982, -1.899, -1.849, -1.780, -1.719, -1.643, -1.587, -1.510, -1.459, -1.389, -1.338, -1.285, -1.217, -1.127, -1.055, -1.001, -0.952, -0.881, -0.829, -0.774, -0.716, -0.667, -0.621, -0.566, -0.511, -0.462, -0.397, -0.348, -0.273, -0.221, -0.174, -0.133, -0.093, +0.004, +0.043, +0.080, +0.137, +0.171, +0.247, +0.278, +0.338, +0.379, +0.434, +0.483, +0.539, +0.600, +0.637, +0.686, +0.735, +0.789, +0.841, +0.917, +0.958, +1.019, +1.055, +1.139, +1.231, +1.294, +1.353, +1.400, +1.454, +1.519, +1.588, +1.650, +1.703, +1.759, +1.835, +1.924, +1.995, +2.063, +2.130, +2.274, +2.350, +2.466, +2.554, +2.679, +2.866, +3.040, +3.180, +3.441, +3.610, +3.800, +4.049, +4.407, +5.016, +5.611, +6.139, +6.894, +7.108, +7.122, +7.122, +7.122, +7.122, +7.122},  +0.121,  +0.080,   2.001},
{"DC6-9x1Bytes-1",    56, 2048, 0, { -6.358, -6.358, -6.358, -6.358, -6.358, -6.179, -5.981, -5.780, -4.922, -4.400, -3.641, -3.368, -3.220, -3.030, -2.899, -2.791, -2.634, -2.503, -2.426, -2.311, -2.230, -2.137, -2.072, -1.968, -1.866, -1.760, -1.664, -1.614, -1.549, -1.476, -1.422, -1.356, -1.296, -1.238, -1.179, -1.129, -1.067, -1.016, -0.948, -0.911, -0.852, -0.796, -0.754, -0.709, -0.660, -0.609, -0.554, -0.489, -0.437, -0.387, -0.343, -0.282, -0.242, -0.195, -0.137, -0.086, -0.040, +0.014, +0.059, +0.112, +0.157, +0.207, +0.247, +0.294, +0.344, +0.401, +0.452, +0.507, +0.558, +0.613, +0.664, +0.713, +0.753, +0.826, +0.886, +0.958, +1.011, +1.083, +1.125, +1.203, +1.279, +1.350, +1.391, +1.440, +1.483, +1.572, +1.648, +1.723, +1.838, +1.906, +1.967, +2.035, +2.126, +2.222, +2.317, +2.422, +2.545, +2.650, +2.746, +2.886, +2.975, +3.133, +3.267, +3.547, +3.808, +4.054, +4.443, +4.896, +5.313, +5.726, +6.543, +6.922, +7.327, +7.327, +7.327, +7.327, +7.327},  +0.123,  +0.059,   1.998},
{"DC6-9x1Bytes-1",    64, 2048, 0, { -5.310, -5.310, -5.310, -5.310, -5.310, -5.308, -5.240, -5.013, -4.503, -4.093, -3.783, -3.475, -3.126, -3.005, -2.806, -2.691, -2.585, -2.456, -2.361, -2.276, -2.171, -2.103, -2.031, -1.959, -1.887, -1.809, -1.740, -1.652, -1.575, -1.517, -1.447, -1.394, -1.352, -1.280, -1.231, -1.172, -1.117, -1.072, -1.022, -0.971, -0.918, -0.862, -0.802, -0.759, -0.698, -0.656, -0.594, -0.534, -0.486, -0.428, -0.373, -0.323, -0.269, -0.222, -0.152, -0.113, -0.070, -0.016, +0.045, +0.087, +0.135, +0.187, +0.243, +0.280, +0.336, +0.389, +0.454, +0.502, +0.569, +0.616, +0.678, +0.729, +0.799, +0.850, +0.924, +0.977, +1.022, +1.091, +1.149, +1.197, +1.261, +1.362, +1.424, +1.480, +1.550, +1.616, +1.690, +1.776, +1.838, +1.912, +1.966, +2.059, +2.135, +2.222, +2.284, +2.396, +2.527, +2.634, +2.742, +2.871, +2.968, +3.151, +3.264, +3.412, +3.735, +4.091, +4.448, +5.189, +5.678, +6.216, +6.365, +6.758, +7.162, +7.162, +7.162, +7.162, +7.162},  +0.124,  +0.045,   1.994},
{"DC6-9x1Bytes-1",    80, 2048, 0, { -6.222, -6.222, -6.222, -6.222, -6.222, -5.854, -5.429, -5.337, -4.848, -4.113, -3.786, -3.533, -3.276, -3.125, -2.879, -2.708, -2.592, -2.469, -2.360, -2.266, -2.191, -2.096, -1.970, -1.915, -1.851, -1.795, -1.740, -1.634, -1.558, -1.501, -1.438, -1.360, -1.303, -1.262, -1.204, -1.134, -1.069, -1.015, -0.962, -0.892, -0.832, -0.783, -0.713, -0.653, -0.600, -0.555, -0.492, -0.441, -0.391, -0.348, -0.305, -0.276, -0.239, -0.155, -0.112, -0.038, +0.009, +0.053, +0.101, +0.139, +0.222, +0.281, +0.330, +0.380, +0.437, +0.494, +0.559, +0.617, +0.655, +0.727, +0.773, +0.824, +0.887, +0.932, +0.995, +1.046, +1.107, +1.167, +1.210, +1.272, +1.314, +1.369, +1.438, +1.527, +1.602, +1.644, +1.725, +1.794, +1.915, +2.023, +2.133, +2.220, +2.309, +2.370, +2.481, +2.566, +2.689, +2.778, +2.907, +3.041, +3.168, +3.276, +3.400, +3.665, +3.908, +4.328, +4.541, +5.096, +5.627, +6.690, +7.386, +7.667, +7.789, +7.789, +7.789, +7.789, +7.789},  +0.191,  +0.101,   2.053},
{"DC6-9x1Bytes-1",    96, 2048, 0, { -6.295, -6.295, -6.295, -6.295, -6.295, -6.293, -6.253, -5.933, -5.059, -4.453, -3.839, -3.511, -3.321, -3.073, -2.955, -2.787, -2.639, -2.463, -2.346, -2.192, -2.113, -2.074, -1.958, -1.875, -1.794, -1.721, -1.652, -1.565, -1.485, -1.417, -1.365, -1.316, -1.245, -1.185, -1.139, -1.084, -1.010, -0.928, -0.892, -0.845, -0.788, -0.747, -0.647, -0.573, -0.536, -0.486, -0.420, -0.369, -0.321, -0.274, -0.235, -0.182, -0.118, -0.062, -0.002, +0.038, +0.099, +0.137, +0.175, +0.230, +0.281, +0.325, +0.367, +0.431, +0.476, +0.531, +0.596, +0.637, +0.700, +0.746, +0.793, +0.876, +0.936, +0.984, +1.032, +1.078, +1.148, +1.208, +1.281, +1.322, +1.396, +1.460, +1.510, +1.561, +1.618, +1.694, +1.760, +1.821, +1.882, +1.983, +2.075, +2.159, +2.256, +2.341, +2.452, +2.532, +2.703, +2.799, +2.933, +3.091, +3.233, +3.403, +3.525, +3.705, +3.919, +4.284, +4.733, +5.124, +5.850, +6.440, +7.391, +8.527, +9.335, +9.335, +9.335, +9.335, +9.335},  +0.228,  +0.175,   2.076},
{"DC6-9x1Bytes-1",   112, 2048, 0, { -5.695, -5.695, -5.695, -5.695, -5.695, -5.567, -5.236, -4.940, -4.499, -4.231, -3.764, -3.416, -3.195, -3.012, -2.860, -2.693, -2.565, -2.432, -2.352, -2.232, -2.121, -2.030, -1.962, -1.859, -1.802, -1.703, -1.641, -1.565, -1.475, -1.419, -1.345, -1.255, -1.199, -1.119, -1.057, -1.003, -0.964, -0.904, -0.838, -0.767, -0.709, -0.645, -0.582, -0.524, -0.483, -0.403, -0.364, -0.315, -0.253, -0.184, -0.142, -0.099, -0.044, +0.003, +0.068, +0.105, +0.150, +0.199, +0.245, +0.283, +0.305, +0.358, +0.425, +0.463, +0.515, +0.582, +0.627, +0.686, +0.743, +0.796, +0.856, +0.903, +0.967, +1.034, +1.065, +1.121, +1.172, +1.234, +1.286, +1.354, +1.435, +1.488, +1.557, +1.613, +1.705, +1.782, +1.867, +1.952, +2.034, +2.127, +2.195, +2.299, +2.371, +2.455, +2.557, +2.679, +2.774, +2.835, +2.935, +3.035, +3.202, +3.326, +3.540, +3.756, +3.931, +4.197, +4.520, +5.483, +6.071, +6.380, +6.807, +7.130, +7.355, +7.355, +7.355, +7.355, +7.355},  +0.284,  +0.245,   2.050},
{"DC6-9x1Bytes-1",   128, 2048, 0, { -5.880, -5.880, -5.880, -5.880, -5.880, -5.840, -5.589, -5.301, -4.783, -4.204, -3.800, -3.460, -3.235, -2.982, -2.800, -2.654, -2.567, -2.451, -2.331, -2.233, -2.111, -2.045, -1.905, -1.799, -1.722, -1.657, -1.567, -1.502, -1.427, -1.379, -1.321, -1.274, -1.213, -1.164, -1.083, -1.013, -0.974, -0.917, -0.857, -0.803, -0.741, -0.668, -0.610, -0.548, -0.500, -0.447, -0.410, -0.348, -0.310, -0.269, -0.224, -0.166, -0.117, -0.078, -0.033, +0.035, +0.092, +0.145, +0.202, +0.264, +0.334, +0.387, +0.431, +0.477, +0.519, +0.570, +0.627, +0.685, +0.761, +0.834, +0.905, +0.948, +0.999, +1.055, +1.111, +1.153, +1.222, +1.300, +1.384, +1.452, +1.504, +1.577, +1.654, +1.713, +1.784, +1.858, +1.912, +1.979, +2.039, +2.104, +2.171, +2.255, +2.335, +2.471, +2.555, +2.647, +2.754, +2.816, +2.911, +3.079, +3.223, +3.419, +3.503, +3.636, +3.808, +4.017, +4.408, +5.024, +5.524, +6.239, +6.602, +7.494, +8.261, +8.261, +8.261, +8.261, +8.261},  +0.275,  +0.202,   2.037},
{"DC6-9x1Bytes-1",   160, 2048, 0, { -5.231, -5.231, -5.231, -5.231, -5.231, -5.212, -4.921, -4.638, -4.419, -3.995, -3.524, -3.290, -3.083, -2.906, -2.741, -2.619, -2.491, -2.383, -2.288, -2.189, -2.071, -1.939, -1.871, -1.790, -1.715, -1.651, -1.572, -1.474, -1.383, -1.310, -1.245, -1.183, -1.125, -1.056, -0.989, -0.955, -0.892, -0.850, -0.795, -0.746, -0.689, -0.625, -0.594, -0.553, -0.495, -0.455, -0.396, -0.345, -0.308, -0.252, -0.200, -0.169, -0.123, -0.044, +0.006, +0.045, +0.108, +0.172, +0.212, +0.263, +0.302, +0.363, +0.445, +0.484, +0.537, +0.594, +0.630, +0.674, +0.733, +0.777, +0.829, +0.886, +0.949, +1.006, +1.082, +1.130, +1.212, +1.268, +1.317, +1.381, +1.436, +1.480, +1.563, +1.611, +1.674, +1.753, +1.818, +1.901, +1.969, +2.050, +2.101, +2.235, +2.313, +2.411, +2.492, +2.619, +2.719, +2.822, +2.907, +3.010, +3.146, +3.306, +3.513, +3.707, +3.955, +4.238, +4.556, +5.031, +5.497, +6.176, +6.933, +7.183, +7.317, +7.317, +7.317, +7.317, +7.317},  +0.290,  +0.212,   1.993},
{"DC6-9x1Bytes-1",   192, 2048, 0, { -6.446, -6.446, -6.446, -6.446, -6.446, -6.321, -5.992, -5.350, -4.558, -4.159, -3.701, -3.404, -3.175, -3.012, -2.780, -2.618, -2.490, -2.330, -2.217, -2.130, -2.002, -1.932, -1.835, -1.725, -1.652, -1.571, -1.498, -1.406, -1.332, -1.287, -1.237, -1.150, -1.091, -1.016, -0.950, -0.883, -0.836, -0.762, -0.726, -0.665, -0.609, -0.551, -0.481, -0.420, -0.386, -0.343, -0.270, -0.210, -0.166, -0.108, -0.057, -0.000, +0.035, +0.091, +0.157, +0.215, +0.257, +0.285, +0.332, +0.370, +0.423, +0.452, +0.499, +0.536, +0.580, +0.649, +0.699, +0.728, +0.799, +0.877, +0.937, +0.994, +1.032, +1.084, +1.148, +1.192, +1.245, +1.309, +1.361, +1.410, +1.478, +1.538, +1.594, +1.639, +1.694, +1.756, +1.859, +1.928, +2.019, +2.093, +2.158, +2.249, +2.370, +2.470, +2.577, +2.665, +2.783, +2.872, +2.979, +3.085, +3.211, +3.385, +3.493, +3.602, +3.778, +4.055, +4.497, +4.916, +5.355, +5.722, +6.600, +7.917, +8.396, +8.396, +8.396, +8.396, +8.396},  +0.337,  +0.332,   1.999},
{"DC6-9x1Bytes-1",   224, 2048, 0, { -6.109, -6.109, -6.109, -6.109, -6.109, -5.937, -5.489, -4.701, -4.391, -3.958, -3.529, -3.285, -3.041, -2.881, -2.739, -2.602, -2.462, -2.336, -2.251, -2.121, -2.013, -1.902, -1.809, -1.697, -1.609, -1.538, -1.482, -1.432, -1.378, -1.337, -1.255, -1.189, -1.119, -1.055, -0.996, -0.956, -0.876, -0.831, -0.767, -0.736, -0.675, -0.627, -0.564, -0.492, -0.441, -0.392, -0.330, -0.261, -0.220, -0.165, -0.134, -0.072, -0.026, +0.030, +0.097, +0.149, +0.193, +0.243, +0.289, +0.327, +0.380, +0.433, +0.478, +0.520, +0.558, +0.607, +0.659, +0.723, +0.764, +0.810, +0.870, +0.926, +0.974, +1.036, +1.095, +1.165, +1.212, +1.268, +1.349, +1.408, +1.475, +1.517, +1.577, +1.656, +1.727, +1.798, +1.840, +1.926, +1.994, +2.068, +2.179, +2.246, +2.357, +2.442, +2.522, +2.602, +2.724, +2.906, +3.044, +3.200, +3.277, +3.463, +3.670, +3.820, +3.950, +4.291, +4.632, +4.991, +5.745, +6.212, +7.487, +7.959, +8.041, +8.041, +8.041, +8.041, +8.041},  +0.337,  +0.289,   2.011},
{"DC6-9x1Bytes-1",   256, 2048, 0, { -5.878, -5.878, -5.878, -5.878, -5.878, -5.534, -5.115, -4.890, -4.483, -4.077, -3.554, -3.251, -2.972, -2.853, -2.710, -2.501, -2.373, -2.258, -2.155, -2.061, -1.961, -1.845, -1.757, -1.625, -1.540, -1.477, -1.428, -1.359, -1.299, -1.210, -1.153, -1.096, -1.037, -0.983, -0.925, -0.864, -0.811, -0.762, -0.706, -0.670, -0.604, -0.560, -0.504, -0.447, -0.385, -0.328, -0.282, -0.244, -0.193, -0.123, -0.066, -0.022, +0.029, +0.072, +0.123, +0.180, +0.234, +0.270, +0.323, +0.379, +0.436, +0.493, +0.534, +0.594, +0.643, +0.705, +0.760, +0.822, +0.872, +0.919, +0.977, +1.026, +1.069, +1.120, +1.192, +1.250, +1.295, +1.357, +1.389, +1.458, +1.504, +1.563, +1.622, +1.695, +1.748, +1.794, +1.840, +1.934, +2.001, +2.069, +2.149, +2.220, +2.293, +2.385, +2.526, +2.646, +2.756, +2.878, +2.994, +3.132, +3.292, +3.448, +3.564, +3.729, +3.896, +4.255, +4.654, +5.273, +5.838, +7.043, +7.479, +7.681, +7.713, +7.713, +7.713, +7.713, +7.713},  +0.382,  +0.323,   1.993},
{"DC6-9x1Bytes-1",   320, 2048, 0, { -6.519, -6.519, -6.519, -6.519, -6.519, -6.007, -5.437, -5.214, -4.571, -4.250, -3.583, -3.312, -3.017, -2.762, -2.598, -2.410, -2.292, -2.186, -2.113, -2.021, -1.911, -1.837, -1.762, -1.679, -1.609, -1.519, -1.444, -1.359, -1.276, -1.202, -1.131, -1.066, -1.002, -0.958, -0.925, -0.867, -0.832, -0.772, -0.686, -0.642, -0.588, -0.548, -0.501, -0.438, -0.394, -0.330, -0.276, -0.220, -0.176, -0.124, -0.072, -0.025, +0.018, +0.065, +0.108, +0.154, +0.206, +0.262, +0.315, +0.350, +0.401, +0.448, +0.507, +0.568, +0.624, +0.707, +0.758, +0.807, +0.860, +0.900, +0.958, +1.006, +1.078, +1.149, +1.193, +1.247, +1.284, +1.342, +1.421, +1.472, +1.512, +1.560, +1.621, +1.722, +1.785, +1.853, +1.927, +1.994, +2.067, +2.137, +2.231, +2.310, +2.421, +2.480, +2.545, +2.663, +2.741, +2.847, +2.941, +3.041, +3.202, +3.318, +3.463, +3.638, +3.937, +4.188, +4.706, +5.363, +5.747, +6.219, +6.600, +7.126, +7.691, +7.691, +7.691, +7.691, +7.691},  +0.383,  +0.315,   1.991},
{"DC6-9x1Bytes-1",   384, 2048, 0, { -5.757, -5.757, -5.757, -5.757, -5.757, -5.532, -5.320, -5.041, -4.767, -4.121, -3.602, -3.255, -3.044, -2.798, -2.648, -2.452, -2.328, -2.174, -2.034, -1.912, -1.841, -1.763, -1.665, -1.572, -1.491, -1.382, -1.313, -1.250, -1.177, -1.090, -1.026, -0.973, -0.920, -0.871, -0.837, -0.784, -0.720, -0.652, -0.576, -0.525, -0.478, -0.433, -0.376, -0.332, -0.270, -0.211, -0.143, -0.105, -0.060, -0.017, +0.026, +0.067, +0.096, +0.149, +0.202, +0.234, +0.291, +0.337, +0.391, +0.446, +0.488, +0.526, +0.571, +0.637, +0.679, +0.731, +0.779, +0.827, +0.876, +0.948, +1.009, +1.063, +1.130, +1.182, +1.255, +1.299, +1.383, +1.428, +1.504, +1.553, +1.617, +1.686, +1.750, +1.808, +1.876, +1.930, +2.011, +2.061, +2.120, +2.179, +2.233, +2.328, +2.385, +2.464, +2.527, +2.635, +2.737, +2.891, +2.999, +3.143, +3.313, +3.425, +3.645, +3.841, +4.103, +4.366, +4.719, +5.130, +5.653, +6.198, +6.394, +6.728, +6.925, +6.925, +6.925, +6.925, +6.925},  +0.453,  +0.391,   1.986},
{"DC6-9x1Bytes-1",   448, 2048, 0, { -6.865, -6.865, -6.865, -6.865, -6.865, -6.311, -5.485, -5.165, -4.826, -4.269, -3.702, -3.417, -2.988, -2.766, -2.616, -2.480, -2.381, -2.227, -2.122, -2.019, -1.888, -1.781, -1.671, -1.600, -1.500, -1.417, -1.350, -1.267, -1.203, -1.154, -1.094, -1.022, -0.952, -0.880, -0.818, -0.759, -0.693, -0.619, -0.574, -0.510, -0.439, -0.393, -0.343, -0.299, -0.256, -0.210, -0.150, -0.098, -0.048, +0.007, +0.064, +0.135, +0.188, +0.245, +0.286, +0.344, +0.398, +0.459, +0.489, +0.522, +0.567, +0.633, +0.687, +0.737, +0.780, +0.833, +0.893, +0.938, +1.000, +1.042, +1.122, +1.174, +1.225, +1.270, +1.325, +1.392, +1.456, +1.508, +1.552, +1.604, +1.656, +1.702, +1.763, +1.818, +1.892, +2.005, +2.088, +2.180, +2.230, +2.286, +2.374, +2.431, +2.501, +2.589, +2.689, +2.762, +2.864, +2.922, +3.053, +3.171, +3.322, +3.475, +3.607, +3.898, +4.124, +4.496, +4.883, +5.301, +5.972, +6.327, +7.006, +7.430, +7.743, +7.743, +7.743, +7.743, +7.743},  +0.494,  +0.489,   2.042},
{"DC6-9x1Bytes-1",   512, 2048, 0, { -7.105, -7.105, -7.105, -7.105, -7.105, -6.329, -5.573, -5.272, -4.742, -4.212, -3.640, -3.249, -3.080, -2.758, -2.603, -2.454, -2.279, -2.107, -1.987, -1.881, -1.783, -1.705, -1.633, -1.526, -1.453, -1.380, -1.295, -1.223, -1.124, -1.038, -0.962, -0.907, -0.852, -0.789, -0.742, -0.669, -0.629, -0.549, -0.502, -0.456, -0.405, -0.362, -0.314, -0.254, -0.201, -0.160, -0.120, -0.076, -0.034, +0.009, +0.045, +0.105, +0.172, +0.224, +0.261, +0.311, +0.352, +0.402, +0.452, +0.486, +0.539, +0.612, +0.662, +0.710, +0.762, +0.817, +0.851, +0.910, +0.938, +0.997, +1.042, +1.083, +1.149, +1.221, +1.270, +1.316, +1.377, +1.445, +1.515, +1.568, +1.653, +1.727, +1.786, +1.856, +1.901, +1.966, +2.060, +2.147, +2.221, +2.284, +2.346, +2.414, +2.476, +2.561, +2.682, +2.774, +2.911, +3.050, +3.203, +3.304, +3.432, +3.625, +3.776, +3.926, +4.139, +4.494, +4.856, +5.257, +5.804, +6.315, +6.460, +6.580, +6.701, +6.701, +6.701, +6.701, +6.701},  +0.514,  +0.452,   2.018},
{"DC6-9x1Bytes-1",   640, 2048, 0, { -7.035, -7.035, -7.035, -7.035, -7.035, -6.787, -6.429, -5.884, -4.716, -4.168, -3.650, -3.310, -3.057, -2.831, -2.628, -2.470, -2.382, -2.262, -2.116, -2.001, -1.887, -1.775, -1.699, -1.605, -1.525, -1.428, -1.334, -1.256, -1.157, -1.074, -1.000, -0.886, -0.807, -0.763, -0.731, -0.667, -0.620, -0.562, -0.513, -0.463, -0.396, -0.340, -0.287, -0.214, -0.149, -0.101, -0.052, -0.010, +0.044, +0.099, +0.140, +0.203, +0.241, +0.300, +0.334, +0.382, +0.436, +0.477, +0.534, +0.577, +0.621, +0.677, +0.722, +0.760, +0.812, +0.861, +0.921, +0.972, +1.025, +1.089, +1.134, +1.192, +1.234, +1.301, +1.357, +1.400, +1.445, +1.491, +1.545, +1.613, +1.668, +1.720, +1.792, +1.842, +1.909, +1.965, +2.016, +2.115, +2.177, +2.246, +2.337, +2.406, +2.537, +2.596, +2.699, +2.809, +2.922, +2.991, +3.072, +3.186, +3.350, +3.568, +3.712, +3.903, +4.142, +4.472, +5.047, +5.535, +6.018, +6.636, +7.317, +7.592, +7.777, +7.777, +7.777, +7.777, +7.777},  +0.530,  +0.534,   2.049},
{"DC6-9x1Bytes-1",   768, 2048, 0, { -6.468, -6.468, -6.468, -6.468, -6.468, -6.175, -5.745, -5.102, -4.582, -4.205, -3.498, -3.209, -2.943, -2.753, -2.625, -2.498, -2.372, -2.228, -2.120, -1.991, -1.891, -1.799, -1.664, -1.561, -1.451, -1.390, -1.308, -1.241, -1.168, -1.100, -1.035, -0.980, -0.905, -0.825, -0.757, -0.699, -0.647, -0.581, -0.512, -0.450, -0.403, -0.365, -0.304, -0.257, -0.194, -0.125, -0.085, -0.052, -0.006, +0.056, +0.117, +0.172, +0.206, +0.246, +0.284, +0.329, +0.378, +0.434, +0.513, +0.538, +0.621, +0.659, +0.702, +0.741, +0.802, +0.862, +0.911, +0.966, +1.028, +1.083, +1.154, +1.212, +1.282, +1.344, +1.393, +1.456, +1.492, +1.549, +1.615, +1.679, +1.734, +1.777, +1.834, +1.915, +1.964, +2.037, +2.110, +2.182, +2.239, +2.321, +2.420, +2.482, +2.554, +2.677, +2.759, +2.867, +2.967, +3.055, +3.187, +3.310, +3.429, +3.522, +3.646, +3.825, +4.089, +4.401, +4.816, +5.470, +6.200, +7.322, +7.540, +7.724, +7.824, +7.824, +7.824, +7.824, +7.824},  +0.541,  +0.513,   2.042},
{"DC6-9x1Bytes-1",   896, 2048, 0, { -5.472, -5.472, -5.472, -5.472, -5.472, -5.409, -5.321, -5.214, -5.041, -4.369, -3.631, -3.311, -3.024, -2.743, -2.502, -2.372, -2.243, -2.155, -2.015, -1.901, -1.806, -1.689, -1.616, -1.561, -1.462, -1.392, -1.315, -1.221, -1.173, -1.097, -1.016, -0.957, -0.874, -0.825, -0.764, -0.700, -0.650, -0.592, -0.516, -0.467, -0.404, -0.360, -0.302, -0.218, -0.171, -0.114, -0.055, +0.006, +0.054, +0.094, +0.125, +0.187, +0.248, +0.310, +0.358, +0.394, +0.452, +0.502, +0.568, +0.633, +0.689, +0.732, +0.794, +0.832, +0.892, +0.941, +0.978, +1.032, +1.065, +1.116, +1.181, +1.245, +1.290, +1.319, +1.377, +1.429, +1.477, +1.531, +1.604, +1.656, +1.695, +1.757, +1.816, +1.880, +1.935, +1.992, +2.061, +2.129, +2.191, +2.278, +2.373, +2.468, +2.549, +2.607, +2.686, +2.784, +2.933, +3.031, +3.166, +3.310, +3.473, +3.604, +3.785, +3.964, +4.112, +4.350, +4.599, +5.018, +6.026, +6.640, +6.724, +7.224, +7.717, +7.717, +7.717, +7.717, +7.717},  +0.549,  +0.568,   2.024},
{"DC6-9x1Bytes-1",  1024, 2048, 0, { -6.559, -6.559, -6.559, -6.559, -6.559, -6.157, -5.772, -5.599, -4.870, -4.269, -3.500, -3.173, -2.935, -2.705, -2.499, -2.369, -2.256, -2.110, -2.012, -1.910, -1.805, -1.688, -1.605, -1.510, -1.422, -1.359, -1.280, -1.222, -1.155, -1.064, -0.988, -0.907, -0.811, -0.738, -0.667, -0.595, -0.546, -0.494, -0.438, -0.381, -0.323, -0.271, -0.198, -0.124, -0.092, -0.042, -0.002, +0.056, +0.101, +0.148, +0.215, +0.281, +0.313, +0.375, +0.424, +0.462, +0.508, +0.560, +0.593, +0.645, +0.698, +0.732, +0.773, +0.815, +0.853, +0.898, +0.954, +0.998, +1.052, +1.111, +1.162, +1.196, +1.230, +1.307, +1.353, +1.423, +1.478, +1.547, +1.587, +1.639, +1.710, +1.754, +1.865, +1.902, +1.969, +2.036, +2.126, +2.161, +2.250, +2.343, +2.459, +2.545, +2.620, +2.694, +2.799, +2.872, +2.969, +3.087, +3.158, +3.264, +3.373, +3.510, +3.694, +3.861, +4.149, +4.365, +4.619, +5.139, +5.885, +6.826, +7.454, +7.467, +7.476, +7.476, +7.476, +7.476, +7.476},  +0.580,  +0.593,   2.014},
{"DC6-9x1Bytes-1",  1280, 2048, 0, { -6.281, -6.281, -6.281, -6.281, -6.281, -6.060, -5.565, -5.107, -4.460, -4.090, -3.584, -3.294, -2.984, -2.807, -2.649, -2.418, -2.269, -2.158, -2.018, -1.937, -1.834, -1.752, -1.659, -1.577, -1.496, -1.394, -1.312, -1.225, -1.159, -1.102, -1.047, -0.986, -0.952, -0.883, -0.799, -0.726, -0.683, -0.618, -0.550, -0.491, -0.411, -0.352, -0.311, -0.250, -0.175, -0.123, -0.068, -0.001, +0.070, +0.113, +0.163, +0.222, +0.283, +0.344, +0.395, +0.427, +0.479, +0.528, +0.590, +0.649, +0.707, +0.750, +0.817, +0.882, +0.946, +0.988, +1.031, +1.084, +1.134, +1.190, +1.243, +1.302, +1.347, +1.399, +1.443, +1.503, +1.555, +1.597, +1.654, +1.725, +1.781, +1.833, +1.889, +1.917, +1.976, +2.022, +2.068, +2.125, +2.215, +2.276, +2.354, +2.425, +2.487, +2.587, +2.673, +2.773, +2.893, +3.011, +3.166, +3.281, +3.427, +3.549, +3.658, +3.802, +4.020, +4.353, +4.588, +5.190, +5.704, +6.081, +6.607, +6.847, +7.070, +7.070, +7.070, +7.070, +7.070},  +0.554,  +0.590,   2.016},
{"DC6-9x1Bytes-1",  1536, 2048, 0, { -5.383, -5.383, -5.383, -5.383, -5.383, -5.311, -5.176, -4.987, -4.585, -4.137, -3.533, -3.262, -2.842, -2.630, -2.497, -2.349, -2.163, -2.049, -1.962, -1.860, -1.789, -1.706, -1.619, -1.540, -1.463, -1.409, -1.315, -1.238, -1.180, -1.115, -1.007, -0.916, -0.814, -0.751, -0.697, -0.648, -0.593, -0.549, -0.470, -0.411, -0.374, -0.298, -0.224, -0.185, -0.137, -0.106, -0.044, +0.019, +0.074, +0.138, +0.202, +0.289, +0.328, +0.377, +0.438, +0.491, +0.538, +0.570, +0.630, +0.672, +0.722, +0.769, +0.822, +0.867, +0.917, +0.959, +0.990, +1.018, +1.064, +1.138, +1.204, +1.270, +1.350, +1.417, +1.452, +1.501, +1.565, +1.621, +1.672, +1.728, +1.790, +1.837, +1.909, +1.965, +2.032, +2.092, +2.150, +2.220, +2.293, +2.350, +2.437, +2.543, +2.615, +2.678, +2.789, +2.917, +2.998, +3.089, +3.160, +3.249, +3.418, +3.605, +3.746, +3.898, +4.067, +4.266, +4.694, +5.206, +5.715, +6.340, +6.407, +6.987, +7.621, +7.621, +7.621, +7.621, +7.621},  +0.597,  +0.630,   2.008},
{"DC6-9x1Bytes-1",  1792, 2048, 0, { -5.573, -5.573, -5.573, -5.573, -5.573, -5.391, -5.198, -4.935, -4.365, -3.999, -3.389, -3.052, -2.828, -2.657, -2.481, -2.368, -2.241, -2.134, -2.030, -1.911, -1.770, -1.641, -1.556, -1.494, -1.388, -1.323, -1.257, -1.191, -1.107, -1.049, -0.991, -0.924, -0.845, -0.789, -0.730, -0.682, -0.613, -0.560, -0.513, -0.436, -0.381, -0.316, -0.258, -0.213, -0.169, -0.129, -0.068, -0.020, +0.022, +0.065, +0.126, +0.172, +0.236, +0.287, +0.334, +0.364, +0.410, +0.470, +0.511, +0.572, +0.645, +0.712, +0.749, +0.792, +0.849, +0.911, +0.965, +1.018, +1.062, +1.130, +1.183, +1.232, +1.296, +1.349, +1.408, +1.462, +1.543, +1.592, +1.654, +1.726, +1.768, +1.818, +1.879, +1.944, +1.998, +2.050, +2.102, +2.178, +2.238, +2.285, +2.344, +2.443, +2.508, +2.595, +2.667, +2.741, +2.839, +2.988, +3.068, +3.190, +3.346, +3.529, +3.648, +3.824, +4.055, +4.316, +4.612, +5.021, +5.430, +5.964, +6.531, +6.680, +6.788, +6.788, +6.788, +6.788, +6.788},  +0.560,  +0.511,   1.965},
{"DC6-9x1Bytes-1",  2048, 2048, 0, { -6.657, -6.657, -6.657, -6.657, -6.657, -5.741, -4.831, -4.607, -4.252, -3.810, -3.282, -2.989, -2.821, -2.618, -2.387, -2.184, -2.086, -1.990, -1.887, -1.786, -1.697, -1.601, -1.524, -1.422, -1.344, -1.255, -1.219, -1.124, -1.058, -0.986, -0.924, -0.867, -0.788, -0.736, -0.703, -0.650, -0.594, -0.526, -0.472, -0.398, -0.343, -0.300, -0.246, -0.189, -0.142, -0.090, -0.042, +0.025, +0.068, +0.121, +0.176, +0.233, +0.298, +0.333, +0.390, +0.445, +0.488, +0.538, +0.577, +0.621, +0.695, +0.734, +0.788, +0.845, +0.878, +0.933, +0.973, +1.020, +1.052, +1.102, +1.170, +1.221, +1.270, +1.323, +1.372, +1.410, +1.470, +1.523, +1.573, +1.635, +1.712, +1.761, +1.798, +1.879, +1.934, +1.998, +2.077, +2.165, +2.222, +2.282, +2.394, +2.464, +2.532, +2.615, +2.691, +2.803, +2.925, +3.044, +3.157, +3.305, +3.431, +3.539, +3.674, +3.859, +4.042, +4.236, +4.583, +4.990, +5.427, +6.026, +6.775, +7.791, +8.271, +8.271, +8.271, +8.271, +8.271},  +0.591,  +0.577,   1.942},
{"DC6-9x1Bytes-1",  2560, 2048, 0, { -5.703, -5.703, -5.703, -5.703, -5.703, -5.494, -5.164, -4.794, -4.372, -3.831, -3.196, -2.981, -2.720, -2.554, -2.407, -2.274, -2.142, -2.027, -1.873, -1.793, -1.665, -1.562, -1.479, -1.373, -1.306, -1.244, -1.169, -1.091, -1.050, -0.980, -0.894, -0.839, -0.775, -0.705, -0.649, -0.588, -0.519, -0.468, -0.419, -0.370, -0.326, -0.290, -0.227, -0.186, -0.135, -0.052, +0.014, +0.065, +0.104, +0.155, +0.205, +0.261, +0.317, +0.375, +0.428, +0.482, +0.533, +0.571, +0.630, +0.667, +0.700, +0.755, +0.799, +0.853, +0.893, +0.929, +1.002, +1.046, +1.102, +1.134, +1.189, +1.239, +1.290, +1.328, +1.365, +1.432, +1.485, +1.544, +1.612, +1.680, +1.724, +1.779, +1.819, +1.885, +1.990, +2.084, +2.143, +2.219, +2.279, +2.335, +2.406, +2.506, +2.597, +2.668, +2.757, +2.835, +2.951, +3.025, +3.156, +3.286, +3.467, +3.588, +3.741, +3.917, +4.179, +4.426, +4.736, +5.340, +5.845, +6.183, +6.541, +6.678, +6.753, +6.753, +6.753, +6.753, +6.753},  +0.626,  +0.630,   1.959},
{"DC6-9x1Bytes-1",  3072, 2048, 0, { -6.214, -6.214, -6.214, -6.214, -6.214, -5.919, -5.505, -5.052, -4.402, -4.090, -3.247, -2.994, -2.781, -2.561, -2.377, -2.229, -2.100, -1.968, -1.847, -1.738, -1.639, -1.543, -1.447, -1.375, -1.315, -1.236, -1.177, -1.125, -1.077, -0.976, -0.919, -0.858, -0.789, -0.736, -0.676, -0.589, -0.515, -0.458, -0.392, -0.340, -0.262, -0.215, -0.159, -0.113, -0.043, -0.002, +0.039, +0.078, +0.121, +0.173, +0.212, +0.256, +0.310, +0.359, +0.402, +0.459, +0.560, +0.621, +0.665, +0.712, +0.772, +0.802, +0.846, +0.893, +0.944, +0.984, +1.025, +1.083, +1.142, +1.182, +1.232, +1.269, +1.330, +1.399, +1.455, +1.515, +1.591, +1.648, +1.708, +1.776, +1.841, +1.907, +1.964, +2.032, +2.092, +2.161, +2.202, +2.245, +2.335, +2.423, +2.498, +2.609, +2.690, +2.773, +2.847, +2.922, +2.985, +3.090, +3.220, +3.325, +3.468, +3.619, +3.798, +3.966, +4.159, +4.425, +4.727, +5.090, +5.769, +6.878, +7.292, +8.090, +8.836, +8.836, +8.836, +8.836, +8.836},  +0.661,  +0.665,   1.988},
{"DC6-9x1Bytes-1",  3584, 2048, 0, { -5.036, -5.036, -5.036, -5.036, -5.036, -4.991, -4.813, -4.525, -4.242, -3.843, -3.316, -3.040, -2.777, -2.566, -2.386, -2.202, -2.058, -1.910, -1.791, -1.685, -1.581, -1.496, -1.397, -1.330, -1.253, -1.144, -1.072, -0.959, -0.898, -0.831, -0.783, -0.697, -0.634, -0.567, -0.513, -0.474, -0.432, -0.370, -0.305, -0.236, -0.181, -0.127, -0.082, -0.022, +0.022, +0.071, +0.107, +0.140, +0.183, +0.235, +0.283, +0.325, +0.392, +0.453, +0.500, +0.543, +0.572, +0.623, +0.673, +0.712, +0.752, +0.790, +0.836, +0.893, +0.927, +0.985, +1.031, +1.091, +1.123, +1.172, +1.235, +1.292, +1.342, +1.387, +1.434, +1.493, +1.566, +1.621, +1.674, +1.712, +1.771, +1.825, +1.871, +1.934, +1.993, +2.052, +2.104, +2.166, +2.258, +2.344, +2.451, +2.546, +2.635, +2.701, +2.757, +2.833, +2.940, +3.036, +3.160, +3.255, +3.378, +3.549, +3.796, +3.948, +4.068, +4.221, +4.630, +5.048, +5.533, +6.002, +7.182, +8.323, +8.718, +8.718, +8.718, +8.718, +8.718},  +0.673,  +0.673,   1.924},
{"DC6-9x1Bytes-1",  4096, 2048, 0, { -5.222, -5.222, -5.222, -5.222, -5.222, -5.171, -5.106, -5.012, -4.327, -3.959, -3.388, -2.984, -2.773, -2.546, -2.380, -2.190, -2.085, -1.951, -1.823, -1.722, -1.658, -1.537, -1.464, -1.371, -1.293, -1.208, -1.116, -1.030, -0.963, -0.891, -0.815, -0.773, -0.727, -0.659, -0.612, -0.530, -0.473, -0.388, -0.335, -0.272, -0.210, -0.143, -0.081, -0.039, -0.005, +0.037, +0.095, +0.125, +0.169, +0.207, +0.244, +0.283, +0.331, +0.366, +0.418, +0.458, +0.489, +0.536, +0.579, +0.633, +0.686, +0.741, +0.786, +0.840, +0.893, +0.927, +0.986, +1.023, +1.089, +1.130, +1.186, +1.224, +1.282, +1.335, +1.393, +1.453, +1.521, +1.567, +1.600, +1.684, +1.740, +1.799, +1.835, +1.899, +1.964, +2.031, +2.076, +2.135, +2.203, +2.250, +2.313, +2.381, +2.476, +2.568, +2.663, +2.747, +2.858, +2.972, +3.069, +3.179, +3.340, +3.421, +3.593, +3.785, +4.002, +4.303, +4.541, +5.084, +5.471, +6.465, +7.194, +7.260, +7.276, +7.276, +7.276, +7.276, +7.276},  +0.619,  +0.579,   1.913},
{"DC6-9x1Bytes-1",  5120, 2048, 0, { -5.613, -5.613, -5.613, -5.613, -5.613, -5.365, -5.083, -4.993, -4.436, -3.903, -3.219, -2.826, -2.518, -2.353, -2.217, -2.028, -1.936, -1.802, -1.665, -1.542, -1.464, -1.385, -1.284, -1.208, -1.139, -1.064, -0.981, -0.944, -0.901, -0.829, -0.762, -0.709, -0.640, -0.569, -0.514, -0.469, -0.414, -0.375, -0.323, -0.265, -0.193, -0.125, -0.077, -0.014, +0.051, +0.090, +0.132, +0.182, +0.221, +0.259, +0.327, +0.394, +0.454, +0.507, +0.546, +0.575, +0.639, +0.676, +0.713, +0.757, +0.799, +0.853, +0.898, +0.945, +0.991, +1.054, +1.119, +1.165, +1.212, +1.256, +1.293, +1.334, +1.386, +1.431, +1.493, +1.549, +1.607, +1.631, +1.679, +1.743, +1.795, +1.893, +1.948, +2.020, +2.086, +2.134, +2.195, +2.292, +2.349, +2.424, +2.518, +2.592, +2.663, +2.741, +2.830, +2.898, +2.991, +3.080, +3.184, +3.269, +3.416, +3.561, +3.711, +3.878, +4.084, +4.337, +4.716, +5.318, +5.774, +6.059, +6.559, +6.689, +6.710, +6.710, +6.710, +6.710, +6.710},  +0.728,  +0.713,   1.912},
{"DC6-9x1Bytes-1",  6144, 2048, 0, { -6.609, -6.609, -6.609, -6.609, -6.609, -6.513, -5.696, -4.714, -4.332, -3.811, -3.183, -2.836, -2.661, -2.460, -2.339, -2.168, -2.106, -1.979, -1.838, -1.729, -1.598, -1.476, -1.366, -1.286, -1.226, -1.162, -1.078, -0.996, -0.917, -0.856, -0.806, -0.728, -0.645, -0.589, -0.510, -0.472, -0.419, -0.367, -0.324, -0.262, -0.218, -0.148, -0.094, -0.018, +0.049, +0.106, +0.142, +0.199, +0.238, +0.297, +0.351, +0.399, +0.452, +0.510, +0.571, +0.631, +0.656, +0.700, +0.761, +0.825, +0.875, +0.941, +0.981, +1.005, +1.038, +1.095, +1.150, +1.198, +1.252, +1.308, +1.341, +1.407, +1.449, +1.499, +1.537, +1.595, +1.645, +1.686, +1.742, +1.836, +1.905, +1.972, +2.035, +2.102, +2.155, +2.225, +2.277, +2.341, +2.380, +2.466, +2.520, +2.607, +2.692, +2.735, +2.813, +2.894, +2.988, +3.076, +3.197, +3.274, +3.409, +3.576, +3.768, +3.988, +4.246, +4.441, +4.814, +5.447, +5.907, +6.551, +6.832, +6.904, +6.983, +6.983, +6.983, +6.983, +6.983},  +0.738,  +0.761,   1.963},
{"DC6-9x1Bytes-1",  7168, 2048, 0, { -6.016, -6.016, -6.016, -6.016, -6.016, -5.693, -5.382, -5.169, -4.614, -4.107, -3.426, -3.089, -2.872, -2.596, -2.362, -2.245, -2.104, -1.994, -1.884, -1.781, -1.633, -1.531, -1.410, -1.325, -1.215, -1.149, -1.047, -0.976, -0.914, -0.834, -0.775, -0.719, -0.640, -0.566, -0.517, -0.488, -0.413, -0.357, -0.314, -0.259, -0.217, -0.170, -0.135, -0.085, -0.053, +0.004, +0.057, +0.113, +0.152, +0.222, +0.268, +0.313, +0.366, +0.416, +0.465, +0.525, +0.567, +0.604, +0.657, +0.712, +0.775, +0.822, +0.864, +0.922, +0.980, +1.032, +1.087, +1.149, +1.192, +1.241, +1.304, +1.357, +1.398, +1.448, +1.538, +1.596, +1.648, +1.696, +1.764, +1.828, +1.870, +1.907, +1.978, +2.037, +2.105, +2.172, +2.238, +2.315, +2.378, +2.458, +2.513, +2.578, +2.657, +2.733, +2.828, +2.971, +3.041, +3.153, +3.267, +3.339, +3.481, +3.633, +3.737, +3.952, +4.138, +4.388, +4.874, +5.484, +5.884, +6.461, +6.921, +7.029, +7.111, +7.111, +7.111, +7.111, +7.111},  +0.698,  +0.657,   1.995},
{"DC6-9x1Bytes-1",  8192, 2048, 0, { -5.895, -5.895, -5.895, -5.895, -5.895, -5.739, -5.567, -4.998, -4.303, -3.956, -3.381, -2.942, -2.655, -2.425, -2.228, -2.017, -1.878, -1.765, -1.690, -1.599, -1.509, -1.394, -1.309, -1.228, -1.144, -1.063, -1.001, -0.918, -0.861, -0.808, -0.737, -0.686, -0.611, -0.549, -0.490, -0.433, -0.375, -0.312, -0.242, -0.171, -0.115, -0.067, -0.048, +0.010, +0.066, +0.105, +0.154, +0.200, +0.233, +0.270, +0.319, +0.389, +0.437, +0.492, +0.525, +0.560, +0.603, +0.642, +0.679, +0.738, +0.797, +0.843, +0.889, +0.948, +1.002, +1.046, +1.087, +1.126, +1.169, +1.247, +1.292, +1.334, +1.404, +1.450, +1.489, +1.540, +1.609, +1.661, +1.743, +1.816, +1.886, +1.954, +2.005, +2.071, +2.130, +2.215, +2.286, +2.362, +2.427, +2.496, +2.585, +2.664, +2.776, +2.836, +2.942, +3.006, +3.094, +3.216, +3.329, +3.425, +3.515, +3.616, +3.808, +4.025, +4.261, +4.485, +4.843, +5.252, +5.933, +6.876, +6.943, +7.159, +7.340, +7.340, +7.340, +7.340, +7.340},  +0.757,  +0.679,   1.962},
{"DC6-9x1Bytes-1", 10240, 2048, 0, { -6.208, -6.208, -6.208, -6.208, -6.208, -5.926, -5.571, -5.069, -4.215, -3.833, -3.285, -2.978, -2.702, -2.492, -2.328, -2.163, -2.001, -1.840, -1.731, -1.623, -1.530, -1.456, -1.381, -1.347, -1.255, -1.163, -1.091, -1.016, -0.941, -0.858, -0.793, -0.699, -0.632, -0.557, -0.474, -0.440, -0.399, -0.344, -0.291, -0.234, -0.189, -0.131, -0.083, -0.035, +0.016, +0.078, +0.132, +0.196, +0.246, +0.283, +0.325, +0.389, +0.421, +0.473, +0.533, +0.583, +0.619, +0.657, +0.718, +0.768, +0.801, +0.849, +0.919, +0.953, +0.994, +1.048, +1.095, +1.156, +1.217, +1.271, +1.315, +1.350, +1.427, +1.486, +1.556, +1.608, +1.670, +1.708, +1.753, +1.803, +1.855, +1.899, +1.956, +2.001, +2.049, +2.108, +2.170, +2.245, +2.321, +2.392, +2.467, +2.546, +2.649, +2.711, +2.787, +2.870, +3.012, +3.080, +3.202, +3.317, +3.468, +3.604, +3.750, +3.915, +4.063, +4.367, +4.673, +5.325, +5.782, +6.401, +7.068, +7.559, +7.601, +7.601, +7.601, +7.601, +7.601},  +0.718,  +0.718,   1.944},
{"DC6-9x1Bytes-1", 12288, 2048, 0, { -5.978, -5.978, -5.978, -5.978, -5.978, -5.663, -5.350, -4.631, -4.252, -3.734, -3.212, -2.871, -2.633, -2.435, -2.248, -2.089, -1.927, -1.800, -1.686, -1.593, -1.472, -1.424, -1.321, -1.234, -1.153, -1.061, -0.975, -0.904, -0.852, -0.795, -0.734, -0.669, -0.592, -0.558, -0.480, -0.423, -0.376, -0.318, -0.264, -0.199, -0.152, -0.098, -0.068, -0.015, +0.041, +0.097, +0.166, +0.204, +0.246, +0.292, +0.344, +0.388, +0.440, +0.511, +0.551, +0.600, +0.652, +0.703, +0.734, +0.783, +0.835, +0.873, +0.932, +0.980, +1.024, +1.066, +1.120, +1.163, +1.193, +1.246, +1.303, +1.362, +1.398, +1.462, +1.498, +1.550, +1.608, +1.662, +1.729, +1.805, +1.850, +1.923, +1.983, +2.052, +2.117, +2.159, +2.223, +2.294, +2.380, +2.474, +2.551, +2.619, +2.690, +2.772, +2.868, +2.962, +3.053, +3.118, +3.222, +3.375, +3.517, +3.644, +3.794, +3.959, +4.204, +4.493, +4.747, +5.268, +5.632, +6.670, +7.245, +7.378, +7.494, +7.494, +7.494, +7.494, +7.494},  +0.753,  +0.734,   1.935},
{"DC6-9x1Bytes-1", 14336, 2048, 0, { -6.938, -6.938, -6.938, -6.938, -6.938, -6.257, -5.511, -5.124, -4.607, -3.903, -3.259, -2.868, -2.645, -2.503, -2.314, -2.145, -1.997, -1.849, -1.757, -1.677, -1.553, -1.419, -1.333, -1.279, -1.202, -1.132, -1.074, -1.018, -0.945, -0.887, -0.823, -0.752, -0.709, -0.635, -0.574, -0.504, -0.457, -0.405, -0.352, -0.306, -0.241, -0.186, -0.142, -0.110, -0.062, +0.010, +0.095, +0.149, +0.192, +0.237, +0.288, +0.337, +0.378, +0.430, +0.493, +0.540, +0.584, +0.630, +0.683, +0.713, +0.746, +0.798, +0.841, +0.891, +0.934, +0.978, +1.018, +1.074, +1.161, +1.203, +1.258, +1.309, +1.359, +1.415, +1.461, +1.512, +1.567, +1.602, +1.652, +1.710, +1.793, +1.866, +1.931, +1.977, +2.021, +2.082, +2.144, +2.253, +2.336, +2.404, +2.498, +2.563, +2.654, +2.739, +2.835, +2.935, +3.058, +3.147, +3.248, +3.359, +3.483, +3.591, +3.732, +3.902, +4.111, +4.365, +4.726, +5.274, +5.899, +6.409, +6.877, +7.347, +7.846, +7.846, +7.846, +7.846, +7.846},  +0.690,  +0.683,   1.953},
{"DC6-9x1Bytes-1", 16384, 2048, 0, { -7.891, -7.891, -7.891, -7.891, -7.891, -6.668, -5.544, -5.213, -4.166, -3.638, -3.231, -3.003, -2.692, -2.442, -2.293, -2.136, -1.982, -1.860, -1.776, -1.657, -1.576, -1.464, -1.387, -1.290, -1.190, -1.110, -1.017, -0.958, -0.886, -0.830, -0.771, -0.735, -0.654, -0.589, -0.547, -0.494, -0.401, -0.351, -0.300, -0.242, -0.204, -0.165, -0.111, -0.077, -0.040, +0.012, +0.059, +0.118, +0.168, +0.218, +0.296, +0.351, +0.405, +0.465, +0.511, +0.571, +0.627, +0.696, +0.737, +0.769, +0.812, +0.857, +0.915, +0.950, +0.985, +1.034, +1.086, +1.127, +1.174, +1.219, +1.265, +1.318, +1.375, +1.419, +1.450, +1.513, +1.574, +1.635, +1.679, +1.740, +1.789, +1.861, +1.918, +1.986, +2.060, +2.125, +2.188, +2.260, +2.310, +2.378, +2.440, +2.537, +2.612, +2.692, +2.787, +2.882, +2.999, +3.152, +3.230, +3.344, +3.475, +3.649, +3.782, +3.922, +4.146, +4.422, +4.710, +5.134, +5.697, +7.169, +8.021, +8.325, +8.603, +8.603, +8.603, +8.603, +8.603},  +0.707,  +0.737,   1.948},
{"DC6-9x1Bytes-1", 20480, 2048, 0, { -5.031, -5.031, -5.031, -5.031, -5.031, -5.011, -4.939, -4.664, -4.279, -3.758, -3.320, -2.970, -2.693, -2.492, -2.273, -2.154, -2.048, -1.954, -1.810, -1.694, -1.554, -1.438, -1.347, -1.267, -1.157, -1.095, -1.027, -0.954, -0.885, -0.840, -0.755, -0.694, -0.607, -0.530, -0.481, -0.418, -0.365, -0.324, -0.265, -0.220, -0.162, -0.092, -0.026, +0.019, +0.075, +0.131, +0.195, +0.239, +0.290, +0.357, +0.412, +0.462, +0.491, +0.538, +0.598, +0.647, +0.680, +0.725, +0.747, +0.782, +0.838, +0.891, +0.935, +0.972, +1.017, +1.080, +1.113, +1.147, +1.205, +1.263, +1.340, +1.407, +1.463, +1.522, +1.581, +1.648, +1.702, +1.750, +1.814, +1.864, +1.943, +1.980, +2.023, +2.084, +2.159, +2.244, +2.282, +2.374, +2.434, +2.528, +2.600, +2.666, +2.765, +2.846, +2.933, +3.017, +3.118, +3.213, +3.280, +3.367, +3.520, +3.627, +3.814, +3.944, +4.210, +4.437, +4.948, +5.443, +6.055, +6.675, +7.307, +7.686, +8.033, +8.033, +8.033, +8.033, +8.033},  +0.771,  +0.747,   1.974},
{"DC6-9x1Bytes-1", 24576, 2048, 0, { -5.221, -5.221, -5.221, -5.221, -5.221, -5.075, -4.792, -4.579, -4.091, -3.709, -3.066, -2.808, -2.545, -2.346, -2.186, -2.070, -1.979, -1.870, -1.764, -1.666, -1.589, -1.502, -1.401, -1.317, -1.258, -1.165, -1.100, -1.041, -0.975, -0.883, -0.826, -0.747, -0.702, -0.606, -0.553, -0.493, -0.435, -0.374, -0.314, -0.267, -0.216, -0.164, -0.113, -0.084, -0.017, +0.037, +0.099, +0.143, +0.202, +0.247, +0.297, +0.368, +0.419, +0.455, +0.506, +0.551, +0.607, +0.681, +0.726, +0.774, +0.814, +0.871, +0.920, +0.954, +1.016, +1.066, +1.101, +1.164, +1.240, +1.287, +1.339, +1.390, +1.430, +1.511, +1.562, +1.608, +1.648, +1.704, +1.768, +1.834, +1.887, +1.947, +2.034, +2.104, +2.173, +2.242, +2.314, +2.353, +2.424, +2.489, +2.574, +2.644, +2.717, +2.812, +2.879, +2.951, +3.022, +3.175, +3.240, +3.339, +3.471, +3.597, +3.737, +3.875, +4.034, +4.332, +4.603, +5.178, +5.837, +6.143, +6.381, +7.734, +9.086, +9.086, +9.086, +9.086, +9.086},  +0.732,  +0.726,   1.935},
{"DC6-9x1Bytes-1", 28672, 2048, 0, { -5.737, -5.737, -5.737, -5.737, -5.737, -5.450, -5.098, -4.884, -4.355, -3.761, -3.145, -2.790, -2.565, -2.340, -2.206, -2.017, -1.865, -1.727, -1.620, -1.537, -1.443, -1.375, -1.303, -1.236, -1.146, -1.068, -0.996, -0.906, -0.814, -0.744, -0.685, -0.634, -0.535, -0.473, -0.438, -0.387, -0.354, -0.316, -0.263, -0.204, -0.139, -0.082, -0.039, +0.020, +0.077, +0.133, +0.211, +0.259, +0.322, +0.386, +0.424, +0.466, +0.514, +0.574, +0.617, +0.671, +0.699, +0.742, +0.808, +0.855, +0.922, +0.989, +1.031, +1.070, +1.125, +1.172, +1.209, +1.251, +1.295, +1.326, +1.383, +1.434, +1.477, +1.536, +1.580, +1.618, +1.683, +1.746, +1.835, +1.883, +1.944, +2.002, +2.064, +2.128, +2.166, +2.253, +2.307, +2.392, +2.434, +2.514, +2.567, +2.660, +2.702, +2.793, +2.879, +2.995, +3.094, +3.217, +3.348, +3.426, +3.581, +3.712, +3.844, +3.977, +4.135, +4.327, +4.651, +5.116, +5.842, +6.527, +7.069, +7.390, +7.604, +7.604, +7.604, +7.604, +7.604},  +0.804,  +0.808,   1.931},
{"DC6-9x1Bytes-1", 32768, 2048, 0, { -5.564, -5.564, -5.564, -5.564, -5.564, -5.485, -5.411, -5.147, -4.140, -3.622, -3.081, -2.849, -2.614, -2.326, -2.166, -2.083, -1.899, -1.749, -1.655, -1.551, -1.472, -1.392, -1.283, -1.211, -1.142, -1.080, -1.000, -0.933, -0.870, -0.823, -0.768, -0.711, -0.631, -0.567, -0.489, -0.422, -0.377, -0.325, -0.264, -0.203, -0.163, -0.112, -0.037, +0.009, +0.057, +0.111, +0.143, +0.194, +0.245, +0.289, +0.340, +0.375, +0.435, +0.493, +0.530, +0.592, +0.641, +0.674, +0.717, +0.755, +0.810, +0.884, +0.922, +0.967, +1.013, +1.070, +1.100, +1.170, +1.210, +1.261, +1.321, +1.384, +1.428, +1.489, +1.538, +1.579, +1.620, +1.667, +1.733, +1.788, +1.861, +1.921, +2.004, +2.045, +2.132, +2.188, +2.244, +2.354, +2.430, +2.481, +2.561, +2.631, +2.701, +2.770, +2.851, +2.901, +2.986, +3.068, +3.196, +3.298, +3.409, +3.588, +3.723, +3.894, +4.142, +4.377, +4.716, +5.232, +5.882, +6.362, +6.818, +6.969, +6.998, +6.998, +6.998, +6.998, +6.998},  +0.750,  +0.717,   1.914},
{"DC6-9x1Bytes-1", 40960, 2048, 0, { -5.488, -5.488, -5.488, -5.488, -5.488, -5.434, -5.096, -4.678, -4.138, -3.511, -3.087, -2.874, -2.532, -2.346, -2.185, -1.973, -1.846, -1.760, -1.647, -1.551, -1.434, -1.346, -1.210, -1.137, -1.082, -1.019, -0.919, -0.860, -0.795, -0.741, -0.703, -0.622, -0.563, -0.496, -0.441, -0.391, -0.325, -0.275, -0.204, -0.146, -0.099, -0.046, +0.015, +0.072, +0.110, +0.172, +0.233, +0.275, +0.325, +0.370, +0.407, +0.454, +0.490, +0.534, +0.570, +0.608, +0.649, +0.705, +0.753, +0.820, +0.869, +0.914, +0.965, +1.006, +1.050, +1.096, +1.163, +1.192, +1.250, +1.317, +1.384, +1.426, +1.464, +1.524, +1.558, +1.619, +1.667, +1.707, +1.771, +1.826, +1.888, +1.937, +1.989, +2.040, +2.117, +2.194, +2.264, +2.340, +2.405, +2.493, +2.584, +2.656, +2.761, +2.804, +2.873, +2.962, +3.028, +3.197, +3.306, +3.403, +3.518, +3.626, +3.776, +3.942, +4.184, +4.442, +4.783, +5.403, +5.975, +6.302, +6.391, +6.547, +6.707, +6.707, +6.707, +6.707, +6.707},  +0.799,  +0.753,   1.915},
{"DC6-9x1Bytes-1", 49152, 2048, 0, { -6.231, -6.231, -6.231, -6.231, -6.231, -5.518, -4.790, -4.301, -3.889, -3.585, -3.068, -2.827, -2.660, -2.369, -2.125, -2.000, -1.878, -1.742, -1.613, -1.500, -1.405, -1.326, -1.231, -1.148, -1.102, -1.035, -0.985, -0.898, -0.814, -0.758, -0.694, -0.622, -0.555, -0.479, -0.405, -0.361, -0.319, -0.266, -0.197, -0.152, -0.103, -0.050, -0.005, +0.048, +0.103, +0.157, +0.204, +0.247, +0.293, +0.361, +0.423, +0.463, +0.514, +0.557, +0.598, +0.645, +0.686, +0.732, +0.794, +0.843, +0.892, +0.935, +0.977, +1.028, +1.063, +1.110, +1.147, +1.206, +1.246, +1.293, +1.346, +1.392, +1.442, +1.505, +1.548, +1.599, +1.630, +1.691, +1.743, +1.792, +1.842, +1.927, +2.003, +2.064, +2.132, +2.181, +2.274, +2.340, +2.401, +2.462, +2.546, +2.608, +2.678, +2.746, +2.849, +2.955, +3.075, +3.170, +3.281, +3.366, +3.506, +3.655, +3.856, +3.954, +4.184, +4.463, +4.758, +5.454, +5.877, +6.184, +6.466, +6.668, +6.857, +6.857, +6.857, +6.857, +6.857},  +0.796,  +0.794,   1.908},
{"DC6-9x1Bytes-1", 57344, 2048, 0, { -5.470, -5.470, -5.470, -5.470, -5.470, -5.400, -5.295, -4.709, -3.998, -3.621, -3.001, -2.691, -2.501, -2.371, -2.146, -1.934, -1.823, -1.757, -1.633, -1.522, -1.444, -1.324, -1.240, -1.149, -1.037, -0.980, -0.908, -0.855, -0.781, -0.710, -0.636, -0.571, -0.506, -0.467, -0.420, -0.361, -0.302, -0.251, -0.210, -0.162, -0.129, -0.071, -0.019, +0.083, +0.135, +0.186, +0.233, +0.279, +0.328, +0.363, +0.414, +0.480, +0.525, +0.559, +0.606, +0.674, +0.726, +0.796, +0.857, +0.908, +0.955, +0.991, +1.030, +1.083, +1.129, +1.180, +1.220, +1.256, +1.299, +1.348, +1.384, +1.420, +1.468, +1.530, +1.581, +1.626, +1.674, +1.729, +1.785, +1.849, +1.893, +1.955, +2.013, +2.048, +2.090, +2.155, +2.230, +2.293, +2.348, +2.410, +2.515, +2.579, +2.659, +2.767, +2.862, +2.968, +3.047, +3.164, +3.225, +3.318, +3.417, +3.538, +3.639, +3.754, +3.976, +4.205, +4.515, +4.988, +5.612, +6.193, +6.484, +6.594, +6.657, +6.657, +6.657, +6.657, +6.657},  +0.796,  +0.857,   1.867},
{"DC6-9x1Bytes-1", 65536, 2048, 0, { -5.997, -5.997, -5.997, -5.997, -5.997, -5.934, -5.815, -4.904, -4.139, -3.614, -2.954, -2.570, -2.352, -2.155, -1.926, -1.793, -1.669, -1.561, -1.461, -1.359, -1.253, -1.185, -1.094, -1.024, -0.984, -0.923, -0.845, -0.800, -0.741, -0.676, -0.603, -0.552, -0.515, -0.450, -0.403, -0.334, -0.267, -0.207, -0.145, -0.104, -0.076, -0.009, +0.056, +0.121, +0.164, +0.213, +0.255, +0.295, +0.340, +0.391, +0.434, +0.468, +0.495, +0.553, +0.601, +0.661, +0.711, +0.746, +0.800, +0.842, +0.877, +0.935, +0.988, +1.061, +1.112, +1.180, +1.227, +1.274, +1.346, +1.417, +1.477, +1.506, +1.562, +1.625, +1.676, +1.714, +1.763, +1.817, +1.883, +1.942, +2.005, +2.063, +2.093, +2.143, +2.227, +2.305, +2.399, +2.452, +2.531, +2.585, +2.679, +2.737, +2.812, +2.889, +2.944, +3.026, +3.140, +3.235, +3.311, +3.407, +3.516, +3.636, +3.790, +3.986, +4.192, +4.363, +4.804, +5.210, +5.551, +6.075, +6.322, +6.447, +6.462, +6.462, +6.462, +6.462, +6.462},  +0.870,  +0.800,   1.883},
{"DC6-9x1Bytes-1", 81920, 2048, 0, { -5.777, -5.777, -5.777, -5.777, -5.777, -5.685, -5.389, -5.016, -4.574, -3.889, -3.115, -2.652, -2.469, -2.315, -2.204, -2.055, -1.907, -1.814, -1.666, -1.568, -1.460, -1.357, -1.286, -1.209, -1.085, -1.022, -0.939, -0.863, -0.789, -0.724, -0.671, -0.594, -0.541, -0.479, -0.417, -0.360, -0.298, -0.257, -0.201, -0.149, -0.103, -0.071, -0.010, +0.044, +0.087, +0.141, +0.196, +0.250, +0.293, +0.329, +0.382, +0.428, +0.465, +0.508, +0.545, +0.595, +0.636, +0.690, +0.740, +0.776, +0.825, +0.868, +0.910, +0.970, +1.022, +1.061, +1.099, +1.154, +1.205, +1.234, +1.279, +1.331, +1.362, +1.423, +1.492, +1.554, +1.616, +1.673, +1.743, +1.800, +1.845, +1.936, +2.003, +2.071, +2.116, +2.178, +2.260, +2.327, +2.405, +2.468, +2.546, +2.634, +2.707, +2.767, +2.848, +2.930, +3.062, +3.144, +3.279, +3.378, +3.535, +3.628, +3.748, +3.923, +4.068, +4.338, +4.704, +5.365, +5.895, +6.415, +6.779, +7.458, +7.824, +7.824, +7.824, +7.824, +7.824},  +0.772,  +0.740,   1.916},
{"DC6-9x1Bytes-1", 98304, 2048, 0, { -5.924, -5.924, -5.924, -5.924, -5.924, -5.630, -5.286, -4.622, -4.352, -3.755, -3.226, -2.831, -2.637, -2.390, -2.179, -2.023, -1.885, -1.764, -1.678, -1.579, -1.500, -1.367, -1.280, -1.185, -1.077, -0.989, -0.908, -0.829, -0.772, -0.719, -0.654, -0.601, -0.555, -0.501, -0.428, -0.352, -0.276, -0.225, -0.171, -0.113, -0.031, +0.032, +0.086, +0.143, +0.193, +0.238, +0.278, +0.334, +0.372, +0.409, +0.451, +0.500, +0.544, +0.584, +0.628, +0.681, +0.726, +0.769, +0.810, +0.859, +0.905, +0.951, +1.016, +1.064, +1.103, +1.148, +1.219, +1.260, +1.312, +1.362, +1.422, +1.468, +1.518, +1.571, +1.626, +1.671, +1.711, +1.755, +1.790, +1.840, +1.911, +1.973, +2.042, +2.141, +2.218, +2.289, +2.371, +2.446, +2.502, +2.554, +2.620, +2.697, +2.773, +2.872, +2.931, +3.012, +3.069, +3.143, +3.246, +3.331, +3.458, +3.574, +3.752, +3.967, +4.130, +4.490, +4.794, +5.258, +5.851, +6.619, +6.934, +7.099, +7.129, +7.129, +7.129, +7.129, +7.129},  +0.824,  +0.810,   1.929},
{"DC6-9x1Bytes-1",114688, 2048, 0, { -6.533, -6.533, -6.533, -6.533, -6.533, -6.207, -5.577, -5.124, -4.427, -3.696, -3.066, -2.806, -2.524, -2.363, -2.213, -2.056, -1.915, -1.804, -1.714, -1.601, -1.514, -1.407, -1.311, -1.196, -1.106, -1.046, -0.957, -0.893, -0.809, -0.738, -0.668, -0.605, -0.559, -0.480, -0.420, -0.382, -0.323, -0.263, -0.203, -0.146, -0.086, -0.047, +0.028, +0.068, +0.115, +0.171, +0.219, +0.269, +0.325, +0.385, +0.429, +0.477, +0.525, +0.576, +0.614, +0.660, +0.692, +0.731, +0.763, +0.797, +0.834, +0.884, +0.933, +0.993, +1.038, +1.090, +1.157, +1.206, +1.247, +1.278, +1.315, +1.372, +1.426, +1.515, +1.595, +1.634, +1.677, +1.735, +1.790, +1.824, +1.876, +1.953, +2.007, +2.063, +2.127, +2.176, +2.267, +2.349, +2.398, +2.481, +2.559, +2.626, +2.703, +2.799, +2.893, +2.949, +3.057, +3.162, +3.223, +3.343, +3.417, +3.551, +3.743, +3.916, +4.181, +4.495, +4.933, +5.317, +5.602, +5.925, +6.255, +6.506, +6.520, +6.520, +6.520, +6.520, +6.520},  +0.784,  +0.763,   1.921},
{"DC6-9x1Bytes-1",131072, 2048, 0, { -6.426, -6.426, -6.426, -6.426, -6.426, -5.637, -4.867, -4.746, -4.470, -3.888, -3.338, -2.966, -2.587, -2.378, -2.222, -2.054, -1.925, -1.830, -1.738, -1.608, -1.483, -1.404, -1.306, -1.243, -1.197, -1.136, -1.046, -0.976, -0.914, -0.843, -0.773, -0.719, -0.647, -0.597, -0.527, -0.465, -0.398, -0.344, -0.272, -0.230, -0.175, -0.121, -0.076, -0.021, +0.033, +0.073, +0.125, +0.174, +0.234, +0.278, +0.326, +0.390, +0.438, +0.478, +0.514, +0.577, +0.620, +0.667, +0.710, +0.754, +0.806, +0.859, +0.902, +0.956, +1.007, +1.064, +1.110, +1.163, +1.217, +1.252, +1.302, +1.350, +1.404, +1.460, +1.502, +1.565, +1.642, +1.687, +1.742, +1.785, +1.841, +1.912, +1.950, +2.014, +2.091, +2.132, +2.200, +2.253, +2.341, +2.406, +2.487, +2.569, +2.634, +2.705, +2.809, +2.917, +3.008, +3.108, +3.205, +3.329, +3.466, +3.577, +3.715, +3.922, +4.166, +4.404, +4.786, +5.150, +5.551, +6.074, +6.334, +6.451, +6.578, +6.578, +6.578, +6.578, +6.578},  +0.721,  +0.710,   1.930},
{"DC6-9x1Bytes-1",163840, 2048, 0, { -6.529, -6.529, -6.529, -6.529, -6.529, -6.043, -5.086, -4.592, -3.978, -3.529, -3.047, -2.699, -2.500, -2.337, -2.112, -1.990, -1.846, -1.729, -1.639, -1.570, -1.445, -1.352, -1.286, -1.207, -1.116, -1.034, -0.949, -0.882, -0.829, -0.753, -0.681, -0.601, -0.540, -0.484, -0.395, -0.342, -0.291, -0.220, -0.159, -0.123, -0.079, -0.025, +0.043, +0.105, +0.159, +0.203, +0.258, +0.300, +0.336, +0.397, +0.440, +0.487, +0.521, +0.568, +0.612, +0.666, +0.696, +0.745, +0.798, +0.851, +0.894, +0.916, +0.964, +1.007, +1.047, +1.104, +1.148, +1.204, +1.255, +1.297, +1.333, +1.383, +1.436, +1.526, +1.588, +1.634, +1.676, +1.747, +1.788, +1.829, +1.893, +1.982, +2.039, +2.093, +2.141, +2.178, +2.242, +2.296, +2.373, +2.428, +2.502, +2.571, +2.641, +2.676, +2.751, +2.857, +2.931, +3.034, +3.100, +3.234, +3.340, +3.552, +3.740, +3.900, +4.135, +4.469, +4.792, +5.471, +5.693, +6.378, +7.195, +7.797, +7.876, +7.876, +7.876, +7.876, +7.876},  +0.795,  +0.798,   1.888},
{"DC6-9x1Bytes-1",196608, 2048, 0, { -5.623, -5.623, -5.623, -5.623, -5.623, -5.496, -5.279, -5.053, -4.268, -3.582, -3.079, -2.826, -2.562, -2.382, -2.230, -2.127, -2.014, -1.859, -1.769, -1.648, -1.581, -1.512, -1.427, -1.310, -1.238, -1.156, -1.077, -1.010, -0.928, -0.874, -0.776, -0.701, -0.649, -0.560, -0.501, -0.436, -0.344, -0.275, -0.220, -0.165, -0.099, -0.074, -0.041, -0.004, +0.051, +0.098, +0.156, +0.196, +0.259, +0.319, +0.350, +0.388, +0.429, +0.493, +0.551, +0.596, +0.644, +0.695, +0.759, +0.810, +0.844, +0.895, +0.953, +1.009, +1.067, +1.116, +1.161, +1.205, +1.262, +1.308, +1.361, +1.397, +1.455, +1.502, +1.534, +1.598, +1.644, +1.695, +1.765, +1.802, +1.855, +1.899, +1.950, +2.009, +2.047, +2.098, +2.141, +2.191, +2.231, +2.307, +2.360, +2.440, +2.524, +2.569, +2.627, +2.712, +2.784, +2.890, +2.964, +3.062, +3.182, +3.345, +3.526, +3.714, +3.904, +4.106, +4.589, +5.060, +5.431, +6.196, +6.371, +6.650, +6.757, +6.757, +6.757, +6.757, +6.757},  +0.700,  +0.759,   1.864},
{"DC6-9x1Bytes-1",229376, 2048, 0, { -5.145, -5.145, -5.145, -5.145, -5.145, -4.877, -4.629, -4.542, -4.116, -3.452, -3.077, -2.722, -2.536, -2.255, -2.091, -1.946, -1.841, -1.735, -1.632, -1.540, -1.421, -1.337, -1.259, -1.160, -1.091, -1.022, -0.924, -0.848, -0.763, -0.697, -0.666, -0.579, -0.523, -0.464, -0.428, -0.371, -0.321, -0.252, -0.206, -0.138, -0.073, -0.032, +0.029, +0.070, +0.131, +0.175, +0.211, +0.261, +0.293, +0.334, +0.381, +0.447, +0.506, +0.540, +0.562, +0.618, +0.653, +0.727, +0.777, +0.802, +0.853, +0.903, +0.951, +0.998, +1.039, +1.093, +1.138, +1.200, +1.245, +1.279, +1.326, +1.365, +1.417, +1.478, +1.535, +1.612, +1.668, +1.724, +1.756, +1.818, +1.864, +1.949, +1.994, +2.072, +2.114, +2.170, +2.232, +2.305, +2.342, +2.406, +2.462, +2.539, +2.597, +2.667, +2.744, +2.872, +2.997, +3.068, +3.158, +3.281, +3.402, +3.499, +3.623, +3.797, +3.966, +4.183, +4.367, +4.950, +5.249, +5.638, +5.783, +5.947, +6.055, +6.055, +6.055, +6.055, +6.055},  +0.765,  +0.777,   1.838},
{"DC6-9x1Bytes-1",262144, 2048, 0, { -4.989, -4.989, -4.989, -4.989, -4.989, -4.761, -4.522, -4.293, -3.894, -3.535, -3.024, -2.712, -2.482, -2.247, -2.066, -1.963, -1.827, -1.748, -1.683, -1.571, -1.481, -1.397, -1.332, -1.259, -1.170, -1.096, -0.995, -0.932, -0.852, -0.756, -0.699, -0.641, -0.569, -0.515, -0.454, -0.396, -0.347, -0.293, -0.257, -0.209, -0.163, -0.115, -0.070, -0.015, +0.047, +0.080, +0.126, +0.168, +0.217, +0.261, +0.311, +0.371, +0.430, +0.488, +0.526, +0.579, +0.621, +0.662, +0.709, +0.743, +0.787, +0.829, +0.867, +0.912, +0.971, +1.034, +1.112, +1.167, +1.195, +1.249, +1.298, +1.339, +1.376, +1.412, +1.463, +1.502, +1.570, +1.618, +1.673, +1.730, +1.769, +1.832, +1.892, +1.954, +2.039, +2.134, +2.195, +2.268, +2.334, +2.404, +2.452, +2.521, +2.630, +2.719, +2.802, +2.863, +2.946, +3.023, +3.081, +3.167, +3.320, +3.471, +3.596, +3.723, +3.918, +4.194, +4.484, +4.973, +5.529, +6.065, +6.452, +6.968, +7.228, +7.228, +7.228, +7.228, +7.228},  +0.722,  +0.709,   1.843},
{"DC6-9x1Bytes-1",327680, 2048, 0, { -4.946, -4.946, -4.946, -4.946, -4.946, -4.879, -4.694, -4.516, -4.208, -3.624, -3.193, -2.839, -2.500, -2.357, -2.182, -2.032, -1.866, -1.758, -1.673, -1.576, -1.491, -1.394, -1.313, -1.264, -1.194, -1.107, -1.030, -0.978, -0.885, -0.816, -0.741, -0.704, -0.619, -0.561, -0.509, -0.469, -0.410, -0.363, -0.308, -0.244, -0.177, -0.129, -0.087, -0.048, +0.007, +0.059, +0.114, +0.156, +0.202, +0.241, +0.285, +0.331, +0.379, +0.434, +0.478, +0.523, +0.573, +0.615, +0.667, +0.708, +0.740, +0.779, +0.832, +0.897, +0.953, +0.991, +1.031, +1.081, +1.121, +1.158, +1.202, +1.253, +1.289, +1.339, +1.387, +1.438, +1.478, +1.534, +1.578, +1.635, +1.693, +1.738, +1.797, +1.871, +1.946, +1.993, +2.086, +2.151, +2.204, +2.263, +2.326, +2.395, +2.493, +2.560, +2.634, +2.723, +2.874, +2.962, +3.082, +3.174, +3.330, +3.478, +3.551, +3.699, +3.846, +4.035, +4.304, +4.826, +5.140, +6.041, +6.421, +6.909, +7.160, +7.160, +7.160, +7.160, +7.160},  +0.658,  +0.667,   1.828},
{"DC6-9x1Bytes-1",393216, 2048, 0, { -5.593, -5.593, -5.593, -5.593, -5.593, -5.246, -4.763, -4.487, -4.055, -3.651, -3.146, -2.866, -2.532, -2.357, -2.213, -2.088, -1.936, -1.783, -1.694, -1.531, -1.444, -1.344, -1.280, -1.224, -1.152, -1.078, -1.013, -0.945, -0.826, -0.774, -0.709, -0.661, -0.575, -0.516, -0.466, -0.400, -0.362, -0.302, -0.251, -0.202, -0.155, -0.103, -0.063, -0.006, +0.032, +0.085, +0.136, +0.181, +0.236, +0.292, +0.327, +0.371, +0.411, +0.460, +0.506, +0.551, +0.616, +0.651, +0.704, +0.735, +0.780, +0.817, +0.859, +0.897, +0.941, +0.988, +1.037, +1.090, +1.130, +1.181, +1.224, +1.266, +1.304, +1.341, +1.379, +1.442, +1.497, +1.548, +1.593, +1.636, +1.690, +1.746, +1.789, +1.836, +1.901, +1.940, +1.989, +2.065, +2.120, +2.184, +2.233, +2.319, +2.418, +2.523, +2.623, +2.695, +2.778, +2.906, +3.024, +3.152, +3.287, +3.406, +3.600, +3.758, +3.917, +4.097, +4.406, +4.939, +5.362, +5.988, +6.167, +6.350, +6.479, +6.479, +6.479, +6.479, +6.479},  +0.668,  +0.704,   1.820},
{"DC6-9x1Bytes-1",458752, 2048, 0, { -5.646, -5.646, -5.646, -5.646, -5.646, -5.626, -5.172, -4.681, -4.153, -3.855, -3.370, -3.034, -2.773, -2.501, -2.300, -2.145, -1.989, -1.896, -1.800, -1.645, -1.533, -1.439, -1.346, -1.237, -1.155, -1.078, -1.000, -0.930, -0.862, -0.807, -0.743, -0.680, -0.622, -0.556, -0.487, -0.449, -0.403, -0.332, -0.294, -0.253, -0.207, -0.181, -0.134, -0.078, -0.023, +0.026, +0.069, +0.124, +0.169, +0.221, +0.274, +0.321, +0.369, +0.415, +0.455, +0.512, +0.559, +0.592, +0.639, +0.678, +0.714, +0.749, +0.788, +0.828, +0.872, +0.932, +0.963, +1.008, +1.064, +1.103, +1.156, +1.196, +1.235, +1.280, +1.339, +1.392, +1.448, +1.485, +1.551, +1.594, +1.633, +1.693, +1.743, +1.803, +1.855, +1.948, +1.987, +2.040, +2.119, +2.185, +2.253, +2.324, +2.415, +2.487, +2.542, +2.618, +2.691, +2.790, +2.915, +2.994, +3.095, +3.224, +3.368, +3.613, +3.900, +4.178, +4.427, +4.939, +5.386, +5.985, +6.804, +7.233, +7.250, +7.250, +7.250, +7.250, +7.250},  +0.605,  +0.639,   1.840},
{"DC6-9x1Bytes-1",524288, 2048, 0, { -5.359, -5.359, -5.359, -5.359, -5.359, -5.110, -4.754, -4.623, -4.005, -3.664, -3.081, -2.726, -2.542, -2.402, -2.264, -2.133, -2.022, -1.870, -1.779, -1.660, -1.566, -1.466, -1.381, -1.316, -1.251, -1.175, -1.116, -1.046, -0.986, -0.890, -0.827, -0.778, -0.713, -0.630, -0.555, -0.479, -0.417, -0.349, -0.288, -0.217, -0.172, -0.113, -0.053, +0.007, +0.055, +0.106, +0.144, +0.209, +0.269, +0.306, +0.345, +0.393, +0.434, +0.471, +0.510, +0.549, +0.604, +0.637, +0.683, +0.721, +0.758, +0.792, +0.831, +0.870, +0.912, +0.956, +1.018, +1.076, +1.128, +1.176, +1.210, +1.253, +1.331, +1.370, +1.406, +1.450, +1.478, +1.534, +1.579, +1.619, +1.671, +1.728, +1.788, +1.863, +1.894, +1.965, +2.034, +2.102, +2.168, +2.226, +2.303, +2.357, +2.431, +2.539, +2.629, +2.726, +2.799, +2.888, +2.971, +3.063, +3.173, +3.379, +3.489, +3.661, +3.848, +4.192, +4.669, +5.010, +5.372, +5.980, +6.310, +6.495, +6.601, +6.601, +6.601, +6.601, +6.601},  +0.646,  +0.683,   1.847},
{"DC6-9x1Bytes-1",655360, 2048, 0, { -6.103, -6.103, -6.103, -6.103, -6.103, -5.717, -5.307, -4.804, -4.231, -3.757, -3.148, -2.928, -2.620, -2.469, -2.289, -2.138, -1.974, -1.847, -1.749, -1.667, -1.614, -1.523, -1.425, -1.358, -1.277, -1.198, -1.126, -1.072, -0.979, -0.931, -0.871, -0.804, -0.747, -0.683, -0.624, -0.591, -0.530, -0.481, -0.433, -0.380, -0.317, -0.264, -0.211, -0.139, -0.105, -0.057, -0.014, +0.064, +0.114, +0.165, +0.220, +0.267, +0.321, +0.362, +0.404, +0.452, +0.500, +0.549, +0.593, +0.634, +0.692, +0.743, +0.800, +0.841, +0.881, +0.925, +0.961, +1.014, +1.047, +1.094, +1.159, +1.206, +1.256, +1.314, +1.378, +1.417, +1.452, +1.491, +1.542, +1.595, +1.649, +1.710, +1.787, +1.864, +1.961, +2.012, +2.072, +2.129, +2.204, +2.259, +2.336, +2.412, +2.469, +2.539, +2.618, +2.687, +2.745, +2.825, +2.911, +3.043, +3.129, +3.245, +3.426, +3.641, +3.797, +4.024, +4.309, +4.893, +5.080, +5.630, +5.859, +6.118, +6.272, +6.272, +6.272, +6.272, +6.272},  +0.581,  +0.593,   1.846},
{"DC6-9x1Bytes-1",786432, 2048, 0, { -5.317, -5.317, -5.317, -5.317, -5.317, -5.221, -5.103, -4.657, -4.244, -3.767, -3.221, -2.903, -2.601, -2.376, -2.227, -2.072, -1.959, -1.859, -1.751, -1.660, -1.602, -1.520, -1.456, -1.412, -1.338, -1.264, -1.190, -1.135, -1.050, -0.989, -0.938, -0.864, -0.787, -0.715, -0.656, -0.594, -0.517, -0.464, -0.406, -0.361, -0.294, -0.250, -0.190, -0.148, -0.099, -0.060, -0.010, +0.024, +0.082, +0.126, +0.175, +0.213, +0.245, +0.274, +0.319, +0.372, +0.429, +0.471, +0.532, +0.583, +0.637, +0.674, +0.720, +0.765, +0.812, +0.848, +0.893, +0.946, +0.984, +1.021, +1.069, +1.131, +1.174, +1.238, +1.299, +1.342, +1.384, +1.440, +1.490, +1.532, +1.605, +1.674, +1.719, +1.773, +1.816, +1.859, +1.939, +1.991, +2.054, +2.103, +2.180, +2.263, +2.356, +2.415, +2.470, +2.533, +2.613, +2.695, +2.803, +2.906, +2.973, +3.124, +3.234, +3.374, +3.595, +3.795, +4.087, +4.682, +5.247, +5.957, +6.357, +6.683, +6.838, +6.838, +6.838, +6.838, +6.838},  +0.519,  +0.532,   1.797},
{"DC6-9x1Bytes-1",917504, 2048, 0, { -5.242, -5.242, -5.242, -5.242, -5.242, -5.138, -4.777, -4.286, -3.986, -3.636, -3.226, -2.998, -2.715, -2.517, -2.386, -2.266, -2.093, -1.972, -1.890, -1.772, -1.672, -1.592, -1.465, -1.389, -1.324, -1.257, -1.189, -1.089, -1.013, -0.952, -0.906, -0.830, -0.777, -0.686, -0.620, -0.558, -0.501, -0.450, -0.388, -0.339, -0.287, -0.234, -0.175, -0.116, -0.080, -0.030, +0.035, +0.084, +0.132, +0.166, +0.212, +0.256, +0.285, +0.336, +0.384, +0.413, +0.465, +0.515, +0.547, +0.593, +0.642, +0.693, +0.735, +0.792, +0.833, +0.875, +0.918, +0.951, +0.987, +1.023, +1.075, +1.120, +1.174, +1.220, +1.259, +1.322, +1.369, +1.430, +1.473, +1.543, +1.591, +1.646, +1.706, +1.738, +1.830, +1.863, +1.938, +1.998, +2.064, +2.142, +2.209, +2.262, +2.317, +2.388, +2.477, +2.570, +2.656, +2.722, +2.836, +2.941, +3.002, +3.117, +3.222, +3.397, +3.530, +3.858, +4.142, +4.722, +5.226, +5.531, +5.979, +6.328, +6.495, +6.495, +6.495, +6.495, +6.495},  +0.520,  +0.547,   1.806},
{"DC6-9x1Bytes-1",1048576, 2048, 0, { -5.798, -5.798, -5.798, -5.798, -5.798, -5.384, -4.971, -4.643, -4.218, -3.838, -3.291, -3.039, -2.827, -2.687, -2.478, -2.344, -2.210, -2.085, -1.974, -1.883, -1.813, -1.684, -1.566, -1.506, -1.426, -1.338, -1.275, -1.215, -1.130, -1.050, -0.965, -0.897, -0.823, -0.759, -0.709, -0.660, -0.601, -0.546, -0.511, -0.460, -0.402, -0.359, -0.295, -0.247, -0.209, -0.159, -0.113, -0.074, -0.022, +0.018, +0.067, +0.122, +0.178, +0.221, +0.265, +0.323, +0.377, +0.425, +0.476, +0.506, +0.541, +0.601, +0.654, +0.710, +0.754, +0.800, +0.849, +0.889, +0.927, +0.979, +1.025, +1.066, +1.121, +1.171, +1.216, +1.248, +1.291, +1.336, +1.377, +1.430, +1.482, +1.555, +1.616, +1.673, +1.718, +1.763, +1.820, +1.852, +1.905, +1.979, +2.048, +2.110, +2.181, +2.260, +2.365, +2.448, +2.523, +2.596, +2.663, +2.796, +2.884, +3.010, +3.139, +3.271, +3.464, +3.788, +4.153, +4.798, +5.174, +5.692, +5.902, +6.096, +6.307, +6.307, +6.307, +6.307, +6.307},  +0.418,  +0.476,   1.814},
{"DC6-9x1Bytes-1",1310720, 2048, 0, { -5.609, -5.609, -5.609, -5.609, -5.609, -5.261, -4.801, -4.639, -4.016, -3.746, -3.328, -3.056, -2.843, -2.642, -2.450, -2.266, -2.152, -2.043, -1.904, -1.809, -1.712, -1.644, -1.560, -1.488, -1.359, -1.260, -1.205, -1.120, -1.049, -0.990, -0.912, -0.855, -0.805, -0.746, -0.690, -0.630, -0.558, -0.516, -0.480, -0.427, -0.365, -0.294, -0.266, -0.216, -0.135, -0.081, -0.031, +0.014, +0.075, +0.100, +0.144, +0.190, +0.247, +0.274, +0.330, +0.373, +0.440, +0.493, +0.527, +0.571, +0.601, +0.637, +0.675, +0.727, +0.765, +0.813, +0.865, +0.916, +0.944, +0.988, +1.033, +1.076, +1.137, +1.186, +1.230, +1.270, +1.315, +1.360, +1.394, +1.446, +1.499, +1.554, +1.594, +1.647, +1.695, +1.759, +1.816, +1.875, +1.946, +2.007, +2.057, +2.127, +2.198, +2.270, +2.379, +2.455, +2.516, +2.592, +2.676, +2.823, +2.934, +3.065, +3.254, +3.440, +3.577, +3.835, +4.177, +4.656, +5.273, +5.844, +5.913, +6.175, +6.416, +6.416, +6.416, +6.416, +6.416},  +0.457,  +0.527,   1.808},
{"DC6-9x1Bytes-1",1572864, 2048, 0, { -6.157, -6.157, -6.157, -6.157, -6.157, -5.699, -5.254, -4.786, -4.108, -3.928, -3.359, -3.096, -2.853, -2.749, -2.564, -2.421, -2.269, -2.167, -2.019, -1.926, -1.847, -1.791, -1.717, -1.606, -1.533, -1.451, -1.377, -1.301, -1.222, -1.142, -1.061, -0.993, -0.922, -0.855, -0.803, -0.750, -0.711, -0.638, -0.568, -0.518, -0.445, -0.381, -0.333, -0.278, -0.233, -0.173, -0.135, -0.085, -0.037, +0.017, +0.073, +0.124, +0.192, +0.253, +0.277, +0.325, +0.366, +0.429, +0.473, +0.507, +0.549, +0.603, +0.637, +0.691, +0.742, +0.772, +0.800, +0.852, +0.895, +0.956, +1.000, +1.046, +1.114, +1.145, +1.188, +1.226, +1.270, +1.322, +1.378, +1.423, +1.463, +1.517, +1.565, +1.600, +1.682, +1.718, +1.765, +1.825, +1.912, +1.977, +2.078, +2.128, +2.202, +2.269, +2.332, +2.413, +2.514, +2.634, +2.709, +2.824, +2.962, +3.143, +3.290, +3.440, +3.676, +3.982, +4.240, +4.778, +5.156, +5.594, +5.710, +5.759, +5.804, +5.804, +5.804, +5.804, +5.804},  +0.394,  +0.473,   1.856},
{"DC6-9x1Bytes-1",1835008, 2048, 0, { -6.714, -6.714, -6.714, -6.714, -6.714, -6.212, -5.315, -4.731, -4.344, -3.949, -3.334, -3.084, -2.860, -2.661, -2.485, -2.358, -2.218, -2.112, -2.000, -1.885, -1.807, -1.692, -1.577, -1.479, -1.401, -1.337, -1.287, -1.234, -1.160, -1.107, -1.044, -0.975, -0.917, -0.841, -0.766, -0.733, -0.689, -0.630, -0.589, -0.520, -0.480, -0.427, -0.366, -0.308, -0.254, -0.215, -0.146, -0.105, -0.046, +0.014, +0.058, +0.092, +0.163, +0.204, +0.243, +0.287, +0.327, +0.368, +0.425, +0.490, +0.525, +0.575, +0.616, +0.663, +0.710, +0.743, +0.801, +0.840, +0.886, +0.927, +0.973, +1.012, +1.064, +1.130, +1.175, +1.222, +1.249, +1.296, +1.340, +1.402, +1.450, +1.509, +1.580, +1.673, +1.737, +1.798, +1.864, +1.912, +1.959, +2.036, +2.091, +2.167, +2.248, +2.297, +2.388, +2.465, +2.544, +2.631, +2.730, +2.848, +2.915, +3.037, +3.240, +3.444, +3.585, +3.781, +4.091, +4.640, +4.873, +5.288, +5.497, +5.548, +5.555, +5.555, +5.555, +5.555, +5.555},  +0.395,  +0.425,   1.831},
{"DC6-9x1Bytes-1",2097152, 2048, 0, { -6.579, -6.579, -6.579, -6.579, -6.579, -6.116, -5.655, -5.239, -4.339, -4.004, -3.387, -3.096, -2.847, -2.652, -2.406, -2.256, -2.111, -2.013, -1.934, -1.855, -1.782, -1.690, -1.611, -1.499, -1.432, -1.351, -1.251, -1.142, -1.093, -1.022, -0.971, -0.909, -0.849, -0.781, -0.732, -0.683, -0.624, -0.559, -0.491, -0.435, -0.399, -0.359, -0.319, -0.278, -0.240, -0.172, -0.127, -0.073, -0.027, +0.021, +0.066, +0.112, +0.168, +0.227, +0.263, +0.294, +0.358, +0.404, +0.456, +0.487, +0.523, +0.565, +0.620, +0.662, +0.730, +0.773, +0.817, +0.858, +0.910, +0.967, +1.009, +1.063, +1.121, +1.162, +1.199, +1.238, +1.289, +1.355, +1.423, +1.468, +1.501, +1.551, +1.618, +1.653, +1.705, +1.756, +1.816, +1.877, +1.968, +2.043, +2.127, +2.224, +2.309, +2.378, +2.435, +2.540, +2.593, +2.679, +2.797, +2.902, +3.056, +3.172, +3.335, +3.466, +3.665, +3.905, +4.228, +4.718, +5.112, +5.606, +5.704, +5.798, +5.893, +5.893, +5.893, +5.893, +5.893},  +0.433,  +0.456,   1.848},
{"DC6-9x1Bytes-1",2621440, 2048, 0, { -6.237, -6.237, -6.237, -6.237, -6.237, -5.696, -5.004, -4.789, -4.514, -4.013, -3.546, -3.175, -2.929, -2.760, -2.572, -2.400, -2.248, -2.124, -2.025, -1.911, -1.819, -1.739, -1.633, -1.527, -1.474, -1.415, -1.348, -1.289, -1.210, -1.126, -1.066, -1.014, -0.949, -0.885, -0.810, -0.739, -0.701, -0.650, -0.600, -0.540, -0.468, -0.428, -0.367, -0.318, -0.264, -0.203, -0.170, -0.102, -0.050, -0.018, +0.024, +0.077, +0.116, +0.157, +0.200, +0.238, +0.308, +0.349, +0.384, +0.430, +0.482, +0.537, +0.591, +0.631, +0.686, +0.727, +0.789, +0.847, +0.907, +0.948, +0.991, +1.029, +1.100, +1.149, +1.210, +1.253, +1.329, +1.382, +1.428, +1.478, +1.528, +1.578, +1.647, +1.701, +1.780, +1.849, +1.907, +1.975, +2.040, +2.112, +2.193, +2.256, +2.325, +2.415, +2.478, +2.569, +2.642, +2.728, +2.845, +2.945, +3.108, +3.211, +3.371, +3.510, +3.677, +3.905, +4.134, +4.596, +5.033, +5.817, +6.077, +6.207, +6.324, +6.324, +6.324, +6.324, +6.324},  +0.404,  +0.384,   1.892},
{"DC6-9x1Bytes-1",3145728, 2048, 0, { -5.536, -5.536, -5.536, -5.536, -5.536, -5.417, -5.272, -4.738, -4.297, -3.852, -3.434, -3.065, -2.834, -2.670, -2.487, -2.292, -2.179, -2.098, -1.953, -1.855, -1.767, -1.685, -1.607, -1.532, -1.468, -1.403, -1.312, -1.224, -1.162, -1.105, -1.039, -0.963, -0.910, -0.847, -0.785, -0.721, -0.659, -0.605, -0.558, -0.514, -0.456, -0.420, -0.367, -0.325, -0.283, -0.229, -0.193, -0.146, -0.102, -0.056, -0.013, +0.030, +0.063, +0.130, +0.171, +0.218, +0.256, +0.316, +0.356, +0.416, +0.467, +0.508, +0.563, +0.604, +0.649, +0.708, +0.780, +0.834, +0.893, +0.946, +0.971, +1.026, +1.064, +1.113, +1.158, +1.219, +1.270, +1.338, +1.403, +1.482, +1.553, +1.611, +1.664, +1.725, +1.792, +1.874, +1.931, +1.990, +2.055, +2.134, +2.212, +2.284, +2.351, +2.449, +2.524, +2.625, +2.743, +2.868, +2.972, +3.060, +3.187, +3.349, +3.532, +3.638, +3.813, +4.115, +4.375, +4.898, +5.221, +5.631, +6.053, +6.492, +6.868, +6.868, +6.868, +6.868, +6.868},  +0.434,  +0.356,   1.901},
{"DC6-9x1Bytes-1",3670016, 2048, 0, { -6.822, -6.822, -6.822, -6.822, -6.822, -6.270, -5.420, -5.087, -4.325, -3.966, -3.468, -3.113, -2.865, -2.634, -2.521, -2.384, -2.279, -2.170, -2.038, -1.926, -1.835, -1.738, -1.662, -1.580, -1.479, -1.405, -1.339, -1.258, -1.200, -1.164, -1.105, -1.028, -0.955, -0.896, -0.825, -0.754, -0.713, -0.660, -0.598, -0.562, -0.498, -0.456, -0.391, -0.356, -0.317, -0.268, -0.223, -0.175, -0.125, -0.074, -0.029, +0.025, +0.077, +0.123, +0.192, +0.238, +0.277, +0.321, +0.374, +0.426, +0.466, +0.496, +0.548, +0.596, +0.646, +0.702, +0.747, +0.805, +0.858, +0.903, +0.969, +1.027, +1.074, +1.112, +1.147, +1.200, +1.268, +1.318, +1.375, +1.445, +1.485, +1.536, +1.578, +1.626, +1.691, +1.760, +1.825, +1.920, +2.000, +2.070, +2.144, +2.213, +2.314, +2.381, +2.476, +2.552, +2.623, +2.718, +2.802, +2.927, +3.078, +3.191, +3.408, +3.532, +3.687, +3.990, +4.337, +4.886, +5.308, +5.463, +5.711, +5.822, +5.824, +5.824, +5.824, +5.824, +5.824},  +0.387,  +0.374,   1.888},
{"DC6-9x1Bytes-1",4194304, 2048, 0, { -5.750, -5.750, -5.750, -5.750, -5.750, -5.502, -5.132, -4.723, -4.315, -4.045, -3.497, -3.173, -2.934, -2.699, -2.515, -2.372, -2.270, -2.173, -1.980, -1.854, -1.762, -1.662, -1.595, -1.532, -1.438, -1.373, -1.319, -1.263, -1.198, -1.122, -1.049, -1.017, -0.970, -0.911, -0.853, -0.795, -0.735, -0.681, -0.628, -0.586, -0.535, -0.490, -0.443, -0.394, -0.327, -0.282, -0.249, -0.204, -0.134, -0.070, -0.005, +0.035, +0.077, +0.134, +0.187, +0.243, +0.295, +0.328, +0.383, +0.434, +0.470, +0.504, +0.540, +0.579, +0.612, +0.674, +0.720, +0.749, +0.819, +0.871, +0.920, +0.972, +1.033, +1.101, +1.152, +1.212, +1.268, +1.325, +1.390, +1.450, +1.503, +1.574, +1.620, +1.682, +1.732, +1.775, +1.888, +1.934, +1.984, +2.082, +2.137, +2.218, +2.300, +2.387, +2.507, +2.594, +2.686, +2.755, +2.836, +2.965, +3.065, +3.158, +3.320, +3.493, +3.763, +3.985, +4.330, +4.854, +5.218, +5.857, +5.924, +5.959, +5.969, +5.969, +5.969, +5.969, +5.969},  +0.390,  +0.383,   1.887},
{"DC6-9x1Bytes-1",5242880, 2048, 0, { -6.550, -6.550, -6.550, -6.550, -6.550, -6.104, -5.481, -4.878, -4.429, -4.013, -3.413, -3.094, -2.849, -2.649, -2.510, -2.387, -2.269, -2.120, -1.995, -1.908, -1.833, -1.737, -1.678, -1.610, -1.519, -1.444, -1.372, -1.311, -1.253, -1.204, -1.110, -1.062, -1.005, -0.928, -0.881, -0.826, -0.770, -0.714, -0.665, -0.613, -0.579, -0.529, -0.469, -0.423, -0.382, -0.343, -0.295, -0.236, -0.175, -0.120, -0.073, -0.045, +0.004, +0.061, +0.096, +0.140, +0.189, +0.250, +0.289, +0.323, +0.367, +0.416, +0.467, +0.509, +0.555, +0.613, +0.654, +0.700, +0.741, +0.773, +0.819, +0.853, +0.890, +0.940, +0.986, +1.026, +1.087, +1.153, +1.207, +1.253, +1.334, +1.418, +1.471, +1.536, +1.583, +1.653, +1.726, +1.792, +1.847, +1.937, +2.012, +2.073, +2.156, +2.216, +2.314, +2.431, +2.524, +2.610, +2.725, +2.855, +3.027, +3.150, +3.330, +3.481, +3.697, +3.913, +4.128, +4.408, +4.696, +5.307, +6.056, +6.754, +6.972, +6.972, +6.972, +6.972, +6.972},  +0.305,  +0.289,   1.843},
{"DC6-9x1Bytes-1",6291456, 2048, 0, { -6.106, -6.106, -6.106, -6.106, -6.106, -5.858, -5.448, -5.074, -4.340, -3.951, -3.408, -3.126, -2.843, -2.655, -2.498, -2.354, -2.249, -2.097, -1.989, -1.862, -1.780, -1.708, -1.617, -1.551, -1.479, -1.403, -1.345, -1.295, -1.237, -1.181, -1.128, -1.085, -1.050, -0.993, -0.948, -0.877, -0.819, -0.757, -0.725, -0.665, -0.625, -0.578, -0.502, -0.452, -0.404, -0.352, -0.289, -0.247, -0.181, -0.121, -0.077, -0.021, +0.032, +0.077, +0.122, +0.176, +0.214, +0.253, +0.297, +0.341, +0.386, +0.419, +0.463, +0.495, +0.539, +0.577, +0.615, +0.691, +0.735, +0.778, +0.823, +0.876, +0.922, +0.982, +1.021, +1.075, +1.130, +1.186, +1.243, +1.284, +1.324, +1.389, +1.451, +1.497, +1.567, +1.611, +1.656, +1.726, +1.775, +1.873, +1.968, +2.045, +2.134, +2.214, +2.280, +2.364, +2.463, +2.592, +2.716, +2.806, +2.888, +3.034, +3.178, +3.372, +3.590, +3.834, +4.029, +4.473, +4.736, +5.181, +5.575, +5.923, +6.182, +6.182, +6.182, +6.182, +6.182},  +0.291,  +0.297,   1.820},
{"DC6-9x1Bytes-1",7340032, 2048, 0, { -5.989, -5.989, -5.989, -5.989, -5.989, -5.488, -4.980, -4.811, -4.278, -4.088, -3.412, -3.156, -2.954, -2.703, -2.540, -2.423, -2.286, -2.175, -2.042, -1.921, -1.836, -1.754, -1.678, -1.589, -1.530, -1.470, -1.394, -1.330, -1.259, -1.198, -1.111, -1.052, -0.996, -0.929, -0.872, -0.827, -0.748, -0.684, -0.640, -0.604, -0.550, -0.497, -0.450, -0.401, -0.340, -0.298, -0.252, -0.208, -0.166, -0.128, -0.089, -0.052, +0.019, +0.058, +0.102, +0.144, +0.186, +0.247, +0.296, +0.342, +0.402, +0.448, +0.483, +0.526, +0.586, +0.622, +0.689, +0.723, +0.769, +0.826, +0.867, +0.912, +0.971, +1.010, +1.054, +1.113, +1.168, +1.211, +1.247, +1.298, +1.358, +1.407, +1.459, +1.510, +1.567, +1.625, +1.697, +1.760, +1.824, +1.877, +1.949, +2.029, +2.137, +2.238, +2.329, +2.391, +2.502, +2.583, +2.668, +2.766, +2.875, +2.997, +3.144, +3.350, +3.572, +3.866, +4.093, +4.520, +5.039, +5.679, +6.198, +6.273, +6.328, +6.328, +6.328, +6.328, +6.328},  +0.302,  +0.296,   1.833},
{"DC6-9x1Bytes-1",8388608, 2048, 0, { -6.003, -6.003, -6.003, -6.003, -6.003, -5.768, -5.504, -5.419, -4.721, -4.072, -3.562, -3.302, -3.112, -2.900, -2.699, -2.490, -2.364, -2.237, -2.115, -1.978, -1.916, -1.820, -1.703, -1.631, -1.533, -1.481, -1.424, -1.326, -1.252, -1.194, -1.135, -1.065, -1.002, -0.963, -0.928, -0.890, -0.836, -0.780, -0.700, -0.665, -0.614, -0.575, -0.522, -0.475, -0.426, -0.367, -0.323, -0.277, -0.229, -0.181, -0.150, -0.107, -0.064, -0.029, +0.033, +0.075, +0.142, +0.184, +0.233, +0.281, +0.313, +0.346, +0.407, +0.436, +0.494, +0.532, +0.580, +0.647, +0.690, +0.738, +0.808, +0.863, +0.894, +0.937, +0.985, +1.027, +1.075, +1.138, +1.186, +1.242, +1.282, +1.351, +1.395, +1.444, +1.518, +1.570, +1.628, +1.677, +1.713, +1.778, +1.844, +1.915, +1.971, +2.097, +2.161, +2.236, +2.326, +2.416, +2.487, +2.558, +2.714, +2.847, +2.981, +3.171, +3.396, +3.685, +4.049, +4.305, +5.018, +5.681, +6.066, +6.619, +6.981, +6.981, +6.981, +6.981, +6.981},  +0.216,  +0.233,   1.824},
{"DC6-9x1Bytes-1",10485760, 2048, 0, { -6.101, -6.101, -6.101, -6.101, -6.101, -5.992, -5.857, -4.919, -4.478, -4.102, -3.538, -3.345, -3.062, -2.787, -2.611, -2.489, -2.348, -2.253, -2.138, -2.026, -1.929, -1.841, -1.734, -1.660, -1.605, -1.509, -1.432, -1.383, -1.328, -1.280, -1.232, -1.152, -1.101, -1.017, -0.948, -0.895, -0.828, -0.792, -0.744, -0.686, -0.635, -0.585, -0.545, -0.496, -0.422, -0.383, -0.318, -0.259, -0.209, -0.174, -0.125, -0.085, -0.022, +0.038, +0.084, +0.126, +0.173, +0.208, +0.251, +0.297, +0.333, +0.389, +0.432, +0.478, +0.528, +0.558, +0.580, +0.615, +0.658, +0.713, +0.783, +0.829, +0.873, +0.927, +0.981, +1.030, +1.081, +1.130, +1.169, +1.210, +1.248, +1.285, +1.329, +1.392, +1.452, +1.514, +1.570, +1.647, +1.711, +1.785, +1.856, +1.930, +1.988, +2.093, +2.165, +2.233, +2.276, +2.416, +2.523, +2.633, +2.746, +2.872, +2.998, +3.143, +3.329, +3.504, +3.746, +4.125, +4.534, +5.515, +6.036, +6.597, +6.996, +6.996, +6.996, +6.996, +6.996},  +0.202,  +0.251,   1.802},
{"DC6-9x1Bytes-1",12582912, 2048, 0, { -5.634, -5.634, -5.634, -5.634, -5.634, -5.550, -5.377, -5.193, -4.609, -4.242, -3.647, -3.304, -3.040, -2.900, -2.732, -2.553, -2.376, -2.271, -2.151, -2.047, -1.957, -1.900, -1.816, -1.695, -1.605, -1.545, -1.458, -1.406, -1.350, -1.295, -1.224, -1.150, -1.067, -0.986, -0.947, -0.906, -0.813, -0.770, -0.703, -0.641, -0.578, -0.524, -0.479, -0.442, -0.377, -0.342, -0.311, -0.262, -0.219, -0.165, -0.129, -0.089, -0.061, -0.003, +0.044, +0.110, +0.156, +0.185, +0.231, +0.281, +0.326, +0.383, +0.426, +0.472, +0.511, +0.542, +0.595, +0.628, +0.673, +0.709, +0.774, +0.817, +0.845, +0.916, +0.956, +0.993, +1.028, +1.067, +1.117, +1.163, +1.199, +1.262, +1.324, +1.387, +1.457, +1.560, +1.612, +1.665, +1.751, +1.816, +1.899, +1.969, +2.037, +2.120, +2.213, +2.276, +2.341, +2.415, +2.482, +2.573, +2.742, +2.874, +2.984, +3.110, +3.255, +3.466, +3.804, +4.291, +4.655, +5.328, +5.943, +5.991, +6.034, +6.034, +6.034, +6.034, +6.034},  +0.195,  +0.231,   1.815},
{"DC6-9x1Bytes-1",14680064, 2048, 0, { -6.637, -6.637, -6.637, -6.637, -6.637, -6.153, -5.229, -4.725, -4.445, -4.085, -3.671, -3.332, -2.992, -2.792, -2.645, -2.557, -2.450, -2.361, -2.226, -2.133, -2.039, -1.938, -1.833, -1.730, -1.644, -1.526, -1.430, -1.361, -1.326, -1.259, -1.200, -1.140, -1.080, -1.024, -0.960, -0.896, -0.847, -0.798, -0.740, -0.697, -0.638, -0.596, -0.552, -0.506, -0.472, -0.439, -0.390, -0.335, -0.266, -0.215, -0.179, -0.138, -0.093, -0.040, +0.021, +0.083, +0.131, +0.178, +0.247, +0.300, +0.347, +0.381, +0.413, +0.451, +0.499, +0.533, +0.582, +0.626, +0.670, +0.706, +0.771, +0.843, +0.894, +0.947, +0.988, +1.048, +1.099, +1.140, +1.193, +1.251, +1.310, +1.372, +1.408, +1.458, +1.505, +1.551, +1.606, +1.676, +1.755, +1.824, +1.898, +1.950, +2.020, +2.092, +2.156, +2.242, +2.309, +2.408, +2.505, +2.628, +2.718, +2.836, +2.962, +3.140, +3.362, +3.667, +3.950, +4.261, +4.640, +5.114, +5.877, +6.221, +6.426, +6.426, +6.426, +6.426, +6.426},  +0.195,  +0.247,   1.825},
{"DC6-9x1Bytes-1",16777216, 2048, 0, { -7.644, -7.644, -7.644, -7.644, -7.644, -6.940, -6.010, -5.303, -4.607, -4.129, -3.654, -3.249, -2.993, -2.859, -2.720, -2.526, -2.415, -2.280, -2.152, -2.073, -1.954, -1.881, -1.788, -1.702, -1.623, -1.562, -1.473, -1.391, -1.345, -1.284, -1.194, -1.159, -1.094, -1.054, -0.998, -0.956, -0.900, -0.863, -0.826, -0.777, -0.733, -0.683, -0.628, -0.573, -0.518, -0.461, -0.426, -0.374, -0.341, -0.290, -0.250, -0.195, -0.133, -0.062, +0.002, +0.058, +0.108, +0.143, +0.190, +0.230, +0.279, +0.320, +0.371, +0.407, +0.437, +0.485, +0.558, +0.607, +0.650, +0.696, +0.757, +0.808, +0.841, +0.868, +0.924, +0.981, +1.014, +1.065, +1.106, +1.161, +1.206, +1.284, +1.339, +1.397, +1.456, +1.526, +1.589, +1.639, +1.710, +1.786, +1.843, +1.919, +1.997, +2.123, +2.191, +2.286, +2.374, +2.504, +2.615, +2.730, +2.864, +2.957, +3.050, +3.134, +3.248, +3.455, +3.818, +4.340, +4.687, +5.421, +5.957, +6.612, +7.036, +7.036, +7.036, +7.036, +7.036},  +0.168,  +0.190,   1.834},
*/
	//{ "Gap-16:A", 1ull << (10 - 10), 65536, 0, {-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-1.441,-1.441,-1.441,-1.441,-1.437,-1.437,-1.437,-1.437,-1.338,-1.338,-1.338,-1.290,-1.290,-1.290,-1.262,-1.262,-1.262,-1.239,-1.239,-1.239,-1.185,-1.185,-1.185,-1.125,-1.125,-1.060,-1.060,-1.039,-1.029,-0.931,-0.926,-0.883,-0.879,-0.855,-0.843,-0.832,-0.828,-0.780,-0.777,-0.764,-0.743,-0.729,-0.716,-0.710,-0.692,-0.682,-0.669,-0.653,-0.649,-0.637,-0.623,-0.612,-0.590,-0.576,-0.566,-0.550,-0.539,-0.517,-0.503,-0.487,-0.466,-0.461,-0.437,-0.411,-0.388,-0.351,-0.311,-0.264,-0.181,-0.053,-0.044,+0.063,+0.142,+0.171,+0.240,+0.285,+0.329,+0.364,+0.433,+0.486,+0.543,+0.605,+0.698,+0.795,+1.041,+1.440,+1.838,+2.153,+2.451,+2.725,+3.132,+3.323,+3.467,+4.470,+4.168}},//10
	//{ "Gap-16:A", 1ull << (11 - 10), 65536, 0, {-4.123,-4.123,-4.123,-4.123,-4.123,-2.990,-2.773,-2.669,-2.151,-1.944,-1.685,-1.537,-1.452,-1.393,-1.343,-1.299,-1.262,-1.226,-1.195,-1.164,-1.135,-1.107,-1.080,-1.055,-1.029,-1.004,-0.979,-0.956,-0.933,-0.909,-0.886,-0.861,-0.838,-0.815,-0.792,-0.769,-0.746,-0.723,-0.699,-0.675,-0.650,-0.628,-0.604,-0.581,-0.558,-0.535,-0.513,-0.492,-0.469,-0.447,-0.425,-0.403,-0.383,-0.363,-0.343,-0.324,-0.304,-0.282,-0.263,-0.244,-0.224,-0.204,-0.186,-0.166,-0.146,-0.126,-0.107,-0.085,-0.064,-0.043,-0.021,+0.001,+0.026,+0.051,+0.077,+0.104,+0.132,+0.161,+0.188,+0.218,+0.248,+0.277,+0.306,+0.340,+0.372,+0.406,+0.438,+0.471,+0.506,+0.541,+0.578,+0.614,+0.653,+0.693,+0.735,+0.782,+0.832,+0.884,+0.946,+1.014,+1.088,+1.166,+1.253,+1.360,+1.483,+1.637,+1.862,+2.219,+2.555,+2.953,+3.290,+3.612,+4.048,+4.307,+4.428,+5.080,+4.769}},
	{ "Gap-16:A",                 3,131072, 0, { -2.812, -2.594, -2.479, -2.407, -2.290, -2.119, -1.971, -1.829, -1.643, -1.495, -1.343, -1.233, -1.144, -1.067, -1.005, -0.949, -0.901, -0.854, -0.809, -0.768, -0.729, -0.692, -0.658, -0.624, -0.590, -0.558, -0.527, -0.496, -0.468, -0.440, -0.411, -0.384, -0.356, -0.330, -0.306, -0.281, -0.255, -0.230, -0.205, -0.180, -0.156, -0.132, -0.108, -0.084, -0.062, -0.038, -0.014, +0.009, +0.033, +0.055, +0.078, +0.100, +0.124, +0.148, +0.171, +0.194, +0.218, +0.241, +0.264, +0.287, +0.311, +0.335, +0.360, +0.384, +0.408, +0.433, +0.457, +0.483, +0.508, +0.533, +0.559, +0.587, +0.614, +0.641, +0.668, +0.695, +0.724, +0.752, +0.781, +0.811, +0.840, +0.870, +0.902, +0.934, +0.967, +1.001, +1.036, +1.073, +1.110, +1.149, +1.189, +1.231, +1.276, +1.323, +1.370, +1.422, +1.477, +1.536, +1.601, +1.668, +1.743, +1.825, +1.919, +2.024, +2.153, +2.318, +2.533, +2.896, +3.234, +3.651, +3.928, +4.244, +4.694, +4.970, +5.150, +5.295, +6.237}},
	{ "Gap-16:A", 1ull << (12 - 10), 65536, 0, {-2.916,-2.944,-2.771,-2.661,-2.563,-2.383,-2.180,-2.003,-1.754,-1.550,-1.306,-1.148,-1.029,-0.930,-0.854,-0.783,-0.719,-0.651,-0.595,-0.545,-0.498,-0.451,-0.407,-0.364,-0.323,-0.284,-0.245,-0.208,-0.174,-0.139,-0.104,-0.071,-0.039,-0.005,+0.025,+0.056,+0.087,+0.116,+0.145,+0.171,+0.201,+0.228,+0.256,+0.284,+0.312,+0.340,+0.368,+0.395,+0.423,+0.450,+0.476,+0.505,+0.532,+0.558,+0.585,+0.611,+0.636,+0.664,+0.691,+0.716,+0.744,+0.772,+0.799,+0.828,+0.854,+0.880,+0.908,+0.937,+0.966,+0.993,+1.023,+1.051,+1.081,+1.111,+1.142,+1.175,+1.205,+1.236,+1.269,+1.301,+1.332,+1.366,+1.400,+1.437,+1.473,+1.511,+1.549,+1.589,+1.629,+1.675,+1.716,+1.766,+1.816,+1.867,+1.920,+1.975,+2.036,+2.100,+2.169,+2.245,+2.325,+2.412,+2.511,+2.623,+2.760,+2.937,+3.162,+3.524,+3.854,+4.304,+4.612,+4.866,+5.243,+5.524,+5.919,+8.042,+7.506}},
	{ "Gap-16:A", 1ull << (13 - 10), 65536, 0, {-4.359,-4.422,-3.640,-3.375,-3.173,-2.924,-2.663,-2.456,-2.121,-1.826,-1.497,-1.273,-1.112,-0.970,-0.853,-0.752,-0.660,-0.578,-0.500,-0.427,-0.360,-0.298,-0.239,-0.181,-0.126,-0.070,-0.020,+0.029,+0.079,+0.131,+0.179,+0.226,+0.271,+0.315,+0.357,+0.400,+0.438,+0.477,+0.518,+0.554,+0.594,+0.633,+0.671,+0.707,+0.745,+0.784,+0.821,+0.857,+0.894,+0.931,+0.965,+1.000,+1.036,+1.075,+1.111,+1.147,+1.184,+1.220,+1.256,+1.290,+1.325,+1.363,+1.397,+1.430,+1.466,+1.504,+1.539,+1.577,+1.615,+1.650,+1.689,+1.729,+1.770,+1.810,+1.848,+1.889,+1.930,+1.969,+2.012,+2.052,+2.095,+2.144,+2.189,+2.240,+2.286,+2.335,+2.381,+2.431,+2.482,+2.536,+2.591,+2.651,+2.712,+2.776,+2.840,+2.913,+2.984,+3.060,+3.138,+3.230,+3.332,+3.441,+3.567,+3.717,+3.898,+4.105,+4.383,+4.831,+5.223,+5.706,+6.024,+6.356,+6.740,+6.920,+7.278,+8.875,+8.199}},
	{ "Gap-16:A", 1ull << (14 - 10), 65536, 0, {-4.681,-4.687,-4.545,-4.304,-4.012,-3.725,-3.381,-3.064,-2.641,-2.335,-1.964,-1.744,-1.556,-1.409,-1.282,-1.175,-1.078,-0.990,-0.908,-0.827,-0.756,-0.686,-0.622,-0.558,-0.499,-0.440,-0.381,-0.328,-0.277,-0.227,-0.176,-0.125,-0.077,-0.030,+0.019,+0.064,+0.107,+0.151,+0.193,+0.234,+0.274,+0.318,+0.358,+0.396,+0.440,+0.482,+0.521,+0.563,+0.605,+0.643,+0.679,+0.717,+0.755,+0.795,+0.833,+0.874,+0.913,+0.952,+0.992,+1.031,+1.070,+1.109,+1.147,+1.186,+1.226,+1.263,+1.301,+1.342,+1.382,+1.422,+1.461,+1.502,+1.545,+1.589,+1.631,+1.674,+1.718,+1.758,+1.807,+1.852,+1.901,+1.950,+1.999,+2.049,+2.101,+2.150,+2.207,+2.261,+2.315,+2.375,+2.442,+2.501,+2.570,+2.638,+2.711,+2.783,+2.868,+2.953,+3.048,+3.147,+3.257,+3.371,+3.504,+3.656,+3.829,+4.052,+4.358,+4.872,+5.337,+5.917,+6.331,+6.627,+7.145,+7.379,+7.695,+7.832,+7.795}},
	{ "Gap-16:A", 1ull << (15 - 10), 65536, 0, {-4.920,-4.964,-4.745,-4.468,-4.180,-3.906,-3.648,-3.393,-2.974,-2.695,-2.315,-2.086,-1.913,-1.766,-1.653,-1.549,-1.452,-1.361,-1.281,-1.203,-1.131,-1.064,-1.004,-0.949,-0.887,-0.831,-0.776,-0.720,-0.669,-0.619,-0.572,-0.524,-0.476,-0.431,-0.385,-0.344,-0.301,-0.261,-0.221,-0.181,-0.144,-0.105,-0.066,-0.027,+0.013,+0.049,+0.087,+0.127,+0.164,+0.203,+0.239,+0.277,+0.315,+0.352,+0.389,+0.427,+0.462,+0.499,+0.536,+0.573,+0.609,+0.646,+0.684,+0.721,+0.761,+0.799,+0.837,+0.876,+0.915,+0.955,+0.995,+1.037,+1.077,+1.115,+1.155,+1.198,+1.237,+1.279,+1.323,+1.365,+1.409,+1.455,+1.502,+1.549,+1.598,+1.648,+1.701,+1.753,+1.806,+1.861,+1.926,+1.988,+2.048,+2.112,+2.186,+2.260,+2.337,+2.412,+2.497,+2.593,+2.697,+2.810,+2.934,+3.090,+3.264,+3.486,+3.756,+4.215,+4.586,+5.097,+5.542,+5.895,+6.242,+6.549,+6.714,+6.864,+6.802}},//15
	{ "Gap-16:A", 1ull << (16 - 10), 65536, 0, {-5.395,-5.879,-4.760,-4.435,-4.302,-4.021,-3.846,-3.574,-3.178,-2.857,-2.497,-2.276,-2.087,-1.945,-1.825,-1.723,-1.628,-1.544,-1.463,-1.388,-1.320,-1.255,-1.193,-1.136,-1.081,-1.024,-0.969,-0.915,-0.865,-0.817,-0.772,-0.726,-0.680,-0.637,-0.594,-0.551,-0.512,-0.468,-0.429,-0.389,-0.350,-0.310,-0.270,-0.232,-0.195,-0.157,-0.118,-0.079,-0.042,-0.002,+0.035,+0.072,+0.107,+0.144,+0.179,+0.214,+0.251,+0.289,+0.326,+0.362,+0.400,+0.438,+0.475,+0.510,+0.545,+0.583,+0.620,+0.656,+0.693,+0.730,+0.769,+0.806,+0.846,+0.884,+0.923,+0.965,+1.001,+1.043,+1.082,+1.127,+1.170,+1.215,+1.261,+1.306,+1.353,+1.402,+1.454,+1.506,+1.558,+1.613,+1.669,+1.733,+1.795,+1.860,+1.923,+1.993,+2.061,+2.137,+2.215,+2.308,+2.405,+2.514,+2.640,+2.768,+2.930,+3.134,+3.417,+3.840,+4.221,+4.652,+4.981,+5.375,+5.858,+6.033,+6.371,+6.475,+6.469}},
	{ "Gap-16:A", 1ull << (17 - 10), 65536, 0, {-5.171,-5.173,-4.836,-4.690,-4.561,-4.244,-3.918,-3.646,-3.276,-2.939,-2.592,-2.351,-2.186,-2.040,-1.910,-1.804,-1.701,-1.612,-1.529,-1.453,-1.382,-1.314,-1.253,-1.192,-1.135,-1.078,-1.022,-0.970,-0.921,-0.872,-0.825,-0.775,-0.723,-0.678,-0.635,-0.592,-0.551,-0.509,-0.465,-0.428,-0.389,-0.348,-0.309,-0.270,-0.231,-0.193,-0.154,-0.117,-0.080,-0.044,-0.009,+0.030,+0.066,+0.102,+0.137,+0.172,+0.209,+0.246,+0.281,+0.315,+0.350,+0.385,+0.422,+0.462,+0.499,+0.536,+0.574,+0.609,+0.647,+0.685,+0.723,+0.761,+0.799,+0.837,+0.874,+0.914,+0.953,+0.996,+1.037,+1.079,+1.118,+1.163,+1.208,+1.253,+1.298,+1.343,+1.391,+1.442,+1.491,+1.544,+1.599,+1.653,+1.710,+1.775,+1.841,+1.904,+1.981,+2.058,+2.141,+2.228,+2.317,+2.416,+2.527,+2.672,+2.831,+3.011,+3.275,+3.675,+4.063,+4.493,+4.791,+5.123,+5.408,+5.729,+6.172,+6.432,+6.339}},
	{ "Gap-16:A", 1ull << (18 - 10), 65536, 0, {-5.167,-5.173,-5.076,-4.870,-4.594,-4.174,-4.015,-3.676,-3.333,-2.993,-2.623,-2.374,-2.193,-2.039,-1.907,-1.800,-1.707,-1.620,-1.541,-1.463,-1.391,-1.321,-1.260,-1.195,-1.141,-1.082,-1.028,-0.979,-0.930,-0.880,-0.833,-0.788,-0.741,-0.697,-0.654,-0.610,-0.568,-0.526,-0.485,-0.446,-0.406,-0.367,-0.328,-0.291,-0.254,-0.218,-0.182,-0.146,-0.110,-0.073,-0.037,-0.003,+0.034,+0.067,+0.104,+0.137,+0.172,+0.206,+0.243,+0.281,+0.317,+0.351,+0.389,+0.426,+0.460,+0.494,+0.531,+0.567,+0.604,+0.640,+0.679,+0.718,+0.758,+0.796,+0.836,+0.876,+0.916,+0.955,+0.996,+1.035,+1.075,+1.115,+1.159,+1.205,+1.256,+1.308,+1.356,+1.405,+1.453,+1.504,+1.562,+1.621,+1.677,+1.733,+1.796,+1.861,+1.937,+2.008,+2.096,+2.180,+2.273,+2.381,+2.490,+2.617,+2.779,+2.969,+3.233,+3.629,+4.005,+4.474,+4.763,+4.966,+5.461,+5.926,+6.125,+6.639,+6.541}},
	{ "Gap-16:A", 1ull << (19 - 10), 65536, 0, {-6.059,-6.623,-5.327,-4.859,-4.569,-4.345,-4.066,-3.711,-3.331,-3.008,-2.627,-2.372,-2.179,-2.041,-1.915,-1.803,-1.706,-1.614,-1.532,-1.458,-1.384,-1.316,-1.249,-1.185,-1.130,-1.076,-1.019,-0.965,-0.913,-0.865,-0.815,-0.770,-0.723,-0.677,-0.631,-0.587,-0.544,-0.500,-0.460,-0.423,-0.382,-0.344,-0.306,-0.268,-0.230,-0.192,-0.158,-0.120,-0.082,-0.045,-0.009,+0.031,+0.066,+0.103,+0.139,+0.178,+0.211,+0.251,+0.286,+0.320,+0.357,+0.390,+0.427,+0.462,+0.496,+0.530,+0.565,+0.600,+0.638,+0.673,+0.710,+0.747,+0.787,+0.826,+0.865,+0.903,+0.945,+0.985,+1.029,+1.069,+1.111,+1.152,+1.193,+1.238,+1.281,+1.331,+1.380,+1.434,+1.484,+1.534,+1.584,+1.639,+1.696,+1.756,+1.821,+1.883,+1.955,+2.027,+2.108,+2.192,+2.275,+2.381,+2.487,+2.618,+2.770,+2.958,+3.204,+3.606,+3.974,+4.419,+4.752,+5.098,+5.663,+5.923,+6.164,+6.539,+6.388}},
	{ "Gap-16:A", 1ull << (20 - 10), 65536, 0, {-5.665,-5.795,-4.885,-4.686,-4.465,-4.259,-4.001,-3.690,-3.274,-2.930,-2.536,-2.292,-2.113,-1.972,-1.849,-1.736,-1.640,-1.549,-1.465,-1.388,-1.319,-1.253,-1.183,-1.125,-1.068,-1.010,-0.955,-0.901,-0.850,-0.799,-0.751,-0.703,-0.659,-0.612,-0.568,-0.525,-0.483,-0.443,-0.399,-0.360,-0.320,-0.280,-0.240,-0.203,-0.165,-0.127,-0.087,-0.048,-0.011,+0.023,+0.058,+0.093,+0.129,+0.164,+0.199,+0.234,+0.267,+0.305,+0.337,+0.375,+0.411,+0.448,+0.484,+0.519,+0.554,+0.591,+0.628,+0.664,+0.701,+0.736,+0.772,+0.808,+0.847,+0.885,+0.924,+0.962,+1.002,+1.041,+1.082,+1.121,+1.164,+1.208,+1.250,+1.296,+1.342,+1.391,+1.439,+1.487,+1.537,+1.590,+1.643,+1.702,+1.761,+1.822,+1.886,+1.950,+2.018,+2.086,+2.163,+2.244,+2.327,+2.430,+2.540,+2.663,+2.822,+3.016,+3.256,+3.638,+4.009,+4.441,+4.759,+5.086,+5.436,+5.802,+5.916,+6.690,+6.573}},//20
	{ "Gap-16:A", 1ull << (21 - 10), 65536, 0, {-5.695,-6.068,-5.139,-4.746,-4.622,-4.161,-3.828,-3.569,-3.136,-2.788,-2.414,-2.179,-1.998,-1.858,-1.737,-1.616,-1.516,-1.427,-1.347,-1.271,-1.198,-1.131,-1.068,-1.009,-0.951,-0.894,-0.840,-0.786,-0.735,-0.684,-0.638,-0.586,-0.543,-0.497,-0.453,-0.408,-0.366,-0.323,-0.283,-0.244,-0.204,-0.165,-0.127,-0.089,-0.049,-0.011,+0.026,+0.064,+0.101,+0.139,+0.173,+0.207,+0.244,+0.281,+0.319,+0.355,+0.390,+0.424,+0.462,+0.496,+0.533,+0.572,+0.607,+0.645,+0.680,+0.715,+0.751,+0.786,+0.821,+0.855,+0.892,+0.931,+0.968,+1.007,+1.048,+1.087,+1.129,+1.169,+1.209,+1.249,+1.289,+1.329,+1.375,+1.420,+1.463,+1.508,+1.557,+1.604,+1.652,+1.702,+1.758,+1.816,+1.875,+1.939,+2.000,+2.065,+2.137,+2.210,+2.292,+2.378,+2.478,+2.571,+2.679,+2.807,+2.955,+3.139,+3.374,+3.783,+4.161,+4.592,+4.879,+5.172,+5.500,+5.714,+6.045,+6.275,+6.272}},
	{ "Gap-16:A", 1ull << (22 - 10), 65536, 0, {-5.445,-5.453,-5.017,-4.824,-4.494,-4.104,-3.687,-3.400,-2.971,-2.631,-2.284,-2.028,-1.845,-1.697,-1.561,-1.453,-1.356,-1.263,-1.182,-1.107,-1.035,-0.970,-0.904,-0.842,-0.784,-0.724,-0.670,-0.615,-0.568,-0.518,-0.470,-0.420,-0.372,-0.330,-0.288,-0.244,-0.201,-0.158,-0.115,-0.074,-0.035,+0.003,+0.042,+0.080,+0.119,+0.152,+0.189,+0.227,+0.263,+0.297,+0.334,+0.371,+0.408,+0.446,+0.480,+0.517,+0.552,+0.590,+0.626,+0.660,+0.695,+0.731,+0.768,+0.805,+0.842,+0.878,+0.912,+0.947,+0.984,+1.020,+1.058,+1.095,+1.132,+1.171,+1.210,+1.248,+1.289,+1.331,+1.372,+1.415,+1.458,+1.500,+1.543,+1.590,+1.635,+1.683,+1.730,+1.781,+1.833,+1.882,+1.934,+1.989,+2.048,+2.109,+2.173,+2.238,+2.308,+2.384,+2.460,+2.544,+2.630,+2.728,+2.841,+2.975,+3.116,+3.306,+3.552,+3.921,+4.295,+4.778,+5.071,+5.331,+5.687,+5.905,+6.162,+6.512,+6.382}},
	{ "Gap-16:A", 1ull << (23 - 10), 65536, 0, {-5.290,-5.649,-4.795,-4.523,-4.186,-3.799,-3.627,-3.379,-2.950,-2.629,-2.223,-1.991,-1.815,-1.665,-1.536,-1.417,-1.312,-1.218,-1.130,-1.053,-0.979,-0.913,-0.847,-0.781,-0.722,-0.664,-0.613,-0.558,-0.509,-0.459,-0.410,-0.364,-0.316,-0.273,-0.230,-0.186,-0.144,-0.105,-0.064,-0.025,+0.012,+0.052,+0.089,+0.129,+0.165,+0.204,+0.241,+0.277,+0.314,+0.349,+0.387,+0.422,+0.458,+0.497,+0.531,+0.567,+0.602,+0.637,+0.672,+0.708,+0.745,+0.780,+0.814,+0.851,+0.887,+0.923,+0.960,+0.999,+1.034,+1.074,+1.111,+1.148,+1.186,+1.224,+1.264,+1.302,+1.345,+1.384,+1.425,+1.466,+1.509,+1.552,+1.597,+1.640,+1.685,+1.732,+1.777,+1.825,+1.876,+1.926,+1.976,+2.028,+2.078,+2.140,+2.198,+2.265,+2.336,+2.409,+2.489,+2.580,+2.670,+2.768,+2.873,+2.993,+3.141,+3.331,+3.558,+3.948,+4.298,+4.767,+5.102,+5.373,+5.892,+6.006,+6.082,+6.660,+6.431}},
	{"Gap-16:A",              10240, 65536, 0, { -5.306, -4.912, -4.787, -4.655, -4.454, -4.083, -3.762, -3.481, -3.019, -2.635, -2.233, -2.001, -1.820, -1.666, -1.544, -1.433, -1.338, -1.249, -1.162, -1.080, -1.009, -0.939, -0.874, -0.810, -0.752, -0.695, -0.639, -0.588, -0.535, -0.485, -0.439, -0.395, -0.350, -0.309, -0.265, -0.222, -0.178, -0.136, -0.094, -0.057, -0.014, +0.025, +0.063, +0.102, +0.142, +0.181, +0.219, +0.258, +0.295, +0.331, +0.367, +0.403, +0.440, +0.477, +0.513, +0.549, +0.583, +0.620, +0.657, +0.693, +0.729, +0.762, +0.799, +0.834, +0.871, +0.907, +0.943, +0.976, +1.013, +1.050, +1.086, +1.125, +1.166, +1.205, +1.242, +1.283, +1.320, +1.361, +1.403, +1.446, +1.489, +1.533, +1.580, +1.625, +1.671, +1.714, +1.761, +1.811, +1.866, +1.916, +1.967, +2.019, +2.076, +2.135, +2.197, +2.266, +2.335, +2.412, +2.489, +2.573, +2.668, +2.772, +2.890, +3.013, +3.163, +3.363, +3.600, +4.002, +4.342, +4.757, +5.091, +5.357, +5.806, +5.920, +6.018, +6.239, +6.336},  +0.660,  +0.657,   1.425},
	{"Gap-16:A",              12288, 65536, 0, { -5.250, -5.215, -4.949, -4.497, -4.444, -4.075, -3.724, -3.446, -2.990, -2.638, -2.247, -1.995, -1.819, -1.683, -1.561, -1.445, -1.346, -1.258, -1.174, -1.097, -1.025, -0.952, -0.890, -0.828, -0.773, -0.716, -0.660, -0.606, -0.555, -0.501, -0.455, -0.410, -0.363, -0.315, -0.270, -0.228, -0.186, -0.143, -0.107, -0.064, -0.023, +0.016, +0.054, +0.092, +0.133, +0.173, +0.208, +0.245, +0.284, +0.320, +0.355, +0.389, +0.427, +0.467, +0.501, +0.539, +0.577, +0.613, +0.647, +0.684, +0.721, +0.757, +0.792, +0.826, +0.859, +0.893, +0.930, +0.968, +1.004, +1.039, +1.073, +1.110, +1.147, +1.188, +1.227, +1.265, +1.305, +1.342, +1.383, +1.427, +1.469, +1.511, +1.555, +1.598, +1.644, +1.688, +1.734, +1.782, +1.833, +1.884, +1.938, +1.999, +2.059, +2.117, +2.178, +2.242, +2.312, +2.387, +2.468, +2.554, +2.646, +2.748, +2.864, +2.992, +3.144, +3.322, +3.571, +3.979, +4.360, +4.729, +5.097, +5.365, +5.819, +6.050, +6.187, +6.450, +6.695},  +0.645,  +0.647,   1.420},
	{"Gap-16:A",              14336, 65536, 0, { -5.406, -5.351, -4.999, -4.748, -4.439, -3.964, -3.694, -3.387, -3.020, -2.674, -2.283, -2.033, -1.849, -1.696, -1.572, -1.459, -1.358, -1.273, -1.189, -1.109, -1.038, -0.970, -0.902, -0.840, -0.780, -0.728, -0.671, -0.618, -0.568, -0.520, -0.475, -0.429, -0.382, -0.336, -0.289, -0.248, -0.205, -0.164, -0.122, -0.081, -0.039, +0.000, +0.042, +0.080, +0.116, +0.155, +0.193, +0.229, +0.266, +0.301, +0.339, +0.375, +0.414, +0.450, +0.486, +0.521, +0.557, +0.595, +0.631, +0.665, +0.702, +0.738, +0.774, +0.811, +0.845, +0.881, +0.919, +0.954, +0.991, +1.026, +1.064, +1.103, +1.145, +1.183, +1.222, +1.262, +1.303, +1.347, +1.385, +1.428, +1.470, +1.512, +1.556, +1.601, +1.650, +1.700, +1.746, +1.794, +1.846, +1.898, +1.953, +2.008, +2.064, +2.127, +2.188, +2.257, +2.323, +2.397, +2.474, +2.560, +2.650, +2.745, +2.861, +3.002, +3.150, +3.338, +3.586, +4.001, +4.341, +4.779, +5.029, +5.324, +5.707, +5.979, +6.142, +6.643, +6.836},  +0.637,  +0.631,   1.429},
	{"Gap-16:A",  1ull << (24 - 10), 65536, 0, { -5.335, -5.259, -4.973, -4.569, -4.219, -3.977, -3.732, -3.424, -3.013, -2.651, -2.284, -2.043, -1.851, -1.697, -1.579, -1.472, -1.373, -1.279, -1.200, -1.117, -1.043, -0.973, -0.908, -0.848, -0.787, -0.728, -0.673, -0.621, -0.569, -0.519, -0.471, -0.424, -0.381, -0.335, -0.289, -0.246, -0.203, -0.161, -0.120, -0.080, -0.040, -0.003, +0.037, +0.076, +0.113, +0.152, +0.190, +0.226, +0.264, +0.300, +0.336, +0.373, +0.408, +0.442, +0.476, +0.513, +0.550, +0.587, +0.623, +0.659, +0.697, +0.733, +0.768, +0.808, +0.845, +0.884, +0.920, +0.957, +0.994, +1.032, +1.067, +1.103, +1.142, +1.180, +1.220, +1.259, +1.301, +1.342, +1.382, +1.423, +1.466, +1.508, +1.555, +1.598, +1.643, +1.688, +1.734, +1.784, +1.837, +1.890, +1.946, +2.004, +2.062, +2.118, +2.184, +2.251, +2.317, +2.386, +2.461, +2.552, +2.648, +2.752, +2.866, +2.990, +3.132, +3.320, +3.557, +3.967, +4.349, +4.771, +4.997, +5.335, +5.855, +6.153, +6.343, +6.517, +6.613},  +0.633,  +0.623,   1.427},
	{"Gap-16:A",              20480, 65536, 0, { -6.319, -5.646, -5.219, -4.757, -4.465, -4.095, -3.798, -3.465, -3.038, -2.678, -2.296, -2.040, -1.856, -1.703, -1.579, -1.469, -1.369, -1.280, -1.196, -1.115, -1.041, -0.976, -0.912, -0.845, -0.787, -0.727, -0.673, -0.621, -0.570, -0.523, -0.477, -0.428, -0.381, -0.335, -0.293, -0.249, -0.209, -0.167, -0.125, -0.088, -0.050, -0.012, +0.024, +0.062, +0.100, +0.139, +0.174, +0.211, +0.246, +0.281, +0.316, +0.355, +0.393, +0.431, +0.467, +0.502, +0.536, +0.571, +0.608, +0.644, +0.682, +0.717, +0.755, +0.791, +0.826, +0.863, +0.899, +0.939, +0.978, +1.014, +1.050, +1.088, +1.125, +1.164, +1.202, +1.241, +1.280, +1.321, +1.361, +1.403, +1.443, +1.487, +1.530, +1.574, +1.620, +1.669, +1.716, +1.766, +1.819, +1.869, +1.919, +1.978, +2.035, +2.096, +2.160, +2.226, +2.301, +2.372, +2.443, +2.525, +2.618, +2.714, +2.829, +2.963, +3.111, +3.293, +3.540, +3.932, +4.281, +4.714, +4.986, +5.211, +5.456, +5.792, +6.250, +6.768, +7.104},  +0.618,  +0.608,   1.420},
	{"Gap-16:A",              24576, 65536, 0, { -5.537, -5.183, -5.020, -4.688, -4.420, -4.037, -3.799, -3.534, -3.067, -2.700, -2.315, -2.061, -1.881, -1.718, -1.593, -1.475, -1.371, -1.280, -1.193, -1.117, -1.047, -0.979, -0.913, -0.851, -0.792, -0.740, -0.689, -0.632, -0.584, -0.533, -0.489, -0.442, -0.398, -0.351, -0.310, -0.264, -0.221, -0.177, -0.136, -0.097, -0.057, -0.015, +0.025, +0.061, +0.100, +0.135, +0.172, +0.211, +0.247, +0.282, +0.318, +0.356, +0.392, +0.426, +0.463, +0.497, +0.535, +0.570, +0.607, +0.643, +0.677, +0.714, +0.748, +0.784, +0.819, +0.855, +0.890, +0.928, +0.965, +1.000, +1.038, +1.075, +1.115, +1.155, +1.195, +1.233, +1.276, +1.318, +1.357, +1.398, +1.439, +1.482, +1.526, +1.570, +1.613, +1.662, +1.710, +1.765, +1.815, +1.868, +1.921, +1.977, +2.035, +2.096, +2.160, +2.223, +2.289, +2.368, +2.444, +2.528, +2.615, +2.716, +2.829, +2.954, +3.097, +3.288, +3.532, +3.926, +4.285, +4.715, +4.996, +5.245, +5.624, +5.800, +6.001, +6.363, +6.483},  +0.612,  +0.607,   1.423},
	{"Gap-16:A",              28672, 65536, 0, { -5.166, -5.166, -4.921, -4.788, -4.471, -4.069, -3.817, -3.478, -3.046, -2.691, -2.305, -2.077, -1.884, -1.731, -1.599, -1.495, -1.400, -1.315, -1.227, -1.145, -1.063, -0.994, -0.927, -0.864, -0.802, -0.745, -0.690, -0.637, -0.588, -0.543, -0.494, -0.451, -0.403, -0.357, -0.313, -0.269, -0.224, -0.181, -0.140, -0.100, -0.059, -0.016, +0.024, +0.065, +0.102, +0.137, +0.175, +0.212, +0.249, +0.287, +0.320, +0.359, +0.396, +0.430, +0.465, +0.502, +0.538, +0.576, +0.611, +0.645, +0.683, +0.717, +0.755, +0.792, +0.827, +0.862, +0.897, +0.933, +0.970, +1.006, +1.042, +1.078, +1.116, +1.155, +1.193, +1.232, +1.273, +1.312, +1.352, +1.392, +1.433, +1.478, +1.522, +1.566, +1.609, +1.655, +1.703, +1.750, +1.797, +1.851, +1.904, +1.956, +2.015, +2.074, +2.135, +2.200, +2.270, +2.341, +2.424, +2.509, +2.600, +2.703, +2.816, +2.946, +3.093, +3.285, +3.528, +3.894, +4.247, +4.676, +4.966, +5.282, +5.682, +5.942, +6.332, +6.526, +6.796},  +0.606,  +0.611,   1.421},
	{"Gap-16:A",  1ull << (25 - 10), 65536, 0, { -5.148, -5.136, -4.717, -4.575, -4.365, -4.095, -3.739, -3.416, -3.043, -2.708, -2.324, -2.078, -1.896, -1.753, -1.625, -1.514, -1.411, -1.321, -1.235, -1.153, -1.079, -1.008, -0.939, -0.876, -0.815, -0.755, -0.701, -0.646, -0.595, -0.544, -0.496, -0.447, -0.398, -0.353, -0.309, -0.267, -0.224, -0.182, -0.142, -0.102, -0.061, -0.022, +0.015, +0.053, +0.091, +0.128, +0.167, +0.204, +0.238, +0.272, +0.312, +0.348, +0.381, +0.416, +0.453, +0.489, +0.526, +0.561, +0.598, +0.635, +0.669, +0.705, +0.742, +0.777, +0.814, +0.850, +0.885, +0.923, +0.962, +0.999, +1.036, +1.073, +1.110, +1.149, +1.190, +1.226, +1.265, +1.304, +1.346, +1.390, +1.434, +1.476, +1.519, +1.562, +1.607, +1.654, +1.700, +1.750, +1.801, +1.853, +1.908, +1.964, +2.020, +2.082, +2.150, +2.216, +2.288, +2.359, +2.439, +2.523, +2.617, +2.714, +2.825, +2.947, +3.088, +3.284, +3.539, +3.898, +4.265, +4.725, +5.045, +5.308, +5.693, +5.945, +6.220, +6.661, +6.697},  +0.602,  +0.598,   1.426},//25
	{"Gap-16:A",              40960, 65536, 0, { -5.012, -4.794, -4.616, -4.427, -4.298, -4.005, -3.746, -3.451, -3.072, -2.698, -2.309, -2.074, -1.890, -1.735, -1.613, -1.507, -1.409, -1.315, -1.226, -1.148, -1.073, -1.009, -0.945, -0.886, -0.825, -0.773, -0.719, -0.668, -0.617, -0.568, -0.520, -0.473, -0.423, -0.377, -0.333, -0.286, -0.241, -0.200, -0.158, -0.118, -0.079, -0.039, -0.002, +0.036, +0.078, +0.116, +0.153, +0.192, +0.229, +0.264, +0.299, +0.336, +0.372, +0.409, +0.443, +0.480, +0.518, +0.551, +0.586, +0.624, +0.660, +0.696, +0.733, +0.770, +0.806, +0.843, +0.880, +0.915, +0.948, +0.985, +1.023, +1.064, +1.102, +1.141, +1.180, +1.218, +1.257, +1.298, +1.335, +1.380, +1.425, +1.468, +1.512, +1.555, +1.600, +1.651, +1.704, +1.749, +1.796, +1.848, +1.902, +1.957, +2.010, +2.064, +2.128, +2.196, +2.261, +2.338, +2.420, +2.498, +2.593, +2.693, +2.799, +2.930, +3.082, +3.268, +3.518, +3.925, +4.244, +4.657, +4.944, +5.183, +5.451, +5.849, +6.022, +6.336, +6.645},  +0.592,  +0.586,   1.422},
	{"Gap-16:A",              49152, 65536, 0, { -5.113, -4.923, -4.569, -4.399, -4.270, -4.017, -3.794, -3.520, -3.059, -2.721, -2.313, -2.076, -1.884, -1.751, -1.623, -1.508, -1.409, -1.320, -1.238, -1.164, -1.090, -1.024, -0.965, -0.904, -0.846, -0.787, -0.733, -0.680, -0.629, -0.577, -0.530, -0.479, -0.430, -0.381, -0.340, -0.295, -0.253, -0.213, -0.172, -0.133, -0.093, -0.052, -0.013, +0.025, +0.063, +0.102, +0.139, +0.177, +0.215, +0.252, +0.289, +0.325, +0.361, +0.395, +0.432, +0.465, +0.503, +0.537, +0.572, +0.609, +0.646, +0.683, +0.716, +0.755, +0.792, +0.828, +0.862, +0.899, +0.936, +0.971, +1.011, +1.050, +1.089, +1.126, +1.163, +1.205, +1.243, +1.285, +1.327, +1.371, +1.413, +1.455, +1.499, +1.543, +1.592, +1.638, +1.686, +1.736, +1.787, +1.839, +1.894, +1.952, +2.012, +2.072, +2.135, +2.198, +2.265, +2.334, +2.402, +2.485, +2.575, +2.678, +2.789, +2.916, +3.065, +3.257, +3.506, +3.887, +4.267, +4.703, +5.070, +5.274, +5.562, +5.707, +5.826, +5.959, +6.129},  +0.580,  +0.572,   1.423},
	{"Gap-16:A",              57344, 65536, 0, { -5.890, -5.781, -5.155, -4.882, -4.370, -4.042, -3.827, -3.468, -3.033, -2.714, -2.328, -2.097, -1.910, -1.756, -1.630, -1.519, -1.418, -1.333, -1.252, -1.178, -1.104, -1.038, -0.973, -0.911, -0.852, -0.794, -0.738, -0.684, -0.635, -0.584, -0.535, -0.490, -0.443, -0.400, -0.358, -0.313, -0.270, -0.225, -0.186, -0.143, -0.103, -0.062, -0.023, +0.015, +0.056, +0.091, +0.128, +0.164, +0.202, +0.238, +0.274, +0.310, +0.348, +0.385, +0.422, +0.459, +0.497, +0.533, +0.569, +0.603, +0.639, +0.673, +0.710, +0.746, +0.783, +0.819, +0.856, +0.894, +0.930, +0.968, +1.005, +1.045, +1.084, +1.124, +1.160, +1.199, +1.238, +1.279, +1.322, +1.362, +1.402, +1.444, +1.488, +1.530, +1.576, +1.624, +1.669, +1.717, +1.768, +1.819, +1.876, +1.932, +1.991, +2.051, +2.117, +2.179, +2.249, +2.326, +2.403, +2.485, +2.574, +2.676, +2.781, +2.915, +3.051, +3.239, +3.492, +3.869, +4.194, +4.682, +4.908, +5.174, +5.599, +5.768, +5.883, +6.263, +6.635},  +0.569,  +0.569,   1.421},
	{"Gap-16:A",  1ull << (26 - 10), 65536, 0, { -5.726, -5.458, -4.987, -4.757, -4.445, -4.104, -3.750, -3.484, -3.089, -2.744, -2.373, -2.111, -1.925, -1.777, -1.650, -1.540, -1.441, -1.356, -1.274, -1.192, -1.118, -1.044, -0.977, -0.913, -0.854, -0.802, -0.745, -0.692, -0.639, -0.586, -0.538, -0.491, -0.443, -0.399, -0.357, -0.313, -0.270, -0.227, -0.186, -0.146, -0.106, -0.067, -0.026, +0.012, +0.048, +0.085, +0.121, +0.158, +0.193, +0.230, +0.265, +0.300, +0.339, +0.377, +0.413, +0.448, +0.483, +0.519, +0.555, +0.588, +0.623, +0.659, +0.692, +0.731, +0.769, +0.804, +0.842, +0.877, +0.913, +0.950, +0.986, +1.027, +1.063, +1.101, +1.140, +1.179, +1.218, +1.259, +1.297, +1.338, +1.379, +1.425, +1.469, +1.515, +1.560, +1.608, +1.656, +1.707, +1.756, +1.809, +1.863, +1.920, +1.977, +2.035, +2.101, +2.165, +2.232, +2.305, +2.386, +2.476, +2.564, +2.668, +2.777, +2.902, +3.052, +3.243, +3.475, +3.856, +4.200, +4.664, +4.894, +5.201, +5.596, +5.701, +6.138, +6.445, +6.499},  +0.557,  +0.555,   1.422},//26
	{"Gap-16:A",              81920, 65536, 0, { -5.814, -5.472, -4.961, -4.805, -4.409, -4.136, -3.826, -3.485, -3.060, -2.710, -2.336, -2.089, -1.914, -1.771, -1.641, -1.537, -1.436, -1.346, -1.266, -1.190, -1.117, -1.048, -0.985, -0.921, -0.860, -0.804, -0.750, -0.698, -0.645, -0.594, -0.547, -0.501, -0.456, -0.408, -0.365, -0.322, -0.281, -0.237, -0.197, -0.157, -0.117, -0.079, -0.040, -0.000, +0.039, +0.078, +0.114, +0.151, +0.191, +0.228, +0.263, +0.299, +0.335, +0.369, +0.406, +0.442, +0.478, +0.514, +0.550, +0.585, +0.621, +0.655, +0.688, +0.725, +0.762, +0.797, +0.833, +0.868, +0.902, +0.939, +0.976, +1.015, +1.053, +1.090, +1.130, +1.169, +1.208, +1.248, +1.288, +1.328, +1.370, +1.415, +1.463, +1.503, +1.548, +1.593, +1.640, +1.690, +1.738, +1.787, +1.837, +1.893, +1.952, +2.012, +2.074, +2.142, +2.208, +2.283, +2.360, +2.443, +2.536, +2.645, +2.758, +2.881, +3.029, +3.218, +3.470, +3.866, +4.212, +4.713, +4.987, +5.237, +5.512, +5.833, +5.956, +6.279, +7.145},  +0.549,  +0.550,   1.415},
	{"Gap-16:A",              98304, 65536, 0, { -5.884, -5.664, -5.376, -5.059, -4.523, -4.047, -3.820, -3.536, -3.105, -2.741, -2.369, -2.137, -1.945, -1.787, -1.654, -1.552, -1.463, -1.371, -1.286, -1.203, -1.130, -1.062, -1.000, -0.938, -0.878, -0.822, -0.770, -0.718, -0.666, -0.613, -0.564, -0.519, -0.472, -0.424, -0.382, -0.337, -0.297, -0.250, -0.208, -0.168, -0.126, -0.089, -0.047, -0.007, +0.028, +0.065, +0.103, +0.139, +0.176, +0.214, +0.251, +0.287, +0.322, +0.356, +0.394, +0.431, +0.466, +0.500, +0.534, +0.571, +0.607, +0.643, +0.679, +0.716, +0.752, +0.788, +0.827, +0.864, +0.900, +0.939, +0.976, +1.013, +1.052, +1.088, +1.127, +1.166, +1.206, +1.247, +1.287, +1.326, +1.369, +1.411, +1.452, +1.496, +1.542, +1.585, +1.632, +1.681, +1.730, +1.784, +1.834, +1.891, +1.945, +2.003, +2.063, +2.130, +2.193, +2.265, +2.346, +2.429, +2.520, +2.614, +2.728, +2.849, +2.996, +3.181, +3.432, +3.837, +4.223, +4.663, +4.962, +5.245, +5.701, +5.894, +6.008, +6.296, +6.465},  +0.535,  +0.534,   1.417},
	{"Gap-16:A",             114688, 65536, 0, { -5.431, -5.032, -4.733, -4.668, -4.528, -4.069, -3.809, -3.502, -3.046, -2.720, -2.371, -2.143, -1.967, -1.807, -1.674, -1.564, -1.467, -1.376, -1.293, -1.214, -1.137, -1.063, -1.003, -0.938, -0.881, -0.824, -0.769, -0.717, -0.665, -0.615, -0.564, -0.517, -0.471, -0.427, -0.382, -0.339, -0.297, -0.252, -0.211, -0.171, -0.135, -0.097, -0.054, -0.015, +0.023, +0.062, +0.098, +0.133, +0.169, +0.206, +0.243, +0.278, +0.317, +0.352, +0.388, +0.424, +0.461, +0.498, +0.532, +0.568, +0.605, +0.639, +0.675, +0.712, +0.748, +0.783, +0.818, +0.856, +0.894, +0.932, +0.969, +1.003, +1.039, +1.077, +1.115, +1.155, +1.194, +1.231, +1.271, +1.314, +1.354, +1.394, +1.439, +1.480, +1.523, +1.567, +1.614, +1.661, +1.709, +1.762, +1.818, +1.872, +1.928, +1.987, +2.048, +2.117, +2.182, +2.254, +2.336, +2.422, +2.512, +2.612, +2.721, +2.841, +2.990, +3.174, +3.412, +3.770, +4.129, +4.579, +4.842, +5.069, +5.378, +5.557, +5.747, +6.142, +7.096},  +0.527,  +0.532,   1.410},
	{"Gap-16:A",  1ull << (27 - 10), 65536, 0, { -6.049, -5.728, -5.161, -4.932, -4.434, -4.054, -3.757, -3.484, -3.120, -2.774, -2.386, -2.142, -1.960, -1.810, -1.680, -1.567, -1.461, -1.369, -1.293, -1.204, -1.130, -1.060, -0.998, -0.938, -0.877, -0.820, -0.766, -0.713, -0.663, -0.616, -0.569, -0.521, -0.475, -0.429, -0.387, -0.343, -0.301, -0.259, -0.218, -0.180, -0.141, -0.102, -0.061, -0.023, +0.015, +0.052, +0.089, +0.124, +0.163, +0.197, +0.235, +0.272, +0.309, +0.347, +0.381, +0.417, +0.453, +0.489, +0.524, +0.559, +0.594, +0.628, +0.663, +0.699, +0.734, +0.770, +0.806, +0.843, +0.881, +0.918, +0.952, +0.991, +1.028, +1.067, +1.106, +1.142, +1.181, +1.221, +1.264, +1.304, +1.344, +1.383, +1.426, +1.471, +1.519, +1.566, +1.613, +1.660, +1.709, +1.760, +1.813, +1.869, +1.921, +1.978, +2.038, +2.104, +2.171, +2.239, +2.318, +2.401, +2.488, +2.591, +2.710, +2.833, +2.981, +3.168, +3.429, +3.807, +4.160, +4.580, +4.885, +5.116, +5.435, +5.547, +5.728, +6.105, +6.214},  +0.520,  +0.524,   1.410},//27
	{"Gap-16:A",             163840, 65536, 0, { -5.539, -5.464, -4.976, -4.820, -4.580, -4.186, -3.887, -3.615, -3.159, -2.777, -2.394, -2.134, -1.955, -1.810, -1.673, -1.561, -1.459, -1.364, -1.280, -1.203, -1.131, -1.067, -1.006, -0.947, -0.886, -0.829, -0.775, -0.724, -0.674, -0.624, -0.575, -0.526, -0.478, -0.435, -0.390, -0.349, -0.305, -0.266, -0.228, -0.188, -0.149, -0.109, -0.070, -0.031, +0.007, +0.045, +0.080, +0.117, +0.153, +0.190, +0.226, +0.259, +0.296, +0.333, +0.368, +0.404, +0.439, +0.476, +0.510, +0.543, +0.576, +0.612, +0.649, +0.683, +0.716, +0.752, +0.788, +0.822, +0.856, +0.892, +0.927, +0.967, +1.005, +1.044, +1.082, +1.122, +1.160, +1.200, +1.240, +1.283, +1.322, +1.366, +1.408, +1.450, +1.497, +1.544, +1.589, +1.643, +1.691, +1.742, +1.792, +1.844, +1.902, +1.963, +2.025, +2.094, +2.162, +2.236, +2.311, +2.396, +2.486, +2.577, +2.685, +2.811, +2.968, +3.160, +3.396, +3.781, +4.097, +4.534, +4.859, +5.129, +5.385, +5.536, +5.838, +6.139, +6.252},  +0.507,  +0.510,   1.405},
	{"Gap-16:A",             196608, 65536, 0, { -5.154, -5.059, -4.999, -4.848, -4.691, -4.256, -3.904, -3.606, -3.121, -2.792, -2.388, -2.145, -1.965, -1.819, -1.701, -1.576, -1.472, -1.384, -1.304, -1.232, -1.158, -1.090, -1.027, -0.963, -0.902, -0.845, -0.790, -0.736, -0.684, -0.634, -0.584, -0.535, -0.488, -0.446, -0.402, -0.357, -0.316, -0.277, -0.237, -0.197, -0.156, -0.117, -0.079, -0.040, -0.002, +0.036, +0.072, +0.109, +0.147, +0.183, +0.221, +0.259, +0.292, +0.330, +0.367, +0.402, +0.439, +0.472, +0.507, +0.543, +0.579, +0.613, +0.648, +0.683, +0.718, +0.751, +0.787, +0.823, +0.860, +0.896, +0.929, +0.965, +1.002, +1.041, +1.078, +1.114, +1.157, +1.196, +1.236, +1.277, +1.318, +1.361, +1.403, +1.449, +1.494, +1.542, +1.588, +1.636, +1.685, +1.735, +1.789, +1.846, +1.902, +1.958, +2.019, +2.086, +2.151, +2.225, +2.300, +2.380, +2.468, +2.576, +2.693, +2.825, +2.976, +3.145, +3.370, +3.746, +4.155, +4.525, +4.838, +5.149, +5.447, +5.742, +5.914, +6.449, +7.024},  +0.501,  +0.507,   1.408},
	{"Gap-16:A",             229376, 65536, 0, { -5.520, -5.485, -5.135, -4.964, -4.641, -4.225, -3.896, -3.562, -3.147, -2.801, -2.425, -2.176, -1.976, -1.826, -1.697, -1.578, -1.482, -1.395, -1.311, -1.233, -1.164, -1.093, -1.028, -0.962, -0.906, -0.847, -0.792, -0.738, -0.691, -0.640, -0.590, -0.542, -0.496, -0.452, -0.409, -0.369, -0.328, -0.288, -0.248, -0.211, -0.172, -0.131, -0.093, -0.057, -0.019, +0.020, +0.059, +0.097, +0.134, +0.172, +0.208, +0.243, +0.278, +0.315, +0.355, +0.392, +0.424, +0.460, +0.494, +0.528, +0.564, +0.599, +0.635, +0.670, +0.707, +0.745, +0.781, +0.818, +0.854, +0.892, +0.930, +0.967, +1.006, +1.042, +1.080, +1.118, +1.160, +1.198, +1.237, +1.278, +1.314, +1.359, +1.403, +1.446, +1.493, +1.539, +1.585, +1.633, +1.683, +1.732, +1.786, +1.840, +1.902, +1.960, +2.018, +2.083, +2.151, +2.225, +2.300, +2.383, +2.479, +2.581, +2.687, +2.816, +2.967, +3.149, +3.392, +3.763, +4.156, +4.587, +4.934, +5.195, +5.522, +5.931, +6.171, +6.602, +6.911},  +0.495,  +0.494,   1.412},
	{"Gap-16:A",  1ull << (28 - 10), 65536, 0, { -5.798, -5.629, -4.901, -4.666, -4.449, -4.167, -3.821, -3.594, -3.177, -2.836, -2.420, -2.182, -1.996, -1.850, -1.719, -1.602, -1.501, -1.404, -1.322, -1.244, -1.173, -1.103, -1.038, -0.976, -0.913, -0.856, -0.802, -0.751, -0.704, -0.651, -0.600, -0.552, -0.507, -0.460, -0.417, -0.374, -0.330, -0.287, -0.248, -0.211, -0.171, -0.132, -0.094, -0.056, -0.019, +0.019, +0.057, +0.090, +0.126, +0.163, +0.201, +0.238, +0.273, +0.311, +0.343, +0.378, +0.414, +0.450, +0.486, +0.521, +0.553, +0.588, +0.623, +0.658, +0.692, +0.729, +0.767, +0.801, +0.837, +0.874, +0.911, +0.949, +0.985, +1.024, +1.065, +1.105, +1.145, +1.186, +1.226, +1.266, +1.306, +1.347, +1.394, +1.437, +1.484, +1.534, +1.582, +1.628, +1.679, +1.730, +1.785, +1.838, +1.892, +1.947, +2.007, +2.074, +2.147, +2.216, +2.293, +2.382, +2.478, +2.573, +2.695, +2.828, +2.970, +3.153, +3.387, +3.755, +4.133, +4.551, +4.864, +5.073, +5.417, +5.861, +6.349, +7.053, +7.083},  +0.486,  +0.486,   1.414},//28
	{"Gap-16:A",             327680, 65536, 0, { -5.261, -5.212, -4.823, -4.619, -4.494, -4.166, -3.860, -3.566, -3.155, -2.790, -2.414, -2.191, -2.009, -1.851, -1.727, -1.612, -1.514, -1.424, -1.344, -1.267, -1.198, -1.127, -1.065, -0.999, -0.939, -0.883, -0.829, -0.776, -0.725, -0.672, -0.623, -0.577, -0.528, -0.485, -0.439, -0.395, -0.353, -0.312, -0.271, -0.228, -0.190, -0.149, -0.109, -0.069, -0.029, +0.007, +0.045, +0.082, +0.121, +0.162, +0.196, +0.233, +0.267, +0.304, +0.341, +0.374, +0.408, +0.443, +0.480, +0.516, +0.551, +0.587, +0.623, +0.659, +0.693, +0.729, +0.767, +0.803, +0.840, +0.878, +0.915, +0.952, +0.985, +1.022, +1.059, +1.097, +1.137, +1.176, +1.216, +1.259, +1.303, +1.343, +1.387, +1.431, +1.475, +1.522, +1.572, +1.618, +1.668, +1.723, +1.775, +1.827, +1.885, +1.943, +2.005, +2.067, +2.140, +2.210, +2.288, +2.365, +2.456, +2.560, +2.669, +2.794, +2.951, +3.129, +3.384, +3.770, +4.111, +4.526, +4.822, +5.102, +5.432, +5.675, +6.062, +6.876, +7.568},  +0.476,  +0.480,   1.415},
	{"Gap-16:A",             393216, 65536, 0, { -5.189, -5.139, -4.992, -4.695, -4.518, -4.161, -3.879, -3.608, -3.186, -2.841, -2.442, -2.200, -2.022, -1.866, -1.735, -1.619, -1.514, -1.421, -1.341, -1.263, -1.193, -1.127, -1.064, -1.001, -0.942, -0.886, -0.830, -0.777, -0.727, -0.677, -0.626, -0.580, -0.533, -0.486, -0.443, -0.400, -0.359, -0.316, -0.275, -0.233, -0.193, -0.153, -0.114, -0.078, -0.042, -0.004, +0.032, +0.070, +0.112, +0.151, +0.189, +0.222, +0.258, +0.296, +0.333, +0.368, +0.404, +0.438, +0.473, +0.507, +0.541, +0.581, +0.615, +0.652, +0.687, +0.723, +0.761, +0.796, +0.834, +0.873, +0.910, +0.948, +0.985, +1.022, +1.059, +1.094, +1.135, +1.175, +1.214, +1.253, +1.296, +1.337, +1.380, +1.422, +1.470, +1.516, +1.562, +1.609, +1.660, +1.712, +1.765, +1.817, +1.876, +1.937, +2.001, +2.066, +2.135, +2.208, +2.288, +2.372, +2.464, +2.563, +2.668, +2.789, +2.942, +3.129, +3.372, +3.742, +4.054, +4.499, +4.819, +5.153, +5.625, +5.942, +6.019, +6.630, +7.196},  +0.469,  +0.473,   1.416},
	{"Gap-16:A",             458752, 65536, 0, { -5.185, -5.092, -4.982, -4.672, -4.472, -4.278, -3.955, -3.663, -3.166, -2.866, -2.465, -2.218, -2.038, -1.887, -1.762, -1.644, -1.543, -1.449, -1.363, -1.286, -1.212, -1.142, -1.074, -1.013, -0.957, -0.899, -0.843, -0.788, -0.738, -0.686, -0.633, -0.584, -0.539, -0.494, -0.450, -0.408, -0.365, -0.323, -0.284, -0.244, -0.204, -0.163, -0.122, -0.084, -0.045, -0.007, +0.030, +0.067, +0.107, +0.146, +0.182, +0.216, +0.253, +0.288, +0.325, +0.360, +0.396, +0.430, +0.466, +0.499, +0.537, +0.572, +0.611, +0.647, +0.682, +0.718, +0.754, +0.790, +0.826, +0.863, +0.902, +0.939, +0.976, +1.015, +1.054, +1.093, +1.133, +1.173, +1.212, +1.254, +1.295, +1.340, +1.384, +1.429, +1.475, +1.524, +1.566, +1.613, +1.660, +1.715, +1.771, +1.824, +1.881, +1.941, +2.006, +2.071, +2.137, +2.209, +2.287, +2.373, +2.463, +2.565, +2.678, +2.796, +2.941, +3.119, +3.360, +3.749, +4.128, +4.488, +4.753, +5.106, +5.439, +5.566, +5.677, +6.154, +6.528},  +0.463,  +0.466,   1.423},
	{"Gap-16:A",  1ull << (29 - 10), 65536, 0, { -4.658, -4.606, -4.561, -4.514, -4.315, -4.070, -3.856, -3.601, -3.198, -2.855, -2.457, -2.203, -2.026, -1.883, -1.760, -1.648, -1.542, -1.452, -1.362, -1.287, -1.213, -1.141, -1.076, -1.015, -0.958, -0.897, -0.843, -0.787, -0.735, -0.686, -0.636, -0.589, -0.543, -0.498, -0.454, -0.408, -0.365, -0.321, -0.279, -0.238, -0.198, -0.159, -0.122, -0.083, -0.044, -0.007, +0.029, +0.066, +0.104, +0.139, +0.174, +0.210, +0.247, +0.284, +0.319, +0.354, +0.390, +0.428, +0.463, +0.502, +0.536, +0.573, +0.610, +0.647, +0.683, +0.719, +0.754, +0.792, +0.829, +0.866, +0.905, +0.941, +0.978, +1.015, +1.054, +1.092, +1.130, +1.169, +1.208, +1.251, +1.290, +1.332, +1.378, +1.423, +1.469, +1.515, +1.562, +1.609, +1.658, +1.708, +1.764, +1.819, +1.875, +1.935, +1.997, +2.064, +2.132, +2.204, +2.279, +2.361, +2.451, +2.551, +2.665, +2.797, +2.943, +3.126, +3.378, +3.765, +4.126, +4.528, +4.800, +5.042, +5.411, +5.768, +6.257, +6.470, +6.899},  +0.462,  +0.463,   1.420},//29
	{"Gap-16:A",             655360, 65536, 0, { -5.343, -5.289, -5.041, -4.775, -4.570, -4.161, -3.895, -3.609, -3.201, -2.833, -2.459, -2.223, -2.032, -1.881, -1.751, -1.636, -1.532, -1.443, -1.360, -1.278, -1.207, -1.141, -1.078, -1.013, -0.955, -0.894, -0.838, -0.788, -0.736, -0.687, -0.637, -0.592, -0.547, -0.499, -0.458, -0.410, -0.368, -0.325, -0.285, -0.245, -0.202, -0.164, -0.127, -0.089, -0.048, -0.008, +0.031, +0.066, +0.101, +0.140, +0.174, +0.209, +0.245, +0.279, +0.315, +0.353, +0.388, +0.424, +0.460, +0.495, +0.531, +0.567, +0.603, +0.640, +0.676, +0.711, +0.745, +0.779, +0.816, +0.854, +0.890, +0.928, +0.970, +1.009, +1.046, +1.084, +1.124, +1.165, +1.206, +1.247, +1.289, +1.332, +1.375, +1.419, +1.464, +1.510, +1.555, +1.602, +1.652, +1.704, +1.755, +1.814, +1.873, +1.933, +1.991, +2.057, +2.127, +2.201, +2.283, +2.362, +2.453, +2.549, +2.662, +2.782, +2.931, +3.103, +3.328, +3.713, +4.063, +4.441, +4.751, +5.105, +5.449, +5.726, +5.839, +6.172, +6.619},  +0.457,  +0.460,   1.416},
	{"Gap-16:A",             786432, 65536, 0, { -5.827, -5.286, -5.072, -4.740, -4.408, -4.097, -3.846, -3.577, -3.204, -2.883, -2.484, -2.223, -2.041, -1.887, -1.751, -1.639, -1.537, -1.445, -1.359, -1.279, -1.210, -1.138, -1.071, -1.008, -0.949, -0.890, -0.835, -0.781, -0.731, -0.680, -0.631, -0.585, -0.536, -0.491, -0.450, -0.407, -0.366, -0.325, -0.284, -0.245, -0.207, -0.168, -0.130, -0.091, -0.054, -0.019, +0.018, +0.054, +0.092, +0.128, +0.166, +0.203, +0.238, +0.273, +0.310, +0.343, +0.379, +0.414, +0.450, +0.486, +0.521, +0.561, +0.594, +0.631, +0.664, +0.700, +0.732, +0.771, +0.807, +0.845, +0.883, +0.921, +0.960, +0.999, +1.038, +1.078, +1.118, +1.159, +1.200, +1.241, +1.282, +1.326, +1.369, +1.412, +1.459, +1.505, +1.553, +1.601, +1.649, +1.700, +1.751, +1.804, +1.860, +1.919, +1.982, +2.051, +2.119, +2.193, +2.269, +2.353, +2.442, +2.535, +2.645, +2.771, +2.923, +3.099, +3.345, +3.724, +4.067, +4.484, +4.799, +5.119, +5.295, +5.563, +5.789, +5.831, +5.844},  +0.453,  +0.450,   1.414},
	{"Gap-16:A",             917504, 65536, 0, { -5.540, -5.468, -5.336, -4.851, -4.644, -4.287, -3.942, -3.673, -3.270, -2.882, -2.473, -2.223, -2.039, -1.889, -1.759, -1.645, -1.540, -1.450, -1.364, -1.288, -1.215, -1.148, -1.080, -1.016, -0.958, -0.900, -0.845, -0.792, -0.741, -0.692, -0.646, -0.596, -0.549, -0.506, -0.461, -0.420, -0.378, -0.337, -0.297, -0.257, -0.217, -0.180, -0.141, -0.103, -0.065, -0.026, +0.011, +0.050, +0.088, +0.125, +0.160, +0.195, +0.229, +0.265, +0.299, +0.334, +0.368, +0.403, +0.438, +0.472, +0.510, +0.546, +0.582, +0.618, +0.653, +0.690, +0.725, +0.764, +0.803, +0.841, +0.879, +0.915, +0.953, +0.990, +1.028, +1.065, +1.104, +1.144, +1.185, +1.227, +1.265, +1.309, +1.354, +1.397, +1.443, +1.489, +1.536, +1.583, +1.629, +1.683, +1.735, +1.792, +1.846, +1.904, +1.971, +2.039, +2.105, +2.173, +2.254, +2.340, +2.432, +2.522, +2.634, +2.764, +2.918, +3.108, +3.355, +3.736, +4.062, +4.484, +4.788, +5.101, +5.367, +5.578, +5.877, +5.933, +5.975},  +0.443,  +0.438,   1.415},
	{"Gap-16:A",  1ull << (30 - 10), 65536, 0, { -5.671, -5.328, -5.180, -4.879, -4.651, -4.220, -3.930, -3.685, -3.196, -2.862, -2.480, -2.223, -2.045, -1.895, -1.765, -1.654, -1.554, -1.460, -1.371, -1.290, -1.215, -1.145, -1.081, -1.025, -0.967, -0.911, -0.858, -0.805, -0.756, -0.706, -0.660, -0.615, -0.568, -0.519, -0.477, -0.434, -0.393, -0.354, -0.313, -0.273, -0.232, -0.192, -0.152, -0.112, -0.072, -0.035, +0.000, +0.040, +0.077, +0.112, +0.148, +0.182, +0.217, +0.256, +0.293, +0.328, +0.362, +0.397, +0.433, +0.472, +0.510, +0.545, +0.579, +0.613, +0.648, +0.683, +0.717, +0.753, +0.792, +0.831, +0.866, +0.901, +0.939, +0.979, +1.016, +1.055, +1.093, +1.132, +1.171, +1.213, +1.256, +1.298, +1.344, +1.391, +1.435, +1.479, +1.525, +1.572, +1.623, +1.672, +1.726, +1.783, +1.839, +1.901, +1.963, +2.032, +2.104, +2.180, +2.260, +2.342, +2.438, +2.531, +2.647, +2.779, +2.928, +3.123, +3.352, +3.754, +4.096, +4.496, +4.804, +5.069, +5.419, +5.619, +5.759, +5.986, +6.505},  +0.436,  +0.433,   1.418},//30
	{ "Gap-16:A", 1ull << (31 - 10),  8192, 0, {-5.746,-5.649,-5.358,-4.872,-4.599,-4.351,-3.818,-3.654,-3.242,-2.953,-2.499,-2.260,-2.083,-1.929,-1.811,-1.666,-1.563,-1.470,-1.362,-1.292,-1.216,-1.156,-1.096,-1.038,-0.981,-0.931,-0.873,-0.811,-0.749,-0.706,-0.658,-0.613,-0.571,-0.531,-0.490,-0.450,-0.410,-0.364,-0.321,-0.284,-0.248,-0.210,-0.169,-0.131,-0.100,-0.056,-0.012,+0.024,+0.060,+0.099,+0.139,+0.173,+0.201,+0.237,+0.278,+0.312,+0.344,+0.384,+0.420,+0.453,+0.492,+0.522,+0.558,+0.591,+0.633,+0.673,+0.706,+0.750,+0.785,+0.821,+0.859,+0.898,+0.933,+0.971,+1.013,+1.047,+1.081,+1.120,+1.154,+1.209,+1.250,+1.283,+1.334,+1.377,+1.427,+1.467,+1.511,+1.567,+1.618,+1.666,+1.713,+1.774,+1.822,+1.880,+1.945,+2.018,+2.083,+2.156,+2.244,+2.307,+2.404,+2.507,+2.632,+2.759,+2.907,+3.091,+3.325,+3.652,+4.004,+4.473,+4.685,+5.047,+5.557,+5.936,+6.200,+6.358,+6.410}},
	{ "Gap-16:A", 1ull << (32 - 10),  8192, 0, {-4.960,-4.935,-4.859,-4.733,-4.447,-4.102,-3.906,-3.586,-3.261,-2.921,-2.586,-2.273,-2.114,-1.984,-1.847,-1.748,-1.654,-1.570,-1.495,-1.428,-1.358,-1.274,-1.201,-1.130,-1.069,-1.011,-0.948,-0.898,-0.842,-0.785,-0.734,-0.688,-0.644,-0.605,-0.562,-0.521,-0.482,-0.444,-0.404,-0.362,-0.317,-0.277,-0.228,-0.180,-0.143,-0.108,-0.070,-0.025,+0.009,+0.043,+0.079,+0.117,+0.153,+0.196,+0.231,+0.261,+0.294,+0.331,+0.365,+0.405,+0.444,+0.483,+0.518,+0.551,+0.583,+0.616,+0.655,+0.686,+0.727,+0.766,+0.805,+0.842,+0.881,+0.910,+0.946,+0.981,+1.026,+1.063,+1.103,+1.142,+1.186,+1.220,+1.256,+1.294,+1.335,+1.397,+1.447,+1.494,+1.548,+1.603,+1.651,+1.714,+1.762,+1.824,+1.889,+1.953,+2.024,+2.103,+2.190,+2.268,+2.366,+2.483,+2.602,+2.729,+2.898,+3.066,+3.338,+3.704,+4.013,+4.491,+4.760,+4.966,+5.229,+5.708,+6.025,+6.216,+6.280}},
	{ "Gap-16:A", 1ull << (33 - 10),  8192, 0, {-4.886,-4.884,-4.877,-4.865,-4.660,-4.456,-4.232,-3.827,-3.351,-3.066,-2.609,-2.369,-2.165,-2.046,-1.923,-1.815,-1.715,-1.626,-1.531,-1.467,-1.387,-1.310,-1.249,-1.194,-1.136,-1.086,-1.035,-0.991,-0.943,-0.893,-0.856,-0.797,-0.759,-0.719,-0.672,-0.619,-0.569,-0.518,-0.472,-0.432,-0.399,-0.362,-0.321,-0.286,-0.252,-0.206,-0.168,-0.128,-0.093,-0.060,-0.019,+0.012,+0.048,+0.089,+0.118,+0.153,+0.188,+0.222,+0.260,+0.297,+0.337,+0.372,+0.405,+0.446,+0.483,+0.522,+0.555,+0.591,+0.629,+0.669,+0.712,+0.751,+0.789,+0.827,+0.865,+0.908,+0.945,+0.978,+1.020,+1.061,+1.099,+1.140,+1.187,+1.237,+1.286,+1.328,+1.376,+1.422,+1.468,+1.509,+1.577,+1.631,+1.676,+1.742,+1.816,+1.881,+1.943,+2.012,+2.084,+2.179,+2.278,+2.376,+2.489,+2.596,+2.749,+2.959,+3.199,+3.608,+3.801,+4.166,+4.550,+4.922,+5.256,+5.351,+5.392,+5.416,+5.425}},
	//{ "Gap-16:A", 1ull << (28 - 10), 16384, 0, {-5.205,-5.161,-5.030,-4.851,-4.584,-4.063,-3.868,-3.667,-3.221,-2.872,-2.417,-2.151,-1.967,-1.831,-1.717,-1.606,-1.497,-1.421,-1.335,-1.252,-1.179,-1.101,-1.032,-0.977,-0.922,-0.871,-0.824,-0.773,-0.713,-0.665,-0.618,-0.572,-0.529,-0.481,-0.436,-0.393,-0.352,-0.307,-0.269,-0.228,-0.189,-0.151,-0.111,-0.074,-0.036,+0.005,+0.043,+0.082,+0.121,+0.160,+0.204,+0.240,+0.275,+0.313,+0.352,+0.387,+0.423,+0.463,+0.496,+0.528,+0.557,+0.595,+0.629,+0.670,+0.705,+0.745,+0.782,+0.816,+0.855,+0.884,+0.916,+0.948,+0.990,+1.027,+1.063,+1.101,+1.136,+1.175,+1.217,+1.257,+1.304,+1.349,+1.395,+1.445,+1.488,+1.538,+1.582,+1.630,+1.683,+1.733,+1.789,+1.844,+1.903,+1.964,+2.020,+2.084,+2.154,+2.221,+2.297,+2.378,+2.465,+2.562,+2.670,+2.798,+2.953,+3.137,+3.395,+3.816,+4.142,+4.672,+4.977,+5.254,+5.462,+5.787,+5.857,+5.951,+5.983}},
	//{ "Gap-16:A", 1ull << (29 - 10), 16384, 0, {-4.568,-4.549,-4.492,-4.469,-4.347,-4.041,-3.866,-3.653,-3.226,-2.783,-2.448,-2.217,-1.993,-1.845,-1.731,-1.626,-1.526,-1.434,-1.345,-1.266,-1.189,-1.119,-1.058,-0.995,-0.935,-0.878,-0.829,-0.774,-0.722,-0.674,-0.628,-0.580,-0.532,-0.483,-0.445,-0.402,-0.359,-0.319,-0.275,-0.234,-0.191,-0.149,-0.106,-0.067,-0.028,+0.010,+0.049,+0.091,+0.126,+0.163,+0.199,+0.236,+0.272,+0.306,+0.340,+0.375,+0.409,+0.439,+0.472,+0.506,+0.540,+0.576,+0.613,+0.650,+0.684,+0.723,+0.755,+0.786,+0.824,+0.857,+0.891,+0.929,+0.957,+0.989,+1.030,+1.066,+1.108,+1.145,+1.185,+1.226,+1.274,+1.321,+1.357,+1.401,+1.442,+1.486,+1.526,+1.573,+1.629,+1.683,+1.738,+1.788,+1.850,+1.910,+1.984,+2.051,+2.119,+2.202,+2.280,+2.355,+2.447,+2.542,+2.644,+2.770,+2.920,+3.125,+3.372,+3.716,+4.056,+4.514,+4.908,+5.226,+5.607,+5.654,+5.954,+6.745,+7.009}},
	//{ "Gap-16:A", 1ull << (30 - 10), 16384, 0, {-6.034,-5.838,-5.247,-4.893,-4.712,-4.171,-3.993,-3.617,-3.153,-2.810,-2.457,-2.208,-2.018,-1.871,-1.746,-1.641,-1.549,-1.459,-1.379,-1.305,-1.234,-1.166,-1.098,-1.039,-0.978,-0.923,-0.871,-0.817,-0.766,-0.712,-0.667,-0.618,-0.576,-0.527,-0.485,-0.446,-0.405,-0.362,-0.319,-0.278,-0.243,-0.199,-0.156,-0.113,-0.074,-0.037,+0.000,+0.034,+0.069,+0.108,+0.144,+0.181,+0.215,+0.249,+0.283,+0.324,+0.358,+0.393,+0.429,+0.467,+0.498,+0.537,+0.573,+0.608,+0.652,+0.691,+0.725,+0.759,+0.793,+0.828,+0.866,+0.903,+0.945,+0.982,+1.016,+1.052,+1.093,+1.132,+1.172,+1.213,+1.255,+1.297,+1.340,+1.381,+1.430,+1.476,+1.526,+1.575,+1.619,+1.671,+1.735,+1.789,+1.844,+1.899,+1.957,+2.022,+2.094,+2.172,+2.248,+2.335,+2.427,+2.524,+2.630,+2.746,+2.889,+3.087,+3.301,+3.665,+4.068,+4.521,+4.773,+4.979,+5.348,+5.453,+5.574,+5.622,+5.639}},//30
	//{ "Gap-16:A", 1ull << (34 - 10),  1536, 0, {-4.285,-4.285,-4.285,-4.285,-4.285,-4.259,-4.186,-4.138,-3.634,-2.990,-2.661,-2.462,-2.307,-2.150,-2.028,-1.934,-1.837,-1.756,-1.638,-1.583,-1.484,-1.429,-1.374,-1.304,-1.238,-1.174,-1.121,-1.079,-1.023,-0.954,-0.921,-0.874,-0.842,-0.780,-0.737,-0.696,-0.661,-0.608,-0.558,-0.520,-0.472,-0.445,-0.418,-0.380,-0.349,-0.298,-0.270,-0.241,-0.215,-0.175,-0.122,-0.093,-0.059,-0.023,+0.012,+0.049,+0.097,+0.131,+0.168,+0.215,+0.260,+0.298,+0.321,+0.345,+0.380,+0.411,+0.449,+0.498,+0.545,+0.567,+0.609,+0.647,+0.694,+0.725,+0.776,+0.799,+0.841,+0.887,+0.935,+0.971,+1.012,+1.052,+1.077,+1.127,+1.166,+1.187,+1.218,+1.280,+1.332,+1.384,+1.434,+1.486,+1.551,+1.594,+1.634,+1.753,+1.804,+1.876,+1.963,+2.057,+2.150,+2.203,+2.339,+2.442,+2.618,+2.792,+3.042,+3.385,+3.750,+4.455,+5.439,+5.477,+5.482,+5.482,+5.482,+5.482,+5.482}},
	//{ "Gap-16:A", 1ull << (35 - 10),  1536, 0, {-5.658,-5.658,-5.658,-5.658,-5.658,-5.372,-4.589,-4.505,-3.810,-3.494,-2.905,-2.615,-2.408,-2.251,-2.007,-1.893,-1.828,-1.736,-1.634,-1.549,-1.484,-1.389,-1.340,-1.291,-1.244,-1.197,-1.145,-1.100,-1.044,-0.992,-0.949,-0.899,-0.838,-0.766,-0.731,-0.687,-0.650,-0.612,-0.581,-0.550,-0.515,-0.488,-0.462,-0.433,-0.384,-0.336,-0.301,-0.263,-0.236,-0.188,-0.148,-0.120,-0.089,-0.044,-0.006,+0.030,+0.067,+0.104,+0.148,+0.180,+0.202,+0.213,+0.261,+0.288,+0.325,+0.367,+0.392,+0.432,+0.466,+0.487,+0.528,+0.556,+0.596,+0.625,+0.656,+0.686,+0.723,+0.765,+0.794,+0.828,+0.884,+0.917,+0.942,+0.980,+1.004,+1.035,+1.073,+1.108,+1.141,+1.195,+1.245,+1.290,+1.337,+1.412,+1.481,+1.567,+1.658,+1.737,+1.823,+1.912,+1.956,+2.033,+2.180,+2.358,+2.506,+2.687,+3.018,+3.463,+3.862,+4.196,+4.538,+5.315,+5.596,+5.596,+5.596,+5.596,+5.596}},//35
	//{ "Gap-16:A", 1ull << (36 - 10),  1536, 0, {-4.138,-4.138,-4.138,-4.138,-4.138,-4.120,-4.064,-3.915,-3.772,-3.313,-2.820,-2.476,-2.299,-2.185,-2.045,-1.919,-1.860,-1.736,-1.691,-1.587,-1.522,-1.456,-1.388,-1.316,-1.269,-1.204,-1.151,-1.125,-1.095,-1.051,-0.997,-0.963,-0.906,-0.846,-0.808,-0.775,-0.732,-0.673,-0.612,-0.580,-0.553,-0.501,-0.457,-0.417,-0.371,-0.340,-0.314,-0.286,-0.256,-0.212,-0.179,-0.137,-0.085,-0.043,-0.006,+0.029,+0.063,+0.100,+0.132,+0.158,+0.194,+0.227,+0.265,+0.297,+0.349,+0.378,+0.405,+0.426,+0.473,+0.511,+0.544,+0.567,+0.613,+0.655,+0.677,+0.705,+0.756,+0.808,+0.846,+0.883,+0.937,+0.979,+0.997,+1.038,+1.087,+1.152,+1.194,+1.252,+1.294,+1.331,+1.372,+1.411,+1.468,+1.576,+1.668,+1.751,+1.819,+1.884,+1.938,+2.015,+2.095,+2.179,+2.275,+2.401,+2.603,+2.771,+2.988,+3.342,+3.607,+3.963,+4.263,+4.567,+4.676,+4.676,+4.676,+4.676,+4.676}},
	//{ "Gap-16:B", 1ull << (10 - 10), 65536, 0, {-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-2.828,-1.441,-1.441,-1.441,-1.441,-1.437,-1.437,-1.437,-1.437,-1.338,-1.338,-1.338,-1.290,-1.290,-1.290,-1.262,-1.262,-1.262,-1.239,-1.239,-1.239,-1.185,-1.185,-1.185,-1.125,-1.125,-1.060,-1.060,-1.039,-1.029,-0.931,-0.926,-0.883,-0.879,-0.855,-0.843,-0.832,-0.828,-0.780,-0.777,-0.764,-0.743,-0.729,-0.716,-0.710,-0.692,-0.682,-0.669,-0.653,-0.649,-0.637,-0.623,-0.612,-0.590,-0.576,-0.566,-0.550,-0.539,-0.517,-0.503,-0.487,-0.466,-0.461,-0.437,-0.411,-0.388,-0.351,-0.311,-0.264,-0.181,-0.053,-0.044,+0.063,+0.142,+0.171,+0.240,+0.285,+0.329,+0.364,+0.433,+0.486,+0.543,+0.605,+0.698,+0.795,+1.041,+1.440,+1.838,+2.153,+2.451,+2.725,+3.132,+3.323,+3.467,+4.470,+4.168}},//10
	//{ "Gap-16:B", 1ull << (11 - 10), 65536, 0, {-4.123,-4.123,-4.123,-4.123,-4.123,-2.990,-2.773,-2.669,-2.151,-1.944,-1.685,-1.537,-1.452,-1.393,-1.343,-1.299,-1.262,-1.226,-1.195,-1.164,-1.135,-1.107,-1.080,-1.055,-1.029,-1.004,-0.979,-0.956,-0.933,-0.909,-0.886,-0.861,-0.838,-0.815,-0.792,-0.769,-0.746,-0.723,-0.699,-0.675,-0.650,-0.628,-0.604,-0.581,-0.558,-0.535,-0.513,-0.492,-0.469,-0.447,-0.425,-0.403,-0.383,-0.363,-0.343,-0.324,-0.304,-0.282,-0.263,-0.244,-0.224,-0.204,-0.186,-0.166,-0.146,-0.126,-0.107,-0.085,-0.064,-0.043,-0.021,+0.001,+0.026,+0.051,+0.077,+0.104,+0.132,+0.161,+0.188,+0.218,+0.248,+0.277,+0.306,+0.340,+0.372,+0.406,+0.438,+0.471,+0.506,+0.541,+0.578,+0.614,+0.653,+0.693,+0.735,+0.782,+0.832,+0.884,+0.946,+1.014,+1.088,+1.166,+1.253,+1.360,+1.483,+1.637,+1.862,+2.219,+2.555,+2.953,+3.290,+3.612,+4.048,+4.307,+4.428,+5.080,+4.769}},
	//mean= 0.344004; median= 0.263666; stddev= 0.948428;
	{ "Gap-16:B",                 3,131072, 0, {-2.812,-2.594,-2.479,-2.407,-2.290,-2.119,-1.971,-1.829,-1.643,-1.495,-1.343,-1.233,-1.144,-1.067,-1.005,-0.949,-0.901,-0.854,-0.809,-0.768,-0.729,-0.692,-0.658,-0.624,-0.590,-0.558,-0.527,-0.496,-0.468,-0.440,-0.411,-0.384,-0.356,-0.330,-0.306,-0.281,-0.255,-0.230,-0.205,-0.180,-0.156,-0.132,-0.108,-0.084,-0.062,-0.038,-0.014,+0.009,+0.033,+0.055,+0.078,+0.100,+0.124,+0.148,+0.171,+0.194,+0.218,+0.241,+0.264,+0.287,+0.311,+0.335,+0.360,+0.384,+0.408,+0.433,+0.457,+0.483,+0.508,+0.533,+0.559,+0.587,+0.614,+0.641,+0.668,+0.695,+0.724, +0.752, +0.781, +0.811, +0.840, +0.870, +0.902, +0.934, +0.967, +1.001, +1.036, +1.073, +1.110, +1.149, +1.189, +1.231, +1.276, +1.323, +1.370, +1.422, +1.477, +1.536, +1.601, +1.668, +1.743, +1.825, +1.919, +2.024, +2.153, +2.318, +2.533, +2.896, +3.234, +3.651, +3.928, +4.244, +4.694, +4.970, +5.150, +5.295, +6.237}},
	{ "Gap-16:B", 1ull << (12 - 10), 65536, 0, {-3.247,-3.248,-3.079,-2.910,-2.735,-2.449,-2.302,-2.117,-1.883,-1.654,-1.395,-1.222,-1.091,-0.991,-0.902,-0.830,-0.764,-0.701,-0.644,-0.586,-0.534,-0.485,-0.436,-0.393,-0.348,-0.308,-0.267,-0.227,-0.189,-0.152,-0.117,-0.084,-0.051,-0.016,+0.018,+0.052,+0.083,+0.115,+0.145,+0.176,+0.206,+0.237,+0.266,+0.296,+0.325,+0.355,+0.383,+0.411,+0.440,+0.468,+0.495,+0.522,+0.549,+0.578,+0.606,+0.634,+0.662,+0.691,+0.720,+0.747,+0.773,+0.801,+0.831,+0.858,+0.887,+0.917,+0.948,+0.978,+1.007,+1.036,+1.068,+1.096,+1.129,+1.162,+1.195,+1.227,+1.259,+1.291,+1.327,+1.359,+1.392,+1.427,+1.466,+1.502,+1.543,+1.583,+1.620,+1.661,+1.703,+1.749,+1.798,+1.845,+1.898,+1.954,+2.007,+2.066,+2.133,+2.199,+2.264,+2.344,+2.428,+2.528,+2.631,+2.759,+2.912,+3.089,+3.325,+3.718,+4.061,+4.494,+4.806,+5.074,+5.529,+5.713,+6.047,+8.431,+8.026}},
	{ "Gap-16:B", 1ull << (13 - 10), 65536, 0, {-4.401,-4.413,-3.983,-3.871,-3.670,-3.485,-3.231,-3.012,-2.741,-2.497,-2.186,-1.981,-1.822,-1.696,-1.583,-1.485,-1.394,-1.311,-1.238,-1.173,-1.107,-1.046,-0.983,-0.928,-0.870,-0.812,-0.759,-0.706,-0.655,-0.604,-0.557,-0.509,-0.466,-0.416,-0.371,-0.328,-0.285,-0.244,-0.202,-0.161,-0.118,-0.076,-0.037,+0.004,+0.043,+0.081,+0.121,+0.160,+0.199,+0.237,+0.273,+0.309,+0.347,+0.386,+0.425,+0.461,+0.499,+0.539,+0.577,+0.614,+0.653,+0.691,+0.731,+0.771,+0.811,+0.851,+0.890,+0.929,+0.970,+1.011,+1.048,+1.089,+1.132,+1.175,+1.222,+1.266,+1.310,+1.356,+1.403,+1.449,+1.494,+1.546,+1.596,+1.649,+1.703,+1.757,+1.814,+1.872,+1.930,+1.995,+2.056,+2.121,+2.189,+2.261,+2.333,+2.409,+2.496,+2.592,+2.695,+2.800,+2.912,+3.041,+3.199,+3.361,+3.548,+3.768,+4.082,+4.630,+5.089,+5.689,+6.158,+6.514,+7.107,+7.461,+7.665,+8.383,+8.327}},
	{ "Gap-16:B", 1ull << (14 - 10), 65536, 0, {-4.232,-4.309,-4.113,-4.033,-3.925,-3.740,-3.537,-3.355,-3.035,-2.771,-2.491,-2.289,-2.146,-2.024,-1.916,-1.822,-1.743,-1.660,-1.589,-1.523,-1.458,-1.396,-1.335,-1.277,-1.228,-1.177,-1.128,-1.080,-1.031,-0.986,-0.943,-0.897,-0.854,-0.812,-0.772,-0.731,-0.691,-0.651,-0.612,-0.572,-0.532,-0.493,-0.456,-0.416,-0.378,-0.342,-0.309,-0.273,-0.234,-0.199,-0.164,-0.128,-0.093,-0.058,-0.019,+0.019,+0.054,+0.092,+0.129,+0.168,+0.203,+0.239,+0.277,+0.314,+0.351,+0.388,+0.427,+0.463,+0.503,+0.542,+0.584,+0.624,+0.668,+0.710,+0.752,+0.794,+0.838,+0.883,+0.927,+0.971,+1.018,+1.067,+1.111,+1.161,+1.208,+1.259,+1.311,+1.367,+1.424,+1.482,+1.550,+1.616,+1.679,+1.748,+1.820,+1.890,+1.970,+2.053,+2.147,+2.243,+2.358,+2.473,+2.617,+2.771,+2.965,+3.199,+3.502,+4.006,+4.513,+5.040,+5.513,+5.994,+6.580,+6.989,+7.369,+8.563,+8.382}},
	{ "Gap-16:B", 1ull << (15 - 10), 65536, 0, {-4.642,-4.656,-4.572,-4.451,-4.184,-3.957,-3.732,-3.508,-3.196,-2.912,-2.625,-2.427,-2.274,-2.154,-2.039,-1.941,-1.858,-1.774,-1.701,-1.631,-1.569,-1.509,-1.452,-1.396,-1.343,-1.293,-1.241,-1.189,-1.139,-1.096,-1.053,-1.010,-0.969,-0.924,-0.880,-0.840,-0.799,-0.763,-0.725,-0.686,-0.648,-0.611,-0.574,-0.538,-0.500,-0.461,-0.426,-0.391,-0.355,-0.318,-0.282,-0.246,-0.211,-0.175,-0.140,-0.105,-0.069,-0.032,+0.002,+0.037,+0.074,+0.111,+0.147,+0.183,+0.218,+0.254,+0.293,+0.329,+0.365,+0.403,+0.443,+0.484,+0.524,+0.566,+0.606,+0.646,+0.686,+0.730,+0.770,+0.815,+0.859,+0.902,+0.946,+0.993,+1.044,+1.091,+1.144,+1.196,+1.244,+1.300,+1.360,+1.416,+1.479,+1.548,+1.617,+1.699,+1.774,+1.857,+1.941,+2.032,+2.139,+2.254,+2.388,+2.535,+2.715,+2.930,+3.223,+3.702,+4.096,+4.636,+5.064,+5.364,+5.881,+6.227,+6.715,+7.152,+7.096}},//15
	{ "Gap-16:B", 1ull << (16 - 10), 65536, 0, {-4.722,-4.741,-4.682,-4.527,-4.428,-4.091,-3.828,-3.614,-3.301,-3.011,-2.683,-2.496,-2.333,-2.211,-2.095,-1.998,-1.907,-1.826,-1.757,-1.690,-1.624,-1.560,-1.503,-1.447,-1.394,-1.344,-1.293,-1.245,-1.198,-1.154,-1.106,-1.061,-1.015,-0.975,-0.932,-0.891,-0.851,-0.811,-0.769,-0.733,-0.693,-0.655,-0.616,-0.576,-0.538,-0.502,-0.467,-0.429,-0.394,-0.359,-0.327,-0.292,-0.256,-0.223,-0.186,-0.151,-0.119,-0.080,-0.047,-0.012,+0.024,+0.060,+0.096,+0.131,+0.166,+0.202,+0.238,+0.278,+0.315,+0.353,+0.390,+0.428,+0.464,+0.503,+0.541,+0.581,+0.619,+0.662,+0.703,+0.742,+0.788,+0.834,+0.880,+0.930,+0.975,+1.020,+1.069,+1.121,+1.170,+1.226,+1.283,+1.345,+1.411,+1.476,+1.545,+1.617,+1.694,+1.773,+1.854,+1.947,+2.056,+2.168,+2.296,+2.448,+2.627,+2.830,+3.097,+3.580,+4.021,+4.518,+4.955,+5.369,+5.779,+6.062,+6.539,+8.565,+8.042}},
	{ "Gap-16:B", 1ull << (17 - 10), 65536, 0, {-5.663,-5.850,-5.287,-4.838,-4.566,-4.219,-3.913,-3.675,-3.359,-3.078,-2.756,-2.549,-2.387,-2.253,-2.144,-2.037,-1.947,-1.868,-1.795,-1.720,-1.655,-1.592,-1.530,-1.472,-1.418,-1.366,-1.315,-1.261,-1.212,-1.168,-1.125,-1.080,-1.035,-0.993,-0.953,-0.912,-0.873,-0.833,-0.793,-0.754,-0.713,-0.674,-0.636,-0.598,-0.562,-0.524,-0.487,-0.452,-0.415,-0.377,-0.340,-0.303,-0.269,-0.233,-0.197,-0.162,-0.126,-0.092,-0.058,-0.023,+0.012,+0.048,+0.084,+0.119,+0.157,+0.194,+0.230,+0.269,+0.306,+0.341,+0.379,+0.419,+0.457,+0.496,+0.535,+0.575,+0.617,+0.657,+0.698,+0.741,+0.785,+0.828,+0.874,+0.922,+0.970,+1.019,+1.065,+1.116,+1.166,+1.222,+1.280,+1.339,+1.397,+1.458,+1.523,+1.591,+1.665,+1.744,+1.829,+1.918,+2.019,+2.121,+2.248,+2.403,+2.582,+2.782,+3.061,+3.500,+3.893,+4.461,+4.842,+5.189,+5.728,+6.130,+6.438,+6.912,+6.866}},
	{ "Gap-16:B", 1ull << (18 - 10), 65536, 0, {-5.037,-5.107,-4.888,-4.819,-4.574,-4.382,-4.042,-3.762,-3.425,-3.099,-2.765,-2.550,-2.386,-2.255,-2.138,-2.045,-1.951,-1.869,-1.797,-1.727,-1.659,-1.595,-1.531,-1.472,-1.417,-1.368,-1.317,-1.267,-1.216,-1.167,-1.121,-1.079,-1.036,-0.991,-0.948,-0.909,-0.867,-0.826,-0.789,-0.750,-0.712,-0.674,-0.637,-0.601,-0.565,-0.530,-0.491,-0.456,-0.419,-0.381,-0.347,-0.310,-0.275,-0.239,-0.204,-0.167,-0.132,-0.098,-0.064,-0.029,+0.006,+0.042,+0.074,+0.112,+0.146,+0.181,+0.219,+0.258,+0.295,+0.332,+0.370,+0.407,+0.445,+0.483,+0.522,+0.563,+0.604,+0.649,+0.690,+0.731,+0.771,+0.817,+0.860,+0.904,+0.950,+0.997,+1.047,+1.098,+1.149,+1.205,+1.259,+1.319,+1.381,+1.444,+1.509,+1.580,+1.655,+1.730,+1.811,+1.899,+1.993,+2.097,+2.222,+2.364,+2.523,+2.738,+3.001,+3.412,+3.800,+4.309,+4.639,+4.977,+5.522,+5.932,+6.441,+7.015,+6.919}},
	{ "Gap-16:B", 1ull << (19 - 10), 65536, 0, {-5.420,-5.428,-5.096,-4.905,-4.612,-4.242,-4.050,-3.823,-3.444,-3.151,-2.811,-2.586,-2.407,-2.272,-2.158,-2.063,-1.971,-1.887,-1.808,-1.734,-1.669,-1.606,-1.545,-1.486,-1.428,-1.376,-1.324,-1.272,-1.220,-1.177,-1.130,-1.083,-1.038,-0.995,-0.952,-0.911,-0.870,-0.833,-0.791,-0.752,-0.715,-0.678,-0.642,-0.604,-0.567,-0.531,-0.494,-0.458,-0.421,-0.381,-0.345,-0.309,-0.273,-0.237,-0.200,-0.167,-0.131,-0.097,-0.059,-0.024,+0.012,+0.048,+0.084,+0.121,+0.157,+0.195,+0.230,+0.267,+0.304,+0.340,+0.380,+0.417,+0.457,+0.493,+0.532,+0.572,+0.612,+0.654,+0.697,+0.740,+0.784,+0.828,+0.874,+0.917,+0.965,+1.014,+1.066,+1.114,+1.164,+1.217,+1.274,+1.336,+1.393,+1.453,+1.519,+1.588,+1.661,+1.741,+1.826,+1.910,+2.007,+2.120,+2.243,+2.382,+2.544,+2.744,+2.995,+3.413,+3.802,+4.310,+4.760,+5.140,+5.579,+5.794,+6.100,+6.844,+6.716}},
	{ "Gap-16:B", 1ull << (20 - 10), 65536, 0, {-5.423,-5.425,-5.262,-4.966,-4.711,-4.350,-4.080,-3.837,-3.512,-3.184,-2.823,-2.598,-2.436,-2.298,-2.178,-2.070,-1.979,-1.890,-1.815,-1.741,-1.673,-1.608,-1.546,-1.485,-1.433,-1.377,-1.327,-1.275,-1.228,-1.179,-1.134,-1.091,-1.047,-1.004,-0.964,-0.916,-0.876,-0.835,-0.795,-0.754,-0.714,-0.677,-0.639,-0.602,-0.561,-0.523,-0.485,-0.447,-0.410,-0.376,-0.340,-0.304,-0.268,-0.231,-0.196,-0.162,-0.126,-0.090,-0.056,-0.021,+0.015,+0.050,+0.086,+0.119,+0.157,+0.195,+0.232,+0.267,+0.305,+0.341,+0.378,+0.417,+0.453,+0.491,+0.529,+0.567,+0.609,+0.650,+0.690,+0.731,+0.772,+0.816,+0.862,+0.908,+0.955,+1.000,+1.047,+1.098,+1.151,+1.205,+1.261,+1.316,+1.374,+1.434,+1.496,+1.569,+1.639,+1.718,+1.793,+1.883,+1.982,+2.083,+2.203,+2.351,+2.518,+2.717,+2.956,+3.387,+3.783,+4.191,+4.511,+4.831,+5.154,+5.462,+5.665,+5.898,+5.890}},//20
	{ "Gap-16:B", 1ull << (21 - 10), 65536, 0, {-5.785,-5.874,-5.487,-5.098,-4.773,-4.479,-4.201,-3.915,-3.507,-3.185,-2.811,-2.603,-2.420,-2.276,-2.164,-2.062,-1.969,-1.883,-1.805,-1.732,-1.662,-1.599,-1.536,-1.477,-1.419,-1.365,-1.312,-1.264,-1.219,-1.173,-1.128,-1.081,-1.037,-0.991,-0.950,-0.908,-0.866,-0.827,-0.786,-0.746,-0.709,-0.671,-0.635,-0.596,-0.560,-0.521,-0.486,-0.446,-0.411,-0.372,-0.338,-0.304,-0.267,-0.230,-0.194,-0.160,-0.124,-0.090,-0.053,-0.017,+0.016,+0.051,+0.086,+0.122,+0.158,+0.196,+0.230,+0.268,+0.305,+0.341,+0.381,+0.420,+0.458,+0.494,+0.532,+0.573,+0.611,+0.653,+0.694,+0.734,+0.774,+0.819,+0.863,+0.910,+0.956,+1.004,+1.053,+1.101,+1.152,+1.206,+1.260,+1.317,+1.376,+1.440,+1.506,+1.576,+1.642,+1.722,+1.800,+1.889,+1.983,+2.082,+2.197,+2.333,+2.493,+2.683,+2.957,+3.385,+3.807,+4.263,+4.593,+4.890,+5.264,+5.390,+5.799,+6.245,+6.049}},
	{ "Gap-16:B", 1ull << (22 - 10), 65536, 0, {-5.347,-5.376,-5.198,-5.016,-4.789,-4.490,-4.228,-3.957,-3.575,-3.212,-2.857,-2.628,-2.446,-2.314,-2.190,-2.077,-1.983,-1.892,-1.809,-1.735,-1.667,-1.600,-1.537,-1.478,-1.419,-1.365,-1.312,-1.264,-1.213,-1.166,-1.117,-1.074,-1.029,-0.984,-0.938,-0.895,-0.852,-0.813,-0.773,-0.734,-0.695,-0.658,-0.619,-0.583,-0.547,-0.511,-0.473,-0.435,-0.398,-0.362,-0.327,-0.290,-0.253,-0.216,-0.181,-0.147,-0.114,-0.077,-0.043,-0.006,+0.029,+0.065,+0.101,+0.138,+0.173,+0.209,+0.245,+0.281,+0.316,+0.351,+0.389,+0.427,+0.467,+0.505,+0.546,+0.585,+0.623,+0.663,+0.704,+0.745,+0.787,+0.829,+0.874,+0.919,+0.962,+1.009,+1.055,+1.102,+1.152,+1.204,+1.260,+1.315,+1.371,+1.430,+1.493,+1.558,+1.629,+1.710,+1.796,+1.877,+1.971,+2.073,+2.194,+2.320,+2.477,+2.671,+2.918,+3.353,+3.752,+4.198,+4.488,+4.800,+5.097,+5.816,+6.198,+6.621,+6.473}},
	{ "Gap-16:B", 1ull << (23 - 10), 65536, 0, {-5.346,-5.356,-5.149,-5.024,-4.825,-4.518,-4.278,-3.979,-3.556,-3.252,-2.891,-2.646,-2.460,-2.323,-2.201,-2.088,-1.986,-1.895,-1.812,-1.737,-1.670,-1.606,-1.543,-1.481,-1.423,-1.367,-1.314,-1.262,-1.211,-1.166,-1.116,-1.073,-1.024,-0.979,-0.938,-0.898,-0.857,-0.815,-0.774,-0.735,-0.698,-0.660,-0.622,-0.585,-0.549,-0.513,-0.478,-0.443,-0.404,-0.366,-0.329,-0.291,-0.254,-0.220,-0.182,-0.146,-0.110,-0.076,-0.042,-0.005,+0.032,+0.069,+0.103,+0.138,+0.173,+0.213,+0.249,+0.285,+0.321,+0.357,+0.397,+0.437,+0.474,+0.511,+0.549,+0.590,+0.630,+0.672,+0.711,+0.751,+0.793,+0.837,+0.882,+0.927,+0.971,+1.020,+1.065,+1.113,+1.160,+1.213,+1.268,+1.321,+1.380,+1.440,+1.505,+1.574,+1.645,+1.716,+1.796,+1.879,+1.969,+2.069,+2.192,+2.322,+2.466,+2.664,+2.935,+3.338,+3.709,+4.156,+4.444,+4.660,+5.257,+5.531,+5.900,+6.307,+6.276}},
	{"Gap-16:B", 1ull << (24 - 10), 65536, 0, { -5.905, -5.455, -5.118, -5.012, -4.793, -4.457, -4.251, -4.000, -3.563, -3.220, -2.883, -2.641, -2.460, -2.321, -2.199, -2.093, -1.995, -1.902, -1.822, -1.742, -1.678, -1.610, -1.549, -1.487, -1.427, -1.368, -1.316, -1.265, -1.214, -1.165, -1.116, -1.070, -1.027, -0.981, -0.938, -0.897, -0.855, -0.814, -0.773, -0.733, -0.692, -0.652, -0.614, -0.575, -0.537, -0.500, -0.462, -0.425, -0.389, -0.355, -0.318, -0.283, -0.249, -0.213, -0.179, -0.143, -0.105, -0.070, -0.034, +0.003, +0.039, +0.075, +0.109, +0.145, +0.180, +0.216, +0.252, +0.289, +0.329, +0.365, +0.402, +0.442, +0.480, +0.517, +0.552, +0.588, +0.628, +0.667, +0.709, +0.750, +0.795, +0.838, +0.885, +0.930, +0.976, +1.019, +1.064, +1.113, +1.165, +1.217, +1.272, +1.329, +1.385, +1.447, +1.509, +1.574, +1.645, +1.721, +1.800, +1.888, +1.982, +2.081, +2.192, +2.324, +2.473, +2.660, +2.911, +3.300, +3.633, +4.167, +4.441, +4.647, +5.021, +5.398, +5.545, +5.911, +6.018},  -0.020,  -0.034,   1.411},
	{"Gap-16:B", 1ull << (25 - 10), 65536, 0, { -5.832, -5.825, -5.488, -5.064, -4.915, -4.641, -4.344, -4.005, -3.593, -3.233, -2.855, -2.631, -2.463, -2.323, -2.203, -2.097, -1.996, -1.905, -1.823, -1.743, -1.672, -1.602, -1.537, -1.478, -1.420, -1.362, -1.310, -1.256, -1.205, -1.159, -1.111, -1.063, -1.018, -0.973, -0.926, -0.885, -0.844, -0.805, -0.763, -0.721, -0.684, -0.647, -0.607, -0.569, -0.529, -0.492, -0.456, -0.419, -0.384, -0.350, -0.314, -0.279, -0.245, -0.208, -0.173, -0.137, -0.102, -0.066, -0.030, +0.007, +0.043, +0.080, +0.114, +0.150, +0.187, +0.225, +0.259, +0.295, +0.331, +0.368, +0.406, +0.440, +0.475, +0.514, +0.551, +0.589, +0.628, +0.668, +0.707, +0.749, +0.790, +0.831, +0.874, +0.917, +0.959, +1.002, +1.051, +1.100, +1.156, +1.209, +1.264, +1.319, +1.379, +1.445, +1.510, +1.580, +1.644, +1.718, +1.798, +1.887, +1.979, +2.081, +2.191, +2.323, +2.478, +2.664, +2.909, +3.313, +3.679, +4.127, +4.439, +4.740, +5.003, +5.480, +5.728, +5.993, +5.997},  -0.019,  -0.030,   1.410},//25
	{"Gap-16:B", 1ull << (26 - 10), 65536, 0, { -6.498, -6.381, -5.694, -5.282, -4.896, -4.659, -4.346, -4.021, -3.586, -3.248, -2.873, -2.640, -2.452, -2.320, -2.203, -2.095, -1.990, -1.899, -1.810, -1.734, -1.661, -1.594, -1.530, -1.471, -1.413, -1.357, -1.302, -1.251, -1.200, -1.150, -1.103, -1.058, -1.013, -0.970, -0.928, -0.887, -0.846, -0.806, -0.765, -0.723, -0.685, -0.645, -0.606, -0.570, -0.529, -0.490, -0.453, -0.416, -0.382, -0.345, -0.309, -0.273, -0.238, -0.204, -0.169, -0.131, -0.097, -0.063, -0.029, +0.008, +0.042, +0.079, +0.115, +0.150, +0.186, +0.224, +0.260, +0.298, +0.334, +0.370, +0.408, +0.444, +0.484, +0.521, +0.559, +0.597, +0.637, +0.679, +0.718, +0.761, +0.802, +0.843, +0.888, +0.934, +0.981, +1.029, +1.076, +1.124, +1.173, +1.227, +1.287, +1.340, +1.400, +1.464, +1.525, +1.588, +1.658, +1.734, +1.814, +1.901, +1.991, +2.096, +2.215, +2.339, +2.487, +2.670, +2.940, +3.337, +3.675, +4.080, +4.428, +4.826, +5.104, +5.571, +5.718, +6.048, +6.175},  -0.011,  -0.029,   1.414},
	{"Gap-16:B", 1ull << (27 - 10), 65536, 0, { -5.425, -5.367, -5.256, -5.052, -4.774, -4.545, -4.331, -4.040, -3.633, -3.283, -2.898, -2.656, -2.476, -2.320, -2.192, -2.073, -1.973, -1.884, -1.804, -1.728, -1.662, -1.596, -1.527, -1.467, -1.407, -1.350, -1.294, -1.244, -1.194, -1.145, -1.092, -1.047, -1.004, -0.964, -0.922, -0.880, -0.835, -0.796, -0.757, -0.717, -0.681, -0.643, -0.602, -0.564, -0.526, -0.489, -0.452, -0.416, -0.381, -0.344, -0.309, -0.272, -0.235, -0.201, -0.165, -0.129, -0.093, -0.058, -0.024, +0.013, +0.048, +0.082, +0.118, +0.155, +0.191, +0.229, +0.267, +0.304, +0.339, +0.375, +0.412, +0.453, +0.491, +0.530, +0.569, +0.607, +0.648, +0.688, +0.730, +0.772, +0.814, +0.859, +0.904, +0.949, +0.994, +1.040, +1.086, +1.135, +1.187, +1.237, +1.295, +1.350, +1.407, +1.463, +1.532, +1.600, +1.669, +1.738, +1.819, +1.901, +1.992, +2.095, +2.219, +2.355, +2.510, +2.698, +2.969, +3.379, +3.755, +4.196, +4.468, +4.767, +5.043, +5.171, +5.338, +5.365, +5.391},  -0.005,  -0.024,   1.420},
	{"Gap-16:B", 1ull << (28 - 10), 65536, 0, { -5.914, -5.868, -5.586, -5.202, -4.965, -4.653, -4.327, -4.021, -3.629, -3.281, -2.914, -2.678, -2.503, -2.351, -2.215, -2.097, -2.005, -1.919, -1.838, -1.757, -1.683, -1.613, -1.548, -1.486, -1.428, -1.367, -1.313, -1.261, -1.208, -1.158, -1.110, -1.064, -1.018, -0.976, -0.933, -0.890, -0.847, -0.806, -0.766, -0.729, -0.688, -0.651, -0.610, -0.568, -0.531, -0.493, -0.457, -0.422, -0.387, -0.352, -0.318, -0.281, -0.245, -0.208, -0.172, -0.134, -0.100, -0.062, -0.026, +0.007, +0.043, +0.080, +0.117, +0.153, +0.190, +0.226, +0.262, +0.300, +0.340, +0.378, +0.415, +0.452, +0.490, +0.528, +0.567, +0.604, +0.644, +0.683, +0.726, +0.766, +0.803, +0.844, +0.889, +0.933, +0.979, +1.026, +1.073, +1.122, +1.176, +1.227, +1.280, +1.337, +1.398, +1.456, +1.517, +1.583, +1.650, +1.722, +1.805, +1.888, +1.978, +2.074, +2.191, +2.320, +2.473, +2.658, +2.883, +3.299, +3.670, +4.151, +4.509, +4.887, +5.302, +5.499, +5.748, +5.928, +6.187},  -0.018,  -0.026,   1.418},
	{"Gap-16:B", 1ull << (29 - 10), 65536, 0, { -6.072, -5.862, -5.658, -5.310, -4.912, -4.559, -4.302, -4.057, -3.640, -3.293, -2.907, -2.669, -2.486, -2.336, -2.209, -2.097, -1.997, -1.907, -1.824, -1.749, -1.675, -1.602, -1.537, -1.478, -1.416, -1.356, -1.305, -1.252, -1.200, -1.149, -1.100, -1.057, -1.010, -0.967, -0.923, -0.883, -0.844, -0.804, -0.762, -0.721, -0.680, -0.641, -0.602, -0.563, -0.527, -0.487, -0.449, -0.415, -0.381, -0.347, -0.312, -0.275, -0.240, -0.206, -0.173, -0.135, -0.099, -0.062, -0.024, +0.013, +0.051, +0.087, +0.123, +0.158, +0.195, +0.231, +0.265, +0.301, +0.337, +0.371, +0.406, +0.443, +0.476, +0.515, +0.555, +0.593, +0.633, +0.673, +0.714, +0.755, +0.796, +0.839, +0.882, +0.923, +0.968, +1.017, +1.062, +1.111, +1.160, +1.210, +1.264, +1.318, +1.375, +1.433, +1.494, +1.558, +1.630, +1.707, +1.784, +1.870, +1.955, +2.061, +2.176, +2.307, +2.458, +2.648, +2.895, +3.299, +3.638, +4.078, +4.305, +4.639, +5.117, +5.461, +5.829, +6.017, +6.158},  -0.020,  -0.024,   1.409},
	{"Gap-16:B", 1ull << (30 - 10), 65536, 0, { -5.898, -5.474, -5.249, -5.143, -4.952, -4.630, -4.367, -4.060, -3.650, -3.296, -2.919, -2.678, -2.485, -2.331, -2.201, -2.091, -1.992, -1.900, -1.816, -1.737, -1.667, -1.598, -1.534, -1.469, -1.411, -1.352, -1.299, -1.249, -1.202, -1.151, -1.103, -1.058, -1.009, -0.965, -0.922, -0.881, -0.838, -0.795, -0.755, -0.714, -0.672, -0.633, -0.594, -0.554, -0.516, -0.478, -0.441, -0.404, -0.367, -0.331, -0.296, -0.261, -0.227, -0.193, -0.159, -0.125, -0.090, -0.053, -0.016, +0.018, +0.052, +0.088, +0.123, +0.157, +0.194, +0.231, +0.269, +0.304, +0.340, +0.377, +0.412, +0.450, +0.486, +0.526, +0.567, +0.606, +0.647, +0.688, +0.725, +0.768, +0.813, +0.856, +0.899, +0.944, +0.989, +1.036, +1.086, +1.134, +1.186, +1.240, +1.289, +1.341, +1.400, +1.461, +1.525, +1.589, +1.665, +1.733, +1.812, +1.899, +1.991, +2.085, +2.200, +2.335, +2.481, +2.676, +2.930, +3.295, +3.647, +4.086, +4.381, +4.643, +4.920, +5.293, +5.768, +6.124, +6.518},  -0.009,  -0.016,   1.417},//30
	//{ "Gap-16:B", 1ull << (31 - 10),  8192, 0, {-5.558,-5.537,-5.472,-5.364,-5.288,-4.951,-4.477,-3.971,-3.644,-3.228,-2.895,-2.666,-2.460,-2.314,-2.189,-2.087,-1.994,-1.913,-1.820,-1.753,-1.673,-1.596,-1.530,-1.470,-1.416,-1.371,-1.313,-1.264,-1.220,-1.173,-1.122,-1.057,-1.002,-0.958,-0.915,-0.870,-0.830,-0.790,-0.748,-0.707,-0.659,-0.615,-0.573,-0.534,-0.505,-0.472,-0.431,-0.398,-0.358,-0.326,-0.289,-0.254,-0.214,-0.181,-0.143,-0.111,-0.064,-0.031,+0.001,+0.038,+0.077,+0.110,+0.148,+0.194,+0.226,+0.257,+0.297,+0.332,+0.365,+0.406,+0.442,+0.483,+0.515,+0.547,+0.587,+0.632,+0.669,+0.707,+0.741,+0.777,+0.818,+0.861,+0.901,+0.946,+0.982,+1.025,+1.074,+1.125,+1.180,+1.238,+1.289,+1.347,+1.408,+1.473,+1.533,+1.594,+1.668,+1.731,+1.803,+1.891,+1.991,+2.093,+2.197,+2.342,+2.487,+2.703,+2.940,+3.375,+3.665,+4.025,+4.242,+4.743,+5.040,+5.379,+5.389,+5.395,+5.397}},
	//{ "Gap-16:B", 1ull << (32 - 10),  8192, 0, {-5.817,-5.791,-5.713,-5.583,-5.381,-5.058,-4.677,-4.130,-3.758,-3.362,-2.948,-2.713,-2.523,-2.352,-2.230,-2.118,-2.014,-1.912,-1.840,-1.750,-1.684,-1.618,-1.551,-1.483,-1.418,-1.358,-1.307,-1.247,-1.190,-1.141,-1.095,-1.047,-1.000,-0.953,-0.910,-0.871,-0.836,-0.803,-0.759,-0.725,-0.688,-0.652,-0.613,-0.570,-0.537,-0.502,-0.463,-0.425,-0.389,-0.346,-0.319,-0.279,-0.246,-0.206,-0.171,-0.139,-0.094,-0.059,-0.021,+0.021,+0.055,+0.094,+0.132,+0.166,+0.201,+0.238,+0.281,+0.317,+0.360,+0.396,+0.438,+0.478,+0.518,+0.547,+0.585,+0.625,+0.669,+0.710,+0.750,+0.791,+0.828,+0.865,+0.904,+0.941,+0.977,+1.025,+1.079,+1.136,+1.186,+1.232,+1.285,+1.343,+1.396,+1.453,+1.514,+1.591,+1.659,+1.729,+1.820,+1.883,+1.985,+2.076,+2.195,+2.342,+2.496,+2.656,+2.891,+3.280,+3.721,+4.093,+4.333,+4.430,+4.779,+5.172,+5.379,+5.503,+5.544}},
	//{ "Gap-16:B", 1ull << (33 - 10),  8192, 0, {-5.406,-5.393,-5.351,-5.282,-5.203,-4.957,-4.524,-4.258,-3.749,-3.473,-2.984,-2.697,-2.550,-2.438,-2.292,-2.168,-2.056,-1.962,-1.879,-1.810,-1.716,-1.640,-1.576,-1.502,-1.441,-1.385,-1.328,-1.272,-1.211,-1.162,-1.122,-1.081,-1.033,-0.975,-0.921,-0.879,-0.838,-0.794,-0.757,-0.716,-0.678,-0.637,-0.601,-0.562,-0.520,-0.481,-0.446,-0.405,-0.360,-0.324,-0.289,-0.260,-0.228,-0.197,-0.160,-0.123,-0.081,-0.044,-0.009,+0.030,+0.066,+0.099,+0.128,+0.157,+0.193,+0.233,+0.264,+0.293,+0.330,+0.363,+0.396,+0.427,+0.465,+0.501,+0.542,+0.588,+0.631,+0.666,+0.706,+0.755,+0.791,+0.833,+0.876,+0.919,+0.967,+1.013,+1.057,+1.114,+1.167,+1.219,+1.286,+1.345,+1.408,+1.470,+1.531,+1.597,+1.669,+1.759,+1.824,+1.897,+1.993,+2.088,+2.217,+2.329,+2.487,+2.653,+2.907,+3.303,+3.747,+4.237,+4.610,+4.990,+5.091,+5.317,+5.798,+6.086,+6.182}},
	//{ "Gap-16:B", 1ull << (34 - 10),  1536, 0, {-5.058,-5.058,-5.058,-5.058,-5.058,-5.022,-4.902,-4.207,-3.456,-3.215,-2.909,-2.726,-2.531,-2.351,-2.255,-2.162,-2.070,-1.946,-1.840,-1.764,-1.685,-1.652,-1.575,-1.507,-1.459,-1.393,-1.344,-1.277,-1.197,-1.140,-1.094,-1.056,-1.019,-0.983,-0.941,-0.911,-0.865,-0.814,-0.792,-0.756,-0.735,-0.686,-0.635,-0.597,-0.565,-0.532,-0.491,-0.432,-0.398,-0.355,-0.324,-0.274,-0.232,-0.199,-0.161,-0.123,-0.080,-0.054,-0.024,+0.009,+0.041,+0.073,+0.110,+0.138,+0.164,+0.200,+0.237,+0.258,+0.301,+0.336,+0.367,+0.394,+0.420,+0.469,+0.516,+0.556,+0.585,+0.642,+0.685,+0.745,+0.778,+0.814,+0.858,+0.911,+0.951,+0.987,+1.060,+1.104,+1.162,+1.200,+1.254,+1.298,+1.360,+1.463,+1.510,+1.588,+1.636,+1.736,+1.828,+1.908,+1.991,+2.101,+2.211,+2.352,+2.492,+2.634,+2.863,+3.044,+3.378,+3.894,+4.554,+4.624,+4.641,+4.641,+4.641,+4.641,+4.641}},
	//{ "Gap-16:B", 1ull << (35 - 10),  1536, 0, {-4.578,-4.578,-4.578,-4.578,-4.578,-4.516,-4.345,-4.132,-3.689,-3.475,-3.049,-2.666,-2.519,-2.327,-2.152,-2.043,-1.974,-1.886,-1.829,-1.736,-1.671,-1.604,-1.557,-1.461,-1.379,-1.312,-1.268,-1.210,-1.165,-1.120,-1.064,-0.988,-0.960,-0.903,-0.861,-0.815,-0.759,-0.709,-0.675,-0.637,-0.590,-0.552,-0.503,-0.473,-0.417,-0.386,-0.352,-0.333,-0.297,-0.263,-0.236,-0.203,-0.161,-0.137,-0.108,-0.065,-0.021,+0.011,+0.042,+0.073,+0.111,+0.151,+0.191,+0.225,+0.264,+0.294,+0.325,+0.342,+0.386,+0.418,+0.445,+0.482,+0.511,+0.549,+0.574,+0.612,+0.645,+0.674,+0.712,+0.761,+0.797,+0.841,+0.885,+0.928,+0.968,+1.000,+1.037,+1.086,+1.136,+1.198,+1.231,+1.282,+1.333,+1.389,+1.440,+1.505,+1.578,+1.653,+1.723,+1.783,+1.881,+1.966,+2.020,+2.120,+2.260,+2.457,+2.765,+3.330,+3.811,+4.312,+4.536,+5.035,+5.215,+5.215,+5.215,+5.215,+5.215}},//35
	//{ "Gap-16:B", 1ull << (36 - 10),  1536, 0, {-5.138,-5.138,-5.138,-5.138,-5.138,-5.037,-4.747,-4.179,-3.729,-3.328,-2.797,-2.540,-2.294,-2.210,-2.101,-1.983,-1.897,-1.835,-1.752,-1.687,-1.639,-1.572,-1.513,-1.458,-1.405,-1.356,-1.323,-1.278,-1.226,-1.176,-1.126,-1.064,-1.023,-0.970,-0.918,-0.884,-0.855,-0.826,-0.749,-0.718,-0.671,-0.637,-0.595,-0.549,-0.520,-0.482,-0.432,-0.383,-0.366,-0.332,-0.293,-0.261,-0.228,-0.191,-0.144,-0.102,-0.083,-0.046,-0.029,+0.014,+0.070,+0.113,+0.138,+0.174,+0.204,+0.240,+0.281,+0.333,+0.372,+0.430,+0.452,+0.499,+0.550,+0.571,+0.620,+0.651,+0.696,+0.718,+0.770,+0.807,+0.835,+0.867,+0.897,+0.952,+0.999,+1.039,+1.100,+1.151,+1.200,+1.285,+1.345,+1.395,+1.451,+1.489,+1.559,+1.628,+1.716,+1.777,+1.860,+1.910,+2.042,+2.135,+2.261,+2.440,+2.568,+2.780,+3.123,+3.391,+3.719,+4.310,+4.390,+4.722,+4.842,+4.842,+4.842,+4.842,+4.842}},
/*
==================================================
checkpoint @ 65536
==================================================
        {"Gap-16:A", 10240, 65536, 0, { -5.306, -4.912, -4.787, -4.655, -4.454, -4.083, -3.762, -3.481, -3.019, -2.635, -2.233, -2.001, -1.820, -1.666, -1.544, -1.433, -1.338, -1.249, -1.162, -1.080, -1.009, -0.939, -0.874, -0.810, -0.752, -0.695, -0.639, -0.588, -0.535, -0.485, -0.439, -0.395, -0.350, -0.309, -0.265, -0.222, -0.178, -0.136, -0.094, -0.057, -0.014, +0.025, +0.063, +0.102, +0.142, +0.181, +0.219, +0.258, +0.295, +0.331, +0.367, +0.403, +0.440, +0.477, +0.513, +0.549, +0.583, +0.620, +0.657, +0.693, +0.729, +0.762, +0.799, +0.834, +0.871, +0.907, +0.943, +0.976, +1.013, +1.050, +1.086, +1.125, +1.166, +1.205, +1.242, +1.283, +1.320, +1.361, +1.403, +1.446, +1.489, +1.533, +1.580, +1.625, +1.671, +1.714, +1.761, +1.811, +1.866, +1.916, +1.967, +2.019, +2.076, +2.135, +2.197, +2.266, +2.335, +2.412, +2.489, +2.573, +2.668, +2.772, +2.890, +3.013, +3.163, +3.363, +3.600, +4.002, +4.342, +4.757, +5.091, +5.357, +5.806, +5.920, +6.018, +6.239, +6.336},  +0.660,  +0.657,   1.425},
        {"Gap-16:A", 12288, 65536, 0, { -5.250, -5.215, -4.949, -4.497, -4.444, -4.075, -3.724, -3.446, -2.990, -2.638, -2.247, -1.995, -1.819, -1.683, -1.561, -1.445, -1.346, -1.258, -1.174, -1.097, -1.025, -0.952, -0.890, -0.828, -0.773, -0.716, -0.660, -0.606, -0.555, -0.501, -0.455, -0.410, -0.363, -0.315, -0.270, -0.228, -0.186, -0.143, -0.107, -0.064, -0.023, +0.016, +0.054, +0.092, +0.133, +0.173, +0.208, +0.245, +0.284, +0.320, +0.355, +0.389, +0.427, +0.467, +0.501, +0.539, +0.577, +0.613, +0.647, +0.684, +0.721, +0.757, +0.792, +0.826, +0.859, +0.893, +0.930, +0.968, +1.004, +1.039, +1.073, +1.110, +1.147, +1.188, +1.227, +1.265, +1.305, +1.342, +1.383, +1.427, +1.469, +1.511, +1.555, +1.598, +1.644, +1.688, +1.734, +1.782, +1.833, +1.884, +1.938, +1.999, +2.059, +2.117, +2.178, +2.242, +2.312, +2.387, +2.468, +2.554, +2.646, +2.748, +2.864, +2.992, +3.144, +3.322, +3.571, +3.979, +4.360, +4.729, +5.097, +5.365, +5.819, +6.050, +6.187, +6.450, +6.695},  +0.645,  +0.647,   1.420},
        {"Gap-16:A", 14336, 65536, 0, { -5.406, -5.351, -4.999, -4.748, -4.439, -3.964, -3.694, -3.387, -3.020, -2.674, -2.283, -2.033, -1.849, -1.696, -1.572, -1.459, -1.358, -1.273, -1.189, -1.109, -1.038, -0.970, -0.902, -0.840, -0.780, -0.728, -0.671, -0.618, -0.568, -0.520, -0.475, -0.429, -0.382, -0.336, -0.289, -0.248, -0.205, -0.164, -0.122, -0.081, -0.039, +0.000, +0.042, +0.080, +0.116, +0.155, +0.193, +0.229, +0.266, +0.301, +0.339, +0.375, +0.414, +0.450, +0.486, +0.521, +0.557, +0.595, +0.631, +0.665, +0.702, +0.738, +0.774, +0.811, +0.845, +0.881, +0.919, +0.954, +0.991, +1.026, +1.064, +1.103, +1.145, +1.183, +1.222, +1.262, +1.303, +1.347, +1.385, +1.428, +1.470, +1.512, +1.556, +1.601, +1.650, +1.700, +1.746, +1.794, +1.846, +1.898, +1.953, +2.008, +2.064, +2.127, +2.188, +2.257, +2.323, +2.397, +2.474, +2.560, +2.650, +2.745, +2.861, +3.002, +3.150, +3.338, +3.586, +4.001, +4.341, +4.779, +5.029, +5.324, +5.707, +5.979, +6.142, +6.643, +6.836},  +0.637,  +0.631,   1.429},
        {"Gap-16:A", 16384, 65536, 0, { -5.335, -5.259, -4.973, -4.569, -4.219, -3.977, -3.732, -3.424, -3.013, -2.651, -2.284, -2.043, -1.851, -1.697, -1.579, -1.472, -1.373, -1.279, -1.200, -1.117, -1.043, -0.973, -0.908, -0.848, -0.787, -0.728, -0.673, -0.621, -0.569, -0.519, -0.471, -0.424, -0.381, -0.335, -0.289, -0.246, -0.203, -0.161, -0.120, -0.080, -0.040, -0.003, +0.037, +0.076, +0.113, +0.152, +0.190, +0.226, +0.264, +0.300, +0.336, +0.373, +0.408, +0.442, +0.476, +0.513, +0.550, +0.587, +0.623, +0.659, +0.697, +0.733, +0.768, +0.808, +0.845, +0.884, +0.920, +0.957, +0.994, +1.032, +1.067, +1.103, +1.142, +1.180, +1.220, +1.259, +1.301, +1.342, +1.382, +1.423, +1.466, +1.508, +1.555, +1.598, +1.643, +1.688, +1.734, +1.784, +1.837, +1.890, +1.946, +2.004, +2.062, +2.118, +2.184, +2.251, +2.317, +2.386, +2.461, +2.552, +2.648, +2.752, +2.866, +2.990, +3.132, +3.320, +3.557, +3.967, +4.349, +4.771, +4.997, +5.335, +5.855, +6.153, +6.343, +6.517, +6.613},  +0.633,  +0.623,   1.427},
        {"Gap-16:A", 20480, 65536, 0, { -6.319, -5.646, -5.219, -4.757, -4.465, -4.095, -3.798, -3.465, -3.038, -2.678, -2.296, -2.040, -1.856, -1.703, -1.579, -1.469, -1.369, -1.280, -1.196, -1.115, -1.041, -0.976, -0.912, -0.845, -0.787, -0.727, -0.673, -0.621, -0.570, -0.523, -0.477, -0.428, -0.381, -0.335, -0.293, -0.249, -0.209, -0.167, -0.125, -0.088, -0.050, -0.012, +0.024, +0.062, +0.100, +0.139, +0.174, +0.211, +0.246, +0.281, +0.316, +0.355, +0.393, +0.431, +0.467, +0.502, +0.536, +0.571, +0.608, +0.644, +0.682, +0.717, +0.755, +0.791, +0.826, +0.863, +0.899, +0.939, +0.978, +1.014, +1.050, +1.088, +1.125, +1.164, +1.202, +1.241, +1.280, +1.321, +1.361, +1.403, +1.443, +1.487, +1.530, +1.574, +1.620, +1.669, +1.716, +1.766, +1.819, +1.869, +1.919, +1.978, +2.035, +2.096, +2.160, +2.226, +2.301, +2.372, +2.443, +2.525, +2.618, +2.714, +2.829, +2.963, +3.111, +3.293, +3.540, +3.932, +4.281, +4.714, +4.986, +5.211, +5.456, +5.792, +6.250, +6.768, +7.104},  +0.618,  +0.608,   1.420},
        {"Gap-16:A", 24576, 65536, 0, { -5.537, -5.183, -5.020, -4.688, -4.420, -4.037, -3.799, -3.534, -3.067, -2.700, -2.315, -2.061, -1.881, -1.718, -1.593, -1.475, -1.371, -1.280, -1.193, -1.117, -1.047, -0.979, -0.913, -0.851, -0.792, -0.740, -0.689, -0.632, -0.584, -0.533, -0.489, -0.442, -0.398, -0.351, -0.310, -0.264, -0.221, -0.177, -0.136, -0.097, -0.057, -0.015, +0.025, +0.061, +0.100, +0.135, +0.172, +0.211, +0.247, +0.282, +0.318, +0.356, +0.392, +0.426, +0.463, +0.497, +0.535, +0.570, +0.607, +0.643, +0.677, +0.714, +0.748, +0.784, +0.819, +0.855, +0.890, +0.928, +0.965, +1.000, +1.038, +1.075, +1.115, +1.155, +1.195, +1.233, +1.276, +1.318, +1.357, +1.398, +1.439, +1.482, +1.526, +1.570, +1.613, +1.662, +1.710, +1.765, +1.815, +1.868, +1.921, +1.977, +2.035, +2.096, +2.160, +2.223, +2.289, +2.368, +2.444, +2.528, +2.615, +2.716, +2.829, +2.954, +3.097, +3.288, +3.532, +3.926, +4.285, +4.715, +4.996, +5.245, +5.624, +5.800, +6.001, +6.363, +6.483},  +0.612,  +0.607,   1.423},
        {"Gap-16:A", 28672, 65536, 0, { -5.166, -5.166, -4.921, -4.788, -4.471, -4.069, -3.817, -3.478, -3.046, -2.691, -2.305, -2.077, -1.884, -1.731, -1.599, -1.495, -1.400, -1.315, -1.227, -1.145, -1.063, -0.994, -0.927, -0.864, -0.802, -0.745, -0.690, -0.637, -0.588, -0.543, -0.494, -0.451, -0.403, -0.357, -0.313, -0.269, -0.224, -0.181, -0.140, -0.100, -0.059, -0.016, +0.024, +0.065, +0.102, +0.137, +0.175, +0.212, +0.249, +0.287, +0.320, +0.359, +0.396, +0.430, +0.465, +0.502, +0.538, +0.576, +0.611, +0.645, +0.683, +0.717, +0.755, +0.792, +0.827, +0.862, +0.897, +0.933, +0.970, +1.006, +1.042, +1.078, +1.116, +1.155, +1.193, +1.232, +1.273, +1.312, +1.352, +1.392, +1.433, +1.478, +1.522, +1.566, +1.609, +1.655, +1.703, +1.750, +1.797, +1.851, +1.904, +1.956, +2.015, +2.074, +2.135, +2.200, +2.270, +2.341, +2.424, +2.509, +2.600, +2.703, +2.816, +2.946, +3.093, +3.285, +3.528, +3.894, +4.247, +4.676, +4.966, +5.282, +5.682, +5.942, +6.332, +6.526, +6.796},  +0.606,  +0.611,   1.421},
        {"Gap-16:A", 32768, 65536, 0, { -5.148, -5.136, -4.717, -4.575, -4.365, -4.095, -3.739, -3.416, -3.043, -2.708, -2.324, -2.078, -1.896, -1.753, -1.625, -1.514, -1.411, -1.321, -1.235, -1.153, -1.079, -1.008, -0.939, -0.876, -0.815, -0.755, -0.701, -0.646, -0.595, -0.544, -0.496, -0.447, -0.398, -0.353, -0.309, -0.267, -0.224, -0.182, -0.142, -0.102, -0.061, -0.022, +0.015, +0.053, +0.091, +0.128, +0.167, +0.204, +0.238, +0.272, +0.312, +0.348, +0.381, +0.416, +0.453, +0.489, +0.526, +0.561, +0.598, +0.635, +0.669, +0.705, +0.742, +0.777, +0.814, +0.850, +0.885, +0.923, +0.962, +0.999, +1.036, +1.073, +1.110, +1.149, +1.190, +1.226, +1.265, +1.304, +1.346, +1.390, +1.434, +1.476, +1.519, +1.562, +1.607, +1.654, +1.700, +1.750, +1.801, +1.853, +1.908, +1.964, +2.020, +2.082, +2.150, +2.216, +2.288, +2.359, +2.439, +2.523, +2.617, +2.714, +2.825, +2.947, +3.088, +3.284, +3.539, +3.898, +4.265, +4.725, +5.045, +5.308, +5.693, +5.945, +6.220, +6.661, +6.697},  +0.602,  +0.598,   1.426},
        {"Gap-16:A", 40960, 65536, 0, { -5.012, -4.794, -4.616, -4.427, -4.298, -4.005, -3.746, -3.451, -3.072, -2.698, -2.309, -2.074, -1.890, -1.735, -1.613, -1.507, -1.409, -1.315, -1.226, -1.148, -1.073, -1.009, -0.945, -0.886, -0.825, -0.773, -0.719, -0.668, -0.617, -0.568, -0.520, -0.473, -0.423, -0.377, -0.333, -0.286, -0.241, -0.200, -0.158, -0.118, -0.079, -0.039, -0.002, +0.036, +0.078, +0.116, +0.153, +0.192, +0.229, +0.264, +0.299, +0.336, +0.372, +0.409, +0.443, +0.480, +0.518, +0.551, +0.586, +0.624, +0.660, +0.696, +0.733, +0.770, +0.806, +0.843, +0.880, +0.915, +0.948, +0.985, +1.023, +1.064, +1.102, +1.141, +1.180, +1.218, +1.257, +1.298, +1.335, +1.380, +1.425, +1.468, +1.512, +1.555, +1.600, +1.651, +1.704, +1.749, +1.796, +1.848, +1.902, +1.957, +2.010, +2.064, +2.128, +2.196, +2.261, +2.338, +2.420, +2.498, +2.593, +2.693, +2.799, +2.930, +3.082, +3.268, +3.518, +3.925, +4.244, +4.657, +4.944, +5.183, +5.451, +5.849, +6.022, +6.336, +6.645},  +0.592,  +0.586,   1.422},
        {"Gap-16:A", 49152, 65536, 0, { -5.113, -4.923, -4.569, -4.399, -4.270, -4.017, -3.794, -3.520, -3.059, -2.721, -2.313, -2.076, -1.884, -1.751, -1.623, -1.508, -1.409, -1.320, -1.238, -1.164, -1.090, -1.024, -0.965, -0.904, -0.846, -0.787, -0.733, -0.680, -0.629, -0.577, -0.530, -0.479, -0.430, -0.381, -0.340, -0.295, -0.253, -0.213, -0.172, -0.133, -0.093, -0.052, -0.013, +0.025, +0.063, +0.102, +0.139, +0.177, +0.215, +0.252, +0.289, +0.325, +0.361, +0.395, +0.432, +0.465, +0.503, +0.537, +0.572, +0.609, +0.646, +0.683, +0.716, +0.755, +0.792, +0.828, +0.862, +0.899, +0.936, +0.971, +1.011, +1.050, +1.089, +1.126, +1.163, +1.205, +1.243, +1.285, +1.327, +1.371, +1.413, +1.455, +1.499, +1.543, +1.592, +1.638, +1.686, +1.736, +1.787, +1.839, +1.894, +1.952, +2.012, +2.072, +2.135, +2.198, +2.265, +2.334, +2.402, +2.485, +2.575, +2.678, +2.789, +2.916, +3.065, +3.257, +3.506, +3.887, +4.267, +4.703, +5.070, +5.274, +5.562, +5.707, +5.826, +5.959, +6.129},  +0.580,  +0.572,   1.423},
        {"Gap-16:A", 57344, 65536, 0, { -5.890, -5.781, -5.155, -4.882, -4.370, -4.042, -3.827, -3.468, -3.033, -2.714, -2.328, -2.097, -1.910, -1.756, -1.630, -1.519, -1.418, -1.333, -1.252, -1.178, -1.104, -1.038, -0.973, -0.911, -0.852, -0.794, -0.738, -0.684, -0.635, -0.584, -0.535, -0.490, -0.443, -0.400, -0.358, -0.313, -0.270, -0.225, -0.186, -0.143, -0.103, -0.062, -0.023, +0.015, +0.056, +0.091, +0.128, +0.164, +0.202, +0.238, +0.274, +0.310, +0.348, +0.385, +0.422, +0.459, +0.497, +0.533, +0.569, +0.603, +0.639, +0.673, +0.710, +0.746, +0.783, +0.819, +0.856, +0.894, +0.930, +0.968, +1.005, +1.045, +1.084, +1.124, +1.160, +1.199, +1.238, +1.279, +1.322, +1.362, +1.402, +1.444, +1.488, +1.530, +1.576, +1.624, +1.669, +1.717, +1.768, +1.819, +1.876, +1.932, +1.991, +2.051, +2.117, +2.179, +2.249, +2.326, +2.403, +2.485, +2.574, +2.676, +2.781, +2.915, +3.051, +3.239, +3.492, +3.869, +4.194, +4.682, +4.908, +5.174, +5.599, +5.768, +5.883, +6.263, +6.635},  +0.569,  +0.569,   1.421},
        {"Gap-16:A", 65536, 65536, 0, { -5.726, -5.458, -4.987, -4.757, -4.445, -4.104, -3.750, -3.484, -3.089, -2.744, -2.373, -2.111, -1.925, -1.777, -1.650, -1.540, -1.441, -1.356, -1.274, -1.192, -1.118, -1.044, -0.977, -0.913, -0.854, -0.802, -0.745, -0.692, -0.639, -0.586, -0.538, -0.491, -0.443, -0.399, -0.357, -0.313, -0.270, -0.227, -0.186, -0.146, -0.106, -0.067, -0.026, +0.012, +0.048, +0.085, +0.121, +0.158, +0.193, +0.230, +0.265, +0.300, +0.339, +0.377, +0.413, +0.448, +0.483, +0.519, +0.555, +0.588, +0.623, +0.659, +0.692, +0.731, +0.769, +0.804, +0.842, +0.877, +0.913, +0.950, +0.986, +1.027, +1.063, +1.101, +1.140, +1.179, +1.218, +1.259, +1.297, +1.338, +1.379, +1.425, +1.469, +1.515, +1.560, +1.608, +1.656, +1.707, +1.756, +1.809, +1.863, +1.920, +1.977, +2.035, +2.101, +2.165, +2.232, +2.305, +2.386, +2.476, +2.564, +2.668, +2.777, +2.902, +3.052, +3.243, +3.475, +3.856, +4.200, +4.664, +4.894, +5.201, +5.596, +5.701, +6.138, +6.445, +6.499},  +0.557,  +0.555,   1.422},
        {"Gap-16:A", 81920, 65536, 0, { -5.814, -5.472, -4.961, -4.805, -4.409, -4.136, -3.826, -3.485, -3.060, -2.710, -2.336, -2.089, -1.914, -1.771, -1.641, -1.537, -1.436, -1.346, -1.266, -1.190, -1.117, -1.048, -0.985, -0.921, -0.860, -0.804, -0.750, -0.698, -0.645, -0.594, -0.547, -0.501, -0.456, -0.408, -0.365, -0.322, -0.281, -0.237, -0.197, -0.157, -0.117, -0.079, -0.040, -0.000, +0.039, +0.078, +0.114, +0.151, +0.191, +0.228, +0.263, +0.299, +0.335, +0.369, +0.406, +0.442, +0.478, +0.514, +0.550, +0.585, +0.621, +0.655, +0.688, +0.725, +0.762, +0.797, +0.833, +0.868, +0.902, +0.939, +0.976, +1.015, +1.053, +1.090, +1.130, +1.169, +1.208, +1.248, +1.288, +1.328, +1.370, +1.415, +1.463, +1.503, +1.548, +1.593, +1.640, +1.690, +1.738, +1.787, +1.837, +1.893, +1.952, +2.012, +2.074, +2.142, +2.208, +2.283, +2.360, +2.443, +2.536, +2.645, +2.758, +2.881, +3.029, +3.218, +3.470, +3.866, +4.212, +4.713, +4.987, +5.237, +5.512, +5.833, +5.956, +6.279, +7.145},  +0.549,  +0.550,   1.415},
        {"Gap-16:A", 98304, 65536, 0, { -5.884, -5.664, -5.376, -5.059, -4.523, -4.047, -3.820, -3.536, -3.105, -2.741, -2.369, -2.137, -1.945, -1.787, -1.654, -1.552, -1.463, -1.371, -1.286, -1.203, -1.130, -1.062, -1.000, -0.938, -0.878, -0.822, -0.770, -0.718, -0.666, -0.613, -0.564, -0.519, -0.472, -0.424, -0.382, -0.337, -0.297, -0.250, -0.208, -0.168, -0.126, -0.089, -0.047, -0.007, +0.028, +0.065, +0.103, +0.139, +0.176, +0.214, +0.251, +0.287, +0.322, +0.356, +0.394, +0.431, +0.466, +0.500, +0.534, +0.571, +0.607, +0.643, +0.679, +0.716, +0.752, +0.788, +0.827, +0.864, +0.900, +0.939, +0.976, +1.013, +1.052, +1.088, +1.127, +1.166, +1.206, +1.247, +1.287, +1.326, +1.369, +1.411, +1.452, +1.496, +1.542, +1.585, +1.632, +1.681, +1.730, +1.784, +1.834, +1.891, +1.945, +2.003, +2.063, +2.130, +2.193, +2.265, +2.346, +2.429, +2.520, +2.614, +2.728, +2.849, +2.996, +3.181, +3.432, +3.837, +4.223, +4.663, +4.962, +5.245, +5.701, +5.894, +6.008, +6.296, +6.465},  +0.535,  +0.534,   1.417},
        {"Gap-16:A",114688, 65536, 0, { -5.431, -5.032, -4.733, -4.668, -4.528, -4.069, -3.809, -3.502, -3.046, -2.720, -2.371, -2.143, -1.967, -1.807, -1.674, -1.564, -1.467, -1.376, -1.293, -1.214, -1.137, -1.063, -1.003, -0.938, -0.881, -0.824, -0.769, -0.717, -0.665, -0.615, -0.564, -0.517, -0.471, -0.427, -0.382, -0.339, -0.297, -0.252, -0.211, -0.171, -0.135, -0.097, -0.054, -0.015, +0.023, +0.062, +0.098, +0.133, +0.169, +0.206, +0.243, +0.278, +0.317, +0.352, +0.388, +0.424, +0.461, +0.498, +0.532, +0.568, +0.605, +0.639, +0.675, +0.712, +0.748, +0.783, +0.818, +0.856, +0.894, +0.932, +0.969, +1.003, +1.039, +1.077, +1.115, +1.155, +1.194, +1.231, +1.271, +1.314, +1.354, +1.394, +1.439, +1.480, +1.523, +1.567, +1.614, +1.661, +1.709, +1.762, +1.818, +1.872, +1.928, +1.987, +2.048, +2.117, +2.182, +2.254, +2.336, +2.422, +2.512, +2.612, +2.721, +2.841, +2.990, +3.174, +3.412, +3.770, +4.129, +4.579, +4.842, +5.069, +5.378, +5.557, +5.747, +6.142, +7.096},  +0.527,  +0.532,   1.410},
        {"Gap-16:A",131072, 65536, 0, { -6.049, -5.728, -5.161, -4.932, -4.434, -4.054, -3.757, -3.484, -3.120, -2.774, -2.386, -2.142, -1.960, -1.810, -1.680, -1.567, -1.461, -1.369, -1.293, -1.204, -1.130, -1.060, -0.998, -0.938, -0.877, -0.820, -0.766, -0.713, -0.663, -0.616, -0.569, -0.521, -0.475, -0.429, -0.387, -0.343, -0.301, -0.259, -0.218, -0.180, -0.141, -0.102, -0.061, -0.023, +0.015, +0.052, +0.089, +0.124, +0.163, +0.197, +0.235, +0.272, +0.309, +0.347, +0.381, +0.417, +0.453, +0.489, +0.524, +0.559, +0.594, +0.628, +0.663, +0.699, +0.734, +0.770, +0.806, +0.843, +0.881, +0.918, +0.952, +0.991, +1.028, +1.067, +1.106, +1.142, +1.181, +1.221, +1.264, +1.304, +1.344, +1.383, +1.426, +1.471, +1.519, +1.566, +1.613, +1.660, +1.709, +1.760, +1.813, +1.869, +1.921, +1.978, +2.038, +2.104, +2.171, +2.239, +2.318, +2.401, +2.488, +2.591, +2.710, +2.833, +2.981, +3.168, +3.429, +3.807, +4.160, +4.580, +4.885, +5.116, +5.435, +5.547, +5.728, +6.105, +6.214},  +0.520,  +0.524,   1.410},
        {"Gap-16:A",163840, 65536, 0, { -5.539, -5.464, -4.976, -4.820, -4.580, -4.186, -3.887, -3.615, -3.159, -2.777, -2.394, -2.134, -1.955, -1.810, -1.673, -1.561, -1.459, -1.364, -1.280, -1.203, -1.131, -1.067, -1.006, -0.947, -0.886, -0.829, -0.775, -0.724, -0.674, -0.624, -0.575, -0.526, -0.478, -0.435, -0.390, -0.349, -0.305, -0.266, -0.228, -0.188, -0.149, -0.109, -0.070, -0.031, +0.007, +0.045, +0.080, +0.117, +0.153, +0.190, +0.226, +0.259, +0.296, +0.333, +0.368, +0.404, +0.439, +0.476, +0.510, +0.543, +0.576, +0.612, +0.649, +0.683, +0.716, +0.752, +0.788, +0.822, +0.856, +0.892, +0.927, +0.967, +1.005, +1.044, +1.082, +1.122, +1.160, +1.200, +1.240, +1.283, +1.322, +1.366, +1.408, +1.450, +1.497, +1.544, +1.589, +1.643, +1.691, +1.742, +1.792, +1.844, +1.902, +1.963, +2.025, +2.094, +2.162, +2.236, +2.311, +2.396, +2.486, +2.577, +2.685, +2.811, +2.968, +3.160, +3.396, +3.781, +4.097, +4.534, +4.859, +5.129, +5.385, +5.536, +5.838, +6.139, +6.252},  +0.507,  +0.510,   1.405},
        {"Gap-16:A",196608, 65536, 0, { -5.154, -5.059, -4.999, -4.848, -4.691, -4.256, -3.904, -3.606, -3.121, -2.792, -2.388, -2.145, -1.965, -1.819, -1.701, -1.576, -1.472, -1.384, -1.304, -1.232, -1.158, -1.090, -1.027, -0.963, -0.902, -0.845, -0.790, -0.736, -0.684, -0.634, -0.584, -0.535, -0.488, -0.446, -0.402, -0.357, -0.316, -0.277, -0.237, -0.197, -0.156, -0.117, -0.079, -0.040, -0.002, +0.036, +0.072, +0.109, +0.147, +0.183, +0.221, +0.259, +0.292, +0.330, +0.367, +0.402, +0.439, +0.472, +0.507, +0.543, +0.579, +0.613, +0.648, +0.683, +0.718, +0.751, +0.787, +0.823, +0.860, +0.896, +0.929, +0.965, +1.002, +1.041, +1.078, +1.114, +1.157, +1.196, +1.236, +1.277, +1.318, +1.361, +1.403, +1.449, +1.494, +1.542, +1.588, +1.636, +1.685, +1.735, +1.789, +1.846, +1.902, +1.958, +2.019, +2.086, +2.151, +2.225, +2.300, +2.380, +2.468, +2.576, +2.693, +2.825, +2.976, +3.145, +3.370, +3.746, +4.155, +4.525, +4.838, +5.149, +5.447, +5.742, +5.914, +6.449, +7.024},  +0.501,  +0.507,   1.408},
        {"Gap-16:A",229376, 65536, 0, { -5.520, -5.485, -5.135, -4.964, -4.641, -4.225, -3.896, -3.562, -3.147, -2.801, -2.425, -2.176, -1.976, -1.826, -1.697, -1.578, -1.482, -1.395, -1.311, -1.233, -1.164, -1.093, -1.028, -0.962, -0.906, -0.847, -0.792, -0.738, -0.691, -0.640, -0.590, -0.542, -0.496, -0.452, -0.409, -0.369, -0.328, -0.288, -0.248, -0.211, -0.172, -0.131, -0.093, -0.057, -0.019, +0.020, +0.059, +0.097, +0.134, +0.172, +0.208, +0.243, +0.278, +0.315, +0.355, +0.392, +0.424, +0.460, +0.494, +0.528, +0.564, +0.599, +0.635, +0.670, +0.707, +0.745, +0.781, +0.818, +0.854, +0.892, +0.930, +0.967, +1.006, +1.042, +1.080, +1.118, +1.160, +1.198, +1.237, +1.278, +1.314, +1.359, +1.403, +1.446, +1.493, +1.539, +1.585, +1.633, +1.683, +1.732, +1.786, +1.840, +1.902, +1.960, +2.018, +2.083, +2.151, +2.225, +2.300, +2.383, +2.479, +2.581, +2.687, +2.816, +2.967, +3.149, +3.392, +3.763, +4.156, +4.587, +4.934, +5.195, +5.522, +5.931, +6.171, +6.602, +6.911},  +0.495,  +0.494,   1.412},
        {"Gap-16:A",262144, 65536, 0, { -5.798, -5.629, -4.901, -4.666, -4.449, -4.167, -3.821, -3.594, -3.177, -2.836, -2.420, -2.182, -1.996, -1.850, -1.719, -1.602, -1.501, -1.404, -1.322, -1.244, -1.173, -1.103, -1.038, -0.976, -0.913, -0.856, -0.802, -0.751, -0.704, -0.651, -0.600, -0.552, -0.507, -0.460, -0.417, -0.374, -0.330, -0.287, -0.248, -0.211, -0.171, -0.132, -0.094, -0.056, -0.019, +0.019, +0.057, +0.090, +0.126, +0.163, +0.201, +0.238, +0.273, +0.311, +0.343, +0.378, +0.414, +0.450, +0.486, +0.521, +0.553, +0.588, +0.623, +0.658, +0.692, +0.729, +0.767, +0.801, +0.837, +0.874, +0.911, +0.949, +0.985, +1.024, +1.065, +1.105, +1.145, +1.186, +1.226, +1.266, +1.306, +1.347, +1.394, +1.437, +1.484, +1.534, +1.582, +1.628, +1.679, +1.730, +1.785, +1.838, +1.892, +1.947, +2.007, +2.074, +2.147, +2.216, +2.293, +2.382, +2.478, +2.573, +2.695, +2.828, +2.970, +3.153, +3.387, +3.755, +4.133, +4.551, +4.864, +5.073, +5.417, +5.861, +6.349, +7.053, +7.083},  +0.486,  +0.486,   1.414},
        {"Gap-16:A",327680, 65536, 0, { -5.261, -5.212, -4.823, -4.619, -4.494, -4.166, -3.860, -3.566, -3.155, -2.790, -2.414, -2.191, -2.009, -1.851, -1.727, -1.612, -1.514, -1.424, -1.344, -1.267, -1.198, -1.127, -1.065, -0.999, -0.939, -0.883, -0.829, -0.776, -0.725, -0.672, -0.623, -0.577, -0.528, -0.485, -0.439, -0.395, -0.353, -0.312, -0.271, -0.228, -0.190, -0.149, -0.109, -0.069, -0.029, +0.007, +0.045, +0.082, +0.121, +0.162, +0.196, +0.233, +0.267, +0.304, +0.341, +0.374, +0.408, +0.443, +0.480, +0.516, +0.551, +0.587, +0.623, +0.659, +0.693, +0.729, +0.767, +0.803, +0.840, +0.878, +0.915, +0.952, +0.985, +1.022, +1.059, +1.097, +1.137, +1.176, +1.216, +1.259, +1.303, +1.343, +1.387, +1.431, +1.475, +1.522, +1.572, +1.618, +1.668, +1.723, +1.775, +1.827, +1.885, +1.943, +2.005, +2.067, +2.140, +2.210, +2.288, +2.365, +2.456, +2.560, +2.669, +2.794, +2.951, +3.129, +3.384, +3.770, +4.111, +4.526, +4.822, +5.102, +5.432, +5.675, +6.062, +6.876, +7.568},  +0.476,  +0.480,   1.415},
        {"Gap-16:A",393216, 65536, 0, { -5.189, -5.139, -4.992, -4.695, -4.518, -4.161, -3.879, -3.608, -3.186, -2.841, -2.442, -2.200, -2.022, -1.866, -1.735, -1.619, -1.514, -1.421, -1.341, -1.263, -1.193, -1.127, -1.064, -1.001, -0.942, -0.886, -0.830, -0.777, -0.727, -0.677, -0.626, -0.580, -0.533, -0.486, -0.443, -0.400, -0.359, -0.316, -0.275, -0.233, -0.193, -0.153, -0.114, -0.078, -0.042, -0.004, +0.032, +0.070, +0.112, +0.151, +0.189, +0.222, +0.258, +0.296, +0.333, +0.368, +0.404, +0.438, +0.473, +0.507, +0.541, +0.581, +0.615, +0.652, +0.687, +0.723, +0.761, +0.796, +0.834, +0.873, +0.910, +0.948, +0.985, +1.022, +1.059, +1.094, +1.135, +1.175, +1.214, +1.253, +1.296, +1.337, +1.380, +1.422, +1.470, +1.516, +1.562, +1.609, +1.660, +1.712, +1.765, +1.817, +1.876, +1.937, +2.001, +2.066, +2.135, +2.208, +2.288, +2.372, +2.464, +2.563, +2.668, +2.789, +2.942, +3.129, +3.372, +3.742, +4.054, +4.499, +4.819, +5.153, +5.625, +5.942, +6.019, +6.630, +7.196},  +0.469,  +0.473,   1.416},
        {"Gap-16:A",458752, 65536, 0, { -5.185, -5.092, -4.982, -4.672, -4.472, -4.278, -3.955, -3.663, -3.166, -2.866, -2.465, -2.218, -2.038, -1.887, -1.762, -1.644, -1.543, -1.449, -1.363, -1.286, -1.212, -1.142, -1.074, -1.013, -0.957, -0.899, -0.843, -0.788, -0.738, -0.686, -0.633, -0.584, -0.539, -0.494, -0.450, -0.408, -0.365, -0.323, -0.284, -0.244, -0.204, -0.163, -0.122, -0.084, -0.045, -0.007, +0.030, +0.067, +0.107, +0.146, +0.182, +0.216, +0.253, +0.288, +0.325, +0.360, +0.396, +0.430, +0.466, +0.499, +0.537, +0.572, +0.611, +0.647, +0.682, +0.718, +0.754, +0.790, +0.826, +0.863, +0.902, +0.939, +0.976, +1.015, +1.054, +1.093, +1.133, +1.173, +1.212, +1.254, +1.295, +1.340, +1.384, +1.429, +1.475, +1.524, +1.566, +1.613, +1.660, +1.715, +1.771, +1.824, +1.881, +1.941, +2.006, +2.071, +2.137, +2.209, +2.287, +2.373, +2.463, +2.565, +2.678, +2.796, +2.941, +3.119, +3.360, +3.749, +4.128, +4.488, +4.753, +5.106, +5.439, +5.566, +5.677, +6.154, +6.528},  +0.463,  +0.466,   1.423},
        {"Gap-16:A",524288, 65536, 0, { -4.658, -4.606, -4.561, -4.514, -4.315, -4.070, -3.856, -3.601, -3.198, -2.855, -2.457, -2.203, -2.026, -1.883, -1.760, -1.648, -1.542, -1.452, -1.362, -1.287, -1.213, -1.141, -1.076, -1.015, -0.958, -0.897, -0.843, -0.787, -0.735, -0.686, -0.636, -0.589, -0.543, -0.498, -0.454, -0.408, -0.365, -0.321, -0.279, -0.238, -0.198, -0.159, -0.122, -0.083, -0.044, -0.007, +0.029, +0.066, +0.104, +0.139, +0.174, +0.210, +0.247, +0.284, +0.319, +0.354, +0.390, +0.428, +0.463, +0.502, +0.536, +0.573, +0.610, +0.647, +0.683, +0.719, +0.754, +0.792, +0.829, +0.866, +0.905, +0.941, +0.978, +1.015, +1.054, +1.092, +1.130, +1.169, +1.208, +1.251, +1.290, +1.332, +1.378, +1.423, +1.469, +1.515, +1.562, +1.609, +1.658, +1.708, +1.764, +1.819, +1.875, +1.935, +1.997, +2.064, +2.132, +2.204, +2.279, +2.361, +2.451, +2.551, +2.665, +2.797, +2.943, +3.126, +3.378, +3.765, +4.126, +4.528, +4.800, +5.042, +5.411, +5.768, +6.257, +6.470, +6.899},  +0.462,  +0.463,   1.420},
        {"Gap-16:A",655360, 65536, 0, { -5.343, -5.289, -5.041, -4.775, -4.570, -4.161, -3.895, -3.609, -3.201, -2.833, -2.459, -2.223, -2.032, -1.881, -1.751, -1.636, -1.532, -1.443, -1.360, -1.278, -1.207, -1.141, -1.078, -1.013, -0.955, -0.894, -0.838, -0.788, -0.736, -0.687, -0.637, -0.592, -0.547, -0.499, -0.458, -0.410, -0.368, -0.325, -0.285, -0.245, -0.202, -0.164, -0.127, -0.089, -0.048, -0.008, +0.031, +0.066, +0.101, +0.140, +0.174, +0.209, +0.245, +0.279, +0.315, +0.353, +0.388, +0.424, +0.460, +0.495, +0.531, +0.567, +0.603, +0.640, +0.676, +0.711, +0.745, +0.779, +0.816, +0.854, +0.890, +0.928, +0.970, +1.009, +1.046, +1.084, +1.124, +1.165, +1.206, +1.247, +1.289, +1.332, +1.375, +1.419, +1.464, +1.510, +1.555, +1.602, +1.652, +1.704, +1.755, +1.814, +1.873, +1.933, +1.991, +2.057, +2.127, +2.201, +2.283, +2.362, +2.453, +2.549, +2.662, +2.782, +2.931, +3.103, +3.328, +3.713, +4.063, +4.441, +4.751, +5.105, +5.449, +5.726, +5.839, +6.172, +6.619},  +0.457,  +0.460,   1.416},
        {"Gap-16:A",786432, 65536, 0, { -5.827, -5.286, -5.072, -4.740, -4.408, -4.097, -3.846, -3.577, -3.204, -2.883, -2.484, -2.223, -2.041, -1.887, -1.751, -1.639, -1.537, -1.445, -1.359, -1.279, -1.210, -1.138, -1.071, -1.008, -0.949, -0.890, -0.835, -0.781, -0.731, -0.680, -0.631, -0.585, -0.536, -0.491, -0.450, -0.407, -0.366, -0.325, -0.284, -0.245, -0.207, -0.168, -0.130, -0.091, -0.054, -0.019, +0.018, +0.054, +0.092, +0.128, +0.166, +0.203, +0.238, +0.273, +0.310, +0.343, +0.379, +0.414, +0.450, +0.486, +0.521, +0.561, +0.594, +0.631, +0.664, +0.700, +0.732, +0.771, +0.807, +0.845, +0.883, +0.921, +0.960, +0.999, +1.038, +1.078, +1.118, +1.159, +1.200, +1.241, +1.282, +1.326, +1.369, +1.412, +1.459, +1.505, +1.553, +1.601, +1.649, +1.700, +1.751, +1.804, +1.860, +1.919, +1.982, +2.051, +2.119, +2.193, +2.269, +2.353, +2.442, +2.535, +2.645, +2.771, +2.923, +3.099, +3.345, +3.724, +4.067, +4.484, +4.799, +5.119, +5.295, +5.563, +5.789, +5.831, +5.844},  +0.453,  +0.450,   1.414},
        {"Gap-16:A",917504, 65536, 0, { -5.540, -5.468, -5.336, -4.851, -4.644, -4.287, -3.942, -3.673, -3.270, -2.882, -2.473, -2.223, -2.039, -1.889, -1.759, -1.645, -1.540, -1.450, -1.364, -1.288, -1.215, -1.148, -1.080, -1.016, -0.958, -0.900, -0.845, -0.792, -0.741, -0.692, -0.646, -0.596, -0.549, -0.506, -0.461, -0.420, -0.378, -0.337, -0.297, -0.257, -0.217, -0.180, -0.141, -0.103, -0.065, -0.026, +0.011, +0.050, +0.088, +0.125, +0.160, +0.195, +0.229, +0.265, +0.299, +0.334, +0.368, +0.403, +0.438, +0.472, +0.510, +0.546, +0.582, +0.618, +0.653, +0.690, +0.725, +0.764, +0.803, +0.841, +0.879, +0.915, +0.953, +0.990, +1.028, +1.065, +1.104, +1.144, +1.185, +1.227, +1.265, +1.309, +1.354, +1.397, +1.443, +1.489, +1.536, +1.583, +1.629, +1.683, +1.735, +1.792, +1.846, +1.904, +1.971, +2.039, +2.105, +2.173, +2.254, +2.340, +2.432, +2.522, +2.634, +2.764, +2.918, +3.108, +3.355, +3.736, +4.062, +4.484, +4.788, +5.101, +5.367, +5.578, +5.877, +5.933, +5.975},  +0.443,  +0.438,   1.415},
        {"Gap-16:A",1048576, 65536, 0, { -5.671, -5.328, -5.180, -4.879, -4.651, -4.220, -3.930, -3.685, -3.196, -2.862, -2.480, -2.223, -2.045, -1.895, -1.765, -1.654, -1.554, -1.460, -1.371, -1.290, -1.215, -1.145, -1.081, -1.025, -0.967, -0.911, -0.858, -0.805, -0.756, -0.706, -0.660, -0.615, -0.568, -0.519, -0.477, -0.434, -0.393, -0.354, -0.313, -0.273, -0.232, -0.192, -0.152, -0.112, -0.072, -0.035, +0.000, +0.040, +0.077, +0.112, +0.148, +0.182, +0.217, +0.256, +0.293, +0.328, +0.362, +0.397, +0.433, +0.472, +0.510, +0.545, +0.579, +0.613, +0.648, +0.683, +0.717, +0.753, +0.792, +0.831, +0.866, +0.901, +0.939, +0.979, +1.016, +1.055, +1.093, +1.132, +1.171, +1.213, +1.256, +1.298, +1.344, +1.391, +1.435, +1.479, +1.525, +1.572, +1.623, +1.672, +1.726, +1.783, +1.839, +1.901, +1.963, +2.032, +2.104, +2.180, +2.260, +2.342, +2.438, +2.531, +2.647, +2.779, +2.928, +3.123, +3.352, +3.754, +4.096, +4.496, +4.804, +5.069, +5.419, +5.619, +5.759, +5.986, +6.505},  +0.436,  +0.433,   1.418},
        {"Gap-16:B", 10240, 65536, 0, { -6.521, -5.826, -5.199, -5.002, -4.805, -4.574, -4.369, -4.097, -3.593, -3.241, -2.876, -2.625, -2.450, -2.297, -2.177, -2.073, -1.973, -1.886, -1.805, -1.727, -1.657, -1.598, -1.533, -1.475, -1.420, -1.362, -1.309, -1.259, -1.210, -1.160, -1.117, -1.071, -1.027, -0.983, -0.939, -0.895, -0.854, -0.810, -0.770, -0.729, -0.689, -0.652, -0.613, -0.574, -0.537, -0.499, -0.466, -0.427, -0.389, -0.353, -0.317, -0.282, -0.244, -0.210, -0.176, -0.141, -0.107, -0.069, -0.033, +0.001, +0.036, +0.073, +0.107, +0.143, +0.176, +0.213, +0.250, +0.287, +0.324, +0.362, +0.399, +0.438, +0.474, +0.513, +0.552, +0.592, +0.630, +0.669, +0.709, +0.751, +0.792, +0.835, +0.876, +0.919, +0.966, +1.014, +1.062, +1.109, +1.163, +1.212, +1.266, +1.324, +1.385, +1.448, +1.512, +1.580, +1.651, +1.727, +1.806, +1.895, +1.985, +2.093, +2.198, +2.331, +2.485, +2.676, +2.936, +3.322, +3.687, +4.123, +4.455, +4.722, +5.125, +5.358, +5.394, +5.476, +5.683},  -0.018,  -0.033,   1.411},
        {"Gap-16:B", 12288, 65536, 0, { -5.742, -5.533, -5.352, -5.272, -4.906, -4.560, -4.302, -4.039, -3.601, -3.269, -2.879, -2.634, -2.457, -2.311, -2.180, -2.072, -1.982, -1.894, -1.813, -1.743, -1.673, -1.601, -1.536, -1.469, -1.410, -1.356, -1.304, -1.252, -1.201, -1.153, -1.105, -1.060, -1.016, -0.972, -0.927, -0.886, -0.842, -0.799, -0.759, -0.719, -0.681, -0.644, -0.608, -0.569, -0.531, -0.494, -0.457, -0.421, -0.383, -0.348, -0.311, -0.272, -0.236, -0.201, -0.166, -0.133, -0.098, -0.066, -0.031, +0.004, +0.040, +0.074, +0.109, +0.145, +0.178, +0.216, +0.255, +0.292, +0.326, +0.364, +0.400, +0.438, +0.474, +0.512, +0.551, +0.590, +0.629, +0.670, +0.710, +0.750, +0.792, +0.833, +0.874, +0.918, +0.965, +1.008, +1.058, +1.111, +1.166, +1.218, +1.273, +1.330, +1.388, +1.451, +1.515, +1.580, +1.652, +1.727, +1.808, +1.894, +1.988, +2.097, +2.214, +2.343, +2.488, +2.678, +2.933, +3.339, +3.692, +4.149, +4.460, +4.736, +5.186, +5.401, +5.482, +5.666, +5.797},  -0.015,  -0.031,   1.412},
        {"Gap-16:B", 14336, 65536, 0, { -5.462, -5.334, -5.078, -4.938, -4.723, -4.483, -4.236, -4.004, -3.564, -3.221, -2.876, -2.653, -2.475, -2.320, -2.186, -2.078, -1.982, -1.900, -1.820, -1.738, -1.667, -1.597, -1.537, -1.474, -1.417, -1.365, -1.313, -1.262, -1.212, -1.165, -1.117, -1.070, -1.024, -0.980, -0.934, -0.894, -0.851, -0.810, -0.770, -0.733, -0.692, -0.653, -0.614, -0.575, -0.537, -0.502, -0.465, -0.428, -0.394, -0.356, -0.320, -0.285, -0.248, -0.213, -0.176, -0.140, -0.106, -0.071, -0.035, +0.001, +0.036, +0.074, +0.109, +0.144, +0.181, +0.217, +0.252, +0.292, +0.330, +0.368, +0.406, +0.442, +0.478, +0.514, +0.552, +0.592, +0.631, +0.676, +0.716, +0.756, +0.796, +0.837, +0.880, +0.929, +0.976, +1.023, +1.071, +1.119, +1.168, +1.221, +1.277, +1.332, +1.390, +1.453, +1.517, +1.585, +1.657, +1.733, +1.811, +1.894, +1.995, +2.094, +2.208, +2.337, +2.490, +2.689, +2.933, +3.337, +3.716, +4.189, +4.528, +4.776, +5.223, +5.441, +5.500, +5.681, +6.010},  -0.016,  -0.035,   1.415},
        {"Gap-16:B", 16384, 65536, 0, { -5.905, -5.455, -5.118, -5.012, -4.793, -4.457, -4.251, -4.000, -3.563, -3.220, -2.883, -2.641, -2.460, -2.321, -2.199, -2.093, -1.995, -1.902, -1.822, -1.742, -1.678, -1.610, -1.549, -1.487, -1.427, -1.368, -1.316, -1.265, -1.214, -1.165, -1.116, -1.070, -1.027, -0.981, -0.938, -0.897, -0.855, -0.814, -0.773, -0.733, -0.692, -0.652, -0.614, -0.575, -0.537, -0.500, -0.462, -0.425, -0.389, -0.355, -0.318, -0.283, -0.249, -0.213, -0.179, -0.143, -0.105, -0.070, -0.034, +0.003, +0.039, +0.075, +0.109, +0.145, +0.180, +0.216, +0.252, +0.289, +0.329, +0.365, +0.402, +0.442, +0.480, +0.517, +0.552, +0.588, +0.628, +0.667, +0.709, +0.750, +0.795, +0.838, +0.885, +0.930, +0.976, +1.019, +1.064, +1.113, +1.165, +1.217, +1.272, +1.329, +1.385, +1.447, +1.509, +1.574, +1.645, +1.721, +1.800, +1.888, +1.982, +2.081, +2.192, +2.324, +2.473, +2.660, +2.911, +3.300, +3.633, +4.167, +4.441, +4.647, +5.021, +5.398, +5.545, +5.911, +6.018},  -0.020,  -0.034,   1.411},
        {"Gap-16:B", 20480, 65536, 0, { -5.296, -5.278, -5.093, -5.036, -4.827, -4.564, -4.261, -4.003, -3.627, -3.260, -2.888, -2.649, -2.473, -2.320, -2.200, -2.098, -1.999, -1.905, -1.820, -1.746, -1.677, -1.611, -1.554, -1.493, -1.434, -1.375, -1.322, -1.271, -1.219, -1.170, -1.120, -1.072, -1.029, -0.983, -0.938, -0.895, -0.853, -0.811, -0.773, -0.734, -0.695, -0.655, -0.615, -0.575, -0.538, -0.501, -0.463, -0.422, -0.388, -0.353, -0.319, -0.285, -0.250, -0.212, -0.177, -0.142, -0.107, -0.070, -0.032, +0.003, +0.039, +0.074, +0.111, +0.147, +0.184, +0.222, +0.256, +0.290, +0.328, +0.366, +0.405, +0.442, +0.481, +0.522, +0.559, +0.599, +0.637, +0.676, +0.717, +0.760, +0.801, +0.845, +0.889, +0.935, +0.980, +1.027, +1.075, +1.124, +1.179, +1.231, +1.286, +1.339, +1.395, +1.452, +1.515, +1.582, +1.655, +1.730, +1.807, +1.893, +1.990, +2.093, +2.200, +2.329, +2.493, +2.678, +2.920, +3.356, +3.736, +4.185, +4.506, +4.732, +4.992, +5.304, +5.602, +5.843, +5.880},  -0.018,  -0.032,   1.419},
        {"Gap-16:B", 24576, 65536, 0, { -5.778, -5.603, -5.531, -5.367, -5.054, -4.476, -4.247, -3.999, -3.594, -3.275, -2.900, -2.670, -2.469, -2.325, -2.198, -2.092, -1.997, -1.910, -1.826, -1.756, -1.683, -1.616, -1.552, -1.485, -1.428, -1.373, -1.316, -1.264, -1.210, -1.160, -1.112, -1.067, -1.022, -0.974, -0.932, -0.890, -0.848, -0.807, -0.768, -0.727, -0.687, -0.648, -0.610, -0.572, -0.532, -0.493, -0.454, -0.418, -0.382, -0.345, -0.309, -0.272, -0.240, -0.204, -0.167, -0.132, -0.099, -0.062, -0.025, +0.012, +0.048, +0.083, +0.118, +0.153, +0.191, +0.226, +0.263, +0.302, +0.336, +0.373, +0.412, +0.451, +0.488, +0.527, +0.566, +0.602, +0.640, +0.678, +0.721, +0.763, +0.805, +0.849, +0.891, +0.936, +0.980, +1.028, +1.075, +1.125, +1.175, +1.226, +1.279, +1.330, +1.389, +1.448, +1.513, +1.576, +1.645, +1.719, +1.796, +1.880, +1.979, +2.073, +2.188, +2.322, +2.484, +2.658, +2.909, +3.309, +3.667, +4.154, +4.481, +4.809, +5.136, +5.215, +5.394, +5.935, +6.045},  -0.017,  -0.025,   1.415},
        {"Gap-16:B", 28672, 65536, 0, { -6.061, -5.910, -5.457, -5.282, -5.087, -4.585, -4.294, -3.992, -3.579, -3.251, -2.874, -2.649, -2.465, -2.325, -2.200, -2.088, -1.989, -1.904, -1.822, -1.744, -1.667, -1.601, -1.539, -1.477, -1.418, -1.359, -1.307, -1.256, -1.207, -1.159, -1.114, -1.068, -1.020, -0.976, -0.932, -0.888, -0.847, -0.806, -0.767, -0.728, -0.687, -0.649, -0.610, -0.572, -0.535, -0.498, -0.463, -0.424, -0.387, -0.351, -0.316, -0.281, -0.245, -0.207, -0.170, -0.135, -0.099, -0.065, -0.032, +0.002, +0.038, +0.073, +0.110, +0.144, +0.180, +0.218, +0.254, +0.290, +0.327, +0.364, +0.404, +0.440, +0.482, +0.519, +0.560, +0.597, +0.637, +0.679, +0.720, +0.760, +0.800, +0.846, +0.891, +0.936, +0.980, +1.027, +1.076, +1.126, +1.180, +1.230, +1.285, +1.338, +1.397, +1.458, +1.520, +1.589, +1.659, +1.728, +1.805, +1.894, +1.992, +2.084, +2.202, +2.327, +2.480, +2.673, +2.917, +3.289, +3.655, +4.124, +4.425, +4.750, +5.037, +5.338, +5.586, +5.736, +5.896},  -0.016,  -0.032,   1.413},
        {"Gap-16:B", 32768, 65536, 0, { -5.832, -5.825, -5.488, -5.064, -4.915, -4.641, -4.344, -4.005, -3.593, -3.233, -2.855, -2.631, -2.463, -2.323, -2.203, -2.097, -1.996, -1.905, -1.823, -1.743, -1.672, -1.602, -1.537, -1.478, -1.420, -1.362, -1.310, -1.256, -1.205, -1.159, -1.111, -1.063, -1.018, -0.973, -0.926, -0.885, -0.844, -0.805, -0.763, -0.721, -0.684, -0.647, -0.607, -0.569, -0.529, -0.492, -0.456, -0.419, -0.384, -0.350, -0.314, -0.279, -0.245, -0.208, -0.173, -0.137, -0.102, -0.066, -0.030, +0.007, +0.043, +0.080, +0.114, +0.150, +0.187, +0.225, +0.259, +0.295, +0.331, +0.368, +0.406, +0.440, +0.475, +0.514, +0.551, +0.589, +0.628, +0.668, +0.707, +0.749, +0.790, +0.831, +0.874, +0.917, +0.959, +1.002, +1.051, +1.100, +1.156, +1.209, +1.264, +1.319, +1.379, +1.445, +1.510, +1.580, +1.644, +1.718, +1.798, +1.887, +1.979, +2.081, +2.191, +2.323, +2.478, +2.664, +2.909, +3.313, +3.679, +4.127, +4.439, +4.740, +5.003, +5.480, +5.728, +5.993, +5.997},  -0.019,  -0.030,   1.410},
        {"Gap-16:B", 40960, 65536, 0, { -6.371, -5.784, -5.510, -5.357, -4.964, -4.524, -4.265, -4.063, -3.587, -3.245, -2.894, -2.651, -2.472, -2.321, -2.202, -2.095, -2.001, -1.909, -1.823, -1.740, -1.666, -1.599, -1.540, -1.482, -1.422, -1.362, -1.305, -1.251, -1.199, -1.146, -1.098, -1.051, -1.004, -0.962, -0.921, -0.878, -0.835, -0.794, -0.754, -0.718, -0.680, -0.641, -0.602, -0.563, -0.527, -0.491, -0.452, -0.415, -0.383, -0.344, -0.308, -0.271, -0.234, -0.199, -0.162, -0.127, -0.092, -0.059, -0.024, +0.011, +0.045, +0.080, +0.113, +0.148, +0.186, +0.220, +0.256, +0.295, +0.333, +0.369, +0.408, +0.445, +0.483, +0.523, +0.562, +0.600, +0.641, +0.682, +0.723, +0.769, +0.810, +0.855, +0.897, +0.940, +0.986, +1.031, +1.080, +1.126, +1.179, +1.229, +1.286, +1.342, +1.400, +1.460, +1.524, +1.587, +1.656, +1.727, +1.810, +1.898, +1.990, +2.088, +2.199, +2.322, +2.460, +2.651, +2.893, +3.311, +3.671, +4.079, +4.440, +4.731, +5.144, +5.240, +5.509, +5.689, +5.797},  -0.012,  -0.024,   1.413},
        {"Gap-16:B", 49152, 65536, 0, { -5.597, -5.593, -5.430, -5.303, -4.876, -4.584, -4.327, -4.046, -3.637, -3.294, -2.902, -2.653, -2.465, -2.312, -2.194, -2.087, -1.994, -1.902, -1.816, -1.739, -1.667, -1.603, -1.538, -1.477, -1.421, -1.364, -1.307, -1.255, -1.203, -1.154, -1.104, -1.058, -1.015, -0.970, -0.927, -0.886, -0.842, -0.803, -0.762, -0.717, -0.676, -0.637, -0.598, -0.557, -0.525, -0.488, -0.452, -0.415, -0.377, -0.340, -0.306, -0.271, -0.237, -0.201, -0.166, -0.129, -0.095, -0.058, -0.024, +0.012, +0.048, +0.082, +0.119, +0.154, +0.192, +0.227, +0.265, +0.301, +0.337, +0.373, +0.411, +0.450, +0.488, +0.526, +0.564, +0.603, +0.642, +0.682, +0.723, +0.764, +0.806, +0.850, +0.896, +0.941, +0.989, +1.035, +1.082, +1.134, +1.186, +1.235, +1.292, +1.348, +1.407, +1.468, +1.527, +1.598, +1.665, +1.740, +1.821, +1.914, +2.011, +2.108, +2.234, +2.358, +2.509, +2.702, +2.960, +3.371, +3.737, +4.192, +4.465, +4.749, +5.074, +5.231, +5.362, +5.636, +5.969},  -0.008,  -0.024,   1.423},
        {"Gap-16:B", 57344, 65536, 0, { -7.053, -6.331, -5.459, -4.953, -4.860, -4.553, -4.236, -4.001, -3.616, -3.263, -2.893, -2.645, -2.459, -2.308, -2.190, -2.081, -1.990, -1.905, -1.822, -1.742, -1.674, -1.609, -1.544, -1.482, -1.422, -1.368, -1.311, -1.255, -1.205, -1.156, -1.110, -1.063, -1.020, -0.975, -0.932, -0.887, -0.846, -0.807, -0.765, -0.724, -0.685, -0.644, -0.609, -0.571, -0.533, -0.497, -0.459, -0.422, -0.387, -0.352, -0.314, -0.278, -0.241, -0.204, -0.166, -0.130, -0.093, -0.057, -0.021, +0.014, +0.053, +0.087, +0.124, +0.159, +0.195, +0.230, +0.267, +0.303, +0.343, +0.377, +0.413, +0.450, +0.487, +0.524, +0.562, +0.603, +0.640, +0.679, +0.720, +0.764, +0.806, +0.850, +0.895, +0.943, +0.987, +1.034, +1.082, +1.133, +1.181, +1.231, +1.285, +1.340, +1.400, +1.459, +1.525, +1.590, +1.656, +1.731, +1.815, +1.902, +1.992, +2.091, +2.203, +2.337, +2.495, +2.683, +2.931, +3.325, +3.670, +4.100, +4.389, +4.677, +5.076, +5.454, +5.561, +6.049, +6.659},  -0.012,  -0.021,   1.416},
        {"Gap-16:B", 65536, 65536, 0, { -6.498, -6.381, -5.694, -5.282, -4.896, -4.659, -4.346, -4.021, -3.586, -3.248, -2.873, -2.640, -2.452, -2.320, -2.203, -2.095, -1.990, -1.899, -1.810, -1.734, -1.661, -1.594, -1.530, -1.471, -1.413, -1.357, -1.302, -1.251, -1.200, -1.150, -1.103, -1.058, -1.013, -0.970, -0.928, -0.887, -0.846, -0.806, -0.765, -0.723, -0.685, -0.645, -0.606, -0.570, -0.529, -0.490, -0.453, -0.416, -0.382, -0.345, -0.309, -0.273, -0.238, -0.204, -0.169, -0.131, -0.097, -0.063, -0.029, +0.008, +0.042, +0.079, +0.115, +0.150, +0.186, +0.224, +0.260, +0.298, +0.334, +0.370, +0.408, +0.444, +0.484, +0.521, +0.559, +0.597, +0.637, +0.679, +0.718, +0.761, +0.802, +0.843, +0.888, +0.934, +0.981, +1.029, +1.076, +1.124, +1.173, +1.227, +1.287, +1.340, +1.400, +1.464, +1.525, +1.588, +1.658, +1.734, +1.814, +1.901, +1.991, +2.096, +2.215, +2.339, +2.487, +2.670, +2.940, +3.337, +3.675, +4.080, +4.428, +4.826, +5.104, +5.571, +5.718, +6.048, +6.175},  -0.011,  -0.029,   1.414},
        {"Gap-16:B", 81920, 65536, 0, { -5.784, -5.584, -5.188, -5.067, -4.887, -4.470, -4.172, -3.968, -3.583, -3.264, -2.906, -2.665, -2.473, -2.320, -2.190, -2.080, -1.985, -1.897, -1.815, -1.735, -1.665, -1.595, -1.528, -1.466, -1.411, -1.355, -1.301, -1.253, -1.200, -1.149, -1.101, -1.056, -1.013, -0.969, -0.926, -0.884, -0.845, -0.802, -0.764, -0.724, -0.685, -0.648, -0.608, -0.569, -0.530, -0.489, -0.452, -0.414, -0.380, -0.345, -0.307, -0.271, -0.234, -0.200, -0.164, -0.127, -0.091, -0.054, -0.016, +0.017, +0.051, +0.088, +0.122, +0.157, +0.192, +0.227, +0.266, +0.302, +0.340, +0.378, +0.411, +0.448, +0.486, +0.524, +0.565, +0.607, +0.649, +0.688, +0.726, +0.766, +0.805, +0.848, +0.893, +0.937, +0.985, +1.035, +1.083, +1.131, +1.184, +1.236, +1.287, +1.344, +1.403, +1.464, +1.527, +1.596, +1.669, +1.742, +1.821, +1.905, +2.001, +2.097, +2.200, +2.333, +2.491, +2.680, +2.936, +3.320, +3.688, +4.187, +4.493, +4.800, +5.346, +5.732, +5.858, +6.278, +6.551},  -0.008,  -0.016,   1.417},
        {"Gap-16:B", 98304, 65536, 0, { -6.037, -5.838, -5.485, -5.115, -4.944, -4.563, -4.293, -4.010, -3.579, -3.252, -2.887, -2.649, -2.465, -2.314, -2.194, -2.087, -1.989, -1.897, -1.814, -1.737, -1.670, -1.599, -1.537, -1.475, -1.420, -1.363, -1.308, -1.255, -1.202, -1.153, -1.106, -1.062, -1.021, -0.971, -0.931, -0.889, -0.845, -0.801, -0.761, -0.723, -0.685, -0.647, -0.608, -0.573, -0.531, -0.495, -0.457, -0.419, -0.385, -0.347, -0.311, -0.271, -0.232, -0.195, -0.160, -0.126, -0.089, -0.054, -0.017, +0.018, +0.053, +0.090, +0.126, +0.162, +0.198, +0.235, +0.270, +0.305, +0.344, +0.382, +0.419, +0.456, +0.495, +0.532, +0.569, +0.608, +0.651, +0.691, +0.731, +0.772, +0.814, +0.857, +0.902, +0.947, +0.993, +1.040, +1.088, +1.138, +1.188, +1.244, +1.295, +1.349, +1.408, +1.467, +1.532, +1.597, +1.671, +1.744, +1.823, +1.911, +2.004, +2.100, +2.210, +2.343, +2.502, +2.682, +2.944, +3.352, +3.706, +4.209, +4.457, +4.719, +5.116, +5.255, +5.414, +5.853, +6.050},  -0.006,  -0.017,   1.420},
        {"Gap-16:B",114688, 65536, 0, { -5.653, -5.538, -5.402, -5.202, -4.959, -4.559, -4.249, -3.990, -3.580, -3.257, -2.901, -2.668, -2.489, -2.342, -2.213, -2.102, -2.006, -1.910, -1.830, -1.752, -1.682, -1.612, -1.548, -1.485, -1.428, -1.369, -1.315, -1.261, -1.213, -1.160, -1.114, -1.066, -1.023, -0.977, -0.932, -0.889, -0.846, -0.807, -0.766, -0.726, -0.683, -0.645, -0.606, -0.568, -0.531, -0.495, -0.457, -0.421, -0.381, -0.345, -0.308, -0.272, -0.233, -0.197, -0.165, -0.127, -0.091, -0.053, -0.018, +0.016, +0.052, +0.088, +0.126, +0.163, +0.197, +0.232, +0.269, +0.306, +0.344, +0.382, +0.422, +0.459, +0.495, +0.534, +0.573, +0.610, +0.649, +0.691, +0.730, +0.771, +0.812, +0.856, +0.900, +0.942, +0.989, +1.036, +1.085, +1.136, +1.189, +1.239, +1.291, +1.351, +1.414, +1.475, +1.541, +1.608, +1.677, +1.754, +1.827, +1.907, +1.999, +2.100, +2.206, +2.339, +2.494, +2.692, +2.952, +3.337, +3.720, +4.111, +4.419, +4.768, +5.301, +5.726, +5.923, +6.359, +6.423},  -0.010,  -0.018,   1.424},
        {"Gap-16:B",131072, 65536, 0, { -5.425, -5.367, -5.256, -5.052, -4.774, -4.545, -4.331, -4.040, -3.633, -3.283, -2.898, -2.656, -2.476, -2.320, -2.192, -2.073, -1.973, -1.884, -1.804, -1.728, -1.662, -1.596, -1.527, -1.467, -1.407, -1.350, -1.294, -1.244, -1.194, -1.145, -1.092, -1.047, -1.004, -0.964, -0.922, -0.880, -0.835, -0.796, -0.757, -0.717, -0.681, -0.643, -0.602, -0.564, -0.526, -0.489, -0.452, -0.416, -0.381, -0.344, -0.309, -0.272, -0.235, -0.201, -0.165, -0.129, -0.093, -0.058, -0.024, +0.013, +0.048, +0.082, +0.118, +0.155, +0.191, +0.229, +0.267, +0.304, +0.339, +0.375, +0.412, +0.453, +0.491, +0.530, +0.569, +0.607, +0.648, +0.688, +0.730, +0.772, +0.814, +0.859, +0.904, +0.949, +0.994, +1.040, +1.086, +1.135, +1.187, +1.237, +1.295, +1.350, +1.407, +1.463, +1.532, +1.600, +1.669, +1.738, +1.819, +1.901, +1.992, +2.095, +2.219, +2.355, +2.510, +2.698, +2.969, +3.379, +3.755, +4.196, +4.468, +4.767, +5.043, +5.171, +5.338, +5.365, +5.391},  -0.005,  -0.024,   1.420},
        {"Gap-16:B",163840, 65536, 0, { -6.328, -5.734, -5.359, -5.133, -4.950, -4.631, -4.288, -4.008, -3.594, -3.279, -2.889, -2.639, -2.461, -2.321, -2.203, -2.096, -1.995, -1.905, -1.821, -1.748, -1.677, -1.614, -1.547, -1.486, -1.427, -1.371, -1.319, -1.264, -1.214, -1.162, -1.114, -1.069, -1.023, -0.979, -0.933, -0.889, -0.847, -0.804, -0.761, -0.720, -0.681, -0.644, -0.606, -0.568, -0.529, -0.490, -0.451, -0.413, -0.376, -0.338, -0.305, -0.268, -0.230, -0.194, -0.159, -0.123, -0.087, -0.055, -0.020, +0.016, +0.052, +0.087, +0.126, +0.160, +0.198, +0.233, +0.272, +0.306, +0.344, +0.381, +0.419, +0.453, +0.489, +0.528, +0.565, +0.605, +0.645, +0.686, +0.727, +0.768, +0.810, +0.853, +0.894, +0.938, +0.983, +1.026, +1.073, +1.121, +1.172, +1.225, +1.278, +1.331, +1.387, +1.447, +1.510, +1.577, +1.646, +1.717, +1.797, +1.887, +1.976, +2.074, +2.193, +2.323, +2.475, +2.668, +2.925, +3.327, +3.693, +4.124, +4.431, +4.674, +5.053, +5.198, +5.394, +5.694, +5.798},  -0.013,  -0.020,   1.415},
        {"Gap-16:B",196608, 65536, 0, { -5.575, -5.549, -5.300, -5.133, -4.932, -4.554, -4.338, -4.038, -3.618, -3.277, -2.905, -2.672, -2.486, -2.343, -2.217, -2.103, -2.006, -1.916, -1.831, -1.750, -1.681, -1.609, -1.542, -1.481, -1.424, -1.372, -1.319, -1.263, -1.211, -1.162, -1.116, -1.070, -1.025, -0.979, -0.938, -0.896, -0.851, -0.808, -0.767, -0.728, -0.689, -0.648, -0.611, -0.572, -0.534, -0.497, -0.461, -0.424, -0.387, -0.349, -0.312, -0.277, -0.241, -0.205, -0.168, -0.133, -0.098, -0.059, -0.023, +0.015, +0.050, +0.083, +0.118, +0.152, +0.189, +0.225, +0.260, +0.297, +0.332, +0.369, +0.405, +0.444, +0.483, +0.521, +0.559, +0.599, +0.637, +0.675, +0.716, +0.758, +0.796, +0.840, +0.881, +0.926, +0.972, +1.018, +1.065, +1.111, +1.160, +1.213, +1.267, +1.322, +1.381, +1.441, +1.503, +1.568, +1.637, +1.714, +1.788, +1.867, +1.957, +2.062, +2.172, +2.307, +2.475, +2.669, +2.906, +3.324, +3.684, +4.152, +4.476, +4.729, +5.284, +5.536, +5.792, +5.902, +5.988},  -0.021,  -0.023,   1.415},
        {"Gap-16:B",229376, 65536, 0, { -6.088, -5.698, -5.408, -5.205, -5.104, -4.705, -4.397, -4.019, -3.622, -3.263, -2.906, -2.669, -2.492, -2.347, -2.217, -2.095, -2.000, -1.907, -1.825, -1.749, -1.682, -1.610, -1.542, -1.481, -1.426, -1.365, -1.308, -1.260, -1.207, -1.159, -1.114, -1.068, -1.021, -0.978, -0.934, -0.892, -0.847, -0.807, -0.763, -0.722, -0.683, -0.642, -0.602, -0.563, -0.525, -0.486, -0.448, -0.410, -0.375, -0.339, -0.301, -0.266, -0.232, -0.196, -0.159, -0.125, -0.087, -0.052, -0.018, +0.017, +0.050, +0.087, +0.121, +0.156, +0.194, +0.227, +0.264, +0.300, +0.336, +0.373, +0.410, +0.447, +0.485, +0.522, +0.561, +0.599, +0.637, +0.675, +0.718, +0.759, +0.803, +0.848, +0.892, +0.938, +0.983, +1.031, +1.078, +1.123, +1.180, +1.231, +1.285, +1.339, +1.397, +1.460, +1.523, +1.591, +1.659, +1.733, +1.811, +1.896, +1.988, +2.089, +2.206, +2.338, +2.486, +2.666, +2.919, +3.291, +3.638, +4.131, +4.439, +4.740, +5.055, +5.353, +5.652, +5.934, +6.105},  -0.014,  -0.018,   1.418},
        {"Gap-16:B",262144, 65536, 0, { -5.914, -5.868, -5.586, -5.202, -4.965, -4.653, -4.327, -4.021, -3.629, -3.281, -2.914, -2.678, -2.503, -2.351, -2.215, -2.097, -2.005, -1.919, -1.838, -1.757, -1.683, -1.613, -1.548, -1.486, -1.428, -1.367, -1.313, -1.261, -1.208, -1.158, -1.110, -1.064, -1.018, -0.976, -0.933, -0.890, -0.847, -0.806, -0.766, -0.729, -0.688, -0.651, -0.610, -0.568, -0.531, -0.493, -0.457, -0.422, -0.387, -0.352, -0.318, -0.281, -0.245, -0.208, -0.172, -0.134, -0.100, -0.062, -0.026, +0.007, +0.043, +0.080, +0.117, +0.153, +0.190, +0.226, +0.262, +0.300, +0.340, +0.378, +0.415, +0.452, +0.490, +0.528, +0.567, +0.604, +0.644, +0.683, +0.726, +0.766, +0.803, +0.844, +0.889, +0.933, +0.979, +1.026, +1.073, +1.122, +1.176, +1.227, +1.280, +1.337, +1.398, +1.456, +1.517, +1.583, +1.650, +1.722, +1.805, +1.888, +1.978, +2.074, +2.191, +2.320, +2.473, +2.658, +2.883, +3.299, +3.670, +4.151, +4.509, +4.887, +5.302, +5.499, +5.748, +5.928, +6.187},  -0.018,  -0.026,   1.418},
        {"Gap-16:B",327680, 65536, 0, { -5.548, -5.378, -5.289, -5.130, -4.929, -4.558, -4.279, -3.988, -3.609, -3.285, -2.913, -2.667, -2.481, -2.324, -2.207, -2.098, -1.998, -1.909, -1.824, -1.744, -1.669, -1.600, -1.537, -1.474, -1.415, -1.359, -1.308, -1.256, -1.203, -1.152, -1.106, -1.056, -1.010, -0.966, -0.921, -0.877, -0.834, -0.793, -0.753, -0.712, -0.673, -0.636, -0.596, -0.558, -0.521, -0.484, -0.446, -0.408, -0.372, -0.336, -0.302, -0.265, -0.230, -0.194, -0.157, -0.117, -0.083, -0.047, -0.010, +0.025, +0.061, +0.094, +0.129, +0.167, +0.201, +0.238, +0.274, +0.308, +0.343, +0.380, +0.417, +0.454, +0.491, +0.528, +0.571, +0.611, +0.650, +0.688, +0.726, +0.768, +0.810, +0.854, +0.899, +0.944, +0.987, +1.032, +1.083, +1.134, +1.184, +1.238, +1.293, +1.349, +1.406, +1.468, +1.530, +1.593, +1.663, +1.735, +1.817, +1.901, +1.998, +2.098, +2.209, +2.342, +2.484, +2.668, +2.907, +3.297, +3.621, +4.012, +4.380, +4.628, +5.070, +5.279, +5.545, +6.673, +6.899},  -0.008,  -0.010,   1.416},
        {"Gap-16:B",393216, 65536, 0, { -6.502, -5.936, -5.317, -4.992, -4.824, -4.527, -4.334, -3.990, -3.620, -3.254, -2.893, -2.655, -2.473, -2.324, -2.199, -2.096, -1.995, -1.908, -1.828, -1.753, -1.680, -1.611, -1.547, -1.487, -1.428, -1.373, -1.322, -1.269, -1.217, -1.165, -1.116, -1.070, -1.023, -0.977, -0.933, -0.889, -0.847, -0.808, -0.765, -0.724, -0.685, -0.646, -0.608, -0.569, -0.530, -0.491, -0.454, -0.419, -0.381, -0.347, -0.309, -0.271, -0.235, -0.196, -0.163, -0.128, -0.096, -0.060, -0.025, +0.011, +0.047, +0.085, +0.121, +0.156, +0.190, +0.227, +0.264, +0.304, +0.341, +0.379, +0.416, +0.454, +0.493, +0.531, +0.568, +0.606, +0.644, +0.682, +0.721, +0.763, +0.806, +0.848, +0.887, +0.932, +0.978, +1.027, +1.076, +1.126, +1.176, +1.227, +1.281, +1.334, +1.391, +1.451, +1.516, +1.583, +1.651, +1.727, +1.807, +1.892, +1.983, +2.090, +2.212, +2.345, +2.491, +2.672, +2.925, +3.308, +3.647, +4.082, +4.337, +4.621, +5.202, +5.420, +5.706, +6.158, +6.301},  -0.015,  -0.025,   1.416},
        {"Gap-16:B",458752, 65536, 0, { -6.283, -5.970, -5.530, -5.297, -5.069, -4.728, -4.398, -4.051, -3.580, -3.248, -2.889, -2.656, -2.478, -2.333, -2.203, -2.099, -2.005, -1.912, -1.829, -1.752, -1.680, -1.613, -1.549, -1.485, -1.425, -1.371, -1.315, -1.258, -1.207, -1.152, -1.104, -1.058, -1.014, -0.967, -0.924, -0.880, -0.838, -0.795, -0.753, -0.717, -0.680, -0.642, -0.600, -0.561, -0.525, -0.488, -0.451, -0.413, -0.378, -0.342, -0.308, -0.273, -0.235, -0.199, -0.166, -0.132, -0.096, -0.060, -0.026, +0.009, +0.042, +0.080, +0.113, +0.148, +0.185, +0.222, +0.259, +0.297, +0.333, +0.371, +0.407, +0.444, +0.481, +0.520, +0.558, +0.595, +0.634, +0.673, +0.713, +0.757, +0.797, +0.838, +0.886, +0.929, +0.975, +1.023, +1.070, +1.117, +1.167, +1.219, +1.271, +1.327, +1.387, +1.447, +1.509, +1.579, +1.645, +1.718, +1.795, +1.884, +1.980, +2.086, +2.197, +2.325, +2.483, +2.674, +2.924, +3.304, +3.679, +4.119, +4.410, +4.832, +5.072, +5.188, +5.473, +5.613, +5.618},  -0.016,  -0.026,   1.414},
        {"Gap-16:B",524288, 65536, 0, { -6.072, -5.862, -5.658, -5.310, -4.912, -4.559, -4.302, -4.057, -3.640, -3.293, -2.907, -2.669, -2.486, -2.336, -2.209, -2.097, -1.997, -1.907, -1.824, -1.749, -1.675, -1.602, -1.537, -1.478, -1.416, -1.356, -1.305, -1.252, -1.200, -1.149, -1.100, -1.057, -1.010, -0.967, -0.923, -0.883, -0.844, -0.804, -0.762, -0.721, -0.680, -0.641, -0.602, -0.563, -0.527, -0.487, -0.449, -0.415, -0.381, -0.347, -0.312, -0.275, -0.240, -0.206, -0.173, -0.135, -0.099, -0.062, -0.024, +0.013, +0.051, +0.087, +0.123, +0.158, +0.195, +0.231, +0.265, +0.301, +0.337, +0.371, +0.406, +0.443, +0.476, +0.515, +0.555, +0.593, +0.633, +0.673, +0.714, +0.755, +0.796, +0.839, +0.882, +0.923, +0.968, +1.017, +1.062, +1.111, +1.160, +1.210, +1.264, +1.318, +1.375, +1.433, +1.494, +1.558, +1.630, +1.707, +1.784, +1.870, +1.955, +2.061, +2.176, +2.307, +2.458, +2.648, +2.895, +3.299, +3.638, +4.078, +4.305, +4.639, +5.117, +5.461, +5.829, +6.017, +6.158},  -0.020,  -0.024,   1.409},
        {"Gap-16:B",655360, 65536, 0, { -5.510, -5.499, -5.244, -5.147, -4.857, -4.609, -4.359, -4.045, -3.595, -3.265, -2.905, -2.662, -2.484, -2.330, -2.202, -2.093, -1.996, -1.909, -1.823, -1.747, -1.677, -1.607, -1.539, -1.476, -1.414, -1.356, -1.303, -1.249, -1.196, -1.146, -1.100, -1.050, -1.004, -0.959, -0.914, -0.872, -0.831, -0.791, -0.749, -0.712, -0.669, -0.630, -0.592, -0.554, -0.518, -0.480, -0.443, -0.403, -0.367, -0.335, -0.296, -0.260, -0.224, -0.185, -0.148, -0.116, -0.081, -0.045, -0.011, +0.023, +0.059, +0.098, +0.132, +0.170, +0.205, +0.242, +0.276, +0.312, +0.348, +0.386, +0.421, +0.459, +0.497, +0.534, +0.573, +0.610, +0.651, +0.689, +0.730, +0.771, +0.812, +0.855, +0.900, +0.945, +0.988, +1.032, +1.080, +1.125, +1.176, +1.228, +1.282, +1.337, +1.395, +1.455, +1.517, +1.579, +1.651, +1.720, +1.800, +1.878, +1.966, +2.068, +2.182, +2.313, +2.460, +2.642, +2.891, +3.289, +3.676, +4.111, +4.426, +4.656, +5.071, +5.481, +5.537, +5.776, +5.907},  -0.009,  -0.011,   1.411},
        {"Gap-16:B",786432, 65536, 0, { -5.677, -5.456, -5.313, -5.044, -4.889, -4.663, -4.392, -4.085, -3.689, -3.326, -2.920, -2.667, -2.479, -2.331, -2.207, -2.101, -1.999, -1.913, -1.826, -1.744, -1.668, -1.598, -1.535, -1.470, -1.411, -1.355, -1.301, -1.248, -1.198, -1.149, -1.099, -1.050, -1.006, -0.961, -0.916, -0.875, -0.830, -0.791, -0.750, -0.711, -0.673, -0.634, -0.597, -0.560, -0.522, -0.484, -0.446, -0.409, -0.373, -0.338, -0.301, -0.264, -0.226, -0.191, -0.159, -0.125, -0.090, -0.053, -0.018, +0.015, +0.050, +0.088, +0.124, +0.161, +0.197, +0.231, +0.268, +0.304, +0.338, +0.378, +0.413, +0.453, +0.489, +0.527, +0.565, +0.605, +0.642, +0.683, +0.724, +0.765, +0.808, +0.851, +0.891, +0.936, +0.980, +1.028, +1.075, +1.123, +1.171, +1.226, +1.280, +1.336, +1.394, +1.451, +1.514, +1.583, +1.652, +1.728, +1.806, +1.890, +1.986, +2.093, +2.203, +2.334, +2.496, +2.680, +2.923, +3.293, +3.646, +4.129, +4.395, +4.670, +5.136, +5.478, +5.771, +5.927, +6.062},  -0.011,  -0.018,   1.417},
        {"Gap-16:B",917504, 65536, 0, { -6.509, -6.138, -5.920, -5.537, -5.080, -4.638, -4.340, -4.020, -3.584, -3.243, -2.879, -2.654, -2.474, -2.323, -2.200, -2.090, -1.991, -1.901, -1.817, -1.737, -1.670, -1.600, -1.538, -1.475, -1.413, -1.356, -1.303, -1.252, -1.203, -1.154, -1.103, -1.055, -1.008, -0.962, -0.920, -0.879, -0.838, -0.798, -0.758, -0.714, -0.675, -0.635, -0.597, -0.559, -0.521, -0.482, -0.447, -0.411, -0.372, -0.337, -0.302, -0.268, -0.233, -0.200, -0.163, -0.128, -0.093, -0.057, -0.021, +0.015, +0.051, +0.089, +0.122, +0.158, +0.195, +0.232, +0.270, +0.308, +0.346, +0.381, +0.419, +0.456, +0.494, +0.535, +0.571, +0.609, +0.649, +0.691, +0.731, +0.771, +0.811, +0.854, +0.899, +0.946, +0.993, +1.039, +1.087, +1.139, +1.190, +1.241, +1.296, +1.353, +1.412, +1.475, +1.533, +1.600, +1.667, +1.744, +1.820, +1.905, +1.997, +2.096, +2.214, +2.341, +2.486, +2.674, +2.921, +3.318, +3.644, +4.006, +4.329, +4.713, +4.925, +5.279, +5.441, +5.645, +5.662},  -0.007,  -0.021,   1.416},
        {"Gap-16:B",1048576, 65536, 0, { -5.898, -5.474, -5.249, -5.143, -4.952, -4.630, -4.367, -4.060, -3.650, -3.296, -2.919, -2.678, -2.485, -2.331, -2.201, -2.091, -1.992, -1.900, -1.816, -1.737, -1.667, -1.598, -1.534, -1.469, -1.411, -1.352, -1.299, -1.249, -1.202, -1.151, -1.103, -1.058, -1.009, -0.965, -0.922, -0.881, -0.838, -0.795, -0.755, -0.714, -0.672, -0.633, -0.594, -0.554, -0.516, -0.478, -0.441, -0.404, -0.367, -0.331, -0.296, -0.261, -0.227, -0.193, -0.159, -0.125, -0.090, -0.053, -0.016, +0.018, +0.052, +0.088, +0.123, +0.157, +0.194, +0.231, +0.269, +0.304, +0.340, +0.377, +0.412, +0.450, +0.486, +0.526, +0.567, +0.606, +0.647, +0.688, +0.725, +0.768, +0.813, +0.856, +0.899, +0.944, +0.989, +1.036, +1.086, +1.134, +1.186, +1.240, +1.289, +1.341, +1.400, +1.461, +1.525, +1.589, +1.665, +1.733, +1.812, +1.899, +1.991, +2.085, +2.200, +2.335, +2.481, +2.676, +2.930, +3.295, +3.647, +4.086, +4.381, +4.643, +4.920, +5.293, +5.768, +6.124, +6.518},  -0.009,  -0.016,   1.417},*/

	{"DC6-6x2Bytes-1",     1, 4096, 0, { -3.335, -3.335, -3.335, -3.335, -3.300, -3.174, -3.093, -3.045, -2.852, -2.721, -2.541, -2.422, -2.331, -2.215, -2.149, -2.081, -2.010, -1.943, -1.887, -1.832, -1.784, -1.731, -1.689, -1.636, -1.593, -1.552, -1.517, -1.476, -1.437, -1.390, -1.357, -1.320, -1.281, -1.246, -1.195, -1.160, -1.111, -1.078, -1.045, -1.008, -0.970, -0.945, -0.907, -0.870, -0.833, -0.798, -0.759, -0.719, -0.684, -0.652, -0.612, -0.564, -0.527, -0.491, -0.458, -0.413, -0.365, -0.332, -0.287, -0.245, -0.185, -0.152, -0.106, -0.059, -0.022, +0.022, +0.068, +0.120, +0.163, +0.213, +0.259, +0.302, +0.347, +0.386, +0.432, +0.484, +0.531, +0.578, +0.636, +0.692, +0.748, +0.806, +0.870, +0.933, +0.979, +1.037, +1.126, +1.198, +1.291, +1.366, +1.431, +1.503, +1.593, +1.704, +1.833, +1.929, +2.056, +2.199, +2.343, +2.492, +2.642, +2.826, +3.054, +3.275, +3.513, +3.995, +4.431, +5.196, +6.158, +7.441, +8.393, +9.008, +9.059, +9.075, +9.075, +9.075, +9.075},  +0.011,  -0.287,   1.721},
	{"DC6-6x2Bytes-1",     2, 4096, 0, { -4.164, -4.164, -4.164, -4.164, -4.057, -3.769, -3.683, -3.535, -3.298, -3.082, -2.846, -2.678, -2.536, -2.436, -2.338, -2.246, -2.165, -2.077, -2.008, -1.947, -1.887, -1.820, -1.771, -1.729, -1.664, -1.617, -1.574, -1.530, -1.478, -1.433, -1.364, -1.319, -1.273, -1.231, -1.175, -1.142, -1.109, -1.064, -1.029, -0.991, -0.944, -0.897, -0.862, -0.814, -0.757, -0.709, -0.674, -0.632, -0.576, -0.524, -0.483, -0.438, -0.387, -0.341, -0.306, -0.264, -0.210, -0.172, -0.129, -0.084, -0.048, -0.001, +0.040, +0.083, +0.136, +0.181, +0.225, +0.275, +0.337, +0.375, +0.425, +0.472, +0.528, +0.577, +0.644, +0.691, +0.747, +0.801, +0.860, +0.903, +0.970, +1.028, +1.076, +1.141, +1.197, +1.263, +1.341, +1.409, +1.471, +1.561, +1.629, +1.717, +1.803, +1.893, +1.988, +2.109, +2.212, +2.378, +2.473, +2.625, +2.797, +2.970, +3.165, +3.414, +3.714, +4.031, +4.479, +5.458, +6.098, +7.644, +8.980, +9.957,+10.990,+11.158,+11.158,+11.158,+11.158},  +0.088,  -0.129,   1.823},
	{"DC6-6x2Bytes-1",     3, 4096, 0, { -4.013, -4.013, -4.013, -4.013, -3.985, -3.918, -3.890, -3.854, -3.578, -3.273, -3.031, -2.819, -2.688, -2.573, -2.447, -2.361, -2.286, -2.189, -2.126, -2.040, -1.972, -1.897, -1.834, -1.781, -1.711, -1.661, -1.603, -1.552, -1.506, -1.445, -1.404, -1.368, -1.316, -1.256, -1.208, -1.154, -1.111, -1.069, -1.027, -0.983, -0.930, -0.889, -0.845, -0.792, -0.744, -0.714, -0.668, -0.621, -0.588, -0.546, -0.502, -0.456, -0.416, -0.366, -0.323, -0.283, -0.227, -0.182, -0.138, -0.098, -0.066, -0.014, +0.036, +0.083, +0.115, +0.169, +0.222, +0.266, +0.318, +0.361, +0.402, +0.447, +0.497, +0.546, +0.601, +0.644, +0.713, +0.780, +0.823, +0.877, +0.929, +0.993, +1.043, +1.121, +1.184, +1.279, +1.357, +1.429, +1.494, +1.553, +1.644, +1.749, +1.825, +1.922, +2.021, +2.103, +2.227, +2.347, +2.501, +2.633, +2.789, +2.972, +3.142, +3.397, +3.625, +3.919, +4.454, +5.346, +6.111, +7.081, +8.282, +8.686, +9.637,+10.058,+10.058,+10.058,+10.058},  +0.054,  -0.138,   1.834},
	{"DC6-6x2Bytes-1",     4, 4096, 0, { -4.408, -4.408, -4.408, -4.408, -4.374, -4.200, -4.052, -3.923, -3.696, -3.453, -3.134, -2.936, -2.774, -2.636, -2.531, -2.408, -2.317, -2.228, -2.152, -2.070, -1.957, -1.900, -1.837, -1.760, -1.679, -1.616, -1.542, -1.481, -1.430, -1.388, -1.332, -1.288, -1.246, -1.201, -1.146, -1.098, -1.061, -1.013, -0.976, -0.913, -0.864, -0.824, -0.769, -0.729, -0.688, -0.641, -0.597, -0.553, -0.514, -0.478, -0.435, -0.390, -0.348, -0.305, -0.263, -0.215, -0.173, -0.134, -0.084, -0.042, +0.005, +0.044, +0.098, +0.131, +0.174, +0.245, +0.285, +0.336, +0.389, +0.434, +0.477, +0.535, +0.584, +0.637, +0.688, +0.748, +0.803, +0.851, +0.899, +0.957, +1.002, +1.053, +1.115, +1.183, +1.245, +1.312, +1.383, +1.466, +1.552, +1.634, +1.726, +1.829, +1.907, +2.010, +2.128, +2.269, +2.365, +2.480, +2.592, +2.749, +2.899, +3.078, +3.233, +3.403, +3.683, +4.061, +4.504, +5.281, +6.010, +6.948, +8.190, +9.696,+11.166,+11.684,+11.684,+11.684,+11.684},  +0.107,  -0.084,   1.868},
	{"DC6-6x2Bytes-1",     5, 4096, 0, { -4.430, -4.430, -4.430, -4.430, -4.371, -4.240, -4.141, -4.053, -3.853, -3.581, -3.169, -2.942, -2.782, -2.618, -2.520, -2.391, -2.304, -2.208, -2.103, -2.031, -1.948, -1.892, -1.811, -1.759, -1.696, -1.635, -1.580, -1.507, -1.443, -1.379, -1.319, -1.269, -1.220, -1.153, -1.104, -1.046, -1.006, -0.953, -0.906, -0.863, -0.821, -0.785, -0.728, -0.683, -0.645, -0.602, -0.559, -0.505, -0.469, -0.430, -0.379, -0.329, -0.276, -0.215, -0.163, -0.123, -0.086, -0.056, -0.004, +0.034, +0.087, +0.138, +0.189, +0.242, +0.272, +0.319, +0.359, +0.407, +0.447, +0.507, +0.564, +0.605, +0.648, +0.701, +0.755, +0.805, +0.849, +0.904, +0.964, +1.008, +1.069, +1.119, +1.194, +1.272, +1.330, +1.394, +1.472, +1.535, +1.613, +1.661, +1.724, +1.820, +1.887, +1.958, +2.054, +2.144, +2.267, +2.368, +2.492, +2.648, +2.766, +2.963, +3.136, +3.401, +3.670, +4.074, +4.494, +5.070, +5.708, +6.263, +6.782, +7.313, +8.054, +8.229, +8.229, +8.229, +8.229},  +0.126,  -0.004,   1.834},
	{"DC6-6x2Bytes-1",     6, 4096, 0, { -4.681, -4.681, -4.681, -4.681, -4.592, -4.363, -4.272, -4.097, -3.728, -3.409, -3.110, -2.893, -2.720, -2.562, -2.437, -2.343, -2.253, -2.177, -2.090, -2.012, -1.934, -1.871, -1.794, -1.731, -1.662, -1.580, -1.519, -1.449, -1.400, -1.339, -1.282, -1.235, -1.168, -1.125, -1.084, -1.035, -0.969, -0.911, -0.862, -0.821, -0.779, -0.732, -0.682, -0.636, -0.587, -0.550, -0.507, -0.477, -0.434, -0.383, -0.345, -0.297, -0.253, -0.210, -0.154, -0.108, -0.068, -0.027, +0.019, +0.057, +0.100, +0.157, +0.200, +0.246, +0.286, +0.329, +0.375, +0.414, +0.453, +0.504, +0.544, +0.592, +0.645, +0.686, +0.729, +0.799, +0.853, +0.913, +0.965, +1.016, +1.078, +1.129, +1.190, +1.254, +1.330, +1.411, +1.470, +1.555, +1.635, +1.692, +1.775, +1.877, +1.952, +2.048, +2.143, +2.250, +2.348, +2.457, +2.564, +2.708, +2.848, +2.969, +3.158, +3.410, +3.632, +3.985, +4.375, +5.030, +5.782, +6.193, +6.623, +7.737, +8.635, +8.868, +8.868, +8.868, +8.868},  +0.154,  +0.019,   1.822},
	{"DC6-6x2Bytes-1",     7, 4096, 0, { -4.685, -4.685, -4.685, -4.685, -4.680, -4.637, -4.519, -4.156, -3.823, -3.533, -3.218, -2.997, -2.762, -2.628, -2.509, -2.407, -2.269, -2.178, -2.080, -2.014, -1.919, -1.863, -1.804, -1.722, -1.660, -1.597, -1.528, -1.471, -1.417, -1.365, -1.313, -1.265, -1.198, -1.155, -1.114, -1.063, -1.014, -0.974, -0.927, -0.880, -0.831, -0.774, -0.727, -0.667, -0.628, -0.569, -0.529, -0.484, -0.440, -0.399, -0.350, -0.310, -0.273, -0.229, -0.182, -0.141, -0.087, -0.043, -0.002, +0.035, +0.085, +0.136, +0.188, +0.230, +0.270, +0.307, +0.357, +0.412, +0.469, +0.524, +0.574, +0.633, +0.668, +0.716, +0.764, +0.813, +0.871, +0.937, +0.983, +1.025, +1.078, +1.142, +1.194, +1.240, +1.315, +1.388, +1.450, +1.520, +1.580, +1.653, +1.739, +1.801, +1.864, +1.949, +2.036, +2.131, +2.234, +2.355, +2.499, +2.673, +2.826, +2.956, +3.101, +3.300, +3.538, +3.888, +4.339, +5.084, +5.554, +6.431, +7.050, +7.545, +7.833, +7.885, +7.885, +7.885, +7.885},  +0.123,  -0.002,   1.817},
	{"DC6-6x2Bytes-1",     8, 4096, 0, { -5.631, -5.631, -5.631, -5.631, -5.430, -4.926, -4.654, -4.322, -3.933, -3.679, -3.316, -3.070, -2.874, -2.692, -2.552, -2.403, -2.309, -2.215, -2.132, -2.047, -1.974, -1.910, -1.846, -1.789, -1.722, -1.659, -1.590, -1.523, -1.467, -1.398, -1.349, -1.270, -1.212, -1.174, -1.106, -1.059, -1.014, -0.969, -0.919, -0.871, -0.824, -0.769, -0.719, -0.681, -0.639, -0.584, -0.545, -0.499, -0.454, -0.416, -0.366, -0.325, -0.283, -0.225, -0.157, -0.104, -0.061, -0.019, +0.015, +0.068, +0.105, +0.151, +0.209, +0.271, +0.316, +0.355, +0.397, +0.458, +0.502, +0.543, +0.588, +0.631, +0.681, +0.744, +0.783, +0.841, +0.889, +0.935, +0.977, +1.034, +1.089, +1.155, +1.220, +1.266, +1.347, +1.413, +1.489, +1.562, +1.628, +1.705, +1.784, +1.881, +1.982, +2.071, +2.152, +2.270, +2.380, +2.458, +2.576, +2.725, +2.850, +2.980, +3.220, +3.399, +3.598, +3.907, +4.316, +4.894, +5.561, +6.366, +6.714, +7.003, +7.407, +7.572, +7.572, +7.572, +7.572},  +0.131,  +0.015,   1.850},
	{"DC6-6x2Bytes-1",    10, 4096, 0, { -5.663, -5.663, -5.663, -5.663, -5.512, -5.117, -5.006, -4.527, -4.063, -3.777, -3.320, -3.015, -2.876, -2.720, -2.594, -2.495, -2.371, -2.236, -2.138, -2.040, -1.956, -1.887, -1.804, -1.724, -1.668, -1.611, -1.550, -1.498, -1.455, -1.393, -1.326, -1.263, -1.220, -1.162, -1.113, -1.065, -1.014, -0.964, -0.910, -0.865, -0.801, -0.756, -0.708, -0.657, -0.612, -0.563, -0.526, -0.480, -0.440, -0.385, -0.333, -0.276, -0.236, -0.186, -0.141, -0.095, -0.050, +0.003, +0.051, +0.095, +0.133, +0.184, +0.233, +0.286, +0.343, +0.405, +0.449, +0.496, +0.549, +0.604, +0.656, +0.712, +0.760, +0.793, +0.844, +0.901, +0.967, +1.020, +1.076, +1.152, +1.203, +1.263, +1.323, +1.368, +1.446, +1.501, +1.560, +1.627, +1.692, +1.755, +1.826, +1.905, +1.988, +2.069, +2.157, +2.266, +2.387, +2.519, +2.637, +2.751, +2.920, +3.058, +3.232, +3.397, +3.598, +3.958, +4.303, +4.919, +5.767, +6.189, +7.277, +7.885, +8.786, +9.105, +9.105, +9.105, +9.105},  +0.161,  +0.051,   1.873},
	{"DC6-6x2Bytes-1",    12, 4096, 0, { -5.944, -5.944, -5.944, -5.944, -5.730, -5.175, -4.836, -4.532, -4.068, -3.651, -3.310, -3.089, -2.875, -2.736, -2.619, -2.510, -2.407, -2.315, -2.214, -2.133, -2.039, -1.955, -1.877, -1.800, -1.729, -1.656, -1.579, -1.501, -1.448, -1.399, -1.348, -1.279, -1.226, -1.165, -1.096, -1.045, -1.012, -0.968, -0.913, -0.851, -0.804, -0.742, -0.697, -0.651, -0.611, -0.568, -0.523, -0.478, -0.422, -0.363, -0.312, -0.257, -0.204, -0.159, -0.116, -0.054, -0.006, +0.038, +0.087, +0.126, +0.171, +0.218, +0.259, +0.301, +0.336, +0.379, +0.446, +0.492, +0.530, +0.575, +0.633, +0.703, +0.753, +0.806, +0.874, +0.939, +1.013, +1.070, +1.118, +1.167, +1.223, +1.279, +1.350, +1.394, +1.471, +1.537, +1.600, +1.672, +1.749, +1.817, +1.896, +1.978, +2.067, +2.141, +2.214, +2.270, +2.364, +2.468, +2.630, +2.743, +2.852, +3.055, +3.200, +3.387, +3.586, +3.905, +4.338, +5.026, +5.518, +6.321, +7.175, +8.213,+10.672,+11.751,+11.751,+11.751,+11.751},  +0.165,  +0.087,   1.887},
	{"DC6-6x2Bytes-1",    14, 4096, 0, { -5.526, -5.526, -5.526, -5.526, -5.483, -5.377, -4.920, -4.641, -4.183, -3.620, -3.268, -2.970, -2.787, -2.650, -2.523, -2.412, -2.290, -2.187, -2.095, -2.012, -1.925, -1.832, -1.768, -1.714, -1.648, -1.591, -1.537, -1.476, -1.403, -1.346, -1.299, -1.234, -1.179, -1.119, -1.054, -1.012, -0.963, -0.916, -0.870, -0.826, -0.784, -0.733, -0.679, -0.623, -0.579, -0.531, -0.458, -0.407, -0.364, -0.322, -0.280, -0.229, -0.192, -0.161, -0.109, -0.063, -0.018, +0.040, +0.081, +0.134, +0.179, +0.238, +0.277, +0.326, +0.370, +0.424, +0.479, +0.523, +0.564, +0.610, +0.653, +0.694, +0.749, +0.797, +0.844, +0.910, +0.961, +1.009, +1.069, +1.120, +1.187, +1.237, +1.292, +1.340, +1.394, +1.477, +1.540, +1.613, +1.708, +1.792, +1.846, +1.908, +1.985, +2.048, +2.145, +2.242, +2.356, +2.485, +2.605, +2.773, +2.925, +3.036, +3.146, +3.336, +3.604, +3.840, +4.217, +4.849, +5.442, +6.190, +6.672, +7.002, +8.936, +9.835, +9.835, +9.835, +9.835},  +0.178,  +0.081,   1.841},
	{"DC6-6x2Bytes-1",    16, 4096, 0, { -5.562, -5.562, -5.562, -5.562, -5.532, -5.284, -5.122, -4.663, -4.135, -3.734, -3.295, -3.040, -2.837, -2.679, -2.519, -2.408, -2.326, -2.204, -2.102, -2.014, -1.910, -1.826, -1.757, -1.691, -1.618, -1.566, -1.494, -1.429, -1.379, -1.319, -1.266, -1.211, -1.157, -1.089, -1.018, -0.981, -0.929, -0.880, -0.821, -0.775, -0.728, -0.674, -0.636, -0.601, -0.551, -0.516, -0.475, -0.419, -0.367, -0.330, -0.287, -0.252, -0.211, -0.169, -0.131, -0.093, -0.053, +0.001, +0.054, +0.095, +0.133, +0.171, +0.211, +0.260, +0.318, +0.363, +0.405, +0.451, +0.488, +0.547, +0.595, +0.653, +0.690, +0.743, +0.786, +0.838, +0.887, +0.938, +1.001, +1.050, +1.102, +1.163, +1.225, +1.290, +1.339, +1.418, +1.500, +1.578, +1.643, +1.714, +1.796, +1.874, +1.950, +2.054, +2.160, +2.244, +2.319, +2.436, +2.556, +2.686, +2.812, +2.975, +3.164, +3.392, +3.645, +3.929, +4.408, +5.000, +5.919, +6.602, +7.022, +7.238, +7.894, +8.160, +8.160, +8.160, +8.160},  +0.164,  +0.054,   1.845},
	{"DC6-6x2Bytes-1",    20, 4096, 0, { -7.114, -7.114, -7.114, -7.114, -6.727, -5.734, -5.246, -4.962, -4.276, -3.855, -3.439, -3.169, -2.952, -2.810, -2.647, -2.515, -2.412, -2.314, -2.209, -2.112, -2.007, -1.922, -1.833, -1.778, -1.711, -1.647, -1.579, -1.525, -1.463, -1.404, -1.322, -1.274, -1.215, -1.154, -1.092, -1.040, -1.000, -0.922, -0.876, -0.817, -0.771, -0.719, -0.668, -0.628, -0.581, -0.528, -0.472, -0.422, -0.388, -0.341, -0.272, -0.222, -0.172, -0.131, -0.085, -0.038, +0.004, +0.045, +0.083, +0.123, +0.169, +0.204, +0.243, +0.282, +0.317, +0.365, +0.414, +0.466, +0.506, +0.560, +0.614, +0.659, +0.715, +0.771, +0.825, +0.883, +0.946, +1.005, +1.083, +1.129, +1.191, +1.256, +1.318, +1.368, +1.454, +1.512, +1.581, +1.661, +1.726, +1.792, +1.860, +1.970, +2.039, +2.127, +2.213, +2.301, +2.386, +2.478, +2.591, +2.699, +2.877, +2.991, +3.095, +3.245, +3.447, +3.724, +4.071, +4.672, +5.452, +6.180, +6.547, +7.079, +7.700, +7.791, +7.791, +7.791, +7.791},  +0.143,  +0.083,   1.863},
	{"DC6-6x2Bytes-1",    24, 4096, 0, { -5.703, -5.703, -5.703, -5.703, -5.689, -5.600, -5.509, -4.806, -4.466, -3.898, -3.501, -3.133, -2.943, -2.757, -2.640, -2.522, -2.402, -2.305, -2.212, -2.103, -2.030, -1.944, -1.851, -1.761, -1.703, -1.623, -1.559, -1.482, -1.427, -1.360, -1.296, -1.238, -1.189, -1.144, -1.075, -1.003, -0.959, -0.908, -0.863, -0.809, -0.751, -0.693, -0.651, -0.606, -0.563, -0.526, -0.473, -0.418, -0.368, -0.326, -0.271, -0.224, -0.175, -0.128, -0.097, -0.049, +0.001, +0.051, +0.082, +0.123, +0.176, +0.229, +0.274, +0.314, +0.361, +0.400, +0.440, +0.493, +0.536, +0.588, +0.639, +0.699, +0.744, +0.801, +0.853, +0.898, +0.947, +0.992, +1.053, +1.098, +1.153, +1.207, +1.259, +1.310, +1.377, +1.438, +1.494, +1.550, +1.617, +1.700, +1.812, +1.882, +1.973, +2.050, +2.144, +2.244, +2.336, +2.431, +2.566, +2.701, +2.834, +2.967, +3.112, +3.272, +3.445, +3.751, +4.100, +4.533, +5.071, +5.979, +6.411, +7.061, +7.652, +7.742, +7.742, +7.742, +7.742},  +0.136,  +0.082,   1.842},
	{"DC6-6x2Bytes-1",    28, 4096, 0, { -5.274, -5.274, -5.274, -5.274, -5.215, -5.028, -4.836, -4.440, -4.143, -3.867, -3.433, -3.182, -2.986, -2.839, -2.727, -2.573, -2.408, -2.310, -2.198, -2.088, -2.004, -1.926, -1.866, -1.779, -1.711, -1.620, -1.551, -1.498, -1.422, -1.350, -1.294, -1.236, -1.187, -1.134, -1.085, -1.031, -0.965, -0.909, -0.873, -0.828, -0.779, -0.732, -0.669, -0.616, -0.559, -0.518, -0.470, -0.427, -0.361, -0.310, -0.271, -0.230, -0.185, -0.143, -0.101, -0.053, -0.016, +0.024, +0.057, +0.101, +0.144, +0.189, +0.229, +0.279, +0.324, +0.364, +0.406, +0.461, +0.505, +0.560, +0.608, +0.660, +0.707, +0.761, +0.810, +0.861, +0.908, +0.959, +1.006, +1.059, +1.113, +1.161, +1.228, +1.283, +1.344, +1.407, +1.468, +1.540, +1.591, +1.648, +1.722, +1.794, +1.860, +1.952, +2.056, +2.147, +2.232, +2.353, +2.456, +2.574, +2.773, +2.904, +3.091, +3.273, +3.500, +3.741, +4.044, +4.630, +4.982, +5.628, +6.007, +6.453, +7.339, +7.754, +7.754, +7.754, +7.754},  +0.111,  +0.057,   1.817},
	{"DC6-6x2Bytes-1",    32, 4096, 0, { -5.649, -5.649, -5.649, -5.649, -5.610, -5.455, -5.211, -4.826, -4.351, -3.807, -3.429, -3.156, -3.000, -2.824, -2.676, -2.514, -2.400, -2.293, -2.173, -2.072, -1.991, -1.922, -1.828, -1.746, -1.664, -1.604, -1.532, -1.444, -1.387, -1.317, -1.255, -1.193, -1.153, -1.093, -1.045, -0.985, -0.921, -0.861, -0.817, -0.762, -0.704, -0.668, -0.627, -0.572, -0.529, -0.480, -0.424, -0.382, -0.338, -0.294, -0.246, -0.206, -0.159, -0.121, -0.071, -0.027, +0.012, +0.052, +0.102, +0.151, +0.197, +0.242, +0.280, +0.326, +0.366, +0.414, +0.462, +0.497, +0.530, +0.569, +0.613, +0.660, +0.711, +0.756, +0.807, +0.858, +0.904, +0.959, +1.007, +1.062, +1.110, +1.170, +1.219, +1.273, +1.329, +1.380, +1.441, +1.502, +1.583, +1.654, +1.761, +1.832, +1.922, +2.010, +2.082, +2.170, +2.292, +2.399, +2.501, +2.641, +2.783, +2.922, +3.057, +3.206, +3.417, +3.778, +4.184, +4.812, +5.185, +5.562, +6.090, +6.190, +6.795, +7.076, +7.076, +7.076, +7.076},  +0.137,  +0.102,   1.822},
	{"DC6-6x2Bytes-1",    40, 4096, 0, { -5.483, -5.483, -5.483, -5.483, -5.480, -5.430, -5.307, -4.842, -4.372, -4.022, -3.569, -3.276, -3.080, -2.839, -2.667, -2.529, -2.407, -2.273, -2.202, -2.103, -2.027, -1.916, -1.835, -1.752, -1.651, -1.575, -1.519, -1.455, -1.382, -1.313, -1.253, -1.198, -1.155, -1.094, -1.037, -0.976, -0.927, -0.868, -0.821, -0.786, -0.743, -0.698, -0.655, -0.618, -0.566, -0.519, -0.487, -0.461, -0.402, -0.357, -0.306, -0.264, -0.211, -0.172, -0.131, -0.079, -0.032, +0.016, +0.069, +0.117, +0.161, +0.195, +0.242, +0.285, +0.329, +0.372, +0.421, +0.477, +0.522, +0.573, +0.616, +0.669, +0.740, +0.791, +0.832, +0.884, +0.930, +0.985, +1.054, +1.107, +1.162, +1.221, +1.264, +1.336, +1.407, +1.465, +1.518, +1.587, +1.643, +1.723, +1.798, +1.866, +1.946, +2.065, +2.158, +2.287, +2.373, +2.460, +2.558, +2.710, +2.812, +2.979, +3.110, +3.262, +3.465, +3.742, +4.074, +4.741, +4.981, +5.928, +6.158, +6.275, +6.766, +6.947, +6.947, +6.947, +6.947},  +0.134,  +0.069,   1.847},
	{"DC6-6x2Bytes-1",    48, 4096, 0, { -5.529, -5.529, -5.529, -5.529, -5.522, -5.338, -4.958, -4.723, -4.374, -4.008, -3.493, -3.223, -2.973, -2.748, -2.640, -2.518, -2.375, -2.251, -2.149, -2.044, -1.892, -1.818, -1.746, -1.663, -1.588, -1.506, -1.449, -1.392, -1.343, -1.268, -1.213, -1.151, -1.097, -1.050, -0.986, -0.924, -0.880, -0.835, -0.794, -0.738, -0.681, -0.625, -0.578, -0.533, -0.487, -0.432, -0.399, -0.354, -0.319, -0.271, -0.240, -0.189, -0.163, -0.113, -0.075, -0.030, +0.009, +0.049, +0.093, +0.147, +0.192, +0.235, +0.277, +0.321, +0.364, +0.406, +0.455, +0.494, +0.530, +0.576, +0.629, +0.678, +0.729, +0.784, +0.830, +0.885, +0.928, +0.992, +1.044, +1.112, +1.171, +1.221, +1.285, +1.345, +1.408, +1.465, +1.529, +1.584, +1.663, +1.709, +1.783, +1.848, +1.914, +2.003, +2.078, +2.163, +2.232, +2.339, +2.448, +2.560, +2.673, +2.838, +3.032, +3.246, +3.458, +3.665, +4.074, +4.521, +5.072, +5.608, +5.725, +5.885, +6.539, +6.834, +6.834, +6.834, +6.834},  +0.153,  +0.093,   1.801},
	{"DC6-6x2Bytes-1",    56, 4096, 0, { -5.997, -5.997, -5.997, -5.997, -5.771, -5.223, -5.041, -4.800, -4.320, -3.975, -3.587, -3.252, -2.970, -2.815, -2.647, -2.489, -2.389, -2.284, -2.171, -2.058, -1.969, -1.897, -1.827, -1.747, -1.670, -1.583, -1.509, -1.449, -1.393, -1.334, -1.276, -1.217, -1.171, -1.117, -1.075, -1.009, -0.960, -0.896, -0.852, -0.794, -0.738, -0.681, -0.629, -0.579, -0.536, -0.487, -0.438, -0.391, -0.341, -0.293, -0.242, -0.196, -0.154, -0.111, -0.076, -0.009, +0.033, +0.083, +0.124, +0.164, +0.219, +0.270, +0.319, +0.369, +0.414, +0.466, +0.515, +0.566, +0.616, +0.660, +0.702, +0.752, +0.796, +0.847, +0.896, +0.942, +0.998, +1.033, +1.078, +1.117, +1.165, +1.220, +1.274, +1.327, +1.381, +1.436, +1.489, +1.551, +1.616, +1.675, +1.747, +1.825, +1.926, +1.983, +2.055, +2.125, +2.222, +2.319, +2.436, +2.559, +2.698, +2.868, +3.028, +3.165, +3.393, +3.724, +4.054, +4.685, +5.093, +5.439, +5.791, +6.503, +6.652, +6.717, +6.717, +6.717, +6.717},  +0.141,  +0.124,   1.819},
	{"DC6-6x2Bytes-1",    64, 4096, 0, { -5.689, -5.689, -5.689, -5.689, -5.648, -5.525, -4.949, -4.594, -4.077, -3.829, -3.371, -3.157, -2.960, -2.772, -2.579, -2.430, -2.322, -2.221, -2.110, -2.024, -1.943, -1.871, -1.761, -1.669, -1.600, -1.544, -1.481, -1.410, -1.340, -1.298, -1.249, -1.193, -1.134, -1.094, -1.041, -0.979, -0.935, -0.882, -0.831, -0.784, -0.739, -0.682, -0.640, -0.581, -0.534, -0.486, -0.425, -0.374, -0.330, -0.288, -0.236, -0.192, -0.149, -0.105, -0.058, -0.013, +0.033, +0.070, +0.114, +0.169, +0.218, +0.261, +0.306, +0.357, +0.410, +0.450, +0.489, +0.535, +0.578, +0.625, +0.672, +0.708, +0.767, +0.821, +0.863, +0.913, +0.961, +1.020, +1.081, +1.131, +1.183, +1.236, +1.293, +1.358, +1.401, +1.467, +1.529, +1.594, +1.671, +1.725, +1.786, +1.851, +1.938, +2.052, +2.123, +2.210, +2.306, +2.415, +2.531, +2.653, +2.795, +2.935, +3.090, +3.266, +3.458, +3.781, +4.056, +4.611, +5.023, +5.312, +5.604, +5.984, +6.592, +6.781, +6.781, +6.781, +6.781},  +0.166,  +0.114,   1.808},
	{"DC6-6x2Bytes-1",    80, 4096, 0, { -5.504, -5.504, -5.504, -5.504, -5.405, -5.182, -5.087, -4.799, -4.168, -3.772, -3.247, -3.049, -2.856, -2.712, -2.512, -2.406, -2.279, -2.169, -2.099, -1.999, -1.907, -1.828, -1.761, -1.684, -1.614, -1.554, -1.494, -1.437, -1.360, -1.309, -1.237, -1.163, -1.105, -1.062, -1.011, -0.955, -0.913, -0.872, -0.813, -0.757, -0.700, -0.651, -0.616, -0.567, -0.524, -0.468, -0.432, -0.384, -0.339, -0.306, -0.260, -0.217, -0.165, -0.114, -0.067, -0.021, +0.033, +0.077, +0.114, +0.154, +0.193, +0.247, +0.294, +0.342, +0.385, +0.441, +0.482, +0.538, +0.586, +0.630, +0.696, +0.753, +0.798, +0.850, +0.900, +0.945, +0.996, +1.045, +1.096, +1.152, +1.212, +1.271, +1.334, +1.386, +1.442, +1.506, +1.567, +1.633, +1.695, +1.768, +1.832, +1.906, +1.973, +2.046, +2.121, +2.210, +2.308, +2.400, +2.490, +2.621, +2.748, +2.901, +3.073, +3.264, +3.455, +3.675, +3.959, +4.439, +5.191, +6.029, +6.604, +7.039, +7.508, +7.581, +7.581, +7.581, +7.581},  +0.180,  +0.114,   1.801},
	{"DC6-6x2Bytes-1",    96, 4096, 0, { -4.982, -4.982, -4.982, -4.982, -4.968, -4.927, -4.861, -4.603, -4.048, -3.618, -3.201, -2.945, -2.761, -2.602, -2.458, -2.327, -2.212, -2.126, -2.023, -1.949, -1.869, -1.806, -1.729, -1.661, -1.595, -1.524, -1.447, -1.383, -1.313, -1.242, -1.190, -1.138, -1.071, -1.018, -0.955, -0.915, -0.846, -0.808, -0.769, -0.720, -0.662, -0.598, -0.546, -0.506, -0.467, -0.430, -0.381, -0.337, -0.294, -0.252, -0.210, -0.168, -0.120, -0.081, -0.038, -0.003, +0.035, +0.080, +0.117, +0.163, +0.216, +0.252, +0.306, +0.363, +0.417, +0.467, +0.510, +0.552, +0.609, +0.652, +0.695, +0.741, +0.794, +0.840, +0.905, +0.952, +1.003, +1.051, +1.104, +1.169, +1.218, +1.278, +1.316, +1.387, +1.436, +1.495, +1.587, +1.653, +1.725, +1.786, +1.842, +1.907, +1.987, +2.065, +2.153, +2.252, +2.351, +2.450, +2.590, +2.713, +2.865, +3.012, +3.134, +3.296, +3.526, +3.715, +4.040, +4.443, +4.914, +5.654, +6.339, +6.853, +7.361, +7.522, +7.522, +7.522, +7.522},  +0.215,  +0.117,   1.785},
	{"DC6-6x2Bytes-1",   112, 4096, 0, { -5.255, -5.255, -5.255, -5.255, -5.214, -5.124, -4.935, -4.352, -4.033, -3.763, -3.319, -2.991, -2.740, -2.605, -2.448, -2.347, -2.246, -2.130, -2.041, -1.971, -1.862, -1.802, -1.707, -1.650, -1.564, -1.501, -1.424, -1.362, -1.306, -1.238, -1.170, -1.118, -1.063, -0.990, -0.940, -0.883, -0.826, -0.772, -0.722, -0.673, -0.629, -0.577, -0.538, -0.493, -0.450, -0.401, -0.374, -0.328, -0.284, -0.230, -0.183, -0.139, -0.098, -0.056, -0.014, +0.038, +0.086, +0.132, +0.192, +0.246, +0.290, +0.337, +0.386, +0.429, +0.473, +0.516, +0.575, +0.617, +0.660, +0.712, +0.770, +0.808, +0.857, +0.890, +0.942, +0.991, +1.036, +1.093, +1.140, +1.203, +1.261, +1.300, +1.353, +1.407, +1.466, +1.518, +1.584, +1.645, +1.710, +1.774, +1.843, +1.928, +2.013, +2.099, +2.213, +2.287, +2.356, +2.453, +2.547, +2.692, +2.793, +2.877, +3.018, +3.178, +3.423, +3.674, +3.963, +4.521, +5.041, +5.744, +6.039, +7.131, +7.274, +7.292, +7.292, +7.292, +7.292},  +0.231,  +0.192,   1.784},
	{"DC6-6x2Bytes-1",   128, 4096, 0, { -5.501, -5.501, -5.501, -5.501, -5.433, -5.131, -4.945, -4.732, -4.205, -3.736, -3.300, -3.051, -2.816, -2.614, -2.496, -2.390, -2.257, -2.145, -2.032, -1.955, -1.868, -1.772, -1.676, -1.613, -1.521, -1.458, -1.375, -1.325, -1.268, -1.219, -1.163, -1.102, -1.057, -1.023, -0.974, -0.927, -0.877, -0.835, -0.789, -0.746, -0.700, -0.659, -0.618, -0.577, -0.541, -0.487, -0.439, -0.383, -0.337, -0.285, -0.236, -0.177, -0.134, -0.083, -0.038, +0.005, +0.062, +0.110, +0.167, +0.213, +0.256, +0.313, +0.344, +0.390, +0.444, +0.494, +0.542, +0.585, +0.627, +0.681, +0.742, +0.780, +0.843, +0.899, +0.949, +0.991, +1.045, +1.093, +1.141, +1.184, +1.235, +1.296, +1.366, +1.426, +1.484, +1.540, +1.607, +1.687, +1.752, +1.842, +1.912, +1.962, +2.047, +2.115, +2.221, +2.293, +2.372, +2.485, +2.578, +2.703, +2.825, +2.974, +3.139, +3.271, +3.439, +3.646, +3.978, +4.514, +4.901, +5.552, +6.288, +6.513, +6.975, +7.182, +7.182, +7.182, +7.182},  +0.221,  +0.167,   1.797},
	{"DC6-6x2Bytes-1",   160, 4096, 0, { -6.091, -6.091, -6.091, -6.091, -6.055, -5.807, -5.505, -5.141, -4.465, -3.941, -3.417, -3.098, -2.898, -2.694, -2.547, -2.443, -2.303, -2.205, -2.079, -1.985, -1.869, -1.812, -1.740, -1.657, -1.574, -1.507, -1.449, -1.377, -1.328, -1.274, -1.221, -1.167, -1.106, -1.054, -0.991, -0.945, -0.894, -0.851, -0.801, -0.735, -0.685, -0.639, -0.592, -0.550, -0.516, -0.472, -0.417, -0.374, -0.313, -0.267, -0.216, -0.161, -0.124, -0.074, -0.030, +0.024, +0.073, +0.131, +0.171, +0.222, +0.266, +0.323, +0.361, +0.392, +0.441, +0.485, +0.530, +0.574, +0.629, +0.682, +0.716, +0.754, +0.796, +0.850, +0.901, +0.946, +1.008, +1.067, +1.127, +1.188, +1.251, +1.303, +1.358, +1.419, +1.488, +1.581, +1.648, +1.731, +1.799, +1.874, +1.929, +1.997, +2.059, +2.138, +2.225, +2.318, +2.393, +2.522, +2.641, +2.731, +2.845, +2.967, +3.089, +3.245, +3.449, +3.635, +3.933, +4.555, +4.865, +5.373, +5.645, +5.808, +6.005, +6.070, +6.070, +6.070, +6.070},  +0.205,  +0.171,   1.821},
	{"DC6-6x2Bytes-1",   192, 4096, 0, { -5.426, -5.426, -5.426, -5.426, -5.422, -5.287, -5.073, -4.928, -4.395, -4.031, -3.466, -3.178, -2.874, -2.717, -2.560, -2.393, -2.293, -2.165, -2.058, -1.973, -1.874, -1.734, -1.664, -1.592, -1.539, -1.467, -1.404, -1.343, -1.299, -1.245, -1.190, -1.135, -1.069, -1.008, -0.953, -0.888, -0.848, -0.793, -0.747, -0.687, -0.637, -0.576, -0.542, -0.476, -0.418, -0.378, -0.330, -0.271, -0.232, -0.198, -0.162, -0.107, -0.071, -0.020, +0.032, +0.067, +0.099, +0.146, +0.193, +0.248, +0.292, +0.333, +0.388, +0.450, +0.492, +0.533, +0.580, +0.639, +0.687, +0.743, +0.802, +0.855, +0.898, +0.948, +0.989, +1.036, +1.088, +1.150, +1.204, +1.260, +1.307, +1.355, +1.395, +1.459, +1.508, +1.581, +1.662, +1.720, +1.780, +1.852, +1.907, +1.959, +2.023, +2.095, +2.189, +2.284, +2.385, +2.483, +2.582, +2.707, +2.850, +2.984, +3.096, +3.223, +3.384, +3.656, +3.927, +4.559, +4.993, +5.792, +6.449, +7.052, +7.230, +7.247, +7.247, +7.247, +7.247},  +0.240,  +0.193,   1.817},
	{"DC6-6x2Bytes-1",   224, 4096, 0, { -5.585, -5.585, -5.585, -5.585, -5.585, -5.474, -5.040, -4.796, -4.375, -3.924, -3.461, -3.128, -2.875, -2.617, -2.499, -2.375, -2.248, -2.132, -2.050, -1.974, -1.867, -1.786, -1.707, -1.654, -1.562, -1.511, -1.448, -1.382, -1.328, -1.261, -1.202, -1.150, -1.078, -1.032, -0.976, -0.931, -0.884, -0.826, -0.774, -0.734, -0.684, -0.636, -0.591, -0.533, -0.483, -0.433, -0.374, -0.322, -0.276, -0.228, -0.183, -0.145, -0.103, -0.049, -0.008, +0.039, +0.079, +0.126, +0.174, +0.217, +0.256, +0.297, +0.346, +0.396, +0.448, +0.497, +0.550, +0.595, +0.640, +0.684, +0.743, +0.794, +0.845, +0.896, +0.934, +0.990, +1.042, +1.096, +1.150, +1.216, +1.276, +1.342, +1.392, +1.449, +1.509, +1.564, +1.630, +1.694, +1.767, +1.845, +1.914, +1.982, +2.042, +2.127, +2.221, +2.304, +2.384, +2.466, +2.614, +2.737, +2.864, +3.009, +3.124, +3.252, +3.418, +3.627, +3.940, +4.509, +4.963, +5.566, +5.787, +6.010, +6.750, +7.006, +7.006, +7.006, +7.006},  +0.220,  +0.174,   1.811},
	{"DC6-6x2Bytes-1",   256, 4096, 0, { -6.291, -6.291, -6.291, -6.291, -6.052, -5.534, -5.202, -5.062, -4.334, -3.888, -3.473, -3.101, -2.910, -2.725, -2.562, -2.445, -2.331, -2.208, -2.116, -2.040, -1.947, -1.863, -1.767, -1.690, -1.599, -1.528, -1.461, -1.380, -1.314, -1.244, -1.161, -1.098, -1.031, -0.973, -0.931, -0.879, -0.841, -0.790, -0.735, -0.676, -0.630, -0.587, -0.542, -0.498, -0.461, -0.410, -0.364, -0.302, -0.246, -0.200, -0.158, -0.102, -0.051, +0.003, +0.043, +0.089, +0.133, +0.170, +0.221, +0.268, +0.301, +0.338, +0.383, +0.442, +0.491, +0.543, +0.588, +0.638, +0.686, +0.739, +0.771, +0.818, +0.868, +0.913, +0.955, +0.999, +1.051, +1.111, +1.163, +1.218, +1.279, +1.330, +1.384, +1.446, +1.518, +1.585, +1.645, +1.706, +1.775, +1.845, +1.912, +1.971, +2.044, +2.102, +2.183, +2.287, +2.366, +2.459, +2.593, +2.695, +2.821, +2.947, +3.102, +3.259, +3.407, +3.729, +3.987, +4.457, +5.077, +5.700, +6.092, +6.385, +6.470, +6.500, +6.500, +6.500, +6.500},  +0.229,  +0.221,   1.823},
	{"DC6-6x2Bytes-1",   320, 4096, 0, { -6.079, -6.079, -6.079, -6.079, -5.930, -5.392, -5.159, -4.904, -4.432, -3.814, -3.313, -3.030, -2.907, -2.741, -2.567, -2.436, -2.270, -2.167, -2.070, -1.985, -1.914, -1.833, -1.724, -1.656, -1.577, -1.508, -1.455, -1.400, -1.324, -1.259, -1.198, -1.143, -1.082, -1.022, -0.970, -0.924, -0.879, -0.831, -0.784, -0.723, -0.660, -0.607, -0.553, -0.512, -0.466, -0.430, -0.382, -0.319, -0.283, -0.226, -0.182, -0.137, -0.079, -0.048, -0.002, +0.051, +0.085, +0.129, +0.179, +0.221, +0.264, +0.311, +0.360, +0.403, +0.449, +0.491, +0.550, +0.599, +0.651, +0.694, +0.747, +0.796, +0.841, +0.894, +0.945, +0.998, +1.035, +1.086, +1.138, +1.175, +1.237, +1.299, +1.358, +1.419, +1.487, +1.547, +1.608, +1.693, +1.763, +1.818, +1.894, +1.969, +2.053, +2.127, +2.203, +2.306, +2.391, +2.488, +2.595, +2.693, +2.823, +2.928, +3.073, +3.262, +3.457, +3.706, +4.054, +4.792, +5.078, +5.405, +5.967, +6.114, +6.205, +6.228, +6.228, +6.228, +6.228},  +0.220,  +0.179,   1.818},
	{"DC6-6x2Bytes-1",   384, 4096, 0, { -5.849, -5.849, -5.849, -5.849, -5.689, -5.322, -4.703, -4.542, -4.260, -3.912, -3.454, -3.085, -2.879, -2.642, -2.474, -2.359, -2.244, -2.118, -2.029, -1.924, -1.839, -1.754, -1.690, -1.612, -1.529, -1.462, -1.401, -1.317, -1.256, -1.208, -1.150, -1.073, -1.026, -0.971, -0.915, -0.849, -0.790, -0.741, -0.693, -0.644, -0.603, -0.544, -0.495, -0.452, -0.404, -0.368, -0.329, -0.287, -0.241, -0.190, -0.128, -0.078, -0.042, +0.005, +0.050, +0.095, +0.142, +0.166, +0.199, +0.263, +0.314, +0.370, +0.419, +0.462, +0.512, +0.561, +0.611, +0.648, +0.691, +0.740, +0.803, +0.850, +0.895, +0.943, +0.983, +1.031, +1.064, +1.125, +1.180, +1.228, +1.286, +1.341, +1.390, +1.446, +1.500, +1.557, +1.614, +1.671, +1.727, +1.803, +1.847, +1.918, +2.018, +2.113, +2.175, +2.262, +2.343, +2.447, +2.552, +2.717, +2.869, +2.972, +3.108, +3.250, +3.431, +3.699, +3.993, +4.460, +4.684, +5.189, +5.389, +6.173, +6.258, +6.265, +6.265, +6.265, +6.265},  +0.249,  +0.199,   1.787},
	{"DC6-6x2Bytes-1",   448, 4096, 0, { -5.844, -5.844, -5.844, -5.844, -5.707, -5.264, -5.008, -4.672, -4.243, -3.718, -3.285, -2.998, -2.815, -2.611, -2.467, -2.326, -2.219, -2.129, -2.053, -1.930, -1.831, -1.784, -1.711, -1.627, -1.544, -1.463, -1.386, -1.317, -1.263, -1.193, -1.134, -1.072, -1.017, -0.973, -0.926, -0.881, -0.831, -0.781, -0.740, -0.691, -0.643, -0.589, -0.539, -0.497, -0.438, -0.391, -0.353, -0.299, -0.246, -0.198, -0.153, -0.112, -0.074, -0.040, +0.005, +0.056, +0.099, +0.149, +0.198, +0.232, +0.268, +0.322, +0.369, +0.419, +0.454, +0.488, +0.539, +0.586, +0.631, +0.680, +0.730, +0.777, +0.828, +0.867, +0.922, +0.981, +1.031, +1.093, +1.149, +1.218, +1.270, +1.326, +1.381, +1.434, +1.500, +1.548, +1.604, +1.669, +1.740, +1.796, +1.875, +1.955, +2.007, +2.099, +2.193, +2.289, +2.381, +2.480, +2.574, +2.696, +2.825, +2.968, +3.095, +3.232, +3.430, +3.658, +3.978, +4.392, +4.742, +5.162, +5.504, +6.026, +6.108, +6.128, +6.128, +6.128, +6.128},  +0.235,  +0.198,   1.776},
	{"DC6-6x2Bytes-1",   512, 4096, 0, { -5.282, -5.282, -5.282, -5.282, -5.217, -5.013, -4.897, -4.537, -4.050, -3.695, -3.338, -3.024, -2.750, -2.585, -2.461, -2.265, -2.150, -2.024, -1.941, -1.846, -1.787, -1.714, -1.638, -1.553, -1.487, -1.419, -1.362, -1.293, -1.240, -1.192, -1.118, -1.063, -1.024, -0.982, -0.919, -0.858, -0.807, -0.744, -0.694, -0.644, -0.582, -0.553, -0.509, -0.457, -0.400, -0.357, -0.307, -0.264, -0.228, -0.173, -0.127, -0.089, -0.041, +0.006, +0.038, +0.088, +0.120, +0.166, +0.221, +0.270, +0.316, +0.360, +0.415, +0.455, +0.499, +0.552, +0.602, +0.640, +0.686, +0.736, +0.794, +0.834, +0.880, +0.935, +0.979, +1.029, +1.082, +1.135, +1.173, +1.217, +1.278, +1.329, +1.381, +1.443, +1.502, +1.567, +1.625, +1.688, +1.738, +1.800, +1.858, +1.923, +1.988, +2.071, +2.160, +2.268, +2.333, +2.426, +2.520, +2.635, +2.765, +2.890, +3.093, +3.257, +3.442, +3.693, +3.972, +4.420, +5.030, +5.475, +5.738, +5.940, +5.994, +6.000, +6.000, +6.000, +6.000},  +0.261,  +0.221,   1.762},
	{"DC6-6x2Bytes-1",   640, 4096, 0, { -5.561, -5.561, -5.561, -5.561, -5.553, -5.464, -5.057, -4.635, -4.122, -3.779, -3.301, -2.973, -2.810, -2.665, -2.509, -2.360, -2.267, -2.135, -2.008, -1.917, -1.830, -1.750, -1.673, -1.606, -1.533, -1.458, -1.395, -1.344, -1.288, -1.215, -1.154, -1.091, -1.041, -0.994, -0.944, -0.876, -0.819, -0.757, -0.712, -0.658, -0.620, -0.571, -0.526, -0.477, -0.429, -0.382, -0.332, -0.279, -0.220, -0.167, -0.122, -0.070, -0.024, +0.021, +0.072, +0.112, +0.153, +0.197, +0.243, +0.279, +0.318, +0.359, +0.409, +0.447, +0.494, +0.543, +0.579, +0.624, +0.673, +0.715, +0.760, +0.805, +0.853, +0.888, +0.935, +0.997, +1.045, +1.103, +1.164, +1.208, +1.270, +1.321, +1.382, +1.447, +1.502, +1.569, +1.631, +1.703, +1.772, +1.843, +1.905, +1.977, +2.033, +2.109, +2.201, +2.288, +2.387, +2.470, +2.564, +2.680, +2.787, +2.934, +3.110, +3.244, +3.427, +3.661, +4.002, +4.561, +5.016, +5.434, +5.801, +6.184, +6.508, +6.653, +6.653, +6.653, +6.653},  +0.251,  +0.243,   1.787},
	{"DC6-6x2Bytes-1",   768, 4096, 0, { -5.603, -5.603, -5.603, -5.603, -5.556, -5.346, -5.200, -4.867, -4.367, -3.855, -3.378, -3.102, -2.843, -2.626, -2.460, -2.323, -2.209, -2.102, -2.019, -1.944, -1.842, -1.756, -1.685, -1.622, -1.541, -1.452, -1.377, -1.311, -1.238, -1.182, -1.119, -1.065, -1.000, -0.942, -0.876, -0.834, -0.779, -0.714, -0.657, -0.615, -0.565, -0.526, -0.485, -0.433, -0.379, -0.329, -0.273, -0.237, -0.179, -0.132, -0.094, -0.054, -0.007, +0.039, +0.081, +0.126, +0.176, +0.227, +0.273, +0.308, +0.357, +0.395, +0.438, +0.479, +0.528, +0.576, +0.645, +0.693, +0.750, +0.792, +0.830, +0.868, +0.927, +0.970, +1.016, +1.061, +1.108, +1.167, +1.213, +1.265, +1.317, +1.364, +1.417, +1.465, +1.506, +1.570, +1.633, +1.697, +1.767, +1.849, +1.908, +1.979, +2.053, +2.118, +2.196, +2.255, +2.319, +2.411, +2.519, +2.639, +2.778, +2.948, +3.086, +3.215, +3.378, +3.612, +3.928, +4.421, +4.971, +5.455, +6.018, +6.610, +7.170, +7.343, +7.343, +7.343, +7.343},  +0.270,  +0.273,   1.786},
	{"DC6-6x2Bytes-1",   896, 4096, 0, { -5.812, -5.812, -5.812, -5.812, -5.621, -5.152, -4.817, -4.624, -4.132, -3.763, -3.292, -3.036, -2.808, -2.614, -2.409, -2.269, -2.156, -2.071, -1.979, -1.895, -1.789, -1.696, -1.628, -1.565, -1.481, -1.418, -1.332, -1.276, -1.203, -1.166, -1.098, -1.036, -0.975, -0.920, -0.870, -0.814, -0.764, -0.713, -0.667, -0.616, -0.567, -0.520, -0.468, -0.427, -0.374, -0.324, -0.280, -0.224, -0.184, -0.144, -0.096, -0.052, -0.019, +0.025, +0.068, +0.108, +0.155, +0.200, +0.233, +0.271, +0.322, +0.373, +0.424, +0.466, +0.514, +0.560, +0.600, +0.635, +0.678, +0.723, +0.774, +0.823, +0.877, +0.925, +0.979, +1.024, +1.094, +1.148, +1.194, +1.256, +1.320, +1.362, +1.420, +1.480, +1.537, +1.582, +1.639, +1.688, +1.741, +1.803, +1.871, +1.919, +1.991, +2.056, +2.124, +2.211, +2.297, +2.396, +2.520, +2.592, +2.686, +2.817, +2.947, +3.112, +3.331, +3.616, +3.915, +4.548, +4.940, +5.583, +5.961, +6.173, +6.652, +6.810, +6.810, +6.810, +6.810},  +0.265,  +0.233,   1.751},
	{"DC6-6x2Bytes-1",  1024, 4096, 0, { -5.270, -5.270, -5.270, -5.270, -5.212, -5.077, -4.981, -4.591, -4.122, -3.786, -3.332, -2.999, -2.773, -2.601, -2.417, -2.267, -2.141, -2.023, -1.926, -1.817, -1.719, -1.623, -1.537, -1.469, -1.380, -1.320, -1.250, -1.180, -1.118, -1.059, -1.013, -0.961, -0.913, -0.858, -0.811, -0.755, -0.714, -0.673, -0.617, -0.571, -0.525, -0.473, -0.429, -0.378, -0.331, -0.278, -0.242, -0.194, -0.153, -0.106, -0.061, -0.013, +0.030, +0.071, +0.117, +0.155, +0.199, +0.244, +0.284, +0.331, +0.385, +0.424, +0.467, +0.505, +0.556, +0.609, +0.654, +0.684, +0.728, +0.775, +0.821, +0.859, +0.893, +0.944, +0.987, +1.036, +1.080, +1.134, +1.179, +1.225, +1.296, +1.350, +1.413, +1.481, +1.531, +1.596, +1.645, +1.714, +1.791, +1.852, +1.906, +1.978, +2.048, +2.132, +2.218, +2.291, +2.344, +2.431, +2.559, +2.664, +2.752, +2.873, +3.028, +3.216, +3.418, +3.627, +3.955, +4.402, +4.925, +5.558, +6.015, +6.420, +7.112, +7.364, +7.364, +7.364, +7.364},  +0.306,  +0.284,   1.749},
	{"DC6-6x2Bytes-1",  1280, 4096, 0, { -6.208, -6.208, -6.208, -6.208, -5.982, -5.235, -4.901, -4.647, -4.331, -3.627, -3.198, -2.977, -2.719, -2.582, -2.416, -2.287, -2.153, -2.055, -1.934, -1.838, -1.734, -1.656, -1.574, -1.496, -1.422, -1.355, -1.278, -1.214, -1.152, -1.089, -1.043, -0.984, -0.932, -0.869, -0.807, -0.755, -0.715, -0.659, -0.595, -0.557, -0.506, -0.454, -0.413, -0.358, -0.313, -0.265, -0.209, -0.165, -0.104, -0.067, -0.017, +0.033, +0.080, +0.131, +0.178, +0.203, +0.252, +0.297, +0.342, +0.386, +0.429, +0.480, +0.520, +0.566, +0.605, +0.643, +0.697, +0.744, +0.790, +0.833, +0.872, +0.923, +0.978, +1.021, +1.070, +1.115, +1.169, +1.222, +1.268, +1.320, +1.365, +1.412, +1.469, +1.513, +1.580, +1.646, +1.690, +1.742, +1.808, +1.850, +1.908, +1.977, +2.060, +2.156, +2.232, +2.322, +2.404, +2.483, +2.572, +2.700, +2.818, +2.949, +3.146, +3.284, +3.496, +3.768, +4.041, +4.533, +4.989, +5.333, +5.671, +6.785, +7.573, +7.838, +7.838, +7.838, +7.838},  +0.339,  +0.342,   1.772},
	{"DC6-6x2Bytes-1",  1536, 4096, 0, { -5.794, -5.794, -5.794, -5.794, -5.632, -5.249, -5.114, -4.775, -4.233, -3.762, -3.324, -2.984, -2.828, -2.638, -2.454, -2.273, -2.091, -2.003, -1.904, -1.816, -1.742, -1.641, -1.556, -1.481, -1.396, -1.337, -1.281, -1.220, -1.159, -1.102, -1.057, -0.993, -0.936, -0.888, -0.834, -0.783, -0.714, -0.662, -0.617, -0.569, -0.515, -0.478, -0.419, -0.370, -0.318, -0.279, -0.236, -0.181, -0.125, -0.064, -0.017, +0.038, +0.088, +0.133, +0.175, +0.220, +0.266, +0.316, +0.355, +0.396, +0.429, +0.456, +0.492, +0.545, +0.583, +0.622, +0.684, +0.723, +0.770, +0.819, +0.875, +0.926, +0.963, +1.019, +1.073, +1.130, +1.174, +1.221, +1.280, +1.335, +1.400, +1.446, +1.491, +1.546, +1.602, +1.662, +1.715, +1.782, +1.845, +1.906, +1.966, +2.025, +2.082, +2.158, +2.239, +2.328, +2.425, +2.528, +2.641, +2.732, +2.836, +2.960, +3.094, +3.262, +3.467, +3.760, +3.995, +4.592, +5.165, +5.712, +5.867, +6.943, +7.548, +7.754, +7.754, +7.754, +7.754},  +0.340,  +0.355,   1.783},
	{"DC6-6x2Bytes-1",  1792, 4096, 0, { -5.646, -5.646, -5.646, -5.646, -5.530, -5.197, -5.043, -4.753, -4.324, -3.819, -3.334, -3.058, -2.826, -2.613, -2.454, -2.312, -2.201, -2.061, -1.970, -1.871, -1.772, -1.688, -1.581, -1.492, -1.434, -1.363, -1.293, -1.227, -1.162, -1.098, -1.037, -0.976, -0.929, -0.868, -0.815, -0.765, -0.714, -0.669, -0.623, -0.555, -0.492, -0.440, -0.403, -0.357, -0.304, -0.255, -0.202, -0.161, -0.123, -0.076, -0.042, +0.001, +0.055, +0.098, +0.137, +0.181, +0.224, +0.255, +0.308, +0.354, +0.413, +0.462, +0.502, +0.532, +0.575, +0.621, +0.662, +0.724, +0.777, +0.829, +0.865, +0.910, +0.946, +0.987, +1.038, +1.093, +1.146, +1.201, +1.250, +1.319, +1.366, +1.434, +1.482, +1.534, +1.602, +1.656, +1.710, +1.765, +1.839, +1.903, +1.997, +2.055, +2.131, +2.207, +2.271, +2.373, +2.457, +2.543, +2.624, +2.722, +2.816, +2.921, +3.063, +3.192, +3.369, +3.590, +3.939, +4.492, +5.016, +5.653, +6.027, +6.250, +7.356, +7.860, +7.860, +7.860, +7.860},  +0.325,  +0.308,   1.783},
	{"DC6-6x2Bytes-1",  2048, 4096, 0, { -5.941, -5.941, -5.941, -5.941, -5.736, -5.239, -4.821, -4.607, -4.137, -3.768, -3.304, -3.022, -2.807, -2.599, -2.431, -2.292, -2.176, -2.042, -1.949, -1.847, -1.732, -1.645, -1.553, -1.467, -1.402, -1.318, -1.262, -1.198, -1.133, -1.081, -1.010, -0.947, -0.880, -0.824, -0.762, -0.698, -0.645, -0.600, -0.563, -0.519, -0.478, -0.437, -0.399, -0.340, -0.301, -0.259, -0.217, -0.163, -0.122, -0.068, -0.031, +0.018, +0.059, +0.092, +0.136, +0.183, +0.218, +0.258, +0.307, +0.346, +0.405, +0.454, +0.502, +0.552, +0.598, +0.648, +0.690, +0.738, +0.782, +0.827, +0.872, +0.919, +0.960, +1.014, +1.069, +1.112, +1.179, +1.230, +1.274, +1.335, +1.380, +1.446, +1.504, +1.552, +1.605, +1.670, +1.737, +1.803, +1.858, +1.923, +2.005, +2.094, +2.156, +2.247, +2.296, +2.364, +2.468, +2.546, +2.652, +2.757, +2.879, +3.018, +3.123, +3.279, +3.481, +3.716, +4.097, +4.715, +5.178, +5.587, +5.857, +6.128, +6.609, +6.819, +6.819, +6.819, +6.819},  +0.353,  +0.307,   1.789},
	{"DC6-6x2Bytes-1",  2560, 4096, 0, { -5.097, -5.097, -5.097, -5.097, -5.085, -4.936, -4.755, -4.470, -4.030, -3.646, -3.182, -2.949, -2.723, -2.563, -2.394, -2.287, -2.169, -2.051, -1.982, -1.886, -1.769, -1.677, -1.592, -1.493, -1.413, -1.337, -1.264, -1.197, -1.127, -1.054, -0.995, -0.938, -0.882, -0.820, -0.771, -0.727, -0.676, -0.620, -0.575, -0.533, -0.489, -0.444, -0.390, -0.349, -0.289, -0.240, -0.190, -0.147, -0.092, -0.047, +0.007, +0.060, +0.096, +0.158, +0.200, +0.259, +0.298, +0.342, +0.383, +0.426, +0.466, +0.503, +0.554, +0.620, +0.658, +0.702, +0.761, +0.797, +0.837, +0.888, +0.928, +0.963, +1.029, +1.079, +1.139, +1.179, +1.241, +1.293, +1.340, +1.386, +1.440, +1.498, +1.549, +1.609, +1.666, +1.732, +1.788, +1.837, +1.893, +1.950, +2.004, +2.088, +2.156, +2.233, +2.313, +2.367, +2.447, +2.534, +2.660, +2.753, +2.854, +2.998, +3.123, +3.320, +3.560, +3.834, +4.092, +4.655, +5.003, +5.593, +6.582, +6.898, +7.344, +7.510, +7.510, +7.510, +7.510},  +0.382,  +0.383,   1.793},
	{"DC6-6x2Bytes-1",  3072, 4096, 0, { -5.028, -5.028, -5.028, -5.028, -4.994, -4.824, -4.687, -4.545, -4.121, -3.635, -3.344, -3.046, -2.760, -2.534, -2.412, -2.275, -2.151, -2.033, -1.929, -1.842, -1.757, -1.673, -1.583, -1.491, -1.414, -1.322, -1.242, -1.189, -1.120, -1.065, -1.005, -0.945, -0.885, -0.818, -0.767, -0.722, -0.671, -0.610, -0.534, -0.477, -0.412, -0.373, -0.324, -0.259, -0.225, -0.173, -0.131, -0.087, -0.054, -0.014, +0.026, +0.075, +0.126, +0.178, +0.228, +0.280, +0.316, +0.359, +0.397, +0.453, +0.500, +0.549, +0.587, +0.628, +0.669, +0.716, +0.762, +0.805, +0.851, +0.893, +0.936, +0.994, +1.055, +1.110, +1.162, +1.207, +1.256, +1.313, +1.352, +1.399, +1.459, +1.507, +1.567, +1.610, +1.680, +1.735, +1.794, +1.851, +1.910, +1.963, +2.032, +2.093, +2.161, +2.226, +2.285, +2.373, +2.463, +2.555, +2.648, +2.769, +2.871, +3.029, +3.164, +3.309, +3.486, +3.715, +3.991, +4.511, +4.922, +5.566, +5.835, +6.143, +6.634, +6.786, +6.786, +6.786, +6.786},  +0.392,  +0.397,   1.784},
	{"DC6-6x2Bytes-1",  3584, 4096, 0, { -5.932, -5.932, -5.932, -5.932, -5.715, -5.064, -4.656, -4.456, -4.106, -3.720, -3.212, -2.984, -2.733, -2.553, -2.390, -2.249, -2.120, -2.004, -1.891, -1.805, -1.701, -1.620, -1.561, -1.495, -1.429, -1.362, -1.279, -1.201, -1.138, -1.065, -1.004, -0.944, -0.875, -0.837, -0.781, -0.730, -0.678, -0.616, -0.555, -0.502, -0.462, -0.409, -0.368, -0.315, -0.250, -0.204, -0.150, -0.097, -0.046, +0.001, +0.056, +0.095, +0.139, +0.185, +0.230, +0.277, +0.319, +0.372, +0.402, +0.431, +0.474, +0.522, +0.574, +0.621, +0.672, +0.717, +0.746, +0.797, +0.840, +0.880, +0.920, +0.971, +1.019, +1.053, +1.092, +1.147, +1.185, +1.242, +1.293, +1.354, +1.395, +1.438, +1.501, +1.561, +1.614, +1.665, +1.721, +1.785, +1.847, +1.921, +1.987, +2.056, +2.141, +2.212, +2.276, +2.355, +2.461, +2.551, +2.657, +2.739, +2.842, +2.948, +3.065, +3.236, +3.513, +3.748, +4.095, +4.590, +5.098, +5.466, +6.010, +6.296, +6.659, +6.819, +6.819, +6.819, +6.819},  +0.377,  +0.402,   1.772},
	{"DC6-6x2Bytes-1",  4096, 4096, 0, { -5.571, -5.571, -5.571, -5.571, -5.550, -5.340, -5.015, -4.409, -4.047, -3.705, -3.250, -2.927, -2.697, -2.517, -2.399, -2.251, -2.110, -2.004, -1.887, -1.787, -1.699, -1.587, -1.489, -1.391, -1.319, -1.230, -1.178, -1.113, -1.049, -0.988, -0.945, -0.890, -0.825, -0.764, -0.712, -0.635, -0.586, -0.525, -0.487, -0.428, -0.372, -0.319, -0.276, -0.238, -0.199, -0.153, -0.106, -0.050, +0.012, +0.059, +0.105, +0.146, +0.191, +0.243, +0.287, +0.324, +0.364, +0.394, +0.439, +0.480, +0.515, +0.554, +0.592, +0.638, +0.684, +0.734, +0.762, +0.809, +0.851, +0.887, +0.936, +0.985, +1.031, +1.078, +1.122, +1.150, +1.184, +1.223, +1.282, +1.360, +1.414, +1.463, +1.519, +1.565, +1.632, +1.699, +1.758, +1.823, +1.878, +1.948, +2.008, +2.077, +2.144, +2.216, +2.296, +2.374, +2.444, +2.523, +2.644, +2.766, +2.857, +2.982, +3.134, +3.256, +3.467, +3.709, +3.989, +4.575, +4.910, +5.502, +6.165, +6.528, +7.068, +7.245, +7.245, +7.245, +7.245},  +0.410,  +0.439,   1.753},
	{"DC6-6x2Bytes-1",  5120, 4096, 0, { -6.249, -6.249, -6.249, -6.249, -6.195, -5.625, -4.788, -4.482, -4.172, -3.675, -3.204, -2.908, -2.677, -2.468, -2.308, -2.162, -2.060, -1.939, -1.811, -1.711, -1.620, -1.509, -1.420, -1.347, -1.274, -1.220, -1.170, -1.109, -1.050, -0.983, -0.917, -0.853, -0.793, -0.729, -0.675, -0.630, -0.583, -0.541, -0.483, -0.436, -0.395, -0.345, -0.295, -0.252, -0.213, -0.173, -0.139, -0.085, -0.046, +0.000, +0.035, +0.082, +0.123, +0.169, +0.205, +0.251, +0.294, +0.341, +0.388, +0.439, +0.484, +0.532, +0.576, +0.621, +0.671, +0.717, +0.757, +0.797, +0.843, +0.903, +0.941, +0.983, +1.045, +1.088, +1.134, +1.191, +1.240, +1.279, +1.329, +1.370, +1.437, +1.481, +1.540, +1.598, +1.647, +1.708, +1.770, +1.837, +1.917, +1.975, +2.035, +2.102, +2.160, +2.227, +2.290, +2.395, +2.468, +2.595, +2.716, +2.810, +2.916, +3.040, +3.139, +3.303, +3.433, +3.681, +3.997, +4.567, +4.869, +5.298, +5.774, +5.867, +6.265, +6.428, +6.428, +6.428, +6.428},  +0.418,  +0.388,   1.750},
	{"DC6-6x2Bytes-1",  6144, 4096, 0, { -6.400, -6.400, -6.400, -6.400, -6.341, -5.917, -5.363, -4.832, -4.252, -3.763, -3.302, -3.035, -2.790, -2.636, -2.476, -2.288, -2.148, -2.002, -1.897, -1.801, -1.690, -1.608, -1.532, -1.462, -1.385, -1.305, -1.225, -1.152, -1.087, -1.028, -0.971, -0.887, -0.831, -0.786, -0.732, -0.684, -0.643, -0.601, -0.530, -0.477, -0.431, -0.382, -0.337, -0.302, -0.244, -0.203, -0.151, -0.101, -0.062, -0.032, +0.011, +0.061, +0.108, +0.158, +0.226, +0.269, +0.310, +0.355, +0.411, +0.458, +0.492, +0.539, +0.577, +0.615, +0.668, +0.711, +0.743, +0.801, +0.843, +0.882, +0.921, +0.963, +1.010, +1.057, +1.115, +1.167, +1.222, +1.271, +1.324, +1.370, +1.428, +1.472, +1.528, +1.585, +1.641, +1.696, +1.750, +1.818, +1.884, +1.936, +1.983, +2.061, +2.123, +2.198, +2.317, +2.405, +2.477, +2.575, +2.693, +2.760, +2.862, +2.974, +3.137, +3.342, +3.473, +3.659, +3.998, +4.519, +4.850, +5.355, +5.620, +6.111, +6.387, +6.473, +6.473, +6.473, +6.473},  +0.382,  +0.411,   1.777},
	{"DC6-6x2Bytes-1",  7168, 4096, 0, { -5.800, -5.800, -5.800, -5.800, -5.728, -5.569, -5.398, -5.144, -4.143, -3.595, -3.200, -2.932, -2.707, -2.541, -2.370, -2.205, -2.082, -1.994, -1.909, -1.810, -1.732, -1.671, -1.573, -1.487, -1.397, -1.292, -1.218, -1.168, -1.105, -1.045, -0.988, -0.954, -0.894, -0.843, -0.804, -0.749, -0.689, -0.628, -0.572, -0.537, -0.481, -0.418, -0.369, -0.305, -0.258, -0.198, -0.163, -0.095, -0.050, -0.007, +0.048, +0.089, +0.130, +0.171, +0.214, +0.257, +0.312, +0.351, +0.394, +0.450, +0.501, +0.545, +0.585, +0.626, +0.674, +0.719, +0.755, +0.785, +0.832, +0.895, +0.935, +0.977, +1.022, +1.061, +1.109, +1.162, +1.207, +1.257, +1.311, +1.351, +1.399, +1.459, +1.511, +1.565, +1.611, +1.658, +1.719, +1.783, +1.840, +1.900, +1.965, +2.026, +2.098, +2.170, +2.265, +2.344, +2.426, +2.520, +2.613, +2.725, +2.869, +2.992, +3.153, +3.290, +3.442, +3.629, +3.966, +4.356, +4.779, +5.189, +5.701, +5.939, +6.048, +6.091, +6.091, +6.091, +6.091},  +0.372,  +0.394,   1.756},
	{"DC6-6x2Bytes-1",  8192, 4096, 0, { -5.921, -5.921, -5.921, -5.921, -5.899, -5.572, -4.862, -4.544, -4.166, -3.630, -3.086, -2.844, -2.623, -2.454, -2.266, -2.146, -2.037, -1.916, -1.780, -1.687, -1.607, -1.549, -1.473, -1.397, -1.342, -1.263, -1.165, -1.108, -1.044, -0.984, -0.908, -0.855, -0.817, -0.763, -0.725, -0.668, -0.616, -0.567, -0.510, -0.461, -0.418, -0.382, -0.331, -0.291, -0.244, -0.210, -0.180, -0.132, -0.083, -0.034, +0.010, +0.056, +0.100, +0.159, +0.206, +0.249, +0.281, +0.318, +0.367, +0.414, +0.449, +0.490, +0.532, +0.571, +0.621, +0.664, +0.714, +0.765, +0.800, +0.837, +0.892, +0.937, +0.983, +1.028, +1.092, +1.132, +1.186, +1.236, +1.272, +1.316, +1.370, +1.433, +1.486, +1.553, +1.614, +1.687, +1.734, +1.791, +1.858, +1.917, +1.979, +2.046, +2.115, +2.194, +2.266, +2.340, +2.418, +2.506, +2.591, +2.697, +2.797, +2.906, +3.025, +3.175, +3.346, +3.532, +3.831, +4.229, +4.647, +5.198, +5.397, +5.500, +6.186, +6.473, +6.473, +6.473, +6.473},  +0.377,  +0.367,   1.708},
	{"DC6-6x2Bytes-1", 10240, 4096, 0, { -7.314, -7.314, -7.314, -7.314, -6.765, -5.410, -4.922, -4.417, -3.839, -3.520, -3.064, -2.820, -2.551, -2.374, -2.193, -2.090, -1.985, -1.886, -1.781, -1.682, -1.605, -1.522, -1.449, -1.374, -1.323, -1.265, -1.208, -1.142, -1.075, -1.022, -0.970, -0.891, -0.843, -0.775, -0.735, -0.678, -0.640, -0.594, -0.542, -0.481, -0.432, -0.378, -0.324, -0.275, -0.212, -0.171, -0.124, -0.082, -0.047, +0.000, +0.045, +0.090, +0.139, +0.190, +0.238, +0.284, +0.329, +0.376, +0.419, +0.455, +0.501, +0.541, +0.593, +0.632, +0.673, +0.726, +0.766, +0.813, +0.864, +0.916, +0.953, +0.988, +1.035, +1.077, +1.119, +1.163, +1.207, +1.257, +1.304, +1.351, +1.396, +1.444, +1.492, +1.552, +1.602, +1.651, +1.728, +1.803, +1.866, +1.926, +1.993, +2.064, +2.128, +2.189, +2.264, +2.338, +2.390, +2.470, +2.569, +2.659, +2.770, +2.891, +2.982, +3.114, +3.318, +3.541, +3.843, +4.166, +4.608, +5.026, +5.336, +5.871, +6.698, +6.819, +6.819, +6.819, +6.819},  +0.394,  +0.419,   1.695},
	{"DC6-6x2Bytes-1", 12288, 4096, 0, { -6.181, -6.181, -6.181, -6.181, -5.855, -5.158, -4.832, -4.472, -3.818, -3.553, -3.096, -2.835, -2.569, -2.407, -2.256, -2.146, -2.025, -1.910, -1.798, -1.706, -1.645, -1.566, -1.478, -1.409, -1.357, -1.278, -1.200, -1.136, -1.084, -1.011, -0.938, -0.872, -0.813, -0.767, -0.707, -0.664, -0.603, -0.552, -0.504, -0.455, -0.413, -0.361, -0.308, -0.269, -0.218, -0.175, -0.122, -0.074, -0.033, +0.002, +0.048, +0.113, +0.157, +0.189, +0.234, +0.288, +0.333, +0.364, +0.415, +0.456, +0.489, +0.534, +0.585, +0.622, +0.660, +0.697, +0.743, +0.778, +0.813, +0.853, +0.890, +0.929, +0.982, +1.034, +1.099, +1.152, +1.197, +1.235, +1.299, +1.372, +1.413, +1.462, +1.516, +1.571, +1.621, +1.690, +1.752, +1.820, +1.869, +1.923, +1.973, +2.049, +2.115, +2.187, +2.272, +2.368, +2.422, +2.502, +2.598, +2.715, +2.820, +2.911, +3.031, +3.174, +3.332, +3.555, +3.868, +4.354, +4.728, +5.470, +5.666, +6.230, +6.393, +6.455, +6.455, +6.455, +6.455},  +0.396,  +0.415,   1.713},
	{"DC6-6x2Bytes-1", 14336, 4096, 0, { -5.601, -5.601, -5.601, -5.601, -5.542, -5.253, -4.765, -4.363, -3.961, -3.536, -3.160, -2.865, -2.633, -2.464, -2.333, -2.213, -2.077, -1.957, -1.826, -1.721, -1.654, -1.560, -1.477, -1.397, -1.335, -1.284, -1.205, -1.156, -1.078, -1.023, -0.965, -0.910, -0.852, -0.801, -0.751, -0.695, -0.658, -0.601, -0.550, -0.507, -0.449, -0.409, -0.368, -0.323, -0.274, -0.218, -0.153, -0.114, -0.073, -0.030, +0.028, +0.081, +0.130, +0.183, +0.225, +0.270, +0.320, +0.360, +0.406, +0.454, +0.506, +0.547, +0.589, +0.644, +0.679, +0.731, +0.783, +0.818, +0.872, +0.914, +0.954, +1.015, +1.075, +1.114, +1.151, +1.186, +1.231, +1.274, +1.323, +1.370, +1.431, +1.485, +1.556, +1.613, +1.659, +1.718, +1.773, +1.843, +1.896, +1.956, +2.012, +2.075, +2.163, +2.233, +2.319, +2.406, +2.480, +2.561, +2.629, +2.734, +2.873, +2.990, +3.127, +3.277, +3.470, +3.702, +3.990, +4.348, +4.731, +5.245, +5.453, +6.206, +7.093, +7.220, +7.220, +7.220, +7.220},  +0.404,  +0.406,   1.744},
	{"DC6-6x2Bytes-1", 16384, 4096, 0, { -5.107, -5.107, -5.107, -5.107, -5.023, -4.840, -4.710, -4.450, -3.755, -3.436, -3.040, -2.764, -2.574, -2.388, -2.221, -2.090, -1.930, -1.826, -1.730, -1.653, -1.562, -1.480, -1.406, -1.345, -1.294, -1.233, -1.176, -1.113, -1.061, -1.006, -0.950, -0.892, -0.827, -0.777, -0.738, -0.694, -0.645, -0.576, -0.540, -0.490, -0.445, -0.387, -0.344, -0.288, -0.235, -0.194, -0.145, -0.109, -0.064, -0.031, +0.022, +0.058, +0.104, +0.145, +0.183, +0.218, +0.263, +0.307, +0.366, +0.413, +0.458, +0.491, +0.543, +0.592, +0.655, +0.692, +0.738, +0.791, +0.826, +0.873, +0.921, +0.963, +1.015, +1.065, +1.118, +1.165, +1.219, +1.268, +1.319, +1.379, +1.417, +1.484, +1.521, +1.577, +1.645, +1.710, +1.771, +1.836, +1.913, +1.993, +2.052, +2.093, +2.145, +2.225, +2.279, +2.361, +2.435, +2.533, +2.629, +2.722, +2.813, +2.926, +3.088, +3.222, +3.424, +3.634, +3.918, +4.485, +4.943, +5.424, +5.858, +6.340, +6.418, +6.422, +6.422, +6.422, +6.422},  +0.409,  +0.366,   1.714},
	{"DC6-6x2Bytes-1", 20480, 4096, 0, { -6.642, -6.642, -6.642, -6.642, -6.325, -5.218, -4.415, -4.247, -3.941, -3.524, -3.117, -2.831, -2.620, -2.476, -2.319, -2.157, -2.021, -1.919, -1.816, -1.707, -1.611, -1.532, -1.476, -1.381, -1.289, -1.229, -1.165, -1.102, -1.035, -0.966, -0.912, -0.877, -0.839, -0.787, -0.734, -0.667, -0.620, -0.566, -0.507, -0.456, -0.418, -0.377, -0.333, -0.294, -0.248, -0.194, -0.150, -0.099, -0.062, -0.013, +0.021, +0.061, +0.105, +0.152, +0.191, +0.232, +0.266, +0.324, +0.363, +0.422, +0.460, +0.508, +0.555, +0.595, +0.645, +0.683, +0.729, +0.768, +0.800, +0.847, +0.889, +0.932, +0.987, +1.039, +1.097, +1.144, +1.197, +1.246, +1.305, +1.353, +1.410, +1.462, +1.506, +1.561, +1.618, +1.676, +1.739, +1.805, +1.862, +1.933, +2.005, +2.072, +2.132, +2.217, +2.296, +2.362, +2.431, +2.513, +2.630, +2.771, +2.903, +3.037, +3.114, +3.295, +3.464, +3.740, +4.097, +4.703, +5.168, +6.335, +6.693, +7.029, +7.805, +8.154, +8.154, +8.154, +8.154},  +0.407,  +0.363,   1.751},
	{"DC6-6x2Bytes-1", 24576, 4096, 0, { -6.455, -6.455, -6.455, -6.455, -6.358, -5.463, -4.663, -4.324, -3.963, -3.571, -3.148, -2.816, -2.562, -2.419, -2.241, -2.100, -2.003, -1.914, -1.833, -1.726, -1.619, -1.554, -1.483, -1.416, -1.341, -1.266, -1.183, -1.104, -1.037, -0.974, -0.927, -0.869, -0.814, -0.758, -0.694, -0.647, -0.600, -0.542, -0.482, -0.442, -0.399, -0.348, -0.303, -0.253, -0.212, -0.174, -0.134, -0.079, -0.034, +0.020, +0.065, +0.108, +0.141, +0.205, +0.243, +0.286, +0.323, +0.363, +0.414, +0.462, +0.504, +0.553, +0.596, +0.641, +0.694, +0.733, +0.776, +0.815, +0.852, +0.898, +0.948, +0.993, +1.032, +1.091, +1.142, +1.189, +1.239, +1.284, +1.330, +1.369, +1.433, +1.481, +1.526, +1.573, +1.628, +1.695, +1.750, +1.820, +1.872, +1.934, +2.008, +2.082, +2.138, +2.204, +2.270, +2.364, +2.458, +2.544, +2.652, +2.761, +2.887, +3.020, +3.163, +3.349, +3.551, +3.794, +4.122, +4.787, +5.219, +5.696, +6.138, +6.874, +7.597, +7.760, +7.760, +7.760, +7.760},  +0.428,  +0.414,   1.754},
	{"DC6-6x2Bytes-1", 28672, 4096, 0, { -5.440, -5.440, -5.440, -5.440, -5.419, -5.321, -5.072, -4.770, -4.123, -3.633, -3.216, -2.908, -2.645, -2.436, -2.239, -2.103, -1.988, -1.851, -1.749, -1.659, -1.581, -1.505, -1.425, -1.354, -1.296, -1.235, -1.169, -1.102, -1.053, -0.992, -0.935, -0.855, -0.805, -0.748, -0.705, -0.641, -0.588, -0.549, -0.496, -0.444, -0.399, -0.347, -0.293, -0.253, -0.206, -0.161, -0.104, -0.067, -0.029, +0.004, +0.042, +0.093, +0.156, +0.208, +0.250, +0.301, +0.335, +0.383, +0.432, +0.472, +0.523, +0.552, +0.604, +0.656, +0.697, +0.730, +0.778, +0.821, +0.856, +0.905, +0.940, +0.983, +1.034, +1.074, +1.119, +1.168, +1.223, +1.272, +1.332, +1.381, +1.454, +1.510, +1.558, +1.619, +1.660, +1.728, +1.798, +1.851, +1.908, +1.982, +2.065, +2.127, +2.201, +2.258, +2.338, +2.438, +2.518, +2.603, +2.716, +2.795, +2.935, +3.053, +3.169, +3.322, +3.566, +3.889, +4.201, +4.618, +5.112, +5.839, +6.184, +6.609, +6.716, +6.761, +6.761, +6.761, +6.761},  +0.440,  +0.432,   1.769},
	{"DC6-6x2Bytes-1", 32768, 4096, 0, { -5.750, -5.750, -5.750, -5.750, -5.625, -5.265, -5.121, -4.781, -4.182, -3.565, -3.011, -2.665, -2.500, -2.365, -2.236, -2.127, -2.020, -1.903, -1.768, -1.681, -1.588, -1.509, -1.444, -1.376, -1.299, -1.229, -1.168, -1.110, -1.030, -0.980, -0.904, -0.856, -0.811, -0.760, -0.712, -0.647, -0.605, -0.561, -0.503, -0.460, -0.419, -0.372, -0.335, -0.281, -0.213, -0.158, -0.118, -0.053, -0.009, +0.031, +0.082, +0.122, +0.166, +0.199, +0.247, +0.296, +0.351, +0.418, +0.454, +0.487, +0.530, +0.575, +0.629, +0.673, +0.723, +0.756, +0.797, +0.845, +0.892, +0.936, +0.991, +1.029, +1.074, +1.124, +1.167, +1.204, +1.252, +1.302, +1.341, +1.394, +1.438, +1.480, +1.534, +1.577, +1.632, +1.695, +1.743, +1.796, +1.861, +1.924, +1.990, +2.061, +2.124, +2.175, +2.257, +2.348, +2.456, +2.546, +2.677, +2.778, +2.862, +2.995, +3.141, +3.350, +3.549, +3.801, +4.137, +4.633, +4.970, +5.481, +5.862, +6.281, +7.710, +8.237, +8.237, +8.237, +8.237},  +0.436,  +0.454,   1.739},
	{"DC6-6x2Bytes-1", 40960, 4096, 0, { -5.186, -5.186, -5.186, -5.186, -5.042, -4.697, -4.514, -4.364, -3.983, -3.439, -3.005, -2.730, -2.509, -2.351, -2.257, -2.120, -2.026, -1.935, -1.813, -1.714, -1.629, -1.545, -1.466, -1.377, -1.273, -1.222, -1.151, -1.099, -1.030, -0.971, -0.907, -0.845, -0.785, -0.735, -0.688, -0.628, -0.580, -0.526, -0.484, -0.446, -0.396, -0.335, -0.292, -0.249, -0.200, -0.153, -0.111, -0.072, -0.032, +0.009, +0.050, +0.097, +0.150, +0.185, +0.222, +0.266, +0.311, +0.357, +0.399, +0.449, +0.491, +0.534, +0.571, +0.624, +0.663, +0.715, +0.766, +0.809, +0.860, +0.912, +0.958, +1.016, +1.065, +1.104, +1.155, +1.191, +1.238, +1.284, +1.333, +1.379, +1.423, +1.466, +1.524, +1.579, +1.629, +1.688, +1.747, +1.794, +1.848, +1.904, +1.982, +2.046, +2.112, +2.197, +2.257, +2.343, +2.430, +2.526, +2.629, +2.734, +2.862, +2.984, +3.139, +3.303, +3.504, +3.717, +4.057, +4.505, +4.859, +5.286, +5.577, +5.809, +5.879, +5.910, +5.910, +5.910, +5.910},  +0.424,  +0.399,   1.716},
	{"DC6-6x2Bytes-1", 49152, 4096, 0, { -5.898, -5.898, -5.898, -5.898, -5.733, -5.324, -4.868, -4.393, -4.071, -3.628, -3.126, -2.838, -2.529, -2.408, -2.268, -2.133, -2.015, -1.909, -1.763, -1.672, -1.572, -1.486, -1.420, -1.347, -1.277, -1.225, -1.148, -1.082, -1.018, -0.959, -0.895, -0.836, -0.783, -0.733, -0.676, -0.603, -0.538, -0.498, -0.446, -0.397, -0.349, -0.296, -0.248, -0.206, -0.166, -0.120, -0.081, -0.043, -0.004, +0.043, +0.076, +0.119, +0.169, +0.208, +0.245, +0.284, +0.330, +0.365, +0.417, +0.454, +0.504, +0.537, +0.571, +0.616, +0.655, +0.686, +0.734, +0.782, +0.827, +0.872, +0.920, +0.983, +1.022, +1.072, +1.112, +1.165, +1.210, +1.249, +1.286, +1.342, +1.391, +1.435, +1.491, +1.539, +1.601, +1.655, +1.704, +1.767, +1.827, +1.897, +1.961, +2.045, +2.124, +2.191, +2.286, +2.372, +2.476, +2.558, +2.643, +2.754, +2.845, +2.961, +3.119, +3.297, +3.463, +3.646, +3.899, +4.363, +4.761, +5.544, +5.867, +6.080, +6.619, +6.865, +6.865, +6.865, +6.865},  +0.419,  +0.417,   1.712},
	{"DC6-6x2Bytes-1", 57344, 4096, 0, { -6.220, -6.220, -6.220, -6.220, -5.864, -5.043, -4.833, -4.339, -4.006, -3.521, -3.066, -2.793, -2.596, -2.448, -2.283, -2.134, -2.017, -1.913, -1.783, -1.693, -1.608, -1.541, -1.466, -1.403, -1.330, -1.244, -1.176, -1.095, -1.018, -0.965, -0.902, -0.843, -0.782, -0.724, -0.670, -0.612, -0.562, -0.517, -0.462, -0.419, -0.377, -0.322, -0.282, -0.228, -0.178, -0.140, -0.092, -0.056, -0.000, +0.041, +0.080, +0.116, +0.153, +0.194, +0.224, +0.271, +0.318, +0.363, +0.403, +0.451, +0.483, +0.536, +0.583, +0.628, +0.679, +0.725, +0.772, +0.807, +0.846, +0.879, +0.938, +1.002, +1.055, +1.098, +1.148, +1.204, +1.257, +1.305, +1.372, +1.412, +1.459, +1.518, +1.572, +1.636, +1.693, +1.762, +1.827, +1.883, +1.945, +2.000, +2.050, +2.130, +2.202, +2.257, +2.334, +2.431, +2.511, +2.591, +2.678, +2.785, +2.877, +2.971, +3.094, +3.258, +3.434, +3.567, +3.888, +4.449, +4.943, +5.579, +5.868, +6.372, +7.709, +8.182, +8.182, +8.182, +8.182},  +0.435,  +0.403,   1.733},
	{"DC6-6x2Bytes-1", 65536, 4096, 0, { -5.378, -5.378, -5.378, -5.378, -5.247, -4.949, -4.771, -4.321, -3.669, -3.405, -3.034, -2.754, -2.557, -2.417, -2.253, -2.109, -1.989, -1.887, -1.773, -1.661, -1.570, -1.478, -1.417, -1.349, -1.283, -1.233, -1.182, -1.134, -1.036, -0.979, -0.927, -0.859, -0.810, -0.762, -0.710, -0.669, -0.613, -0.569, -0.506, -0.443, -0.403, -0.360, -0.316, -0.287, -0.236, -0.196, -0.136, -0.103, -0.056, -0.008, +0.041, +0.080, +0.122, +0.175, +0.217, +0.266, +0.317, +0.368, +0.413, +0.453, +0.517, +0.563, +0.598, +0.632, +0.678, +0.726, +0.762, +0.822, +0.865, +0.921, +0.963, +1.011, +1.069, +1.110, +1.162, +1.211, +1.269, +1.311, +1.372, +1.436, +1.482, +1.530, +1.582, +1.623, +1.683, +1.740, +1.804, +1.863, +1.925, +1.988, +2.048, +2.129, +2.191, +2.261, +2.327, +2.405, +2.477, +2.576, +2.681, +2.763, +2.895, +3.038, +3.196, +3.373, +3.540, +3.743, +3.977, +4.433, +4.941, +5.694, +6.047, +6.451, +6.716, +6.741, +6.741, +6.741, +6.741},  +0.440,  +0.413,   1.734},
	{"DC6-6x2Bytes-1", 81920, 4096, 0, { -5.270, -5.270, -5.270, -5.270, -5.169, -4.931, -4.806, -4.327, -3.862, -3.473, -2.971, -2.705, -2.511, -2.359, -2.221, -2.041, -1.937, -1.858, -1.775, -1.655, -1.571, -1.506, -1.430, -1.355, -1.280, -1.217, -1.153, -1.082, -1.024, -0.958, -0.912, -0.846, -0.808, -0.760, -0.701, -0.641, -0.596, -0.543, -0.490, -0.456, -0.410, -0.363, -0.311, -0.262, -0.216, -0.176, -0.139, -0.093, -0.052, +0.001, +0.045, +0.094, +0.134, +0.177, +0.220, +0.264, +0.315, +0.359, +0.414, +0.451, +0.489, +0.525, +0.571, +0.624, +0.676, +0.721, +0.786, +0.825, +0.873, +0.913, +0.954, +0.996, +1.042, +1.095, +1.142, +1.190, +1.242, +1.287, +1.346, +1.380, +1.438, +1.487, +1.538, +1.600, +1.658, +1.712, +1.776, +1.858, +1.917, +1.978, +2.036, +2.103, +2.161, +2.239, +2.327, +2.412, +2.521, +2.611, +2.697, +2.814, +2.948, +3.103, +3.234, +3.398, +3.554, +3.809, +4.110, +4.646, +5.161, +5.537, +6.157, +8.131, +8.462, +8.608, +8.608, +8.608, +8.608},  +0.448,  +0.414,   1.744},
	{"DC6-6x2Bytes-1", 98304, 4096, 0, { -5.213, -5.213, -5.213, -5.213, -5.133, -4.914, -4.369, -4.170, -3.721, -3.462, -2.974, -2.716, -2.496, -2.322, -2.193, -2.061, -1.977, -1.868, -1.765, -1.685, -1.595, -1.527, -1.454, -1.368, -1.298, -1.236, -1.142, -1.080, -1.014, -0.942, -0.886, -0.831, -0.778, -0.708, -0.648, -0.606, -0.564, -0.512, -0.463, -0.416, -0.346, -0.307, -0.266, -0.236, -0.201, -0.161, -0.119, -0.081, -0.032, +0.008, +0.053, +0.099, +0.150, +0.203, +0.252, +0.306, +0.354, +0.395, +0.436, +0.492, +0.530, +0.576, +0.611, +0.653, +0.701, +0.743, +0.789, +0.842, +0.889, +0.947, +1.001, +1.039, +1.081, +1.123, +1.170, +1.214, +1.263, +1.329, +1.375, +1.416, +1.467, +1.530, +1.589, +1.640, +1.690, +1.736, +1.789, +1.857, +1.913, +1.967, +2.037, +2.109, +2.185, +2.262, +2.355, +2.436, +2.511, +2.585, +2.664, +2.747, +2.833, +2.956, +3.114, +3.306, +3.479, +3.674, +3.899, +4.423, +4.919, +5.497, +6.086, +7.572, +8.565, +8.627, +8.627, +8.627, +8.627},  +0.454,  +0.436,   1.718},
	{"DC6-6x2Bytes-1",114688, 4096, 0, { -5.785, -5.785, -5.785, -5.785, -5.604, -4.997, -4.626, -4.387, -3.647, -3.311, -2.967, -2.748, -2.543, -2.332, -2.170, -2.075, -1.968, -1.842, -1.740, -1.638, -1.548, -1.464, -1.397, -1.329, -1.259, -1.192, -1.132, -1.081, -1.014, -0.950, -0.874, -0.818, -0.778, -0.729, -0.678, -0.613, -0.564, -0.521, -0.476, -0.419, -0.363, -0.325, -0.283, -0.233, -0.186, -0.137, -0.079, -0.039, +0.015, +0.049, +0.082, +0.134, +0.176, +0.227, +0.270, +0.318, +0.369, +0.419, +0.469, +0.520, +0.561, +0.613, +0.663, +0.706, +0.743, +0.781, +0.818, +0.867, +0.907, +0.953, +1.003, +1.051, +1.087, +1.140, +1.183, +1.242, +1.278, +1.331, +1.382, +1.431, +1.479, +1.543, +1.598, +1.644, +1.689, +1.762, +1.803, +1.866, +1.940, +1.999, +2.076, +2.128, +2.191, +2.277, +2.359, +2.428, +2.518, +2.602, +2.714, +2.794, +2.894, +2.989, +3.138, +3.294, +3.455, +3.705, +3.969, +4.461, +4.960, +5.578, +6.535, +7.353, +7.562, +7.652, +7.652, +7.652, +7.652},  +0.471,  +0.469,   1.725},
	{"DC6-6x2Bytes-1",131072, 4096, 0, { -5.328, -5.328, -5.328, -5.328, -5.189, -4.853, -4.735, -4.385, -3.775, -3.365, -2.933, -2.703, -2.491, -2.284, -2.137, -2.009, -1.906, -1.812, -1.712, -1.631, -1.545, -1.470, -1.385, -1.319, -1.250, -1.168, -1.093, -1.020, -0.966, -0.901, -0.840, -0.792, -0.730, -0.680, -0.617, -0.582, -0.533, -0.491, -0.438, -0.376, -0.335, -0.284, -0.242, -0.199, -0.162, -0.115, -0.072, -0.031, +0.021, +0.076, +0.119, +0.153, +0.197, +0.247, +0.292, +0.333, +0.380, +0.422, +0.456, +0.483, +0.531, +0.571, +0.605, +0.660, +0.688, +0.729, +0.781, +0.825, +0.863, +0.899, +0.930, +0.970, +1.013, +1.072, +1.137, +1.179, +1.222, +1.267, +1.327, +1.375, +1.432, +1.487, +1.536, +1.597, +1.649, +1.704, +1.780, +1.832, +1.900, +1.976, +2.046, +2.115, +2.185, +2.256, +2.336, +2.433, +2.509, +2.605, +2.707, +2.815, +2.932, +3.050, +3.180, +3.327, +3.522, +3.678, +4.042, +4.586, +4.924, +5.651, +6.018, +6.202, +6.746, +6.975, +6.975, +6.975, +6.975},  +0.471,  +0.456,   1.707},
	{"DC6-6x2Bytes-1",163840, 4096, 0, { -5.299, -5.299, -5.299, -5.299, -5.175, -4.761, -4.539, -4.203, -3.762, -3.404, -2.990, -2.665, -2.460, -2.291, -2.146, -2.022, -1.897, -1.790, -1.691, -1.587, -1.506, -1.427, -1.356, -1.278, -1.214, -1.141, -1.082, -1.030, -0.971, -0.904, -0.839, -0.787, -0.740, -0.686, -0.624, -0.573, -0.519, -0.472, -0.424, -0.360, -0.298, -0.258, -0.194, -0.148, -0.103, -0.041, +0.009, +0.049, +0.097, +0.130, +0.180, +0.222, +0.255, +0.304, +0.343, +0.389, +0.435, +0.476, +0.508, +0.548, +0.583, +0.622, +0.664, +0.712, +0.754, +0.802, +0.839, +0.873, +0.912, +0.964, +1.005, +1.053, +1.091, +1.137, +1.184, +1.225, +1.268, +1.316, +1.369, +1.417, +1.467, +1.513, +1.555, +1.613, +1.674, +1.741, +1.799, +1.840, +1.894, +1.971, +2.032, +2.103, +2.149, +2.230, +2.309, +2.389, +2.468, +2.549, +2.655, +2.771, +2.926, +3.062, +3.203, +3.345, +3.529, +3.796, +4.140, +4.591, +4.905, +5.142, +5.516, +5.979, +6.176, +6.246, +6.246, +6.246, +6.246},  +0.497,  +0.508,   1.702},
	{"DC6-6x2Bytes-1",196608, 4096, 0, { -4.796, -4.796, -4.796, -4.796, -4.744, -4.612, -4.566, -4.420, -3.871, -3.462, -3.068, -2.805, -2.589, -2.418, -2.232, -2.097, -1.972, -1.879, -1.776, -1.689, -1.593, -1.532, -1.443, -1.345, -1.266, -1.199, -1.118, -1.054, -0.996, -0.924, -0.843, -0.770, -0.708, -0.662, -0.614, -0.555, -0.508, -0.452, -0.419, -0.383, -0.334, -0.287, -0.240, -0.187, -0.134, -0.094, -0.044, +0.001, +0.045, +0.093, +0.138, +0.179, +0.216, +0.258, +0.314, +0.362, +0.395, +0.435, +0.479, +0.529, +0.567, +0.595, +0.630, +0.681, +0.720, +0.757, +0.796, +0.844, +0.888, +0.932, +0.976, +1.030, +1.077, +1.125, +1.164, +1.210, +1.269, +1.307, +1.353, +1.407, +1.456, +1.507, +1.553, +1.607, +1.655, +1.719, +1.778, +1.837, +1.901, +1.972, +2.017, +2.081, +2.171, +2.237, +2.320, +2.420, +2.494, +2.576, +2.674, +2.754, +2.846, +2.968, +3.084, +3.223, +3.423, +3.658, +3.970, +4.502, +4.897, +5.253, +5.790, +6.186, +6.581, +6.728, +6.728, +6.728, +6.728},  +0.459,  +0.479,   1.713},
	{"DC6-6x2Bytes-1",229376, 4096, 0, { -5.031, -5.031, -5.031, -5.031, -5.002, -4.857, -4.768, -4.460, -4.125, -3.571, -3.006, -2.676, -2.474, -2.300, -2.190, -2.057, -1.903, -1.797, -1.694, -1.622, -1.543, -1.448, -1.377, -1.321, -1.230, -1.165, -1.097, -1.034, -0.963, -0.903, -0.849, -0.788, -0.745, -0.689, -0.641, -0.583, -0.544, -0.490, -0.435, -0.370, -0.311, -0.260, -0.217, -0.169, -0.116, -0.076, -0.029, +0.004, +0.047, +0.095, +0.140, +0.181, +0.231, +0.280, +0.329, +0.371, +0.411, +0.439, +0.488, +0.525, +0.569, +0.623, +0.671, +0.717, +0.758, +0.803, +0.841, +0.901, +0.954, +1.000, +1.045, +1.104, +1.154, +1.206, +1.262, +1.300, +1.336, +1.376, +1.419, +1.475, +1.521, +1.572, +1.627, +1.673, +1.740, +1.803, +1.859, +1.913, +1.961, +2.017, +2.084, +2.149, +2.230, +2.292, +2.369, +2.452, +2.533, +2.619, +2.703, +2.822, +2.913, +3.035, +3.165, +3.312, +3.566, +3.779, +4.131, +4.633, +4.958, +5.314, +5.639, +5.831, +6.685, +7.076, +7.076, +7.076, +7.076},  +0.503,  +0.488,   1.732},
	{"DC6-6x2Bytes-1",262144, 4096, 0, { -5.659, -5.659, -5.659, -5.659, -5.632, -5.469, -5.032, -4.464, -4.058, -3.444, -2.905, -2.627, -2.447, -2.325, -2.149, -2.027, -1.905, -1.814, -1.710, -1.614, -1.538, -1.469, -1.387, -1.319, -1.256, -1.205, -1.125, -1.044, -0.989, -0.929, -0.856, -0.814, -0.761, -0.716, -0.666, -0.625, -0.563, -0.504, -0.451, -0.404, -0.355, -0.285, -0.250, -0.202, -0.166, -0.121, -0.072, -0.024, +0.029, +0.091, +0.144, +0.187, +0.241, +0.295, +0.350, +0.391, +0.432, +0.474, +0.507, +0.546, +0.607, +0.650, +0.694, +0.740, +0.780, +0.823, +0.865, +0.905, +0.947, +1.003, +1.048, +1.082, +1.120, +1.158, +1.188, +1.227, +1.273, +1.321, +1.373, +1.433, +1.485, +1.543, +1.575, +1.626, +1.698, +1.750, +1.803, +1.853, +1.921, +1.980, +2.034, +2.094, +2.159, +2.232, +2.291, +2.376, +2.478, +2.565, +2.664, +2.783, +2.885, +3.006, +3.122, +3.256, +3.468, +3.716, +4.102, +4.543, +5.173, +5.583, +5.730, +5.980, +6.699, +7.024, +7.024, +7.024, +7.024},  +0.484,  +0.507,   1.718},
	{"DC6-6x2Bytes-1",327680, 1024, 0, { -5.147, -5.147, -5.147, -5.147, -5.147, -5.146, -5.099, -4.912, -3.822, -3.407, -2.849, -2.693, -2.453, -2.234, -2.103, -1.956, -1.859, -1.733, -1.638, -1.566, -1.473, -1.407, -1.313, -1.244, -1.181, -1.125, -1.069, -1.005, -0.964, -0.893, -0.803, -0.757, -0.661, -0.599, -0.528, -0.464, -0.393, -0.346, -0.291, -0.193, -0.157, -0.090, -0.054, -0.026, +0.014, +0.053, +0.067, +0.094, +0.150, +0.186, +0.226, +0.267, +0.293, +0.336, +0.385, +0.437, +0.485, +0.518, +0.545, +0.569, +0.620, +0.661, +0.745, +0.799, +0.812, +0.847, +0.893, +0.915, +0.948, +0.996, +1.036, +1.077, +1.100, +1.137, +1.180, +1.227, +1.266, +1.307, +1.385, +1.485, +1.512, +1.553, +1.594, +1.645, +1.667, +1.700, +1.759, +1.814, +1.909, +1.969, +2.034, +2.130, +2.163, +2.222, +2.273, +2.372, +2.497, +2.566, +2.649, +2.757, +2.838, +3.006, +3.202, +3.413, +3.593, +3.798, +4.083, +4.651, +5.160, +6.052, +6.313, +6.576, +6.582, +6.582, +6.582, +6.582, +6.582}, +0.536, +0.545, 1.700},
	{"DC6-6x2Bytes-1",393216, 1024, 0, { -4.939, -4.939, -4.939, -4.939, -4.939, -4.931, -4.584, -4.099, -3.684, -3.420, -2.981, -2.605, -2.387, -2.127, -1.986, -1.856, -1.754, -1.679, -1.611, -1.526, -1.454, -1.389, -1.309, -1.240, -1.160, -1.079, -1.013, -0.956, -0.912, -0.854, -0.791, -0.746, -0.675, -0.612, -0.547, -0.497, -0.402, -0.362, -0.328, -0.290, -0.239, -0.171, -0.117, -0.084, -0.044, -0.002, +0.040, +0.099, +0.128, +0.171, +0.211, +0.249, +0.310, +0.355, +0.388, +0.423, +0.486, +0.544, +0.585, +0.611, +0.671, +0.706, +0.736, +0.781, +0.805, +0.840, +0.924, +0.950, +1.008, +1.051, +1.080, +1.138, +1.179, +1.213, +1.277, +1.339, +1.369, +1.409, +1.437, +1.478, +1.512, +1.544, +1.582, +1.636, +1.688, +1.761, +1.830, +1.891, +1.929, +1.980, +2.096, +2.163, +2.255, +2.305, +2.364, +2.450, +2.566, +2.626, +2.691, +2.822, +3.029, +3.207, +3.324, +3.510, +3.658, +3.857, +4.121, +4.467, +5.071, +5.758, +5.923, +6.057, +6.061, +6.061, +6.061, +6.061, +6.061}, +0.565, +0.585, 1.702},
	{"DC6-6x2Bytes-1",458752, 1024, 0, { -5.033, -5.033, -5.033, -5.033, -5.033, -5.031, -4.952, -4.705, -4.040, -3.362, -2.801, -2.639, -2.395, -2.183, -2.056, -1.986, -1.848, -1.785, -1.632, -1.507, -1.424, -1.335, -1.232, -1.163, -1.087, -1.033, -0.943, -0.896, -0.862, -0.816, -0.783, -0.703, -0.654, -0.612, -0.566, -0.520, -0.470, -0.398, -0.363, -0.319, -0.285, -0.221, -0.183, -0.136, -0.086, -0.039, +0.017, +0.048, +0.090, +0.125, +0.152, +0.235, +0.275, +0.306, +0.348, +0.388, +0.420, +0.460, +0.493, +0.530, +0.562, +0.594, +0.674, +0.721, +0.769, +0.795, +0.827, +0.889, +0.953, +0.980, +1.020, +1.062, +1.106, +1.146, +1.209, +1.237, +1.294, +1.322, +1.359, +1.404, +1.458, +1.513, +1.583, +1.629, +1.682, +1.738, +1.797, +1.832, +1.891, +1.942, +2.053, +2.097, +2.170, +2.246, +2.323, +2.379, +2.440, +2.527, +2.641, +2.794, +2.941, +3.062, +3.300, +3.464, +3.663, +3.838, +4.140, +4.776, +5.280, +5.490, +5.862, +6.105, +6.111, +6.111, +6.111, +6.111, +6.111}, +0.528, +0.493, 1.700},
	{"DC6-6x2Bytes-1",524288, 1024, 0, { -5.094, -5.094, -5.094, -5.094, -5.094, -5.086, -4.774, -4.310, -3.667, -3.445, -3.108, -2.807, -2.535, -2.387, -2.255, -2.121, -1.968, -1.777, -1.730, -1.591, -1.518, -1.408, -1.350, -1.300, -1.236, -1.186, -1.109, -1.025, -0.985, -0.914, -0.861, -0.792, -0.733, -0.669, -0.620, -0.565, -0.522, -0.450, -0.383, -0.338, -0.268, -0.213, -0.136, -0.069, -0.013, +0.040, +0.072, +0.129, +0.168, +0.216, +0.262, +0.289, +0.320, +0.367, +0.419, +0.456, +0.484, +0.515, +0.556, +0.595, +0.644, +0.664, +0.702, +0.737, +0.763, +0.839, +0.898, +0.978, +1.007, +1.049, +1.098, +1.151, +1.194, +1.241, +1.283, +1.325, +1.391, +1.435, +1.472, +1.509, +1.545, +1.600, +1.643, +1.717, +1.787, +1.835, +1.891, +1.937, +1.976, +2.024, +2.077, +2.150, +2.206, +2.300, +2.395, +2.499, +2.592, +2.688, +2.754, +2.828, +2.931, +3.068, +3.177, +3.338, +3.497, +3.736, +4.196, +4.557, +4.798, +5.691, +6.265, +6.419, +6.423, +6.423, +6.423, +6.423, +6.423}, +0.536, +0.556, 1.734},
	{"DC6-6x2Bytes-1",655360, 1024, 0, { -4.869, -4.869, -4.869, -4.869, -4.869, -4.867, -4.806, -4.449, -3.755, -3.553, -2.895, -2.630, -2.508, -2.230, -2.120, -1.989, -1.864, -1.782, -1.665, -1.618, -1.495, -1.415, -1.336, -1.269, -1.204, -1.117, -1.048, -1.001, -0.927, -0.867, -0.821, -0.757, -0.712, -0.676, -0.642, -0.553, -0.507, -0.438, -0.377, -0.346, -0.289, -0.248, -0.185, -0.119, -0.092, -0.053, -0.014, +0.036, +0.092, +0.130, +0.173, +0.226, +0.268, +0.293, +0.338, +0.382, +0.412, +0.464, +0.490, +0.545, +0.588, +0.621, +0.647, +0.685, +0.733, +0.793, +0.836, +0.882, +0.928, +0.984, +1.021, +1.076, +1.141, +1.197, +1.244, +1.282, +1.350, +1.392, +1.439, +1.471, +1.527, +1.581, +1.627, +1.668, +1.730, +1.780, +1.830, +1.880, +1.921, +1.980, +2.058, +2.129, +2.170, +2.233, +2.287, +2.359, +2.413, +2.512, +2.579, +2.669, +2.806, +2.898, +3.056, +3.212, +3.463, +3.789, +4.003, +4.314, +4.733, +4.935, +5.433, +5.869, +5.879, +5.879, +5.879, +5.879, +5.879}, +0.495, +0.490, 1.679},
	{"DC6-6x2Bytes-1",786432, 1024, 0, { -4.804, -4.804, -4.804, -4.804, -4.804, -4.799, -4.548, -4.299, -3.791, -3.429, -3.135, -2.900, -2.480, -2.276, -2.094, -1.992, -1.863, -1.733, -1.648, -1.570, -1.514, -1.469, -1.363, -1.251, -1.108, -1.013, -0.985, -0.896, -0.853, -0.824, -0.767, -0.699, -0.659, -0.630, -0.564, -0.526, -0.503, -0.482, -0.446, -0.420, -0.382, -0.328, -0.290, -0.239, -0.200, -0.144, -0.091, -0.023, +0.021, +0.073, +0.119, +0.139, +0.181, +0.200, +0.237, +0.282, +0.316, +0.352, +0.424, +0.457, +0.520, +0.566, +0.627, +0.655, +0.712, +0.755, +0.795, +0.842, +0.869, +0.890, +0.947, +0.985, +1.055, +1.079, +1.137, +1.185, +1.219, +1.244, +1.297, +1.329, +1.351, +1.394, +1.436, +1.500, +1.546, +1.604, +1.680, +1.769, +1.822, +1.877, +1.946, +1.998, +2.086, +2.191, +2.267, +2.349, +2.448, +2.575, +2.657, +2.705, +2.907, +3.012, +3.134, +3.300, +3.534, +3.743, +3.892, +4.225, +4.539, +4.650, +4.754, +4.839, +4.841, +4.841, +4.841, +4.841, +4.841}, +0.449, +0.424, 1.664},
	{"DC6-6x2Bytes-1",917504, 1024, 0, { -5.133, -5.133, -5.133, -5.133, -5.133, -5.128, -4.917, -4.691, -4.328, -3.733, -3.087, -2.634, -2.361, -2.204, -2.098, -1.985, -1.824, -1.765, -1.662, -1.572, -1.496, -1.425, -1.345, -1.287, -1.226, -1.171, -1.099, -1.009, -0.957, -0.909, -0.861, -0.796, -0.718, -0.667, -0.638, -0.578, -0.526, -0.475, -0.422, -0.358, -0.304, -0.278, -0.247, -0.226, -0.189, -0.164, -0.143, -0.122, -0.085, -0.049, +0.009, +0.063, +0.114, +0.152, +0.212, +0.298, +0.324, +0.357, +0.401, +0.436, +0.479, +0.504, +0.559, +0.590, +0.616, +0.647, +0.675, +0.783, +0.835, +0.874, +0.914, +0.937, +0.980, +1.011, +1.072, +1.114, +1.151, +1.185, +1.257, +1.292, +1.331, +1.384, +1.442, +1.491, +1.547, +1.586, +1.637, +1.714, +1.765, +1.806, +1.874, +1.995, +2.044, +2.089, +2.192, +2.283, +2.383, +2.464, +2.573, +2.676, +2.769, +2.951, +3.077, +3.336, +3.585, +3.850, +3.969, +4.126, +4.423, +5.028, +5.193, +5.237, +5.238, +5.238, +5.238, +5.238, +5.238}, +0.413, +0.401, 1.666},
	{"DC6-6x2Bytes-1",1048576, 1024, 0, { -4.897, -4.897, -4.897, -4.897, -4.897, -4.894, -4.745, -4.585, -3.903, -3.588, -2.992, -2.746, -2.560, -2.339, -2.115, -1.988, -1.900, -1.745, -1.636, -1.566, -1.449, -1.396, -1.361, -1.309, -1.229, -1.174, -1.100, -1.040, -0.994, -0.965, -0.889, -0.806, -0.748, -0.683, -0.627, -0.605, -0.551, -0.502, -0.426, -0.377, -0.321, -0.266, -0.221, -0.168, -0.090, -0.025, +0.026, +0.050, +0.083, +0.121, +0.160, +0.181, +0.222, +0.246, +0.290, +0.340, +0.404, +0.456, +0.474, +0.505, +0.526, +0.559, +0.594, +0.624, +0.690, +0.720, +0.765, +0.808, +0.846, +0.880, +0.932, +0.980, +1.024, +1.051, +1.077, +1.101, +1.154, +1.230, +1.292, +1.349, +1.386, +1.455, +1.490, +1.545, +1.623, +1.663, +1.719, +1.829, +1.868, +1.932, +2.000, +2.062, +2.143, +2.257, +2.327, +2.415, +2.495, +2.544, +2.634, +2.735, +2.806, +2.940, +3.125, +3.252, +3.456, +3.742, +3.908, +4.169, +4.438, +5.119, +5.432, +5.599, +5.603, +5.603, +5.603, +5.603, +5.603}, +0.452, +0.474, 1.678},
	{"DC6-6x2Bytes-1",1310720, 1024, 0, { -4.540, -4.540, -4.540, -4.540, -4.540, -4.539, -4.505, -4.336, -4.033, -3.650, -3.055, -2.822, -2.616, -2.384, -2.199, -2.108, -1.947, -1.832, -1.676, -1.627, -1.538, -1.456, -1.332, -1.257, -1.188, -1.155, -1.111, -1.051, -0.968, -0.908, -0.843, -0.792, -0.747, -0.687, -0.643, -0.575, -0.537, -0.487, -0.431, -0.376, -0.313, -0.267, -0.204, -0.167, -0.141, -0.091, -0.044, +0.021, +0.098, +0.154, +0.198, +0.238, +0.299, +0.321, +0.339, +0.417, +0.448, +0.482, +0.526, +0.560, +0.597, +0.622, +0.648, +0.684, +0.705, +0.768, +0.814, +0.860, +0.899, +0.961, +0.995, +1.045, +1.113, +1.163, +1.208, +1.256, +1.295, +1.354, +1.389, +1.417, +1.467, +1.514, +1.566, +1.643, +1.722, +1.786, +1.847, +1.940, +2.006, +2.059, +2.129, +2.175, +2.263, +2.306, +2.376, +2.457, +2.566, +2.628, +2.740, +2.842, +3.019, +3.084, +3.180, +3.297, +3.450, +3.649, +3.843, +4.235, +4.524, +5.082, +5.492, +5.676, +5.680, +5.680, +5.680, +5.680, +5.680}, +0.488, +0.526, 1.717},
	{"DC6-6x2Bytes-1",1572864, 1024, 0, { -4.694, -4.694, -4.694, -4.694, -4.694, -4.693, -4.656, -4.389, -4.136, -3.484, -3.187, -2.745, -2.439, -2.336, -2.216, -2.105, -1.875, -1.765, -1.681, -1.648, -1.564, -1.457, -1.383, -1.292, -1.206, -1.163, -1.109, -1.061, -0.993, -0.949, -0.913, -0.882, -0.810, -0.748, -0.669, -0.625, -0.588, -0.526, -0.472, -0.425, -0.387, -0.318, -0.256, -0.221, -0.173, -0.128, -0.072, -0.034, +0.010, +0.048, +0.082, +0.118, +0.139, +0.199, +0.266, +0.312, +0.329, +0.389, +0.453, +0.499, +0.534, +0.577, +0.615, +0.679, +0.710, +0.759, +0.821, +0.888, +0.936, +0.974, +1.009, +1.024, +1.073, +1.109, +1.157, +1.185, +1.233, +1.266, +1.299, +1.356, +1.399, +1.447, +1.497, +1.533, +1.585, +1.668, +1.722, +1.769, +1.846, +1.906, +1.972, +2.069, +2.112, +2.181, +2.261, +2.347, +2.403, +2.493, +2.609, +2.751, +2.886, +3.026, +3.141, +3.241, +3.341, +3.539, +3.853, +4.312, +4.995, +6.099, +6.375, +6.427, +6.428, +6.428, +6.428, +6.428, +6.428}, +0.439, +0.453, 1.700},
	{"DC6-6x2Bytes-1",1835008, 1024, 0, { -5.149, -5.149, -5.149, -5.149, -5.149, -5.146, -5.038, -4.793, -4.127, -3.360, -2.808, -2.482, -2.347, -2.167, -2.081, -1.919, -1.832, -1.755, -1.663, -1.558, -1.484, -1.404, -1.360, -1.233, -1.206, -1.155, -1.092, -1.038, -1.012, -0.977, -0.918, -0.853, -0.764, -0.684, -0.630, -0.593, -0.539, -0.480, -0.434, -0.384, -0.342, -0.296, -0.246, -0.210, -0.171, -0.135, -0.063, -0.012, +0.046, +0.064, +0.110, +0.159, +0.223, +0.294, +0.321, +0.393, +0.416, +0.458, +0.502, +0.525, +0.566, +0.614, +0.646, +0.693, +0.742, +0.777, +0.841, +0.880, +0.919, +0.956, +1.015, +1.042, +1.089, +1.132, +1.160, +1.213, +1.247, +1.273, +1.312, +1.358, +1.413, +1.473, +1.533, +1.607, +1.663, +1.725, +1.782, +1.852, +1.936, +1.990, +2.034, +2.092, +2.136, +2.176, +2.276, +2.342, +2.423, +2.535, +2.600, +2.699, +2.796, +2.940, +3.073, +3.232, +3.427, +3.736, +4.093, +4.493, +5.475, +6.203, +7.000, +7.516, +7.528, +7.528, +7.528, +7.528, +7.528}, +0.482, +0.502, 1.701},
	{"DC6-6x2Bytes-1",2097152, 1024, 0, { -5.510, -5.510, -5.510, -5.510, -5.510, -5.504, -5.255, -4.860, -3.955, -3.383, -3.055, -2.693, -2.504, -2.248, -2.123, -1.979, -1.886, -1.802, -1.681, -1.591, -1.483, -1.406, -1.321, -1.242, -1.164, -1.118, -1.046, -0.986, -0.923, -0.888, -0.812, -0.749, -0.703, -0.669, -0.642, -0.602, -0.535, -0.505, -0.460, -0.397, -0.360, -0.297, -0.268, -0.223, -0.176, -0.130, -0.080, -0.032, +0.014, +0.045, +0.107, +0.146, +0.180, +0.222, +0.285, +0.325, +0.375, +0.438, +0.476, +0.512, +0.561, +0.585, +0.670, +0.708, +0.743, +0.767, +0.795, +0.831, +0.851, +0.882, +0.916, +0.969, +1.010, +1.058, +1.091, +1.140, +1.196, +1.225, +1.266, +1.338, +1.379, +1.420, +1.472, +1.519, +1.566, +1.617, +1.657, +1.748, +1.798, +1.852, +1.923, +1.974, +2.054, +2.124, +2.203, +2.300, +2.376, +2.416, +2.570, +2.731, +2.791, +2.893, +3.038, +3.307, +3.627, +3.820, +4.078, +4.766, +5.362, +6.070, +6.967, +7.792, +7.811, +7.811, +7.811, +7.811, +7.811}, +0.453, +0.476, 1.702},
	{"DC6-6x2Bytes-1",2621440, 1024, 0, { -5.029, -5.029, -5.029, -5.029, -5.029, -5.024, -4.823, -4.298, -3.706, -3.379, -3.020, -2.716, -2.452, -2.296, -2.114, -1.987, -1.908, -1.807, -1.688, -1.599, -1.490, -1.438, -1.359, -1.288, -1.245, -1.172, -1.133, -1.052, -0.964, -0.910, -0.839, -0.807, -0.738, -0.685, -0.587, -0.525, -0.501, -0.449, -0.420, -0.337, -0.290, -0.252, -0.223, -0.188, -0.146, -0.113, -0.066, -0.020, +0.021, +0.060, +0.088, +0.119, +0.178, +0.217, +0.275, +0.318, +0.346, +0.392, +0.422, +0.463, +0.511, +0.576, +0.611, +0.661, +0.726, +0.773, +0.789, +0.814, +0.863, +0.925, +0.964, +0.999, +1.024, +1.055, +1.121, +1.165, +1.219, +1.269, +1.308, +1.356, +1.425, +1.500, +1.524, +1.550, +1.589, +1.654, +1.728, +1.771, +1.828, +1.894, +1.954, +2.021, +2.089, +2.154, +2.247, +2.348, +2.463, +2.531, +2.605, +2.694, +2.784, +2.985, +3.182, +3.447, +3.708, +4.008, +4.177, +4.697, +5.319, +5.931, +6.115, +6.304, +6.309, +6.309, +6.309, +6.309, +6.309}, +0.469, +0.422, 1.712},
	{"DC6-6x2Bytes-1",3145728, 1024, 0, { -4.543, -4.543, -4.543, -4.543, -4.543, -4.539, -4.343, -4.070, -3.558, -3.325, -2.810, -2.551, -2.301, -2.180, -2.021, -1.888, -1.797, -1.677, -1.600, -1.526, -1.464, -1.351, -1.273, -1.205, -1.087, -0.999, -0.923, -0.863, -0.830, -0.757, -0.724, -0.698, -0.645, -0.596, -0.524, -0.467, -0.433, -0.393, -0.319, -0.288, -0.260, -0.199, -0.171, -0.120, -0.072, -0.037, +0.014, +0.044, +0.067, +0.107, +0.143, +0.219, +0.258, +0.306, +0.374, +0.408, +0.455, +0.504, +0.534, +0.587, +0.640, +0.663, +0.693, +0.745, +0.784, +0.829, +0.868, +0.903, +0.959, +0.983, +1.010, +1.044, +1.085, +1.147, +1.168, +1.232, +1.266, +1.336, +1.403, +1.452, +1.479, +1.531, +1.595, +1.653, +1.717, +1.780, +1.819, +1.861, +1.886, +1.972, +2.043, +2.111, +2.190, +2.247, +2.335, +2.399, +2.533, +2.632, +2.793, +2.899, +3.011, +3.141, +3.280, +3.388, +3.585, +3.800, +4.133, +4.985, +5.441, +5.907, +6.696, +7.385, +7.401, +7.401, +7.401, +7.401, +7.401}, +0.557, +0.534, 1.694},
	{"DC6-6x2Bytes-1",3670016, 1024, 0, { -3.756, -3.756, -3.756, -3.756, -3.756, -3.756, -3.744, -3.672, -3.332, -3.142, -2.848, -2.558, -2.371, -2.202, -2.056, -1.964, -1.827, -1.704, -1.604, -1.519, -1.454, -1.403, -1.323, -1.268, -1.184, -1.098, -1.022, -0.960, -0.883, -0.843, -0.783, -0.696, -0.638, -0.600, -0.525, -0.470, -0.432, -0.374, -0.323, -0.276, -0.232, -0.202, -0.170, -0.123, -0.093, -0.056, +0.009, +0.049, +0.085, +0.142, +0.165, +0.201, +0.244, +0.297, +0.354, +0.417, +0.454, +0.492, +0.551, +0.593, +0.635, +0.670, +0.725, +0.761, +0.794, +0.855, +0.891, +0.918, +0.965, +1.008, +1.039, +1.086, +1.128, +1.155, +1.185, +1.248, +1.292, +1.344, +1.378, +1.427, +1.447, +1.518, +1.585, +1.628, +1.686, +1.729, +1.769, +1.808, +1.878, +1.964, +2.034, +2.097, +2.193, +2.233, +2.324, +2.406, +2.493, +2.562, +2.633, +2.696, +2.825, +2.938, +3.099, +3.237, +3.505, +3.719, +4.014, +4.424, +5.407, +6.169, +6.700, +6.838, +6.842, +6.842, +6.842, +6.842, +6.842}, +0.532, +0.551, 1.668},

	//{"DC6-5x4Bytes-1",1,16777216, 0,{ -1.057, -1.012, -0.967, -0.922, -0.876, -0.831, -0.784, -0.738, -0.691, -0.644, -0.597, -0.549, -0.501, -0.452, -0.403, -0.353, -0.302, -0.251, -0.199, -0.147, -0.094, -0.039, +0.016, +0.072, +0.129, +0.187, +0.246, +0.306, +0.367, +0.430, +0.494, +0.560, +0.626, +0.695, +0.766, +0.839, +0.913, +0.990, +1.070, +1.152, +1.237, +1.326, +1.417, +1.513, +1.612, +1.717, +1.826, +1.941, +2.062, +2.191, +2.327, +2.474, +2.632, +2.801, +2.988, +3.192, +3.418, +3.675, +3.971, +4.317, +4.740, +5.285, +6.054, +7.364, +8.679,+10.419,+11.745,+13.084,+14.836,+16.121,+17.497,+19.226,+20.542,   21,      22,     23,    24,     25,     26,     27,    28,     29,     30,      31,    32,      33,    34,      35,    36,    37,      38,      39,     40,     41,    42,     43,     44,      45,     46,    47,      48,    49,     50,      51,     52,    53,    54,     55,      56,     57,     58,     59,      60,     61,    62,      63,     64  }, -0.4026, +0.0539, 2.2366},
	{"DC6-5x4Bytes-1",     1, 5632, 0, { -2.389, -2.389, -2.389, -2.387, -2.370, -2.334, -2.312, -2.258, -2.190, -2.080, -1.993, -1.919, -1.856, -1.810, -1.746, -1.688, -1.635, -1.592, -1.558, -1.528, -1.469, -1.427, -1.391, -1.342, -1.312, -1.277, -1.243, -1.206, -1.166, -1.128, -1.092, -1.063, -1.019, -0.989, -0.955, -0.919, -0.885, -0.847, -0.809, -0.779, -0.739, -0.709, -0.668, -0.629, -0.597, -0.554, -0.524, -0.485, -0.454, -0.416, -0.374, -0.337, -0.299, -0.259, -0.223, -0.188, -0.147, -0.106, -0.066, -0.033, +0.004, +0.048, +0.091, +0.134, +0.176, +0.215, +0.253, +0.305, +0.354, +0.399, +0.443, +0.485, +0.542, +0.597, +0.644, +0.696, +0.744, +0.792, +0.837, +0.890, +0.954, +1.016, +1.084, +1.145, +1.212, +1.276, +1.348, +1.421, +1.483, +1.576, +1.682, +1.774, +1.864, +1.983, +2.081, +2.219, +2.345, +2.494, +2.630, +2.750, +2.899, +3.082, +3.313, +3.537, +3.893, +4.197, +4.806, +5.645, +6.888, +7.979, +9.212,+10.507,+12.067,+12.828,+12.913,+12.913,+12.913},  +0.281,  -0.066,   1.723},
	{"DC6-5x4Bytes-1",     2, 5632, 0, { -3.062, -3.062, -3.062, -3.060, -3.046, -3.013, -2.911, -2.828, -2.691, -2.561, -2.369, -2.263, -2.157, -2.054, -1.998, -1.927, -1.866, -1.787, -1.731, -1.670, -1.623, -1.568, -1.519, -1.478, -1.430, -1.381, -1.337, -1.306, -1.261, -1.217, -1.176, -1.136, -1.101, -1.064, -1.031, -0.993, -0.947, -0.903, -0.871, -0.835, -0.797, -0.760, -0.722, -0.679, -0.639, -0.595, -0.554, -0.500, -0.471, -0.431, -0.399, -0.362, -0.323, -0.289, -0.252, -0.221, -0.166, -0.122, -0.078, -0.042, +0.004, +0.042, +0.081, +0.116, +0.158, +0.200, +0.256, +0.285, +0.332, +0.380, +0.424, +0.467, +0.526, +0.584, +0.627, +0.672, +0.723, +0.784, +0.835, +0.886, +0.956, +1.006, +1.076, +1.132, +1.201, +1.276, +1.352, +1.445, +1.519, +1.589, +1.659, +1.756, +1.847, +1.950, +2.064, +2.153, +2.256, +2.385, +2.498, +2.690, +2.888, +3.056, +3.240, +3.509, +3.803, +4.172, +4.673, +5.726, +6.801, +8.098, +8.825, +9.806,+10.579,+10.815,+10.841,+10.841,+10.841},  +0.210,  -0.078,   1.759},
	{"DC6-5x4Bytes-1",     3, 5632, 0, { -3.663, -3.663, -3.663, -3.660, -3.640, -3.370, -3.263, -3.155, -2.932, -2.755, -2.541, -2.405, -2.304, -2.189, -2.086, -2.002, -1.946, -1.871, -1.809, -1.749, -1.689, -1.625, -1.571, -1.516, -1.455, -1.415, -1.365, -1.319, -1.279, -1.236, -1.196, -1.147, -1.105, -1.057, -1.022, -0.988, -0.949, -0.909, -0.865, -0.818, -0.778, -0.733, -0.692, -0.657, -0.619, -0.581, -0.546, -0.504, -0.470, -0.428, -0.383, -0.344, -0.308, -0.267, -0.232, -0.203, -0.151, -0.098, -0.055, -0.025, +0.014, +0.056, +0.099, +0.146, +0.190, +0.226, +0.268, +0.313, +0.346, +0.396, +0.451, +0.493, +0.542, +0.596, +0.651, +0.703, +0.752, +0.804, +0.860, +0.917, +0.970, +1.031, +1.087, +1.157, +1.234, +1.299, +1.364, +1.446, +1.523, +1.589, +1.663, +1.751, +1.852, +1.963, +2.036, +2.150, +2.244, +2.376, +2.497, +2.632, +2.789, +2.945, +3.164, +3.419, +3.694, +4.018, +4.549, +5.279, +6.142, +7.142, +8.188, +8.773, +9.186, +9.448, +9.478, +9.478, +9.478},  +0.184,  -0.055,   1.734},
	{"DC6-5x4Bytes-1",     4, 5632, 0, { -4.113, -4.113, -4.113, -4.109, -4.073, -3.718, -3.481, -3.359, -3.162, -2.856, -2.669, -2.505, -2.377, -2.259, -2.176, -2.084, -1.998, -1.918, -1.850, -1.771, -1.711, -1.653, -1.603, -1.550, -1.505, -1.453, -1.407, -1.348, -1.299, -1.255, -1.210, -1.159, -1.122, -1.085, -1.047, -0.999, -0.956, -0.904, -0.857, -0.818, -0.782, -0.737, -0.698, -0.653, -0.613, -0.575, -0.540, -0.503, -0.449, -0.407, -0.363, -0.322, -0.277, -0.237, -0.190, -0.148, -0.113, -0.081, -0.045, -0.010, +0.032, +0.082, +0.128, +0.173, +0.216, +0.264, +0.303, +0.354, +0.408, +0.451, +0.504, +0.557, +0.612, +0.666, +0.720, +0.780, +0.824, +0.880, +0.943, +0.991, +1.043, +1.087, +1.146, +1.196, +1.238, +1.291, +1.357, +1.410, +1.475, +1.546, +1.624, +1.701, +1.764, +1.860, +1.964, +2.070, +2.174, +2.318, +2.458, +2.568, +2.711, +2.894, +3.051, +3.247, +3.532, +3.831, +4.211, +4.952, +5.978, +6.746, +7.705, +7.929, +8.326, +8.708, +8.751, +8.751, +8.751},  +0.163,  -0.045,   1.709},
	{"DC6-5x4Bytes-1",     5, 5632, 0, { -4.434, -4.434, -4.434, -4.416, -4.257, -4.006, -3.760, -3.465, -3.233, -3.059, -2.716, -2.551, -2.413, -2.324, -2.228, -2.129, -2.026, -1.935, -1.866, -1.800, -1.745, -1.695, -1.637, -1.577, -1.509, -1.457, -1.414, -1.370, -1.322, -1.274, -1.227, -1.179, -1.125, -1.084, -1.034, -0.986, -0.937, -0.886, -0.850, -0.803, -0.758, -0.724, -0.688, -0.648, -0.599, -0.561, -0.510, -0.472, -0.423, -0.387, -0.339, -0.301, -0.261, -0.222, -0.178, -0.135, -0.101, -0.057, -0.012, +0.027, +0.071, +0.107, +0.150, +0.192, +0.238, +0.275, +0.313, +0.355, +0.395, +0.441, +0.477, +0.536, +0.591, +0.636, +0.681, +0.723, +0.764, +0.833, +0.874, +0.932, +0.988, +1.044, +1.093, +1.153, +1.213, +1.264, +1.341, +1.406, +1.476, +1.550, +1.633, +1.712, +1.791, +1.890, +1.995, +2.106, +2.199, +2.297, +2.427, +2.529, +2.681, +2.829, +2.995, +3.225, +3.495, +3.801, +4.219, +4.951, +5.619, +6.423, +6.708, +7.070, +7.612, +7.671, +7.677, +7.677, +7.677},  +0.149,  -0.012,   1.701},
	{"DC6-5x4Bytes-1",     6, 5632, 0, { -4.289, -4.289, -4.289, -4.275, -4.147, -3.814, -3.703, -3.577, -3.391, -3.035, -2.731, -2.559, -2.406, -2.266, -2.147, -2.068, -1.991, -1.921, -1.853, -1.783, -1.728, -1.678, -1.618, -1.558, -1.514, -1.466, -1.414, -1.356, -1.311, -1.257, -1.218, -1.165, -1.114, -1.057, -1.003, -0.968, -0.917, -0.881, -0.844, -0.798, -0.757, -0.720, -0.671, -0.631, -0.596, -0.545, -0.511, -0.469, -0.426, -0.396, -0.350, -0.312, -0.269, -0.223, -0.179, -0.138, -0.096, -0.061, -0.021, +0.017, +0.067, +0.118, +0.154, +0.196, +0.235, +0.275, +0.310, +0.367, +0.405, +0.451, +0.502, +0.552, +0.602, +0.654, +0.701, +0.747, +0.792, +0.850, +0.904, +0.961, +1.009, +1.066, +1.117, +1.177, +1.241, +1.303, +1.357, +1.423, +1.493, +1.563, +1.632, +1.715, +1.776, +1.865, +1.968, +2.084, +2.202, +2.312, +2.438, +2.585, +2.747, +2.938, +3.117, +3.301, +3.535, +3.807, +4.299, +4.905, +5.638, +6.633, +7.251, +7.522, +8.050, +8.149, +8.160, +8.160, +8.160},  +0.164,  -0.021,   1.711},
	{"DC6-5x4Bytes-1",     7, 5632, 0, { -4.223, -4.223, -4.223, -4.210, -4.102, -3.896, -3.727, -3.535, -3.332, -3.140, -2.876, -2.677, -2.509, -2.374, -2.250, -2.149, -2.052, -1.980, -1.903, -1.832, -1.765, -1.699, -1.640, -1.572, -1.514, -1.461, -1.416, -1.363, -1.311, -1.264, -1.214, -1.161, -1.117, -1.077, -1.023, -0.972, -0.926, -0.877, -0.827, -0.792, -0.754, -0.709, -0.672, -0.634, -0.594, -0.555, -0.511, -0.468, -0.424, -0.380, -0.336, -0.299, -0.263, -0.230, -0.194, -0.158, -0.112, -0.077, -0.037, -0.003, +0.048, +0.088, +0.123, +0.174, +0.207, +0.248, +0.282, +0.332, +0.383, +0.429, +0.468, +0.523, +0.561, +0.611, +0.660, +0.710, +0.761, +0.821, +0.873, +0.931, +0.974, +1.036, +1.100, +1.154, +1.215, +1.277, +1.339, +1.412, +1.462, +1.526, +1.605, +1.680, +1.760, +1.861, +1.940, +2.034, +2.155, +2.254, +2.394, +2.537, +2.660, +2.807, +2.954, +3.173, +3.431, +3.698, +4.139, +4.877, +5.319, +6.246, +6.715, +7.399, +7.840, +8.319, +8.372, +8.372, +8.372},  +0.129,  -0.037,   1.692},
	{"DC6-5x4Bytes-1",     8, 5632, 0, { -4.253, -4.253, -4.253, -4.252, -4.250, -4.094, -3.880, -3.651, -3.390, -3.166, -2.799, -2.670, -2.512, -2.393, -2.273, -2.151, -2.056, -1.982, -1.914, -1.847, -1.777, -1.710, -1.640, -1.585, -1.536, -1.475, -1.428, -1.370, -1.308, -1.261, -1.206, -1.151, -1.108, -1.066, -1.018, -0.978, -0.938, -0.886, -0.848, -0.805, -0.765, -0.724, -0.684, -0.635, -0.599, -0.554, -0.509, -0.481, -0.444, -0.408, -0.364, -0.330, -0.296, -0.245, -0.208, -0.173, -0.133, -0.095, -0.049, -0.006, +0.031, +0.071, +0.116, +0.163, +0.200, +0.241, +0.292, +0.344, +0.383, +0.431, +0.477, +0.522, +0.571, +0.626, +0.680, +0.730, +0.782, +0.839, +0.894, +0.943, +1.002, +1.048, +1.107, +1.160, +1.220, +1.284, +1.359, +1.412, +1.467, +1.548, +1.628, +1.697, +1.777, +1.864, +1.954, +2.041, +2.135, +2.241, +2.354, +2.487, +2.633, +2.779, +2.953, +3.153, +3.369, +3.729, +4.108, +4.601, +5.314, +5.986, +6.361, +6.832, +7.563, +7.837, +7.867, +7.867, +7.867},  +0.121,  -0.049,   1.685},
	{"DC6-5x4Bytes-1",    10, 5632, 0, { -5.008, -5.008, -5.008, -4.961, -4.541, -4.052, -3.865, -3.655, -3.445, -3.244, -2.899, -2.661, -2.480, -2.341, -2.225, -2.140, -2.038, -1.956, -1.878, -1.818, -1.746, -1.693, -1.631, -1.564, -1.501, -1.437, -1.388, -1.335, -1.284, -1.226, -1.183, -1.134, -1.087, -1.048, -1.013, -0.979, -0.939, -0.897, -0.844, -0.798, -0.758, -0.710, -0.668, -0.635, -0.596, -0.550, -0.513, -0.471, -0.426, -0.379, -0.335, -0.281, -0.253, -0.215, -0.168, -0.135, -0.095, -0.060, -0.011, +0.030, +0.077, +0.111, +0.155, +0.202, +0.240, +0.281, +0.324, +0.370, +0.416, +0.450, +0.519, +0.555, +0.599, +0.648, +0.699, +0.742, +0.789, +0.833, +0.868, +0.932, +0.984, +1.035, +1.099, +1.158, +1.217, +1.283, +1.337, +1.399, +1.470, +1.537, +1.601, +1.682, +1.746, +1.835, +1.934, +2.031, +2.113, +2.207, +2.315, +2.447, +2.561, +2.695, +2.897, +3.105, +3.340, +3.601, +3.956, +4.667, +5.118, +5.724, +6.113, +6.693, +7.376, +7.413, +7.418, +7.418, +7.418},  +0.125,  -0.011,   1.663},
	{"DC6-5x4Bytes-1",    12, 5632, 0, { -4.611, -4.611, -4.611, -4.602, -4.522, -4.403, -4.209, -3.978, -3.585, -3.304, -2.940, -2.775, -2.580, -2.423, -2.328, -2.216, -2.109, -2.024, -1.961, -1.885, -1.828, -1.755, -1.694, -1.625, -1.579, -1.521, -1.455, -1.397, -1.349, -1.308, -1.264, -1.219, -1.145, -1.091, -1.042, -0.989, -0.941, -0.896, -0.854, -0.813, -0.781, -0.735, -0.690, -0.650, -0.616, -0.564, -0.527, -0.478, -0.435, -0.400, -0.354, -0.316, -0.278, -0.240, -0.200, -0.157, -0.123, -0.095, -0.053, -0.019, +0.019, +0.061, +0.097, +0.138, +0.175, +0.224, +0.260, +0.304, +0.344, +0.387, +0.435, +0.482, +0.529, +0.581, +0.632, +0.678, +0.720, +0.779, +0.841, +0.892, +0.942, +0.998, +1.047, +1.102, +1.166, +1.241, +1.294, +1.359, +1.431, +1.483, +1.570, +1.641, +1.718, +1.806, +1.884, +1.966, +2.050, +2.151, +2.279, +2.408, +2.527, +2.675, +2.859, +3.026, +3.251, +3.492, +3.849, +4.435, +5.066, +5.793, +6.442, +6.864, +7.728, +8.302, +8.367, +8.367, +8.367},  +0.073,  -0.053,   1.666},
	{"DC6-5x4Bytes-1",    14, 5632, 0, { -5.274, -5.274, -5.274, -5.236, -4.895, -4.384, -4.342, -3.896, -3.564, -3.336, -2.950, -2.754, -2.572, -2.446, -2.340, -2.225, -2.108, -2.013, -1.951, -1.895, -1.816, -1.756, -1.679, -1.617, -1.564, -1.497, -1.445, -1.394, -1.339, -1.288, -1.245, -1.203, -1.135, -1.084, -1.038, -1.001, -0.953, -0.913, -0.881, -0.841, -0.800, -0.757, -0.718, -0.678, -0.637, -0.592, -0.547, -0.500, -0.462, -0.408, -0.367, -0.323, -0.282, -0.235, -0.194, -0.139, -0.105, -0.068, -0.036, +0.005, +0.045, +0.079, +0.130, +0.176, +0.210, +0.263, +0.301, +0.350, +0.400, +0.442, +0.485, +0.529, +0.581, +0.632, +0.674, +0.721, +0.768, +0.825, +0.874, +0.935, +0.996, +1.052, +1.114, +1.180, +1.229, +1.285, +1.358, +1.434, +1.507, +1.576, +1.645, +1.715, +1.795, +1.862, +1.932, +2.027, +2.111, +2.195, +2.297, +2.415, +2.544, +2.703, +2.884, +3.111, +3.318, +3.601, +3.953, +4.649, +5.172, +6.049, +6.686, +7.421, +7.693, +7.877, +7.897, +7.897, +7.897},  +0.098,  -0.036,   1.694},
	{"DC6-5x4Bytes-1",    16, 5632, 0, { -4.763, -4.763, -4.763, -4.760, -4.736, -4.420, -4.342, -4.161, -3.713, -3.438, -3.028, -2.844, -2.678, -2.510, -2.367, -2.264, -2.169, -2.079, -1.998, -1.929, -1.857, -1.783, -1.696, -1.633, -1.591, -1.530, -1.472, -1.420, -1.359, -1.311, -1.258, -1.210, -1.154, -1.099, -1.057, -1.014, -0.971, -0.928, -0.881, -0.829, -0.783, -0.731, -0.680, -0.644, -0.596, -0.552, -0.513, -0.482, -0.442, -0.398, -0.351, -0.318, -0.283, -0.245, -0.197, -0.155, -0.112, -0.074, -0.034, +0.001, +0.043, +0.093, +0.140, +0.180, +0.218, +0.272, +0.317, +0.361, +0.422, +0.462, +0.514, +0.555, +0.602, +0.664, +0.720, +0.773, +0.812, +0.850, +0.891, +0.949, +1.007, +1.070, +1.134, +1.193, +1.253, +1.319, +1.393, +1.465, +1.535, +1.602, +1.675, +1.740, +1.803, +1.891, +1.969, +2.045, +2.130, +2.230, +2.344, +2.479, +2.631, +2.770, +2.962, +3.152, +3.351, +3.649, +4.009, +4.634, +5.266, +6.116, +6.357, +6.701, +7.088, +7.101, +7.103, +7.103, +7.103},  +0.104,  -0.034,   1.726},
	{"DC6-5x4Bytes-1",    20, 5632, 0, { -5.107, -5.107, -5.107, -5.101, -5.053, -4.691, -4.411, -4.111, -3.664, -3.321, -2.975, -2.778, -2.616, -2.490, -2.372, -2.277, -2.191, -2.092, -2.014, -1.932, -1.850, -1.772, -1.694, -1.639, -1.580, -1.525, -1.458, -1.402, -1.346, -1.302, -1.255, -1.199, -1.156, -1.099, -1.057, -1.007, -0.955, -0.910, -0.859, -0.815, -0.766, -0.710, -0.666, -0.626, -0.572, -0.533, -0.487, -0.443, -0.400, -0.349, -0.297, -0.253, -0.210, -0.176, -0.132, -0.089, -0.049, -0.016, +0.026, +0.064, +0.105, +0.144, +0.181, +0.231, +0.275, +0.315, +0.355, +0.406, +0.464, +0.514, +0.567, +0.626, +0.672, +0.716, +0.752, +0.799, +0.849, +0.897, +0.942, +0.994, +1.042, +1.108, +1.158, +1.214, +1.276, +1.353, +1.404, +1.467, +1.535, +1.602, +1.657, +1.743, +1.817, +1.885, +1.958, +2.047, +2.146, +2.266, +2.351, +2.471, +2.591, +2.730, +2.849, +3.012, +3.235, +3.506, +3.951, +4.552, +5.136, +5.904, +6.258, +6.874, +7.460, +7.736, +7.767, +7.767, +7.767},  +0.120,  +0.026,   1.704},
	{"DC6-5x4Bytes-1",    24, 5632, 0, { -5.043, -5.043, -5.043, -5.022, -4.840, -4.572, -4.402, -3.966, -3.653, -3.374, -3.015, -2.802, -2.601, -2.464, -2.351, -2.257, -2.141, -2.062, -1.971, -1.878, -1.807, -1.722, -1.666, -1.615, -1.552, -1.502, -1.456, -1.396, -1.338, -1.279, -1.223, -1.185, -1.141, -1.088, -1.045, -0.989, -0.938, -0.894, -0.849, -0.802, -0.762, -0.717, -0.671, -0.623, -0.583, -0.537, -0.500, -0.444, -0.406, -0.373, -0.337, -0.301, -0.263, -0.206, -0.162, -0.116, -0.082, -0.030, +0.007, +0.054, +0.092, +0.137, +0.183, +0.220, +0.264, +0.311, +0.360, +0.413, +0.459, +0.513, +0.563, +0.603, +0.643, +0.703, +0.746, +0.789, +0.836, +0.892, +0.946, +0.992, +1.042, +1.095, +1.158, +1.223, +1.294, +1.349, +1.423, +1.473, +1.530, +1.590, +1.671, +1.746, +1.808, +1.888, +1.970, +2.050, +2.128, +2.263, +2.375, +2.495, +2.613, +2.748, +2.925, +3.137, +3.362, +3.631, +3.879, +4.494, +5.078, +5.768, +6.006, +6.526, +7.355, +8.075, +8.156, +8.156, +8.156},  +0.126,  +0.007,   1.703},
	{"DC6-5x4Bytes-1",    28, 5632, 0, { -4.954, -4.954, -4.954, -4.943, -4.849, -4.634, -4.520, -4.199, -3.782, -3.500, -3.123, -2.812, -2.612, -2.471, -2.350, -2.242, -2.138, -2.034, -1.943, -1.875, -1.803, -1.738, -1.670, -1.598, -1.532, -1.475, -1.417, -1.337, -1.295, -1.242, -1.198, -1.150, -1.101, -1.047, -0.991, -0.945, -0.910, -0.865, -0.819, -0.758, -0.718, -0.671, -0.632, -0.593, -0.554, -0.516, -0.482, -0.448, -0.400, -0.358, -0.316, -0.273, -0.242, -0.202, -0.156, -0.115, -0.070, -0.030, +0.014, +0.055, +0.093, +0.135, +0.171, +0.220, +0.264, +0.309, +0.344, +0.382, +0.435, +0.477, +0.515, +0.554, +0.605, +0.643, +0.691, +0.734, +0.780, +0.834, +0.883, +0.924, +0.985, +1.056, +1.115, +1.176, +1.232, +1.294, +1.343, +1.401, +1.463, +1.530, +1.600, +1.671, +1.737, +1.809, +1.894, +1.978, +2.072, +2.160, +2.232, +2.325, +2.466, +2.604, +2.790, +2.967, +3.196, +3.468, +3.834, +4.462, +5.007, +5.447, +5.686, +6.113, +6.756, +7.264, +7.321, +7.321, +7.321},  +0.098,  +0.014,   1.663},
	{"DC6-5x4Bytes-1",    32, 5632, 0, { -5.009, -5.009, -5.009, -5.004, -4.955, -4.857, -4.572, -4.305, -3.949, -3.583, -3.189, -2.893, -2.716, -2.552, -2.400, -2.281, -2.164, -2.069, -1.995, -1.906, -1.821, -1.757, -1.680, -1.611, -1.535, -1.486, -1.434, -1.380, -1.322, -1.258, -1.210, -1.134, -1.090, -1.037, -0.979, -0.928, -0.884, -0.835, -0.783, -0.737, -0.685, -0.632, -0.588, -0.549, -0.511, -0.460, -0.428, -0.387, -0.341, -0.295, -0.255, -0.219, -0.184, -0.146, -0.113, -0.069, -0.021, +0.014, +0.063, +0.100, +0.138, +0.175, +0.222, +0.265, +0.304, +0.341, +0.386, +0.435, +0.475, +0.521, +0.568, +0.604, +0.645, +0.685, +0.734, +0.780, +0.836, +0.875, +0.922, +0.970, +1.023, +1.076, +1.123, +1.174, +1.231, +1.290, +1.359, +1.416, +1.488, +1.557, +1.634, +1.714, +1.774, +1.858, +1.941, +2.022, +2.101, +2.194, +2.285, +2.391, +2.507, +2.632, +2.817, +3.051, +3.234, +3.456, +3.809, +4.380, +4.952, +5.549, +5.713, +6.358, +7.029, +7.511, +7.565, +7.565, +7.565},  +0.117,  +0.063,   1.685},
	{"DC6-5x4Bytes-1",    40, 5632, 0, { -5.069, -5.069, -5.069, -5.067, -5.054, -4.974, -4.681, -4.508, -4.026, -3.624, -3.174, -2.899, -2.734, -2.546, -2.444, -2.311, -2.204, -2.105, -1.998, -1.908, -1.828, -1.756, -1.694, -1.617, -1.557, -1.492, -1.440, -1.385, -1.332, -1.285, -1.237, -1.198, -1.145, -1.093, -1.046, -0.976, -0.932, -0.869, -0.832, -0.796, -0.733, -0.694, -0.646, -0.605, -0.566, -0.516, -0.483, -0.436, -0.391, -0.335, -0.293, -0.253, -0.207, -0.168, -0.124, -0.083, -0.035, -0.005, +0.039, +0.086, +0.130, +0.166, +0.199, +0.241, +0.272, +0.308, +0.348, +0.392, +0.439, +0.479, +0.542, +0.590, +0.630, +0.686, +0.733, +0.768, +0.816, +0.858, +0.913, +0.958, +1.022, +1.079, +1.131, +1.186, +1.242, +1.289, +1.350, +1.424, +1.489, +1.529, +1.602, +1.676, +1.751, +1.816, +1.886, +1.974, +2.063, +2.162, +2.267, +2.390, +2.536, +2.696, +2.833, +2.997, +3.171, +3.431, +3.678, +4.167, +4.692, +5.310, +5.843, +6.699, +8.076, +9.578, +9.746, +9.746, +9.746},  +0.089,  +0.039,   1.681},
	{"DC6-5x4Bytes-1",    48, 5632, 0, { -5.078, -5.078, -5.078, -5.077, -5.064, -4.987, -4.553, -4.275, -3.873, -3.580, -3.148, -2.855, -2.690, -2.513, -2.392, -2.297, -2.198, -2.107, -1.998, -1.909, -1.829, -1.766, -1.696, -1.640, -1.565, -1.497, -1.435, -1.384, -1.322, -1.267, -1.214, -1.164, -1.099, -1.045, -0.995, -0.944, -0.905, -0.857, -0.808, -0.761, -0.707, -0.673, -0.625, -0.594, -0.548, -0.493, -0.445, -0.403, -0.364, -0.329, -0.290, -0.230, -0.187, -0.144, -0.094, -0.049, -0.006, +0.049, +0.087, +0.137, +0.173, +0.226, +0.279, +0.317, +0.351, +0.384, +0.426, +0.470, +0.508, +0.553, +0.600, +0.638, +0.686, +0.729, +0.783, +0.843, +0.887, +0.946, +0.989, +1.039, +1.091, +1.143, +1.211, +1.261, +1.310, +1.374, +1.435, +1.505, +1.548, +1.608, +1.667, +1.720, +1.799, +1.872, +1.935, +2.024, +2.114, +2.205, +2.316, +2.436, +2.530, +2.664, +2.823, +2.969, +3.147, +3.387, +3.688, +4.180, +4.683, +5.270, +5.527, +6.779, +7.609, +8.386, +8.474, +8.474, +8.474},  +0.126,  +0.087,   1.683},
	{"DC6-5x4Bytes-1",    56, 5632, 0, { -5.887, -5.887, -5.887, -5.867, -5.685, -5.145, -4.609, -4.315, -3.952, -3.503, -3.188, -2.901, -2.719, -2.562, -2.411, -2.314, -2.216, -2.112, -2.023, -1.944, -1.856, -1.787, -1.717, -1.641, -1.587, -1.521, -1.454, -1.380, -1.324, -1.271, -1.213, -1.165, -1.114, -1.065, -1.011, -0.957, -0.899, -0.848, -0.801, -0.748, -0.689, -0.638, -0.593, -0.544, -0.498, -0.457, -0.417, -0.378, -0.324, -0.277, -0.231, -0.186, -0.146, -0.100, -0.066, -0.033, +0.005, +0.051, +0.088, +0.123, +0.161, +0.202, +0.244, +0.273, +0.312, +0.356, +0.399, +0.446, +0.489, +0.534, +0.592, +0.638, +0.690, +0.741, +0.783, +0.829, +0.883, +0.930, +0.991, +1.038, +1.084, +1.135, +1.186, +1.240, +1.285, +1.338, +1.384, +1.452, +1.527, +1.598, +1.669, +1.748, +1.822, +1.908, +2.003, +2.085, +2.170, +2.263, +2.357, +2.465, +2.580, +2.730, +2.882, +3.031, +3.246, +3.494, +3.777, +4.322, +4.743, +5.252, +5.468, +5.627, +6.325, +6.491, +6.510, +6.510, +6.510},  +0.131,  +0.088,   1.697},
	{"DC6-5x4Bytes-1",    64, 5632, 0, { -5.359, -5.359, -5.359, -5.344, -5.208, -5.011, -4.835, -4.600, -4.017, -3.547, -3.197, -2.940, -2.753, -2.602, -2.434, -2.333, -2.233, -2.136, -2.041, -1.965, -1.884, -1.815, -1.752, -1.677, -1.604, -1.526, -1.455, -1.388, -1.322, -1.272, -1.221, -1.165, -1.101, -1.048, -1.001, -0.960, -0.905, -0.853, -0.796, -0.756, -0.717, -0.668, -0.622, -0.580, -0.544, -0.496, -0.450, -0.404, -0.349, -0.305, -0.262, -0.212, -0.172, -0.137, -0.097, -0.059, -0.017, +0.023, +0.071, +0.117, +0.159, +0.206, +0.247, +0.287, +0.319, +0.364, +0.408, +0.452, +0.510, +0.553, +0.592, +0.637, +0.676, +0.718, +0.764, +0.812, +0.861, +0.917, +0.967, +1.040, +1.107, +1.159, +1.212, +1.271, +1.326, +1.386, +1.449, +1.506, +1.567, +1.635, +1.699, +1.780, +1.872, +1.946, +2.016, +2.100, +2.169, +2.246, +2.328, +2.449, +2.582, +2.734, +2.893, +3.041, +3.175, +3.449, +3.789, +4.342, +4.862, +5.353, +5.645, +6.008, +6.154, +6.193, +6.197, +6.197, +6.197},  +0.126,  +0.071,   1.712},
	{"DC6-5x4Bytes-1",    80, 5632, 0, { -5.746, -5.746, -5.746, -5.734, -5.622, -5.451, -4.772, -4.395, -3.830, -3.471, -3.174, -2.902, -2.672, -2.526, -2.411, -2.280, -2.153, -2.082, -1.998, -1.909, -1.815, -1.738, -1.675, -1.605, -1.553, -1.486, -1.423, -1.374, -1.316, -1.250, -1.203, -1.151, -1.096, -1.039, -0.987, -0.936, -0.886, -0.840, -0.791, -0.751, -0.714, -0.668, -0.632, -0.587, -0.552, -0.508, -0.461, -0.417, -0.379, -0.328, -0.284, -0.233, -0.187, -0.140, -0.089, -0.048, -0.011, +0.028, +0.077, +0.119, +0.161, +0.204, +0.242, +0.279, +0.329, +0.375, +0.415, +0.461, +0.506, +0.548, +0.594, +0.638, +0.676, +0.735, +0.773, +0.813, +0.865, +0.913, +0.970, +1.014, +1.067, +1.115, +1.164, +1.219, +1.277, +1.323, +1.388, +1.446, +1.520, +1.584, +1.652, +1.728, +1.807, +1.880, +1.963, +2.042, +2.138, +2.233, +2.348, +2.460, +2.571, +2.686, +2.846, +3.019, +3.162, +3.371, +3.670, +4.149, +4.689, +5.188, +5.684, +6.426, +7.781, +7.986, +8.009, +8.009, +8.009},  +0.124,  +0.077,   1.682},
	{"DC6-5x4Bytes-1",    96, 5632, 0, { -5.124, -5.124, -5.124, -5.119, -5.078, -5.040, -4.757, -4.534, -4.129, -3.725, -3.297, -3.006, -2.776, -2.608, -2.500, -2.373, -2.252, -2.138, -2.047, -1.944, -1.861, -1.793, -1.716, -1.638, -1.582, -1.520, -1.456, -1.397, -1.332, -1.279, -1.227, -1.174, -1.127, -1.065, -1.006, -0.943, -0.890, -0.845, -0.802, -0.746, -0.709, -0.662, -0.623, -0.576, -0.537, -0.486, -0.437, -0.398, -0.348, -0.305, -0.255, -0.212, -0.169, -0.127, -0.093, -0.043, -0.007, +0.029, +0.075, +0.118, +0.165, +0.214, +0.254, +0.299, +0.344, +0.388, +0.432, +0.479, +0.526, +0.572, +0.623, +0.675, +0.707, +0.746, +0.798, +0.843, +0.897, +0.941, +0.996, +1.057, +1.107, +1.153, +1.205, +1.272, +1.318, +1.378, +1.428, +1.488, +1.555, +1.638, +1.710, +1.792, +1.863, +1.932, +2.011, +2.098, +2.181, +2.272, +2.369, +2.455, +2.566, +2.709, +2.860, +2.995, +3.190, +3.444, +3.747, +4.262, +4.623, +5.351, +5.805, +5.972, +6.413, +6.621, +6.645, +6.645, +6.645},  +0.124,  +0.075,   1.716},
	{"DC6-5x4Bytes-1",   112, 5632, 0, { -6.170, -6.170, -6.170, -6.109, -5.561, -4.893, -4.631, -4.424, -4.020, -3.612, -3.292, -3.009, -2.762, -2.621, -2.488, -2.342, -2.224, -2.110, -2.007, -1.927, -1.861, -1.777, -1.695, -1.623, -1.565, -1.509, -1.448, -1.395, -1.346, -1.287, -1.222, -1.162, -1.111, -1.054, -1.001, -0.952, -0.896, -0.838, -0.794, -0.742, -0.682, -0.636, -0.592, -0.539, -0.491, -0.444, -0.402, -0.355, -0.318, -0.278, -0.238, -0.203, -0.149, -0.100, -0.052, -0.007, +0.031, +0.073, +0.120, +0.163, +0.215, +0.261, +0.300, +0.341, +0.381, +0.424, +0.461, +0.494, +0.537, +0.581, +0.624, +0.670, +0.710, +0.766, +0.802, +0.844, +0.889, +0.937, +0.998, +1.053, +1.109, +1.166, +1.209, +1.263, +1.331, +1.387, +1.443, +1.501, +1.557, +1.619, +1.671, +1.754, +1.830, +1.898, +1.982, +2.063, +2.164, +2.231, +2.319, +2.427, +2.557, +2.716, +2.865, +3.074, +3.251, +3.479, +3.813, +4.299, +4.867, +5.303, +5.543, +6.293, +7.729, +8.680, +8.786, +8.786, +8.786},  +0.140,  +0.120,   1.715},
	{"DC6-5x4Bytes-1",   128, 5632, 0, { -5.106, -5.106, -5.106, -5.101, -5.054, -4.963, -4.755, -4.393, -4.030, -3.631, -3.287, -2.999, -2.807, -2.646, -2.517, -2.401, -2.294, -2.175, -2.078, -2.003, -1.915, -1.841, -1.759, -1.677, -1.577, -1.520, -1.458, -1.385, -1.321, -1.260, -1.191, -1.134, -1.079, -1.016, -0.960, -0.910, -0.864, -0.826, -0.778, -0.729, -0.682, -0.633, -0.585, -0.539, -0.496, -0.452, -0.403, -0.364, -0.332, -0.281, -0.247, -0.207, -0.165, -0.121, -0.078, -0.032, +0.016, +0.062, +0.104, +0.140, +0.184, +0.231, +0.276, +0.322, +0.359, +0.402, +0.442, +0.497, +0.547, +0.587, +0.639, +0.682, +0.732, +0.775, +0.823, +0.887, +0.934, +0.990, +1.034, +1.078, +1.124, +1.173, +1.230, +1.290, +1.348, +1.394, +1.461, +1.517, +1.589, +1.666, +1.733, +1.787, +1.864, +1.925, +2.020, +2.094, +2.171, +2.253, +2.357, +2.480, +2.632, +2.763, +2.862, +3.011, +3.203, +3.479, +3.760, +4.362, +4.747, +5.181, +5.690, +6.208, +6.982, +7.830, +7.926, +7.926, +7.926},  +0.140,  +0.104,   1.726},
	{"DC6-5x4Bytes-1",   160, 5632, 0, { -5.200, -5.200, -5.200, -5.196, -5.168, -5.059, -4.751, -4.408, -3.934, -3.580, -3.201, -2.926, -2.724, -2.572, -2.438, -2.298, -2.195, -2.103, -2.009, -1.915, -1.820, -1.750, -1.668, -1.604, -1.539, -1.474, -1.410, -1.340, -1.294, -1.237, -1.172, -1.106, -1.059, -1.003, -0.948, -0.899, -0.853, -0.808, -0.758, -0.708, -0.672, -0.616, -0.574, -0.526, -0.469, -0.423, -0.388, -0.341, -0.296, -0.252, -0.203, -0.161, -0.120, -0.064, -0.023, +0.014, +0.048, +0.087, +0.131, +0.176, +0.216, +0.260, +0.304, +0.352, +0.399, +0.435, +0.477, +0.535, +0.585, +0.626, +0.684, +0.734, +0.777, +0.816, +0.852, +0.899, +0.959, +1.010, +1.059, +1.113, +1.166, +1.211, +1.261, +1.302, +1.345, +1.404, +1.479, +1.548, +1.610, +1.670, +1.746, +1.832, +1.895, +1.965, +2.045, +2.149, +2.246, +2.332, +2.430, +2.553, +2.664, +2.802, +2.983, +3.157, +3.348, +3.592, +3.886, +4.380, +4.869, +5.376, +6.284, +6.418, +6.851, +7.257, +7.302, +7.302, +7.302},  +0.185,  +0.131,   1.727},
	{"DC6-5x4Bytes-1",   192, 5632, 0, { -5.588, -5.588, -5.588, -5.566, -5.364, -5.068, -4.655, -4.387, -3.955, -3.672, -3.194, -2.937, -2.684, -2.515, -2.376, -2.278, -2.162, -2.048, -1.974, -1.887, -1.803, -1.728, -1.660, -1.573, -1.485, -1.411, -1.354, -1.307, -1.246, -1.178, -1.125, -1.077, -1.028, -0.978, -0.933, -0.881, -0.840, -0.794, -0.747, -0.697, -0.655, -0.622, -0.560, -0.511, -0.469, -0.428, -0.390, -0.350, -0.306, -0.265, -0.221, -0.168, -0.127, -0.081, -0.044, -0.008, +0.039, +0.095, +0.134, +0.167, +0.214, +0.252, +0.305, +0.351, +0.392, +0.432, +0.482, +0.533, +0.582, +0.631, +0.680, +0.717, +0.756, +0.801, +0.843, +0.877, +0.930, +0.983, +1.049, +1.089, +1.147, +1.198, +1.267, +1.317, +1.372, +1.423, +1.488, +1.559, +1.611, +1.669, +1.732, +1.798, +1.882, +1.963, +2.043, +2.134, +2.233, +2.330, +2.436, +2.556, +2.678, +2.822, +2.940, +3.115, +3.344, +3.586, +3.933, +4.437, +4.834, +5.460, +5.903, +6.527, +6.838, +6.886, +6.892, +6.892, +6.892},  +0.192,  +0.134,   1.718},
	{"DC6-5x4Bytes-1",   224, 5632, 0, { -5.564, -5.564, -5.564, -5.543, -5.354, -5.085, -4.918, -4.549, -4.128, -3.681, -3.194, -2.948, -2.724, -2.525, -2.380, -2.237, -2.125, -2.044, -1.962, -1.877, -1.783, -1.718, -1.638, -1.589, -1.511, -1.431, -1.362, -1.305, -1.239, -1.174, -1.116, -1.068, -0.995, -0.956, -0.911, -0.863, -0.805, -0.752, -0.699, -0.657, -0.604, -0.561, -0.509, -0.456, -0.410, -0.359, -0.315, -0.284, -0.240, -0.196, -0.152, -0.110, -0.063, -0.016, +0.023, +0.062, +0.109, +0.142, +0.187, +0.231, +0.277, +0.312, +0.355, +0.403, +0.454, +0.491, +0.533, +0.574, +0.633, +0.687, +0.742, +0.784, +0.824, +0.863, +0.908, +0.956, +0.999, +1.046, +1.095, +1.138, +1.178, +1.225, +1.280, +1.338, +1.394, +1.449, +1.501, +1.584, +1.646, +1.721, +1.798, +1.861, +1.954, +2.032, +2.110, +2.187, +2.274, +2.372, +2.480, +2.572, +2.692, +2.813, +3.016, +3.180, +3.355, +3.564, +3.811, +4.256, +4.705, +5.295, +5.664, +6.072, +6.386, +6.713, +6.750, +6.750, +6.750},  +0.223,  +0.187,   1.719},
	{"DC6-5x4Bytes-1",   256, 5632, 0, { -5.614, -5.614, -5.614, -5.605, -5.520, -5.170, -4.697, -4.470, -4.075, -3.651, -3.215, -2.928, -2.697, -2.546, -2.406, -2.269, -2.167, -2.079, -1.990, -1.881, -1.818, -1.731, -1.657, -1.584, -1.524, -1.452, -1.383, -1.312, -1.248, -1.193, -1.132, -1.079, -1.011, -0.955, -0.893, -0.835, -0.795, -0.741, -0.704, -0.649, -0.605, -0.558, -0.510, -0.466, -0.427, -0.382, -0.341, -0.298, -0.248, -0.207, -0.153, -0.119, -0.084, -0.038, +0.010, +0.061, +0.109, +0.145, +0.181, +0.221, +0.268, +0.312, +0.367, +0.408, +0.445, +0.485, +0.525, +0.575, +0.622, +0.666, +0.708, +0.756, +0.794, +0.847, +0.892, +0.941, +0.985, +1.032, +1.086, +1.157, +1.208, +1.266, +1.311, +1.354, +1.403, +1.472, +1.518, +1.583, +1.633, +1.717, +1.777, +1.851, +1.913, +1.992, +2.074, +2.150, +2.217, +2.306, +2.440, +2.561, +2.701, +2.807, +2.955, +3.114, +3.337, +3.517, +3.854, +4.261, +4.681, +5.097, +5.547, +5.902, +6.311, +6.422, +6.434, +6.434, +6.434},  +0.213,  +0.181,   1.716},
	{"DC6-5x4Bytes-1",   320, 5632, 0, { -5.819, -5.819, -5.819, -5.816, -5.786, -5.376, -4.940, -4.682, -4.122, -3.716, -3.177, -2.883, -2.653, -2.475, -2.358, -2.232, -2.135, -2.021, -1.941, -1.864, -1.796, -1.717, -1.621, -1.551, -1.481, -1.411, -1.357, -1.299, -1.244, -1.198, -1.140, -1.073, -1.014, -0.959, -0.905, -0.848, -0.801, -0.750, -0.707, -0.657, -0.610, -0.558, -0.516, -0.473, -0.420, -0.382, -0.340, -0.297, -0.256, -0.209, -0.164, -0.119, -0.067, -0.032, +0.012, +0.055, +0.096, +0.151, +0.185, +0.222, +0.267, +0.314, +0.364, +0.399, +0.448, +0.498, +0.555, +0.595, +0.644, +0.691, +0.736, +0.781, +0.828, +0.872, +0.917, +0.962, +1.010, +1.051, +1.098, +1.160, +1.216, +1.265, +1.312, +1.363, +1.419, +1.472, +1.545, +1.608, +1.683, +1.731, +1.787, +1.850, +1.917, +1.986, +2.076, +2.142, +2.229, +2.312, +2.393, +2.527, +2.651, +2.779, +2.921, +3.101, +3.319, +3.504, +3.754, +4.170, +4.548, +5.123, +5.494, +5.935, +6.495, +7.073, +7.137, +7.137, +7.137},  +0.218,  +0.185,   1.703},
	{"DC6-5x4Bytes-1",   384, 5632, 0, { -6.050, -6.050, -6.050, -6.032, -5.869, -5.181, -4.464, -4.293, -3.781, -3.541, -3.146, -2.941, -2.711, -2.581, -2.426, -2.258, -2.152, -2.051, -1.947, -1.867, -1.775, -1.678, -1.615, -1.527, -1.468, -1.405, -1.344, -1.281, -1.217, -1.170, -1.111, -1.043, -0.981, -0.929, -0.879, -0.825, -0.779, -0.731, -0.682, -0.623, -0.570, -0.529, -0.488, -0.452, -0.403, -0.358, -0.318, -0.277, -0.236, -0.191, -0.155, -0.109, -0.064, -0.017, +0.014, +0.053, +0.103, +0.141, +0.176, +0.220, +0.262, +0.303, +0.340, +0.383, +0.415, +0.452, +0.491, +0.543, +0.601, +0.648, +0.702, +0.748, +0.797, +0.836, +0.867, +0.903, +0.947, +0.986, +1.035, +1.103, +1.158, +1.215, +1.266, +1.319, +1.373, +1.432, +1.482, +1.542, +1.606, +1.668, +1.747, +1.817, +1.879, +1.966, +2.068, +2.158, +2.229, +2.305, +2.389, +2.521, +2.617, +2.721, +2.889, +3.017, +3.216, +3.454, +3.781, +4.360, +4.677, +5.296, +5.744, +6.431, +6.914, +7.371, +7.422, +7.422, +7.422},  +0.209,  +0.176,   1.688},
	{"DC6-5x4Bytes-1",   448, 5632, 0, { -5.657, -5.657, -5.657, -5.648, -5.566, -4.849, -4.518, -4.224, -3.827, -3.511, -3.102, -2.859, -2.627, -2.425, -2.275, -2.134, -2.032, -1.947, -1.857, -1.777, -1.701, -1.630, -1.560, -1.483, -1.407, -1.347, -1.294, -1.232, -1.166, -1.112, -1.048, -0.982, -0.930, -0.876, -0.830, -0.785, -0.741, -0.688, -0.643, -0.596, -0.549, -0.505, -0.457, -0.426, -0.384, -0.348, -0.302, -0.252, -0.214, -0.166, -0.121, -0.082, -0.038, +0.003, +0.048, +0.095, +0.142, +0.186, +0.233, +0.273, +0.316, +0.355, +0.395, +0.432, +0.479, +0.516, +0.555, +0.598, +0.648, +0.697, +0.743, +0.799, +0.852, +0.894, +0.935, +0.981, +1.023, +1.061, +1.108, +1.154, +1.209, +1.265, +1.324, +1.373, +1.409, +1.462, +1.518, +1.572, +1.635, +1.707, +1.765, +1.844, +1.910, +1.989, +2.063, +2.149, +2.237, +2.328, +2.418, +2.512, +2.622, +2.731, +2.874, +3.048, +3.239, +3.506, +3.778, +4.295, +4.890, +5.289, +5.511, +5.791, +7.065, +7.418, +7.458, +7.458, +7.458},  +0.254,  +0.233,   1.673},
	{"DC6-5x4Bytes-1",   512, 5632, 0, { -5.132, -5.132, -5.132, -5.123, -5.046, -4.674, -4.588, -4.144, -3.826, -3.552, -3.125, -2.881, -2.665, -2.488, -2.357, -2.222, -2.109, -1.975, -1.873, -1.794, -1.697, -1.631, -1.552, -1.480, -1.407, -1.350, -1.293, -1.223, -1.175, -1.119, -1.068, -1.015, -0.947, -0.895, -0.851, -0.797, -0.762, -0.716, -0.666, -0.609, -0.562, -0.520, -0.472, -0.427, -0.383, -0.345, -0.294, -0.257, -0.217, -0.168, -0.125, -0.076, -0.024, +0.015, +0.050, +0.088, +0.130, +0.170, +0.209, +0.251, +0.288, +0.337, +0.378, +0.426, +0.481, +0.523, +0.568, +0.611, +0.656, +0.697, +0.744, +0.792, +0.849, +0.895, +0.949, +1.003, +1.047, +1.088, +1.137, +1.177, +1.221, +1.270, +1.329, +1.385, +1.447, +1.499, +1.559, +1.636, +1.689, +1.750, +1.811, +1.874, +1.943, +2.009, +2.077, +2.150, +2.227, +2.314, +2.418, +2.543, +2.643, +2.820, +2.953, +3.082, +3.268, +3.493, +3.856, +4.270, +4.652, +5.191, +5.344, +6.066, +6.159, +6.203, +6.208, +6.208, +6.208},  +0.254,  +0.209,   1.684},
	{"DC6-5x4Bytes-1",   640, 5632, 0, { -5.700, -5.700, -5.700, -5.697, -5.672, -5.013, -4.792, -4.360, -3.849, -3.487, -3.072, -2.797, -2.606, -2.455, -2.291, -2.172, -2.052, -1.959, -1.867, -1.773, -1.682, -1.598, -1.543, -1.452, -1.377, -1.307, -1.252, -1.201, -1.135, -1.083, -1.022, -0.969, -0.920, -0.861, -0.810, -0.765, -0.707, -0.666, -0.621, -0.582, -0.523, -0.483, -0.444, -0.407, -0.367, -0.332, -0.284, -0.233, -0.192, -0.151, -0.107, -0.066, -0.017, +0.020, +0.065, +0.123, +0.164, +0.206, +0.242, +0.282, +0.329, +0.363, +0.400, +0.432, +0.475, +0.526, +0.564, +0.619, +0.659, +0.701, +0.752, +0.792, +0.834, +0.884, +0.927, +0.967, +1.017, +1.080, +1.127, +1.185, +1.242, +1.297, +1.349, +1.413, +1.481, +1.551, +1.614, +1.686, +1.758, +1.814, +1.866, +1.938, +1.990, +2.085, +2.155, +2.228, +2.318, +2.407, +2.486, +2.584, +2.702, +2.836, +2.961, +3.104, +3.318, +3.503, +3.710, +4.154, +4.679, +5.228, +5.591, +5.892, +6.235, +6.241, +6.241, +6.241, +6.241},  +0.280,  +0.242,   1.682},
	{"DC6-5x4Bytes-1",   768, 5632, 0, { -6.688, -6.688, -6.688, -6.637, -6.184, -5.101, -4.764, -4.514, -3.951, -3.450, -3.062, -2.840, -2.677, -2.497, -2.308, -2.169, -2.066, -1.945, -1.848, -1.751, -1.666, -1.590, -1.513, -1.445, -1.380, -1.317, -1.259, -1.191, -1.134, -1.079, -1.029, -0.969, -0.919, -0.867, -0.814, -0.758, -0.716, -0.667, -0.615, -0.568, -0.528, -0.482, -0.446, -0.402, -0.356, -0.308, -0.267, -0.219, -0.180, -0.143, -0.093, -0.058, -0.011, +0.035, +0.078, +0.121, +0.160, +0.197, +0.233, +0.282, +0.325, +0.364, +0.414, +0.451, +0.498, +0.540, +0.577, +0.628, +0.666, +0.709, +0.747, +0.796, +0.842, +0.884, +0.923, +0.970, +1.025, +1.075, +1.123, +1.165, +1.218, +1.285, +1.344, +1.403, +1.465, +1.525, +1.589, +1.645, +1.721, +1.776, +1.848, +1.918, +1.988, +2.058, +2.124, +2.185, +2.273, +2.365, +2.451, +2.522, +2.629, +2.755, +2.880, +3.084, +3.273, +3.478, +3.928, +4.403, +4.888, +5.399, +5.853, +6.167, +6.593, +6.888, +6.921, +6.921, +6.921},  +0.277,  +0.233,   1.689},
	{"DC6-5x4Bytes-1",   896, 5632, 0, { -5.699, -5.699, -5.699, -5.685, -5.566, -5.110, -4.663, -4.366, -3.830, -3.545, -3.033, -2.808, -2.614, -2.441, -2.275, -2.177, -2.067, -1.980, -1.883, -1.775, -1.693, -1.617, -1.548, -1.465, -1.388, -1.311, -1.242, -1.185, -1.126, -1.059, -0.992, -0.930, -0.887, -0.830, -0.780, -0.729, -0.681, -0.643, -0.596, -0.550, -0.506, -0.469, -0.421, -0.383, -0.328, -0.284, -0.230, -0.192, -0.145, -0.085, -0.040, +0.001, +0.034, +0.074, +0.122, +0.162, +0.200, +0.250, +0.298, +0.343, +0.375, +0.417, +0.450, +0.484, +0.528, +0.563, +0.603, +0.638, +0.685, +0.727, +0.781, +0.831, +0.873, +0.926, +0.970, +1.017, +1.058, +1.111, +1.162, +1.214, +1.262, +1.307, +1.359, +1.417, +1.474, +1.539, +1.596, +1.670, +1.717, +1.783, +1.844, +1.898, +1.960, +2.049, +2.120, +2.204, +2.294, +2.392, +2.504, +2.580, +2.701, +2.814, +2.943, +3.097, +3.255, +3.511, +3.813, +4.273, +4.683, +5.357, +5.695, +6.469, +6.755, +6.899, +6.916, +6.916, +6.916},  +0.297,  +0.298,   1.685},
	{"DC6-5x4Bytes-1",  1024, 5632, 0, { -5.574, -5.574, -5.574, -5.569, -5.524, -5.254, -4.695, -4.392, -3.961, -3.580, -3.097, -2.804, -2.585, -2.453, -2.313, -2.175, -2.055, -1.946, -1.854, -1.764, -1.674, -1.598, -1.509, -1.444, -1.365, -1.298, -1.226, -1.167, -1.129, -1.071, -1.016, -0.952, -0.899, -0.842, -0.776, -0.722, -0.677, -0.631, -0.589, -0.532, -0.483, -0.439, -0.399, -0.352, -0.301, -0.256, -0.217, -0.169, -0.124, -0.078, -0.038, +0.005, +0.048, +0.094, +0.137, +0.188, +0.227, +0.267, +0.309, +0.348, +0.391, +0.444, +0.490, +0.530, +0.574, +0.622, +0.664, +0.703, +0.741, +0.779, +0.808, +0.849, +0.883, +0.929, +0.976, +1.027, +1.076, +1.110, +1.159, +1.209, +1.263, +1.314, +1.374, +1.419, +1.465, +1.523, +1.572, +1.632, +1.694, +1.766, +1.832, +1.891, +1.957, +2.033, +2.099, +2.173, +2.263, +2.357, +2.447, +2.527, +2.654, +2.775, +2.912, +3.078, +3.248, +3.488, +3.813, +4.221, +4.616, +5.189, +5.851, +6.107, +6.869, +7.592, +7.673, +7.673, +7.673},  +0.302,  +0.309,   1.676},
	{"DC6-5x4Bytes-1",  1280, 5632, 0, { -5.633, -5.633, -5.633, -5.622, -5.531, -5.302, -4.952, -4.322, -3.918, -3.647, -3.124, -2.808, -2.586, -2.415, -2.260, -2.124, -2.007, -1.920, -1.816, -1.726, -1.630, -1.550, -1.489, -1.432, -1.344, -1.274, -1.204, -1.140, -1.081, -1.025, -0.972, -0.926, -0.878, -0.827, -0.787, -0.733, -0.669, -0.624, -0.566, -0.526, -0.481, -0.434, -0.386, -0.342, -0.306, -0.268, -0.226, -0.188, -0.143, -0.102, -0.056, -0.015, +0.016, +0.055, +0.102, +0.148, +0.191, +0.236, +0.276, +0.314, +0.355, +0.396, +0.439, +0.481, +0.511, +0.558, +0.602, +0.644, +0.692, +0.736, +0.779, +0.822, +0.866, +0.927, +0.976, +1.017, +1.075, +1.117, +1.171, +1.216, +1.265, +1.309, +1.351, +1.413, +1.457, +1.528, +1.580, +1.630, +1.685, +1.740, +1.815, +1.880, +1.942, +2.014, +2.091, +2.183, +2.250, +2.304, +2.429, +2.521, +2.635, +2.771, +2.930, +3.089, +3.262, +3.440, +3.768, +4.269, +4.603, +5.210, +5.376, +5.775, +6.314, +6.839, +6.898, +6.898, +6.898},  +0.296,  +0.276,   1.663},
	{"DC6-5x4Bytes-1",  1536, 5632, 0, { -5.259, -5.259, -5.259, -5.256, -5.233, -5.034, -4.853, -4.420, -3.863, -3.491, -3.074, -2.796, -2.600, -2.425, -2.273, -2.171, -2.036, -1.929, -1.824, -1.747, -1.669, -1.587, -1.511, -1.447, -1.389, -1.322, -1.252, -1.196, -1.122, -1.072, -1.011, -0.958, -0.894, -0.848, -0.788, -0.732, -0.686, -0.639, -0.594, -0.547, -0.487, -0.440, -0.400, -0.347, -0.308, -0.266, -0.215, -0.167, -0.129, -0.087, -0.045, -0.007, +0.038, +0.085, +0.122, +0.157, +0.198, +0.242, +0.282, +0.330, +0.376, +0.426, +0.482, +0.524, +0.554, +0.593, +0.641, +0.683, +0.732, +0.769, +0.812, +0.867, +0.905, +0.944, +0.981, +1.020, +1.064, +1.105, +1.150, +1.194, +1.241, +1.286, +1.337, +1.394, +1.474, +1.536, +1.580, +1.649, +1.710, +1.762, +1.812, +1.888, +1.966, +2.037, +2.116, +2.200, +2.267, +2.381, +2.464, +2.542, +2.646, +2.775, +2.894, +3.054, +3.232, +3.483, +3.770, +4.178, +4.667, +5.109, +5.450, +5.684, +6.355, +6.375, +6.377, +6.377, +6.377},  +0.299,  +0.282,   1.669},
	{"DC6-5x4Bytes-1",  1792, 5632, 0, { -6.121, -6.121, -6.121, -6.051, -5.429, -4.861, -4.627, -4.296, -3.841, -3.451, -3.108, -2.844, -2.682, -2.514, -2.322, -2.212, -2.099, -1.997, -1.889, -1.795, -1.698, -1.616, -1.546, -1.469, -1.387, -1.322, -1.256, -1.194, -1.127, -1.067, -1.006, -0.951, -0.900, -0.847, -0.800, -0.752, -0.699, -0.647, -0.604, -0.557, -0.510, -0.457, -0.412, -0.369, -0.328, -0.271, -0.216, -0.170, -0.123, -0.083, -0.037, -0.001, +0.046, +0.087, +0.132, +0.169, +0.205, +0.257, +0.309, +0.355, +0.396, +0.445, +0.483, +0.517, +0.555, +0.597, +0.641, +0.692, +0.735, +0.779, +0.827, +0.875, +0.914, +0.962, +1.003, +1.052, +1.091, +1.135, +1.190, +1.232, +1.274, +1.325, +1.370, +1.412, +1.464, +1.508, +1.563, +1.618, +1.685, +1.745, +1.810, +1.874, +1.949, +1.997, +2.058, +2.156, +2.220, +2.299, +2.391, +2.493, +2.609, +2.732, +2.888, +3.055, +3.298, +3.512, +3.848, +4.241, +4.652, +5.039, +5.592, +5.951, +6.471, +7.182, +7.261, +7.261, +7.261},  +0.292,  +0.309,   1.676},
	{"DC6-5x4Bytes-1",  2048, 5632, 0, { -5.589, -5.589, -5.589, -5.581, -5.515, -4.721, -4.536, -4.314, -3.935, -3.482, -3.131, -2.762, -2.562, -2.425, -2.263, -2.138, -2.041, -1.947, -1.848, -1.753, -1.648, -1.556, -1.480, -1.407, -1.342, -1.287, -1.227, -1.172, -1.108, -1.052, -0.993, -0.933, -0.887, -0.837, -0.776, -0.733, -0.675, -0.618, -0.568, -0.522, -0.469, -0.428, -0.385, -0.343, -0.290, -0.248, -0.201, -0.162, -0.129, -0.080, -0.031, +0.014, +0.052, +0.095, +0.135, +0.170, +0.203, +0.236, +0.275, +0.316, +0.354, +0.395, +0.437, +0.475, +0.533, +0.572, +0.622, +0.654, +0.701, +0.739, +0.783, +0.826, +0.864, +0.912, +0.958, +1.016, +1.065, +1.107, +1.152, +1.201, +1.255, +1.313, +1.364, +1.418, +1.470, +1.521, +1.572, +1.626, +1.699, +1.757, +1.814, +1.871, +1.926, +1.995, +2.072, +2.144, +2.210, +2.291, +2.392, +2.491, +2.614, +2.702, +2.868, +3.014, +3.227, +3.468, +3.773, +4.209, +4.654, +5.495, +5.832, +6.278, +6.849, +7.538, +7.615, +7.615, +7.615},  +0.295,  +0.275,   1.658},
	{"DC6-5x4Bytes-1",  2560, 5632, 0, { -5.886, -5.886, -5.886, -5.838, -5.411, -4.936, -4.443, -4.110, -3.732, -3.433, -3.030, -2.782, -2.621, -2.417, -2.286, -2.158, -2.034, -1.930, -1.850, -1.773, -1.689, -1.609, -1.525, -1.448, -1.368, -1.301, -1.243, -1.185, -1.125, -1.062, -1.010, -0.943, -0.883, -0.827, -0.766, -0.719, -0.664, -0.620, -0.579, -0.535, -0.500, -0.455, -0.407, -0.368, -0.326, -0.285, -0.237, -0.192, -0.153, -0.110, -0.075, -0.041, +0.010, +0.060, +0.105, +0.155, +0.192, +0.234, +0.275, +0.328, +0.360, +0.399, +0.440, +0.478, +0.514, +0.558, +0.608, +0.650, +0.689, +0.729, +0.785, +0.830, +0.880, +0.917, +0.960, +1.017, +1.063, +1.115, +1.160, +1.203, +1.248, +1.292, +1.341, +1.403, +1.449, +1.501, +1.550, +1.598, +1.657, +1.727, +1.794, +1.850, +1.931, +2.005, +2.069, +2.145, +2.228, +2.335, +2.419, +2.526, +2.633, +2.727, +2.850, +2.996, +3.169, +3.421, +3.689, +4.116, +4.561, +5.478, +5.751, +6.021, +6.090, +6.142, +6.148, +6.148, +6.148},  +0.284,  +0.275,   1.649},
	{"DC6-5x4Bytes-1",  3072, 5632, 0, { -6.005, -6.005, -6.005, -5.968, -5.639, -5.370, -4.841, -4.601, -4.043, -3.561, -3.100, -2.868, -2.621, -2.415, -2.291, -2.149, -2.038, -1.916, -1.826, -1.721, -1.652, -1.554, -1.481, -1.406, -1.344, -1.274, -1.222, -1.163, -1.108, -1.058, -1.009, -0.945, -0.889, -0.836, -0.777, -0.726, -0.670, -0.611, -0.567, -0.513, -0.471, -0.425, -0.378, -0.328, -0.280, -0.245, -0.198, -0.156, -0.110, -0.073, -0.027, +0.006, +0.045, +0.075, +0.123, +0.174, +0.219, +0.255, +0.303, +0.338, +0.379, +0.423, +0.478, +0.513, +0.562, +0.605, +0.648, +0.685, +0.727, +0.775, +0.816, +0.860, +0.901, +0.937, +0.981, +1.027, +1.065, +1.118, +1.169, +1.212, +1.260, +1.310, +1.367, +1.408, +1.453, +1.507, +1.554, +1.610, +1.674, +1.734, +1.781, +1.847, +1.912, +1.986, +2.070, +2.167, +2.246, +2.335, +2.414, +2.491, +2.613, +2.705, +2.810, +2.958, +3.174, +3.362, +3.678, +4.069, +4.400, +4.827, +5.413, +5.603, +6.457, +6.787, +6.824, +6.824, +6.824},  +0.290,  +0.303,   1.646},
	{"DC6-5x4Bytes-1",  3584, 5632, 0, { -6.003, -6.003, -6.003, -5.978, -5.754, -5.471, -4.824, -4.529, -4.018, -3.552, -3.096, -2.829, -2.614, -2.442, -2.304, -2.173, -2.070, -1.974, -1.852, -1.748, -1.642, -1.547, -1.479, -1.401, -1.321, -1.259, -1.195, -1.140, -1.087, -1.029, -0.973, -0.913, -0.850, -0.790, -0.743, -0.701, -0.650, -0.607, -0.566, -0.528, -0.482, -0.448, -0.401, -0.361, -0.311, -0.267, -0.233, -0.182, -0.124, -0.080, -0.041, -0.007, +0.030, +0.080, +0.116, +0.157, +0.201, +0.243, +0.289, +0.323, +0.366, +0.406, +0.455, +0.503, +0.546, +0.587, +0.634, +0.683, +0.716, +0.769, +0.812, +0.848, +0.887, +0.923, +0.973, +1.021, +1.076, +1.123, +1.177, +1.220, +1.268, +1.313, +1.358, +1.422, +1.474, +1.532, +1.583, +1.637, +1.688, +1.751, +1.803, +1.870, +1.935, +2.008, +2.087, +2.155, +2.235, +2.341, +2.435, +2.540, +2.660, +2.771, +2.925, +3.079, +3.222, +3.445, +3.734, +4.311, +4.607, +5.142, +5.498, +5.624, +6.760, +6.938, +6.958, +6.958, +6.958},  +0.299,  +0.289,   1.667},
	{"DC6-5x4Bytes-1",  4096, 5632, 0, { -6.333, -6.333, -6.333, -6.301, -6.015, -5.120, -4.825, -4.528, -3.991, -3.576, -3.064, -2.791, -2.517, -2.355, -2.234, -2.138, -2.030, -1.886, -1.789, -1.691, -1.607, -1.528, -1.457, -1.388, -1.299, -1.247, -1.191, -1.146, -1.074, -1.025, -0.972, -0.919, -0.868, -0.813, -0.759, -0.708, -0.660, -0.603, -0.561, -0.520, -0.474, -0.433, -0.391, -0.351, -0.301, -0.263, -0.214, -0.185, -0.153, -0.125, -0.081, -0.029, +0.023, +0.071, +0.118, +0.168, +0.220, +0.264, +0.294, +0.340, +0.377, +0.416, +0.460, +0.506, +0.540, +0.586, +0.628, +0.670, +0.715, +0.755, +0.796, +0.834, +0.881, +0.922, +0.972, +1.012, +1.061, +1.102, +1.152, +1.204, +1.263, +1.325, +1.378, +1.434, +1.480, +1.541, +1.599, +1.660, +1.716, +1.767, +1.827, +1.890, +1.954, +2.026, +2.095, +2.180, +2.273, +2.351, +2.440, +2.529, +2.653, +2.761, +2.918, +3.067, +3.318, +3.573, +3.895, +4.317, +4.660, +5.294, +5.810, +6.229, +6.728, +7.457, +7.539, +7.539, +7.539},  +0.313,  +0.294,   1.669},
	{"DC6-5x4Bytes-1",  5120, 5632, 0, { -6.184, -6.184, -6.184, -6.146, -5.813, -4.850, -4.795, -4.471, -3.817, -3.456, -3.048, -2.771, -2.581, -2.424, -2.269, -2.142, -2.027, -1.901, -1.826, -1.748, -1.653, -1.570, -1.486, -1.416, -1.343, -1.292, -1.232, -1.161, -1.084, -1.031, -0.976, -0.941, -0.895, -0.836, -0.786, -0.726, -0.673, -0.621, -0.571, -0.523, -0.471, -0.433, -0.396, -0.349, -0.310, -0.278, -0.232, -0.184, -0.147, -0.105, -0.062, -0.017, +0.037, +0.078, +0.122, +0.166, +0.202, +0.250, +0.284, +0.325, +0.364, +0.413, +0.458, +0.505, +0.553, +0.592, +0.624, +0.669, +0.711, +0.756, +0.803, +0.848, +0.892, +0.934, +0.972, +1.030, +1.074, +1.120, +1.164, +1.218, +1.265, +1.307, +1.363, +1.411, +1.464, +1.514, +1.564, +1.645, +1.703, +1.764, +1.829, +1.899, +1.974, +2.041, +2.110, +2.189, +2.257, +2.346, +2.455, +2.544, +2.634, +2.749, +2.850, +3.005, +3.205, +3.549, +3.853, +4.343, +4.899, +5.657, +5.912, +6.497, +6.833, +6.991, +7.009, +7.009, +7.009},  +0.306,  +0.284,   1.673},
	{"DC6-5x4Bytes-1",  6144, 5632, 0, { -6.323, -6.323, -6.323, -6.254, -5.632, -5.105, -4.863, -4.170, -3.834, -3.501, -3.075, -2.755, -2.521, -2.351, -2.204, -2.093, -1.958, -1.855, -1.745, -1.663, -1.584, -1.491, -1.420, -1.357, -1.306, -1.233, -1.173, -1.105, -1.047, -1.002, -0.942, -0.881, -0.832, -0.777, -0.736, -0.689, -0.647, -0.595, -0.554, -0.511, -0.469, -0.419, -0.379, -0.328, -0.288, -0.238, -0.197, -0.158, -0.110, -0.059, -0.012, +0.042, +0.077, +0.120, +0.155, +0.204, +0.234, +0.275, +0.318, +0.355, +0.390, +0.440, +0.474, +0.511, +0.559, +0.595, +0.631, +0.668, +0.705, +0.736, +0.780, +0.835, +0.881, +0.931, +0.954, +1.004, +1.055, +1.107, +1.147, +1.199, +1.240, +1.287, +1.351, +1.400, +1.454, +1.508, +1.557, +1.619, +1.680, +1.749, +1.815, +1.888, +1.949, +2.024, +2.094, +2.190, +2.266, +2.375, +2.463, +2.588, +2.701, +2.816, +2.945, +3.085, +3.305, +3.503, +3.812, +4.271, +4.832, +5.223, +5.398, +5.439, +5.584, +5.743, +5.761, +5.761, +5.761},  +0.324,  +0.318,   1.649},
	{"DC6-5x4Bytes-1",  7168, 5632, 0, { -5.792, -5.792, -5.792, -5.775, -5.631, -5.206, -4.719, -4.364, -3.780, -3.434, -2.993, -2.725, -2.524, -2.371, -2.272, -2.133, -2.011, -1.894, -1.793, -1.693, -1.600, -1.519, -1.442, -1.367, -1.309, -1.251, -1.174, -1.113, -1.050, -0.995, -0.937, -0.878, -0.828, -0.775, -0.727, -0.677, -0.634, -0.579, -0.534, -0.480, -0.428, -0.383, -0.337, -0.289, -0.249, -0.207, -0.168, -0.123, -0.078, -0.044, -0.001, +0.034, +0.081, +0.122, +0.169, +0.200, +0.242, +0.289, +0.328, +0.369, +0.415, +0.453, +0.498, +0.530, +0.568, +0.605, +0.649, +0.686, +0.737, +0.781, +0.832, +0.881, +0.924, +0.972, +1.007, +1.044, +1.086, +1.126, +1.162, +1.219, +1.250, +1.295, +1.347, +1.399, +1.457, +1.516, +1.554, +1.624, +1.689, +1.768, +1.841, +1.901, +1.966, +2.035, +2.118, +2.195, +2.275, +2.363, +2.478, +2.568, +2.679, +2.791, +2.923, +3.094, +3.260, +3.506, +3.814, +4.314, +4.684, +5.244, +5.511, +5.695, +6.147, +6.228, +6.237, +6.237, +6.237},  +0.334,  +0.328,   1.652},
	{"DC6-5x4Bytes-1",  8192, 5632, 0, { -5.683, -5.683, -5.683, -5.674, -5.593, -5.343, -4.813, -4.388, -3.939, -3.490, -3.040, -2.723, -2.531, -2.384, -2.254, -2.098, -1.979, -1.876, -1.783, -1.685, -1.611, -1.535, -1.466, -1.391, -1.333, -1.276, -1.202, -1.127, -1.065, -1.009, -0.948, -0.889, -0.832, -0.786, -0.739, -0.705, -0.649, -0.591, -0.549, -0.498, -0.441, -0.385, -0.336, -0.280, -0.236, -0.194, -0.147, -0.105, -0.064, -0.024, +0.010, +0.054, +0.093, +0.139, +0.180, +0.215, +0.257, +0.299, +0.347, +0.381, +0.416, +0.458, +0.495, +0.543, +0.582, +0.618, +0.669, +0.713, +0.760, +0.801, +0.837, +0.880, +0.922, +0.964, +1.010, +1.041, +1.086, +1.135, +1.178, +1.231, +1.289, +1.338, +1.389, +1.432, +1.487, +1.549, +1.597, +1.643, +1.700, +1.768, +1.829, +1.880, +1.958, +2.034, +2.109, +2.194, +2.289, +2.369, +2.452, +2.556, +2.673, +2.787, +2.908, +3.080, +3.301, +3.499, +3.812, +4.294, +4.791, +5.196, +5.502, +6.065, +6.326, +6.401, +6.410, +6.410, +6.410},  +0.337,  +0.347,   1.661},
	{"DC6-5x4Bytes-1", 10240, 5632, 0, { -7.177, -7.177, -7.177, -7.098, -6.394, -5.542, -5.055, -4.386, -3.861, -3.533, -3.094, -2.828, -2.596, -2.404, -2.256, -2.125, -2.001, -1.891, -1.803, -1.707, -1.600, -1.530, -1.442, -1.378, -1.303, -1.253, -1.182, -1.120, -1.061, -1.005, -0.951, -0.910, -0.855, -0.792, -0.733, -0.674, -0.624, -0.578, -0.512, -0.465, -0.415, -0.364, -0.317, -0.273, -0.225, -0.184, -0.148, -0.096, -0.043, -0.003, +0.049, +0.085, +0.123, +0.162, +0.209, +0.251, +0.295, +0.329, +0.377, +0.428, +0.463, +0.503, +0.546, +0.594, +0.637, +0.672, +0.707, +0.757, +0.800, +0.836, +0.872, +0.916, +0.956, +0.995, +1.041, +1.092, +1.143, +1.190, +1.229, +1.271, +1.327, +1.376, +1.427, +1.480, +1.548, +1.598, +1.653, +1.703, +1.760, +1.821, +1.881, +1.956, +2.026, +2.080, +2.148, +2.218, +2.303, +2.407, +2.511, +2.606, +2.705, +2.807, +2.975, +3.136, +3.310, +3.520, +3.782, +4.315, +4.695, +5.045, +5.299, +5.775, +6.759, +6.910, +6.927, +6.927, +6.927},  +0.360,  +0.377,   1.679},
	{"DC6-5x4Bytes-1", 12288, 5632, 0, { -5.397, -5.397, -5.397, -5.377, -5.201, -4.921, -4.738, -4.288, -3.759, -3.390, -2.996, -2.745, -2.590, -2.411, -2.251, -2.118, -1.998, -1.857, -1.744, -1.641, -1.560, -1.487, -1.404, -1.326, -1.252, -1.186, -1.124, -1.064, -0.998, -0.946, -0.885, -0.835, -0.789, -0.744, -0.697, -0.641, -0.594, -0.550, -0.500, -0.460, -0.394, -0.346, -0.300, -0.250, -0.214, -0.172, -0.129, -0.084, -0.053, -0.011, +0.050, +0.088, +0.136, +0.177, +0.215, +0.262, +0.303, +0.348, +0.394, +0.443, +0.487, +0.524, +0.563, +0.603, +0.642, +0.685, +0.727, +0.774, +0.814, +0.854, +0.903, +0.944, +0.990, +1.031, +1.073, +1.127, +1.163, +1.213, +1.258, +1.313, +1.353, +1.403, +1.452, +1.500, +1.544, +1.596, +1.657, +1.717, +1.774, +1.830, +1.905, +1.972, +2.048, +2.108, +2.172, +2.257, +2.332, +2.404, +2.500, +2.602, +2.698, +2.811, +2.949, +3.117, +3.283, +3.514, +3.800, +4.191, +4.637, +5.338, +5.590, +5.744, +6.234, +6.413, +6.433, +6.433, +6.433},  +0.384,  +0.394,   1.660},
	{"DC6-5x4Bytes-1", 14336, 5632, 0, { -5.955, -5.955, -5.955, -5.927, -5.676, -5.405, -5.035, -4.476, -4.033, -3.436, -2.983, -2.692, -2.503, -2.302, -2.159, -2.022, -1.919, -1.806, -1.684, -1.578, -1.507, -1.437, -1.381, -1.318, -1.251, -1.198, -1.116, -1.063, -1.002, -0.952, -0.894, -0.842, -0.787, -0.746, -0.696, -0.640, -0.588, -0.545, -0.468, -0.425, -0.368, -0.327, -0.274, -0.216, -0.173, -0.137, -0.094, -0.058, -0.027, +0.019, +0.062, +0.103, +0.145, +0.199, +0.239, +0.276, +0.320, +0.355, +0.386, +0.418, +0.463, +0.504, +0.543, +0.582, +0.624, +0.676, +0.726, +0.776, +0.821, +0.868, +0.907, +0.954, +0.990, +1.038, +1.079, +1.123, +1.167, +1.215, +1.261, +1.310, +1.354, +1.396, +1.448, +1.505, +1.559, +1.621, +1.675, +1.730, +1.776, +1.840, +1.901, +1.967, +2.036, +2.098, +2.170, +2.241, +2.313, +2.407, +2.508, +2.594, +2.690, +2.816, +2.953, +3.100, +3.289, +3.499, +3.762, +4.213, +4.611, +5.158, +5.457, +5.615, +5.933, +6.264, +6.301, +6.301, +6.301},  +0.393,  +0.386,   1.647},
	{"DC6-5x4Bytes-1", 16384, 5632, 0, { -5.517, -5.517, -5.517, -5.505, -5.396, -5.220, -4.998, -4.472, -3.851, -3.475, -3.050, -2.719, -2.492, -2.321, -2.162, -2.039, -1.937, -1.839, -1.743, -1.661, -1.573, -1.491, -1.410, -1.336, -1.245, -1.176, -1.119, -1.065, -1.003, -0.938, -0.874, -0.814, -0.754, -0.714, -0.661, -0.621, -0.578, -0.533, -0.484, -0.427, -0.374, -0.327, -0.279, -0.228, -0.181, -0.137, -0.095, -0.044, -0.001, +0.040, +0.077, +0.116, +0.160, +0.209, +0.253, +0.299, +0.332, +0.375, +0.413, +0.455, +0.502, +0.537, +0.582, +0.622, +0.673, +0.711, +0.745, +0.783, +0.828, +0.865, +0.906, +0.947, +0.986, +1.035, +1.081, +1.125, +1.171, +1.218, +1.264, +1.304, +1.347, +1.391, +1.433, +1.487, +1.558, +1.615, +1.680, +1.727, +1.792, +1.842, +1.911, +1.991, +2.065, +2.129, +2.216, +2.299, +2.376, +2.444, +2.547, +2.647, +2.723, +2.832, +2.961, +3.107, +3.299, +3.478, +3.766, +4.234, +4.617, +5.151, +5.375, +5.789, +6.064, +6.091, +6.094, +6.094, +6.094},  +0.400,  +0.413,   1.656},
	{"DC6-5x4Bytes-1", 20480, 5632, 0, { -6.268, -6.268, -6.268, -6.258, -6.174, -5.550, -4.690, -4.208, -3.763, -3.339, -2.886, -2.561, -2.397, -2.207, -2.071, -1.960, -1.854, -1.784, -1.709, -1.614, -1.516, -1.450, -1.367, -1.293, -1.239, -1.181, -1.133, -1.071, -1.016, -0.956, -0.911, -0.859, -0.806, -0.761, -0.717, -0.660, -0.609, -0.560, -0.507, -0.464, -0.412, -0.363, -0.313, -0.258, -0.213, -0.156, -0.110, -0.072, -0.030, +0.004, +0.054, +0.089, +0.132, +0.166, +0.207, +0.251, +0.300, +0.338, +0.389, +0.427, +0.461, +0.509, +0.545, +0.585, +0.627, +0.671, +0.715, +0.750, +0.791, +0.834, +0.885, +0.927, +0.969, +1.025, +1.073, +1.121, +1.169, +1.217, +1.257, +1.299, +1.357, +1.409, +1.461, +1.508, +1.568, +1.612, +1.667, +1.716, +1.772, +1.827, +1.885, +1.941, +1.996, +2.068, +2.142, +2.197, +2.294, +2.384, +2.474, +2.573, +2.689, +2.807, +2.941, +3.094, +3.252, +3.438, +3.803, +4.314, +4.830, +5.483, +5.936, +6.318, +6.720, +7.242, +7.300, +7.300, +7.300},  +0.391,  +0.389,   1.636},
	{"DC6-5x4Bytes-1", 24576, 5632, 0, { -6.082, -6.082, -6.082, -6.036, -5.625, -5.125, -4.573, -4.199, -3.597, -3.221, -2.841, -2.576, -2.396, -2.215, -2.100, -1.993, -1.881, -1.776, -1.683, -1.597, -1.514, -1.430, -1.341, -1.258, -1.198, -1.137, -1.084, -1.017, -0.957, -0.899, -0.835, -0.787, -0.728, -0.673, -0.638, -0.583, -0.541, -0.499, -0.466, -0.415, -0.356, -0.302, -0.252, -0.209, -0.167, -0.117, -0.065, -0.025, +0.014, +0.055, +0.095, +0.141, +0.173, +0.206, +0.254, +0.294, +0.333, +0.373, +0.416, +0.456, +0.501, +0.535, +0.583, +0.625, +0.681, +0.724, +0.761, +0.799, +0.844, +0.882, +0.922, +0.968, +1.015, +1.050, +1.084, +1.119, +1.167, +1.222, +1.265, +1.309, +1.352, +1.392, +1.443, +1.490, +1.532, +1.576, +1.626, +1.681, +1.731, +1.788, +1.844, +1.908, +1.984, +2.056, +2.131, +2.225, +2.298, +2.368, +2.457, +2.562, +2.682, +2.798, +2.933, +3.073, +3.275, +3.529, +3.822, +4.320, +4.833, +5.231, +5.654, +6.505, +7.315, +7.646, +7.683, +7.683, +7.683},  +0.416,  +0.416,   1.623},
	{"DC6-5x4Bytes-1", 28672, 5632, 0, { -5.831, -5.831, -5.831, -5.831, -5.829, -5.248, -4.691, -4.194, -3.629, -3.328, -2.885, -2.667, -2.457, -2.284, -2.146, -2.037, -1.913, -1.815, -1.708, -1.617, -1.513, -1.447, -1.379, -1.318, -1.243, -1.190, -1.129, -1.054, -0.997, -0.925, -0.863, -0.810, -0.750, -0.698, -0.653, -0.609, -0.559, -0.504, -0.452, -0.410, -0.364, -0.317, -0.273, -0.236, -0.195, -0.146, -0.111, -0.072, -0.030, +0.029, +0.072, +0.111, +0.147, +0.184, +0.225, +0.262, +0.309, +0.349, +0.393, +0.431, +0.478, +0.520, +0.555, +0.592, +0.637, +0.681, +0.713, +0.764, +0.804, +0.846, +0.890, +0.931, +0.970, +1.016, +1.061, +1.112, +1.170, +1.224, +1.262, +1.308, +1.346, +1.398, +1.449, +1.493, +1.565, +1.620, +1.666, +1.720, +1.759, +1.812, +1.875, +1.941, +2.010, +2.075, +2.151, +2.238, +2.321, +2.414, +2.508, +2.604, +2.721, +2.851, +2.987, +3.148, +3.316, +3.503, +3.720, +4.113, +4.597, +5.264, +5.813, +5.954, +6.303, +6.323, +6.325, +6.325, +6.325},  +0.398,  +0.393,   1.635},
	{"DC6-5x4Bytes-1", 32768, 5632, 0, { -6.324, -6.324, -6.324, -6.286, -5.943, -5.492, -4.918, -4.241, -3.645, -3.277, -2.849, -2.615, -2.442, -2.282, -2.097, -2.003, -1.891, -1.798, -1.710, -1.625, -1.548, -1.474, -1.390, -1.321, -1.252, -1.193, -1.120, -1.060, -1.003, -0.941, -0.873, -0.814, -0.767, -0.714, -0.660, -0.615, -0.572, -0.520, -0.466, -0.418, -0.377, -0.314, -0.274, -0.233, -0.182, -0.143, -0.113, -0.069, -0.032, -0.002, +0.038, +0.085, +0.131, +0.171, +0.203, +0.255, +0.298, +0.334, +0.379, +0.419, +0.457, +0.500, +0.539, +0.584, +0.625, +0.674, +0.714, +0.752, +0.800, +0.835, +0.879, +0.924, +0.964, +1.019, +1.057, +1.092, +1.139, +1.181, +1.235, +1.290, +1.341, +1.395, +1.431, +1.486, +1.554, +1.616, +1.663, +1.734, +1.789, +1.846, +1.902, +1.969, +2.040, +2.102, +2.169, +2.247, +2.320, +2.393, +2.496, +2.568, +2.678, +2.803, +2.941, +3.141, +3.274, +3.483, +3.758, +4.272, +4.896, +5.336, +5.440, +5.896, +6.683, +7.494, +7.585, +7.585, +7.585},  +0.395,  +0.379,   1.637},
	{"DC6-5x4Bytes-1", 40960, 5632, 0, { -6.015, -6.015, -6.015, -5.938, -5.253, -4.335, -4.175, -3.936, -3.580, -3.186, -2.828, -2.604, -2.427, -2.290, -2.134, -1.977, -1.852, -1.760, -1.678, -1.602, -1.515, -1.450, -1.377, -1.320, -1.258, -1.202, -1.148, -1.091, -1.025, -0.975, -0.917, -0.857, -0.801, -0.751, -0.698, -0.647, -0.599, -0.552, -0.505, -0.460, -0.409, -0.361, -0.297, -0.250, -0.212, -0.164, -0.119, -0.082, -0.031, +0.015, +0.058, +0.107, +0.142, +0.179, +0.219, +0.263, +0.301, +0.347, +0.402, +0.446, +0.490, +0.534, +0.577, +0.621, +0.660, +0.696, +0.736, +0.777, +0.816, +0.861, +0.917, +0.961, +1.013, +1.057, +1.108, +1.165, +1.212, +1.256, +1.304, +1.356, +1.409, +1.457, +1.503, +1.555, +1.611, +1.668, +1.730, +1.792, +1.846, +1.905, +1.963, +2.021, +2.080, +2.145, +2.213, +2.285, +2.361, +2.439, +2.518, +2.623, +2.754, +2.871, +3.001, +3.154, +3.321, +3.553, +3.816, +4.236, +4.648, +5.200, +5.670, +5.853, +6.587, +6.784, +6.806, +6.806, +6.806},  +0.416,  +0.402,   1.648},
	{"DC6-5x4Bytes-1", 49152, 5632, 0, { -5.603, -5.603, -5.603, -5.598, -5.550, -4.909, -4.248, -3.917, -3.617, -3.314, -2.948, -2.634, -2.408, -2.244, -2.113, -1.985, -1.869, -1.778, -1.701, -1.596, -1.507, -1.431, -1.373, -1.306, -1.232, -1.167, -1.093, -1.028, -0.968, -0.914, -0.862, -0.813, -0.750, -0.698, -0.654, -0.594, -0.532, -0.494, -0.435, -0.398, -0.346, -0.306, -0.258, -0.218, -0.165, -0.120, -0.070, -0.027, +0.013, +0.056, +0.100, +0.150, +0.189, +0.232, +0.272, +0.309, +0.357, +0.392, +0.435, +0.478, +0.520, +0.567, +0.607, +0.657, +0.697, +0.732, +0.771, +0.808, +0.841, +0.883, +0.933, +0.977, +1.024, +1.067, +1.112, +1.162, +1.207, +1.262, +1.313, +1.353, +1.394, +1.447, +1.488, +1.533, +1.592, +1.644, +1.708, +1.750, +1.800, +1.856, +1.914, +1.991, +2.051, +2.122, +2.182, +2.265, +2.333, +2.439, +2.541, +2.667, +2.778, +2.891, +3.042, +3.196, +3.414, +3.635, +3.928, +4.320, +4.793, +5.339, +5.863, +6.131, +6.650, +6.838, +6.859, +6.859, +6.859},  +0.437,  +0.435,   1.654},
	{"DC6-5x4Bytes-1", 57344, 5632, 0, { -5.558, -5.558, -5.558, -5.534, -5.319, -4.968, -4.588, -4.305, -3.741, -3.408, -2.924, -2.664, -2.518, -2.309, -2.133, -2.023, -1.917, -1.823, -1.718, -1.652, -1.556, -1.446, -1.360, -1.289, -1.231, -1.171, -1.115, -1.067, -1.009, -0.952, -0.890, -0.840, -0.774, -0.721, -0.666, -0.631, -0.579, -0.539, -0.483, -0.440, -0.388, -0.333, -0.284, -0.226, -0.193, -0.151, -0.106, -0.055, -0.011, +0.037, +0.076, +0.108, +0.151, +0.198, +0.237, +0.279, +0.313, +0.361, +0.401, +0.448, +0.482, +0.530, +0.577, +0.623, +0.670, +0.708, +0.754, +0.799, +0.839, +0.882, +0.922, +0.964, +1.015, +1.058, +1.106, +1.139, +1.182, +1.230, +1.283, +1.321, +1.374, +1.416, +1.472, +1.531, +1.581, +1.627, +1.692, +1.740, +1.806, +1.871, +1.924, +1.993, +2.056, +2.136, +2.225, +2.305, +2.387, +2.466, +2.566, +2.652, +2.766, +2.873, +2.999, +3.154, +3.336, +3.592, +3.909, +4.399, +4.721, +5.188, +5.402, +5.862, +6.232, +6.266, +6.270, +6.270, +6.270},  +0.414,  +0.401,   1.664},
	{"DC6-5x4Bytes-1", 65536, 5632, 0, { -5.647, -5.647, -5.647, -5.629, -5.474, -5.146, -4.709, -4.302, -3.714, -3.374, -2.905, -2.646, -2.471, -2.265, -2.113, -1.994, -1.905, -1.795, -1.697, -1.603, -1.515, -1.446, -1.366, -1.302, -1.233, -1.167, -1.109, -1.060, -0.997, -0.922, -0.861, -0.788, -0.735, -0.692, -0.640, -0.601, -0.551, -0.503, -0.447, -0.410, -0.353, -0.302, -0.259, -0.214, -0.168, -0.122, -0.080, -0.045, -0.010, +0.030, +0.079, +0.135, +0.172, +0.222, +0.265, +0.304, +0.343, +0.387, +0.426, +0.465, +0.514, +0.559, +0.594, +0.631, +0.679, +0.718, +0.762, +0.798, +0.837, +0.880, +0.927, +0.971, +1.012, +1.060, +1.101, +1.147, +1.202, +1.244, +1.291, +1.347, +1.395, +1.448, +1.493, +1.542, +1.597, +1.654, +1.706, +1.765, +1.823, +1.880, +1.954, +2.024, +2.088, +2.166, +2.229, +2.310, +2.405, +2.505, +2.596, +2.702, +2.802, +2.898, +3.013, +3.201, +3.342, +3.526, +3.794, +4.174, +4.608, +5.294, +5.527, +5.791, +6.245, +6.677, +6.725, +6.725, +6.725},  +0.429,  +0.426,   1.655},
	{"DC6-5x4Bytes-1", 81920, 5632, 0, { -5.028, -5.028, -5.028, -5.023, -4.979, -4.660, -4.464, -4.147, -3.746, -3.261, -2.882, -2.619, -2.424, -2.254, -2.126, -1.989, -1.890, -1.778, -1.696, -1.605, -1.529, -1.439, -1.372, -1.308, -1.245, -1.167, -1.111, -1.052, -0.992, -0.943, -0.878, -0.836, -0.782, -0.733, -0.687, -0.622, -0.573, -0.527, -0.479, -0.431, -0.392, -0.340, -0.288, -0.233, -0.187, -0.143, -0.098, -0.049, -0.009, +0.028, +0.089, +0.126, +0.172, +0.209, +0.252, +0.303, +0.338, +0.371, +0.407, +0.445, +0.483, +0.528, +0.567, +0.610, +0.657, +0.704, +0.756, +0.790, +0.829, +0.874, +0.923, +0.973, +1.014, +1.061, +1.099, +1.160, +1.211, +1.258, +1.313, +1.359, +1.408, +1.455, +1.509, +1.566, +1.625, +1.680, +1.726, +1.787, +1.845, +1.905, +1.977, +2.031, +2.092, +2.167, +2.248, +2.318, +2.391, +2.495, +2.583, +2.686, +2.787, +2.886, +3.018, +3.207, +3.355, +3.551, +3.839, +4.355, +4.829, +5.334, +5.761, +6.032, +6.380, +6.421, +6.426, +6.426, +6.426},  +0.430,  +0.407,   1.660},
	{"DC6-5x4Bytes-1", 98304, 5632, 0, { -5.718, -5.718, -5.718, -5.678, -5.326, -4.664, -4.474, -4.108, -3.701, -3.383, -2.880, -2.559, -2.367, -2.213, -2.092, -1.962, -1.857, -1.771, -1.665, -1.579, -1.493, -1.415, -1.331, -1.252, -1.182, -1.124, -1.064, -1.004, -0.947, -0.885, -0.829, -0.767, -0.719, -0.657, -0.606, -0.547, -0.494, -0.445, -0.400, -0.356, -0.312, -0.272, -0.230, -0.190, -0.139, -0.101, -0.068, -0.023, +0.020, +0.069, +0.112, +0.148, +0.190, +0.229, +0.281, +0.321, +0.362, +0.399, +0.447, +0.483, +0.522, +0.556, +0.599, +0.640, +0.685, +0.718, +0.763, +0.804, +0.837, +0.881, +0.936, +0.976, +1.022, +1.066, +1.113, +1.163, +1.205, +1.245, +1.303, +1.357, +1.403, +1.460, +1.504, +1.550, +1.605, +1.661, +1.722, +1.776, +1.834, +1.897, +1.966, +2.025, +2.096, +2.176, +2.247, +2.307, +2.397, +2.498, +2.598, +2.683, +2.809, +2.948, +3.064, +3.201, +3.370, +3.566, +3.859, +4.279, +4.678, +5.211, +5.556, +5.991, +6.250, +6.367, +6.380, +6.380, +6.380},  +0.453,  +0.447,   1.644},
	{"DC6-5x4Bytes-1",114688, 5632, 0, { -4.936, -4.936, -4.936, -4.928, -4.856, -4.737, -4.539, -4.272, -3.838, -3.326, -2.898, -2.599, -2.398, -2.246, -2.104, -1.965, -1.827, -1.738, -1.661, -1.572, -1.493, -1.426, -1.343, -1.273, -1.189, -1.109, -1.040, -0.981, -0.938, -0.888, -0.828, -0.782, -0.719, -0.667, -0.615, -0.567, -0.518, -0.464, -0.418, -0.367, -0.315, -0.270, -0.237, -0.187, -0.153, -0.117, -0.082, -0.039, -0.005, +0.035, +0.079, +0.123, +0.169, +0.208, +0.260, +0.304, +0.340, +0.383, +0.426, +0.476, +0.520, +0.555, +0.608, +0.649, +0.688, +0.737, +0.778, +0.811, +0.850, +0.890, +0.933, +0.976, +1.020, +1.059, +1.099, +1.132, +1.176, +1.215, +1.268, +1.309, +1.351, +1.407, +1.452, +1.502, +1.551, +1.599, +1.665, +1.733, +1.780, +1.847, +1.919, +1.983, +2.055, +2.118, +2.195, +2.276, +2.379, +2.470, +2.549, +2.657, +2.749, +2.872, +2.980, +3.121, +3.298, +3.538, +3.833, +4.314, +4.732, +5.236, +5.581, +5.809, +6.001, +6.132, +6.147, +6.147, +6.147},  +0.433,  +0.426,   1.632},
	{"DC6-5x4Bytes-1",131072, 5632, 0, { -5.286, -5.286, -5.286, -5.282, -5.251, -4.485, -4.360, -4.262, -3.661, -3.243, -2.839, -2.585, -2.396, -2.226, -2.091, -1.966, -1.839, -1.724, -1.603, -1.530, -1.456, -1.393, -1.337, -1.267, -1.201, -1.134, -1.063, -1.008, -0.936, -0.883, -0.833, -0.787, -0.734, -0.688, -0.635, -0.591, -0.534, -0.486, -0.441, -0.401, -0.352, -0.310, -0.266, -0.229, -0.186, -0.149, -0.113, -0.063, -0.021, +0.030, +0.068, +0.113, +0.155, +0.193, +0.230, +0.272, +0.309, +0.338, +0.387, +0.432, +0.473, +0.515, +0.559, +0.608, +0.660, +0.699, +0.744, +0.784, +0.844, +0.890, +0.924, +0.968, +1.021, +1.058, +1.100, +1.158, +1.198, +1.243, +1.292, +1.340, +1.394, +1.444, +1.492, +1.549, +1.596, +1.641, +1.699, +1.751, +1.811, +1.884, +1.947, +2.029, +2.095, +2.148, +2.209, +2.271, +2.359, +2.457, +2.566, +2.657, +2.745, +2.858, +2.957, +3.112, +3.272, +3.500, +3.822, +4.362, +4.901, +5.287, +5.477, +5.949, +6.653, +7.301, +7.374, +7.374, +7.374},  +0.432,  +0.387,   1.634},
	{"DC6-5x4Bytes-1",163840, 5632, 0, { -5.293, -5.293, -5.293, -5.270, -5.065, -4.909, -4.831, -4.318, -3.713, -3.199, -2.817, -2.583, -2.362, -2.182, -2.054, -1.898, -1.804, -1.713, -1.623, -1.521, -1.456, -1.388, -1.322, -1.262, -1.195, -1.128, -1.060, -0.999, -0.951, -0.896, -0.827, -0.771, -0.720, -0.671, -0.624, -0.566, -0.521, -0.480, -0.444, -0.392, -0.357, -0.310, -0.264, -0.218, -0.170, -0.137, -0.091, -0.047, +0.012, +0.059, +0.097, +0.135, +0.170, +0.211, +0.246, +0.291, +0.327, +0.368, +0.407, +0.462, +0.499, +0.542, +0.579, +0.615, +0.653, +0.695, +0.748, +0.799, +0.837, +0.894, +0.937, +0.980, +1.026, +1.080, +1.125, +1.167, +1.215, +1.267, +1.311, +1.352, +1.405, +1.453, +1.502, +1.552, +1.606, +1.655, +1.709, +1.761, +1.823, +1.879, +1.944, +2.016, +2.081, +2.155, +2.245, +2.335, +2.417, +2.497, +2.594, +2.690, +2.806, +2.927, +3.065, +3.210, +3.377, +3.588, +3.817, +4.276, +4.746, +5.201, +5.576, +6.037, +6.901, +7.799, +7.900, +7.900, +7.900},  +0.449,  +0.407,   1.640},
	{"DC6-5x4Bytes-1",196608, 5632, 0, { -5.071, -5.071, -5.071, -5.060, -4.965, -4.718, -4.511, -4.263, -3.905, -3.306, -2.832, -2.582, -2.347, -2.162, -2.016, -1.905, -1.810, -1.703, -1.610, -1.542, -1.453, -1.372, -1.301, -1.242, -1.180, -1.138, -1.074, -1.014, -0.947, -0.884, -0.832, -0.788, -0.727, -0.669, -0.623, -0.575, -0.516, -0.460, -0.412, -0.368, -0.332, -0.290, -0.239, -0.194, -0.155, -0.119, -0.071, -0.037, +0.009, +0.048, +0.083, +0.126, +0.175, +0.217, +0.261, +0.309, +0.341, +0.391, +0.439, +0.491, +0.536, +0.575, +0.616, +0.647, +0.686, +0.736, +0.779, +0.815, +0.860, +0.902, +0.952, +1.003, +1.043, +1.083, +1.126, +1.168, +1.206, +1.256, +1.312, +1.364, +1.401, +1.450, +1.497, +1.538, +1.593, +1.649, +1.708, +1.759, +1.808, +1.875, +1.924, +1.999, +2.054, +2.117, +2.200, +2.258, +2.332, +2.418, +2.528, +2.619, +2.722, +2.886, +3.033, +3.172, +3.356, +3.548, +3.766, +4.294, +4.794, +5.422, +5.692, +6.337, +7.068, +7.465, +7.510, +7.510, +7.510},  +0.448,  +0.439,   1.633},
	{"DC6-5x4Bytes-1",229376, 5632, 0, { -5.920, -5.920, -5.920, -5.889, -5.616, -4.875, -4.572, -4.339, -3.724, -3.244, -2.839, -2.551, -2.297, -2.151, -2.052, -1.909, -1.780, -1.649, -1.539, -1.444, -1.372, -1.314, -1.238, -1.170, -1.111, -1.054, -1.005, -0.957, -0.896, -0.835, -0.782, -0.721, -0.667, -0.621, -0.580, -0.521, -0.475, -0.431, -0.390, -0.346, -0.304, -0.257, -0.221, -0.169, -0.132, -0.093, -0.046, -0.009, +0.031, +0.071, +0.114, +0.148, +0.183, +0.225, +0.280, +0.318, +0.364, +0.405, +0.441, +0.473, +0.510, +0.555, +0.594, +0.639, +0.678, +0.718, +0.758, +0.801, +0.843, +0.879, +0.925, +0.973, +1.023, +1.071, +1.106, +1.158, +1.208, +1.258, +1.308, +1.357, +1.413, +1.455, +1.500, +1.540, +1.581, +1.635, +1.677, +1.731, +1.784, +1.845, +1.913, +1.974, +2.046, +2.112, +2.183, +2.273, +2.357, +2.436, +2.527, +2.603, +2.724, +2.852, +2.969, +3.150, +3.303, +3.493, +3.789, +4.399, +4.877, +5.506, +5.720, +6.049, +6.360, +6.484, +6.498, +6.498, +6.498},  +0.460,  +0.441,   1.612},
	{"DC6-5x4Bytes-1",262144, 5632, 0, { -5.531, -5.531, -5.531, -5.514, -5.354, -5.170, -4.633, -4.326, -3.774, -3.381, -2.850, -2.634, -2.429, -2.243, -2.091, -1.964, -1.843, -1.726, -1.615, -1.514, -1.446, -1.374, -1.326, -1.253, -1.204, -1.122, -1.054, -0.991, -0.922, -0.875, -0.829, -0.775, -0.722, -0.669, -0.609, -0.559, -0.521, -0.475, -0.432, -0.386, -0.347, -0.290, -0.250, -0.210, -0.171, -0.126, -0.082, -0.042, -0.005, +0.031, +0.080, +0.125, +0.167, +0.211, +0.250, +0.291, +0.337, +0.377, +0.426, +0.456, +0.498, +0.542, +0.587, +0.628, +0.669, +0.711, +0.758, +0.786, +0.823, +0.873, +0.920, +0.964, +0.999, +1.045, +1.093, +1.139, +1.191, +1.242, +1.285, +1.333, +1.376, +1.426, +1.475, +1.538, +1.595, +1.652, +1.703, +1.773, +1.823, +1.883, +1.949, +2.005, +2.078, +2.145, +2.205, +2.271, +2.332, +2.403, +2.518, +2.613, +2.723, +2.820, +2.936, +3.091, +3.276, +3.467, +3.720, +4.233, +4.845, +5.371, +5.719, +6.078, +6.596, +6.616, +6.618, +6.618, +6.618},  +0.430,  +0.426,   1.630},
	{"DC6-5x4Bytes-1",327680, 1024, 0, { -4.068, -4.068, -4.068, -4.068, -4.068, -4.067, -4.032, -3.852, -3.553, -3.226, -2.764, -2.372, -2.179, -2.092, -1.976, -1.881, -1.815, -1.697, -1.602, -1.518, -1.445, -1.365, -1.295, -1.231, -1.135, -1.074, -1.008, -0.943, -0.918, -0.882, -0.842, -0.771, -0.742, -0.707, -0.677, -0.621, -0.566, -0.503, -0.462, -0.434, -0.390, -0.355, -0.318, -0.252, -0.210, -0.161, -0.114, -0.065, -0.025, +0.031, +0.062, +0.106, +0.146, +0.185, +0.214, +0.262, +0.310, +0.344, +0.373, +0.406, +0.442, +0.511, +0.563, +0.596, +0.623, +0.674, +0.725, +0.789, +0.830, +0.852, +0.875, +0.922, +0.972, +1.010, +1.055, +1.115, +1.160, +1.221, +1.265, +1.312, +1.351, +1.393, +1.444, +1.514, +1.600, +1.648, +1.682, +1.759, +1.871, +1.932, +1.985, +2.013, +2.110, +2.172, +2.232, +2.270, +2.336, +2.446, +2.508, +2.567, +2.653, +2.808, +2.897, +3.028, +3.173, +3.342, +3.604, +4.157, +4.446, +5.126, +5.711, +6.079, +6.088, +6.088, +6.088, +6.088, +6.088}, +0.425, +0.373, 1.586},
	{"DC6-5x4Bytes-1",393216, 1024, 0, { -4.059, -4.059, -4.059, -4.059, -4.059, -4.056, -3.938, -3.794, -3.520, -3.222, -2.891, -2.616, -2.426, -2.283, -2.124, -1.986, -1.871, -1.765, -1.731, -1.578, -1.490, -1.419, -1.362, -1.321, -1.217, -1.150, -1.100, -1.064, -1.022, -0.971, -0.921, -0.860, -0.798, -0.743, -0.703, -0.672, -0.632, -0.582, -0.545, -0.504, -0.456, -0.421, -0.359, -0.308, -0.286, -0.223, -0.151, -0.122, -0.069, -0.041, +0.011, +0.046, +0.076, +0.109, +0.167, +0.211, +0.247, +0.293, +0.349, +0.390, +0.420, +0.454, +0.500, +0.537, +0.574, +0.608, +0.659, +0.693, +0.738, +0.778, +0.843, +0.907, +0.958, +1.009, +1.050, +1.109, +1.172, +1.225, +1.291, +1.326, +1.400, +1.448, +1.501, +1.554, +1.621, +1.663, +1.708, +1.786, +1.848, +1.900, +1.950, +2.019, +2.063, +2.171, +2.231, +2.303, +2.425, +2.492, +2.589, +2.668, +2.765, +2.920, +3.030, +3.154, +3.348, +3.556, +3.912, +4.356, +4.669, +5.066, +5.340, +5.532, +5.536, +5.536, +5.536, +5.536, +5.536}, +0.398, +0.349, 1.652},
	{"DC6-5x4Bytes-1",458752, 1024, 0, { -5.483, -5.483, -5.483, -5.483, -5.483, -5.477, -5.254, -4.878, -3.930, -3.268, -2.761, -2.482, -2.342, -2.189, -2.026, -1.833, -1.731, -1.681, -1.576, -1.521, -1.440, -1.386, -1.343, -1.270, -1.190, -1.146, -1.083, -1.040, -0.982, -0.936, -0.896, -0.794, -0.756, -0.710, -0.670, -0.629, -0.586, -0.541, -0.500, -0.439, -0.375, -0.343, -0.311, -0.271, -0.209, -0.170, -0.139, -0.065, -0.026, +0.021, +0.071, +0.102, +0.157, +0.192, +0.231, +0.267, +0.308, +0.357, +0.391, +0.426, +0.446, +0.468, +0.486, +0.525, +0.569, +0.599, +0.656, +0.678, +0.737, +0.780, +0.834, +0.872, +0.924, +0.998, +1.026, +1.098, +1.137, +1.179, +1.254, +1.296, +1.350, +1.401, +1.458, +1.526, +1.558, +1.586, +1.611, +1.645, +1.705, +1.742, +1.790, +1.871, +1.921, +2.047, +2.146, +2.205, +2.234, +2.322, +2.433, +2.541, +2.673, +2.824, +2.930, +3.054, +3.176, +3.618, +3.894, +4.760, +5.079, +5.327, +5.515, +5.616, +5.618, +5.618, +5.618, +5.618, +5.618}, +0.396, +0.391, 1.621},
	{"DC6-5x4Bytes-1",524288, 1024, 0, { -4.379, -4.379, -4.379, -4.379, -4.379, -4.378, -4.371, -4.095, -3.382, -3.074, -2.683, -2.576, -2.291, -2.200, -2.002, -1.934, -1.846, -1.760, -1.650, -1.586, -1.519, -1.466, -1.411, -1.290, -1.214, -1.170, -1.091, -1.016, -0.951, -0.892, -0.859, -0.809, -0.756, -0.686, -0.608, -0.550, -0.477, -0.443, -0.408, -0.371, -0.284, -0.238, -0.206, -0.169, -0.140, -0.115, -0.094, -0.063, -0.011, +0.024, +0.049, +0.082, +0.121, +0.153, +0.187, +0.241, +0.282, +0.328, +0.366, +0.402, +0.444, +0.484, +0.524, +0.581, +0.621, +0.648, +0.683, +0.733, +0.771, +0.810, +0.853, +0.911, +0.955, +0.995, +1.031, +1.056, +1.085, +1.147, +1.194, +1.263, +1.303, +1.356, +1.409, +1.482, +1.531, +1.583, +1.635, +1.691, +1.738, +1.776, +1.820, +1.907, +1.961, +2.003, +2.157, +2.222, +2.280, +2.360, +2.424, +2.506, +2.650, +2.796, +2.885, +3.036, +3.311, +3.668, +3.891, +4.366, +5.152, +5.611, +5.927, +6.150, +6.155, +6.155, +6.155, +6.155, +6.155}, +0.408, +0.366, 1.607},
	{"DC6-5x4Bytes-1",655360, 1024, 0, { -5.458, -5.458, -5.458, -5.458, -5.458, -5.447, -4.965, -4.394, -3.756, -3.239, -2.871, -2.657, -2.523, -2.417, -2.258, -2.131, -1.959, -1.873, -1.770, -1.666, -1.602, -1.527, -1.440, -1.342, -1.286, -1.202, -1.153, -1.094, -1.022, -0.966, -0.917, -0.860, -0.819, -0.799, -0.721, -0.684, -0.636, -0.599, -0.549, -0.518, -0.484, -0.426, -0.387, -0.342, -0.316, -0.232, -0.213, -0.169, -0.102, -0.039, +0.007, +0.046, +0.120, +0.166, +0.227, +0.255, +0.291, +0.319, +0.339, +0.372, +0.426, +0.464, +0.498, +0.534, +0.579, +0.611, +0.664, +0.702, +0.735, +0.792, +0.868, +0.913, +0.953, +0.991, +1.020, +1.073, +1.106, +1.155, +1.205, +1.276, +1.325, +1.371, +1.414, +1.467, +1.538, +1.601, +1.668, +1.747, +1.793, +1.878, +1.941, +1.997, +2.043, +2.142, +2.179, +2.248, +2.290, +2.358, +2.466, +2.540, +2.600, +2.763, +2.848, +3.025, +3.254, +3.501, +3.995, +4.584, +5.010, +5.952, +6.772, +6.829, +6.830, +6.830, +6.830, +6.830, +6.830}, +0.360, +0.339, 1.673},
	{"DC6-5x4Bytes-1",786432, 1024, 0, { -4.948, -4.948, -4.948, -4.948, -4.948, -4.943, -4.749, -4.495, -4.019, -3.784, -2.849, -2.648, -2.487, -2.382, -2.280, -2.059, -1.932, -1.817, -1.704, -1.633, -1.520, -1.458, -1.376, -1.321, -1.268, -1.235, -1.188, -1.105, -1.059, -0.996, -0.928, -0.856, -0.804, -0.757, -0.696, -0.635, -0.601, -0.546, -0.498, -0.465, -0.431, -0.373, -0.351, -0.288, -0.246, -0.222, -0.180, -0.150, -0.111, -0.091, -0.040, +0.018, +0.069, +0.091, +0.135, +0.157, +0.197, +0.256, +0.289, +0.332, +0.373, +0.423, +0.456, +0.497, +0.535, +0.576, +0.627, +0.664, +0.717, +0.773, +0.829, +0.875, +0.918, +0.985, +1.037, +1.070, +1.116, +1.165, +1.227, +1.274, +1.325, +1.363, +1.389, +1.433, +1.487, +1.546, +1.614, +1.677, +1.741, +1.813, +1.894, +1.927, +1.987, +2.041, +2.078, +2.180, +2.246, +2.324, +2.420, +2.505, +2.601, +2.755, +2.908, +3.145, +3.314, +3.580, +3.996, +4.526, +4.810, +5.220, +5.825, +6.351, +6.363, +6.363, +6.363, +6.363, +6.363}, +0.346, +0.289, 1.661},
	{"DC6-5x4Bytes-1",917504, 1024, 0, { -5.584, -5.584, -5.584, -5.584, -5.584, -5.572, -5.045, -4.417, -3.672, -3.398, -2.836, -2.631, -2.416, -2.187, -2.049, -1.914, -1.801, -1.661, -1.558, -1.507, -1.457, -1.391, -1.342, -1.290, -1.217, -1.188, -1.124, -1.053, -0.968, -0.922, -0.864, -0.802, -0.752, -0.713, -0.641, -0.596, -0.535, -0.511, -0.461, -0.425, -0.385, -0.354, -0.328, -0.280, -0.247, -0.212, -0.174, -0.150, -0.121, -0.079, -0.048, -0.016, +0.037, +0.076, +0.109, +0.133, +0.168, +0.206, +0.268, +0.310, +0.342, +0.377, +0.465, +0.499, +0.540, +0.580, +0.656, +0.707, +0.763, +0.798, +0.854, +0.907, +0.956, +0.996, +1.049, +1.075, +1.137, +1.181, +1.226, +1.273, +1.319, +1.361, +1.430, +1.487, +1.530, +1.568, +1.620, +1.664, +1.726, +1.843, +1.877, +1.939, +2.011, +2.075, +2.135, +2.197, +2.288, +2.394, +2.478, +2.577, +2.706, +2.797, +2.903, +3.042, +3.230, +3.451, +3.793, +4.412, +4.992, +5.284, +5.511, +5.627, +5.629, +5.629, +5.629, +5.629, +5.629}, +0.375, +0.268, 1.622},
	{"DC6-5x4Bytes-1",1048576, 1024, 0, { -4.511, -4.511, -4.511, -4.511, -4.511, -4.510, -4.451, -4.282, -3.520, -3.194, -2.915, -2.468, -2.207, -2.094, -2.023, -1.921, -1.811, -1.728, -1.624, -1.568, -1.480, -1.397, -1.339, -1.281, -1.212, -1.164, -1.108, -1.037, -0.972, -0.916, -0.888, -0.811, -0.760, -0.711, -0.666, -0.623, -0.566, -0.499, -0.444, -0.394, -0.362, -0.293, -0.229, -0.195, -0.160, -0.127, -0.082, -0.061, +0.005, +0.076, +0.119, +0.139, +0.156, +0.196, +0.253, +0.282, +0.328, +0.376, +0.410, +0.433, +0.465, +0.521, +0.566, +0.609, +0.646, +0.683, +0.713, +0.764, +0.808, +0.849, +0.888, +0.943, +0.973, +1.012, +1.046, +1.116, +1.169, +1.202, +1.236, +1.272, +1.308, +1.344, +1.385, +1.427, +1.506, +1.579, +1.662, +1.715, +1.788, +1.822, +1.909, +1.985, +2.050, +2.130, +2.215, +2.311, +2.395, +2.507, +2.606, +2.732, +2.778, +2.854, +2.936, +3.136, +3.271, +3.531, +3.882, +4.568, +4.819, +5.003, +5.361, +5.738, +5.747, +5.747, +5.747, +5.747, +5.747}, +0.427, +0.410, 1.621},
	{"DC6-5x4Bytes-1",1310720, 1024, 0, { -4.672, -4.672, -4.672, -4.672, -4.672, -4.671, -4.616, -4.439, -4.069, -3.292, -2.950, -2.721, -2.455, -2.252, -2.128, -1.983, -1.853, -1.784, -1.658, -1.574, -1.526, -1.422, -1.351, -1.272, -1.231, -1.122, -1.035, -0.960, -0.872, -0.804, -0.745, -0.707, -0.676, -0.612, -0.572, -0.519, -0.489, -0.421, -0.382, -0.318, -0.286, -0.241, -0.204, -0.162, -0.129, -0.061, -0.026, +0.034, +0.074, +0.116, +0.139, +0.204, +0.238, +0.259, +0.309, +0.345, +0.373, +0.439, +0.486, +0.531, +0.577, +0.606, +0.629, +0.672, +0.701, +0.730, +0.765, +0.794, +0.826, +0.850, +0.880, +0.925, +0.945, +0.984, +1.048, +1.078, +1.119, +1.178, +1.215, +1.274, +1.335, +1.382, +1.436, +1.494, +1.530, +1.561, +1.640, +1.697, +1.765, +1.819, +1.865, +1.912, +1.993, +2.090, +2.169, +2.213, +2.291, +2.363, +2.561, +2.634, +2.793, +2.953, +3.060, +3.187, +3.380, +3.529, +3.920, +4.352, +4.701, +5.067, +5.322, +5.583, +5.589, +5.589, +5.589, +5.589, +5.589}, +0.439, +0.486, 1.633},
	{"DC6-5x4Bytes-1",1572864, 1024, 0, { -4.279, -4.279, -4.279, -4.279, -4.279, -4.278, -4.232, -4.098, -3.788, -3.368, -3.091, -2.722, -2.497, -2.375, -2.202, -2.049, -1.942, -1.752, -1.677, -1.584, -1.527, -1.436, -1.383, -1.281, -1.235, -1.160, -1.075, -1.028, -0.949, -0.898, -0.843, -0.773, -0.723, -0.664, -0.604, -0.538, -0.502, -0.452, -0.416, -0.391, -0.343, -0.289, -0.262, -0.204, -0.133, -0.063, -0.017, +0.025, +0.055, +0.110, +0.138, +0.182, +0.239, +0.284, +0.356, +0.419, +0.458, +0.510, +0.544, +0.577, +0.615, +0.667, +0.699, +0.745, +0.777, +0.823, +0.870, +0.932, +0.970, +0.998, +1.045, +1.071, +1.110, +1.142, +1.192, +1.246, +1.277, +1.301, +1.358, +1.402, +1.426, +1.466, +1.546, +1.600, +1.623, +1.668, +1.751, +1.800, +1.837, +1.921, +1.980, +2.024, +2.110, +2.162, +2.276, +2.325, +2.393, +2.494, +2.567, +2.694, +2.793, +2.875, +2.973, +3.150, +3.327, +3.425, +3.727, +4.186, +4.481, +5.107, +5.257, +5.378, +5.380, +5.380, +5.380, +5.380, +5.380}, +0.462, +0.544, 1.655},
	{"DC6-5x4Bytes-1",1835008, 1024, 0, { -4.656, -4.656, -4.656, -4.656, -4.656, -4.651, -4.471, -4.186, -3.773, -3.505, -2.896, -2.607, -2.456, -2.342, -2.208, -1.982, -1.893, -1.787, -1.677, -1.574, -1.514, -1.409, -1.328, -1.258, -1.178, -1.116, -1.048, -0.949, -0.888, -0.840, -0.794, -0.732, -0.676, -0.574, -0.529, -0.495, -0.450, -0.384, -0.344, -0.299, -0.231, -0.195, -0.159, -0.116, -0.057, -0.011, +0.022, +0.043, +0.087, +0.136, +0.168, +0.215, +0.249, +0.274, +0.304, +0.343, +0.380, +0.418, +0.449, +0.478, +0.519, +0.561, +0.628, +0.659, +0.694, +0.721, +0.784, +0.849, +0.885, +0.929, +0.965, +1.008, +1.042, +1.085, +1.119, +1.156, +1.191, +1.251, +1.302, +1.333, +1.388, +1.442, +1.525, +1.593, +1.647, +1.685, +1.729, +1.790, +1.845, +1.887, +1.935, +2.028, +2.071, +2.129, +2.217, +2.317, +2.361, +2.431, +2.493, +2.628, +2.727, +2.857, +3.019, +3.116, +3.396, +3.617, +3.947, +4.354, +4.759, +5.671, +5.716, +5.735, +5.735, +5.735, +5.735, +5.735, +5.735}, +0.464, +0.449, 1.646},
	{"DC6-5x4Bytes-1",2097152, 1024, 0, { -5.571, -5.571, -5.571, -5.571, -5.571, -5.555, -4.867, -4.140, -3.619, -3.254, -2.996, -2.717, -2.420, -2.246, -2.154, -2.005, -1.793, -1.659, -1.578, -1.499, -1.399, -1.342, -1.273, -1.233, -1.166, -1.110, -1.017, -0.969, -0.923, -0.860, -0.824, -0.783, -0.733, -0.680, -0.661, -0.577, -0.508, -0.456, -0.401, -0.324, -0.286, -0.238, -0.195, -0.166, -0.107, -0.076, -0.033, +0.014, +0.048, +0.098, +0.125, +0.152, +0.183, +0.223, +0.260, +0.312, +0.350, +0.397, +0.443, +0.486, +0.547, +0.562, +0.614, +0.645, +0.685, +0.718, +0.774, +0.818, +0.846, +0.883, +0.920, +0.975, +1.054, +1.095, +1.136, +1.170, +1.230, +1.265, +1.307, +1.348, +1.389, +1.442, +1.469, +1.507, +1.543, +1.608, +1.687, +1.753, +1.804, +1.842, +1.889, +1.972, +2.032, +2.060, +2.151, +2.240, +2.339, +2.442, +2.528, +2.608, +2.677, +2.716, +2.879, +3.002, +3.225, +3.455, +3.594, +4.016, +4.317, +5.077, +5.190, +5.308, +5.310, +5.310, +5.310, +5.310, +5.310}, +0.432, +0.443, 1.601},
	{"DC6-5x4Bytes-1",2621440, 1024, 0, { -5.623, -5.623, -5.623, -5.623, -5.623, -5.604, -4.808, -4.064, -3.352, -3.069, -2.796, -2.527, -2.398, -2.209, -2.132, -1.919, -1.805, -1.711, -1.535, -1.461, -1.397, -1.287, -1.205, -1.115, -1.045, -0.987, -0.902, -0.870, -0.835, -0.784, -0.728, -0.680, -0.637, -0.593, -0.550, -0.518, -0.439, -0.401, -0.366, -0.329, -0.283, -0.228, -0.167, -0.096, -0.044, -0.019, +0.007, +0.073, +0.129, +0.157, +0.182, +0.229, +0.269, +0.309, +0.333, +0.370, +0.403, +0.450, +0.499, +0.524, +0.557, +0.601, +0.659, +0.713, +0.744, +0.777, +0.809, +0.854, +0.895, +0.957, +1.017, +1.049, +1.092, +1.120, +1.165, +1.189, +1.219, +1.249, +1.274, +1.302, +1.331, +1.391, +1.427, +1.478, +1.519, +1.578, +1.665, +1.729, +1.776, +1.817, +1.871, +1.924, +1.987, +2.067, +2.166, +2.298, +2.357, +2.438, +2.525, +2.605, +2.704, +2.854, +2.962, +3.051, +3.274, +3.602, +3.741, +3.982, +4.225, +4.486, +4.766, +5.012, +5.018, +5.018, +5.018, +5.018, +5.018}, +0.475, +0.499, 1.573},
	{"DC6-5x4Bytes-1",3145728, 1024, 0, { -4.526, -4.526, -4.526, -4.526, -4.526, -4.522, -4.316, -3.959, -3.416, -3.193, -2.808, -2.600, -2.352, -2.190, -2.009, -1.902, -1.754, -1.670, -1.582, -1.495, -1.406, -1.333, -1.237, -1.139, -1.085, -1.024, -0.956, -0.897, -0.850, -0.786, -0.758, -0.692, -0.658, -0.597, -0.548, -0.513, -0.456, -0.409, -0.346, -0.312, -0.267, -0.212, -0.165, -0.124, -0.077, -0.039, -0.004, +0.042, +0.078, +0.124, +0.157, +0.199, +0.236, +0.277, +0.297, +0.362, +0.401, +0.446, +0.497, +0.529, +0.569, +0.613, +0.637, +0.683, +0.737, +0.768, +0.798, +0.823, +0.906, +0.953, +0.980, +1.011, +1.056, +1.101, +1.126, +1.177, +1.206, +1.254, +1.307, +1.364, +1.419, +1.443, +1.495, +1.533, +1.563, +1.606, +1.669, +1.730, +1.786, +1.839, +1.904, +1.967, +2.038, +2.126, +2.176, +2.293, +2.337, +2.397, +2.492, +2.576, +2.707, +2.813, +2.970, +3.089, +3.202, +3.357, +3.641, +4.182, +4.450, +4.928, +5.172, +5.278, +5.280, +5.280, +5.280, +5.280, +5.280}, +0.472, +0.497, 1.576},
	{"DC6-5x4Bytes-1",3670016, 1024, 0, { -4.288, -4.288, -4.288, -4.288, -4.288, -4.285, -4.138, -3.936, -3.714, -3.227, -2.793, -2.527, -2.199, -1.933, -1.817, -1.705, -1.598, -1.512, -1.459, -1.390, -1.321, -1.225, -1.173, -1.093, -1.032, -0.973, -0.952, -0.908, -0.850, -0.766, -0.712, -0.663, -0.614, -0.550, -0.498, -0.443, -0.402, -0.366, -0.301, -0.273, -0.232, -0.179, -0.119, -0.077, -0.042, -0.007, +0.022, +0.053, +0.096, +0.154, +0.177, +0.228, +0.272, +0.310, +0.341, +0.390, +0.437, +0.465, +0.491, +0.525, +0.576, +0.605, +0.645, +0.673, +0.711, +0.755, +0.794, +0.829, +0.873, +0.905, +0.949, +0.990, +1.033, +1.056, +1.125, +1.182, +1.241, +1.302, +1.337, +1.387, +1.422, +1.454, +1.479, +1.510, +1.546, +1.629, +1.691, +1.739, +1.788, +1.847, +1.887, +1.934, +2.001, +2.080, +2.125, +2.168, +2.232, +2.331, +2.392, +2.503, +2.563, +2.631, +2.751, +2.883, +3.063, +3.380, +3.774, +4.062, +4.533, +4.844, +4.953, +5.039, +5.041, +5.041, +5.041, +5.041, +5.041}, +0.483, +0.491, 1.528},

	//{"DC6-4x8Bytes-100",     1,4096,3474,{ -1.406, -1.406, -1.406, -1.406, -1.406, -1.406, -1.406, -1.406, -1.406, -1.405, -1.386, -1.360, -1.357, -1.347, -1.337, -1.303, -1.302, -1.260, -1.251, -1.241, -1.224, -1.200, -1.191, -1.172, -1.152, -1.121, -1.094, -1.077, -1.074, -1.066, -1.021, -1.013, -0.995, -0.968, -0.938, -0.925, -0.913, -0.885, -0.859, -0.838, -0.829, -0.824, -0.779, -0.738, -0.724, -0.694, -0.689, -0.657, -0.642, -0.592, -0.562, -0.551, -0.524, -0.509, -0.479, -0.425, -0.396, -0.384, -0.365, -0.330, -0.308, -0.249, -0.197, -0.183, -0.149, -0.108, -0.080, -0.031, +0.032, +0.057, +0.092, +0.105, +0.193, +0.251, +0.278, +0.310, +0.339, +0.373, +0.439, +0.527, +0.558, +0.596, +0.688, +0.772, +0.801, +0.841, +0.953, +1.068, +1.095, +1.192, +1.263, +1.382, +1.429, +1.552, +1.693, +1.795, +1.902, +2.057, +2.187, +2.438, +2.590, +2.845, +3.089, +3.374, +3.859, +4.213, +4.894, +5.933, +6.905, +8.173, +8.520, +9.575,+11.524,+12.211,+12.211,+12.211,+12.211},  +0.152,  -0.365,   1.582},
	{"DC6-4x8Bytes-100",     2, 4096, 1, { -2.365, -2.365, -2.365, -2.365, -2.356, -2.327, -2.290, -2.262, -2.162, -2.084, -1.980, -1.892, -1.821, -1.777, -1.721, -1.666, -1.616, -1.569, -1.533, -1.486, -1.442, -1.405, -1.366, -1.330, -1.291, -1.253, -1.212, -1.180, -1.138, -1.107, -1.077, -1.046, -1.014, -0.984, -0.951, -0.918, -0.880, -0.852, -0.818, -0.780, -0.739, -0.712, -0.676, -0.645, -0.613, -0.588, -0.558, -0.524, -0.497, -0.460, -0.426, -0.394, -0.363, -0.335, -0.291, -0.257, -0.223, -0.193, -0.160, -0.129, -0.103, -0.063, -0.033, -0.008, +0.023, +0.076, +0.111, +0.155, +0.194, +0.238, +0.276, +0.316, +0.354, +0.398, +0.437, +0.482, +0.531, +0.572, +0.619, +0.663, +0.719, +0.764, +0.824, +0.872, +0.926, +0.993, +1.038, +1.080, +1.183, +1.264, +1.324, +1.401, +1.480, +1.562, +1.655, +1.773, +1.868, +1.973, +2.080, +2.182, +2.318, +2.485, +2.634, +2.875, +3.109, +3.429, +3.921, +4.545, +5.580, +6.386, +7.994, +8.495, +9.672, +9.954, +9.954, +9.954, +9.954},  +0.099,  -0.160,   1.472},
	{"DC6-4x8Bytes-100",     3, 4096, 0, { -2.638, -2.638, -2.638, -2.638, -2.638, -2.586, -2.525, -2.486, -2.359, -2.272, -2.130, -2.027, -1.955, -1.892, -1.820, -1.740, -1.676, -1.630, -1.577, -1.523, -1.480, -1.442, -1.402, -1.362, -1.309, -1.267, -1.227, -1.187, -1.153, -1.124, -1.084, -1.051, -1.008, -0.979, -0.946, -0.916, -0.885, -0.851, -0.825, -0.802, -0.769, -0.743, -0.714, -0.681, -0.648, -0.616, -0.580, -0.552, -0.522, -0.498, -0.457, -0.415, -0.376, -0.343, -0.309, -0.265, -0.236, -0.200, -0.162, -0.127, -0.087, -0.060, -0.026, +0.012, +0.048, +0.079, +0.120, +0.161, +0.200, +0.242, +0.285, +0.327, +0.373, +0.413, +0.457, +0.508, +0.546, +0.597, +0.630, +0.667, +0.711, +0.759, +0.802, +0.865, +0.918, +0.988, +1.048, +1.122, +1.171, +1.240, +1.315, +1.381, +1.453, +1.543, +1.617, +1.701, +1.827, +1.925, +2.031, +2.158, +2.323, +2.491, +2.697, +2.966, +3.188, +3.424, +3.796, +4.339, +4.940, +5.875, +6.509, +7.223, +7.766, +7.951, +7.951, +7.951, +7.951},  +0.072,  -0.162,   1.460},
	{"DC6-4x8Bytes-100",     4, 4096, 0, { -3.191, -3.191, -3.191, -3.191, -3.118, -2.961, -2.833, -2.704, -2.622, -2.430, -2.254, -2.102, -2.008, -1.937, -1.861, -1.785, -1.742, -1.691, -1.621, -1.575, -1.522, -1.479, -1.425, -1.383, -1.347, -1.302, -1.266, -1.228, -1.183, -1.144, -1.109, -1.069, -1.025, -0.982, -0.941, -0.906, -0.876, -0.839, -0.807, -0.772, -0.742, -0.720, -0.680, -0.646, -0.617, -0.577, -0.539, -0.498, -0.461, -0.424, -0.384, -0.356, -0.323, -0.285, -0.252, -0.218, -0.186, -0.159, -0.120, -0.088, -0.050, -0.017, +0.022, +0.059, +0.101, +0.143, +0.175, +0.213, +0.256, +0.291, +0.339, +0.382, +0.422, +0.460, +0.509, +0.554, +0.599, +0.635, +0.672, +0.720, +0.767, +0.813, +0.857, +0.900, +0.949, +1.008, +1.080, +1.149, +1.207, +1.272, +1.348, +1.423, +1.483, +1.560, +1.633, +1.714, +1.805, +1.890, +2.005, +2.139, +2.270, +2.420, +2.571, +2.750, +2.984, +3.319, +3.771, +4.417, +5.277, +5.711, +6.681, +7.368, +8.611, +9.032, +9.032, +9.032, +9.032},  +0.078,  -0.120,   1.472},
	{"DC6-4x8Bytes-100",     5, 4096, 0, { -3.078, -3.078, -3.078, -3.078, -3.038, -2.939, -2.911, -2.852, -2.603, -2.407, -2.206, -2.092, -1.993, -1.920, -1.849, -1.783, -1.720, -1.661, -1.613, -1.556, -1.511, -1.461, -1.416, -1.382, -1.340, -1.293, -1.252, -1.216, -1.175, -1.146, -1.104, -1.065, -1.026, -0.979, -0.952, -0.916, -0.881, -0.845, -0.810, -0.773, -0.735, -0.698, -0.657, -0.631, -0.607, -0.579, -0.548, -0.512, -0.480, -0.435, -0.403, -0.373, -0.334, -0.301, -0.265, -0.230, -0.195, -0.163, -0.135, -0.104, -0.073, -0.039, -0.006, +0.033, +0.071, +0.108, +0.141, +0.175, +0.204, +0.247, +0.297, +0.342, +0.382, +0.430, +0.469, +0.512, +0.561, +0.604, +0.658, +0.696, +0.755, +0.814, +0.876, +0.926, +0.988, +1.039, +1.114, +1.162, +1.212, +1.287, +1.353, +1.420, +1.480, +1.563, +1.651, +1.753, +1.841, +1.949, +2.056, +2.164, +2.305, +2.464, +2.605, +2.798, +3.031, +3.359, +3.784, +4.576, +5.320, +5.865, +6.905, +8.004, +8.434, +8.464, +8.464, +8.464, +8.464},  +0.083,  -0.135,   1.485},
	{"DC6-4x8Bytes-100",     6, 4096, 0, { -3.402, -3.402, -3.402, -3.402, -3.378, -3.304, -3.278, -3.145, -2.905, -2.740, -2.442, -2.288, -2.175, -2.084, -2.009, -1.924, -1.851, -1.771, -1.705, -1.655, -1.590, -1.535, -1.488, -1.434, -1.382, -1.328, -1.301, -1.264, -1.219, -1.185, -1.147, -1.099, -1.048, -1.006, -0.972, -0.929, -0.896, -0.855, -0.822, -0.790, -0.757, -0.726, -0.692, -0.666, -0.638, -0.603, -0.572, -0.541, -0.505, -0.473, -0.448, -0.412, -0.383, -0.346, -0.314, -0.273, -0.232, -0.198, -0.172, -0.133, -0.104, -0.069, -0.041, +0.005, +0.040, +0.078, +0.109, +0.151, +0.191, +0.243, +0.276, +0.319, +0.360, +0.401, +0.443, +0.485, +0.538, +0.572, +0.615, +0.653, +0.697, +0.729, +0.772, +0.826, +0.885, +0.930, +0.999, +1.056, +1.118, +1.168, +1.240, +1.306, +1.381, +1.462, +1.536, +1.617, +1.705, +1.813, +1.947, +2.038, +2.172, +2.356, +2.506, +2.743, +2.950, +3.220, +3.611, +4.425, +5.076, +5.692, +6.234, +7.085, +7.832, +8.133, +8.133, +8.133, +8.133},  +0.008,  -0.172,   1.470},
	{"DC6-4x8Bytes-100",     7, 4096, 0, { -4.058, -4.058, -4.058, -4.058, -3.969, -3.740, -3.416, -3.326, -2.913, -2.694, -2.423, -2.278, -2.178, -2.090, -1.989, -1.897, -1.816, -1.750, -1.683, -1.624, -1.563, -1.518, -1.474, -1.428, -1.391, -1.347, -1.309, -1.266, -1.229, -1.196, -1.142, -1.103, -1.062, -1.028, -0.987, -0.960, -0.919, -0.879, -0.846, -0.806, -0.770, -0.732, -0.702, -0.663, -0.635, -0.598, -0.564, -0.534, -0.494, -0.470, -0.438, -0.396, -0.355, -0.313, -0.271, -0.244, -0.211, -0.171, -0.143, -0.110, -0.072, -0.040, -0.003, +0.035, +0.085, +0.122, +0.154, +0.184, +0.226, +0.260, +0.295, +0.351, +0.394, +0.432, +0.471, +0.529, +0.558, +0.607, +0.648, +0.686, +0.726, +0.793, +0.840, +0.907, +0.959, +1.019, +1.079, +1.141, +1.215, +1.278, +1.354, +1.428, +1.500, +1.580, +1.671, +1.741, +1.844, +1.937, +2.071, +2.194, +2.326, +2.437, +2.603, +2.807, +2.972, +3.274, +3.687, +4.264, +4.933, +5.817, +6.191, +6.276, +6.602, +6.727, +6.727, +6.727, +6.727},  +0.042,  -0.143,   1.494},
	{"DC6-4x8Bytes-100",     8, 4096, 0, { -3.382, -3.382, -3.382, -3.382, -3.372, -3.348, -3.306, -3.161, -2.984, -2.754, -2.543, -2.369, -2.213, -2.087, -2.009, -1.924, -1.846, -1.767, -1.728, -1.673, -1.624, -1.560, -1.503, -1.446, -1.391, -1.347, -1.280, -1.238, -1.195, -1.156, -1.116, -1.073, -1.036, -1.005, -0.978, -0.951, -0.914, -0.857, -0.819, -0.779, -0.743, -0.711, -0.672, -0.635, -0.605, -0.568, -0.535, -0.499, -0.463, -0.431, -0.397, -0.366, -0.332, -0.306, -0.274, -0.236, -0.204, -0.173, -0.130, -0.100, -0.059, -0.020, +0.014, +0.053, +0.087, +0.119, +0.158, +0.193, +0.238, +0.273, +0.314, +0.371, +0.421, +0.470, +0.514, +0.560, +0.602, +0.659, +0.694, +0.741, +0.782, +0.827, +0.874, +0.932, +0.991, +1.044, +1.102, +1.172, +1.231, +1.282, +1.345, +1.426, +1.512, +1.586, +1.685, +1.786, +1.870, +1.967, +2.072, +2.176, +2.301, +2.395, +2.543, +2.736, +2.910, +3.279, +3.607, +4.261, +4.690, +5.573, +6.020, +6.221, +7.319, +7.733, +7.733, +7.733, +7.733},  +0.048,  -0.130,   1.493},
	{"DC6-4x8Bytes-100",    10, 4096, 0, { -3.873, -3.873, -3.873, -3.873, -3.776, -3.567, -3.519, -3.335, -3.072, -2.789, -2.551, -2.405, -2.244, -2.139, -2.030, -1.958, -1.879, -1.817, -1.760, -1.690, -1.630, -1.577, -1.513, -1.456, -1.402, -1.352, -1.299, -1.257, -1.218, -1.172, -1.135, -1.083, -1.050, -1.016, -0.969, -0.928, -0.883, -0.838, -0.795, -0.761, -0.726, -0.698, -0.671, -0.636, -0.599, -0.565, -0.528, -0.501, -0.467, -0.430, -0.398, -0.358, -0.322, -0.291, -0.265, -0.228, -0.177, -0.137, -0.103, -0.062, -0.028, +0.011, +0.048, +0.089, +0.132, +0.165, +0.207, +0.251, +0.298, +0.346, +0.378, +0.418, +0.456, +0.499, +0.543, +0.581, +0.633, +0.673, +0.713, +0.757, +0.810, +0.867, +0.926, +0.979, +1.024, +1.080, +1.133, +1.183, +1.238, +1.316, +1.380, +1.437, +1.521, +1.591, +1.654, +1.763, +1.839, +1.938, +2.056, +2.171, +2.310, +2.431, +2.585, +2.774, +2.989, +3.238, +3.572, +4.177, +4.796, +5.543, +6.202, +7.123, +8.067, +8.391, +8.391, +8.391, +8.391},  +0.056,  -0.103,   1.504},
	{"DC6-4x8Bytes-100",    12, 4096, 0, { -3.551, -3.551, -3.551, -3.551, -3.543, -3.466, -3.366, -3.284, -3.049, -2.895, -2.591, -2.425, -2.272, -2.166, -2.051, -1.934, -1.851, -1.782, -1.710, -1.646, -1.609, -1.550, -1.487, -1.422, -1.376, -1.325, -1.280, -1.232, -1.179, -1.131, -1.094, -1.054, -1.013, -0.969, -0.943, -0.894, -0.852, -0.814, -0.770, -0.733, -0.695, -0.660, -0.623, -0.584, -0.556, -0.516, -0.478, -0.437, -0.401, -0.366, -0.330, -0.288, -0.251, -0.217, -0.184, -0.149, -0.106, -0.072, -0.037, -0.006, +0.028, +0.061, +0.108, +0.141, +0.178, +0.221, +0.271, +0.307, +0.336, +0.367, +0.402, +0.448, +0.492, +0.527, +0.568, +0.604, +0.647, +0.705, +0.745, +0.790, +0.843, +0.888, +0.929, +0.977, +1.030, +1.095, +1.156, +1.205, +1.262, +1.344, +1.411, +1.479, +1.556, +1.637, +1.699, +1.776, +1.852, +1.952, +2.048, +2.150, +2.263, +2.384, +2.565, +2.723, +2.930, +3.158, +3.542, +4.004, +4.513, +4.914, +5.393, +5.946, +8.439, +9.543, +9.543, +9.543, +9.543},  +0.078,  -0.037,   1.483},
	{"DC6-4x8Bytes-100",    14, 4096, 0, { -3.881, -3.881, -3.881, -3.881, -3.829, -3.677, -3.571, -3.467, -3.273, -2.959, -2.726, -2.500, -2.381, -2.207, -2.107, -1.993, -1.918, -1.817, -1.771, -1.699, -1.638, -1.576, -1.502, -1.443, -1.387, -1.339, -1.287, -1.239, -1.190, -1.148, -1.087, -1.044, -0.999, -0.945, -0.902, -0.860, -0.818, -0.780, -0.740, -0.713, -0.689, -0.657, -0.606, -0.567, -0.535, -0.497, -0.465, -0.430, -0.393, -0.353, -0.317, -0.289, -0.256, -0.221, -0.187, -0.151, -0.127, -0.095, -0.050, -0.012, +0.019, +0.059, +0.096, +0.135, +0.169, +0.205, +0.242, +0.280, +0.324, +0.372, +0.414, +0.454, +0.490, +0.541, +0.585, +0.630, +0.674, +0.726, +0.761, +0.803, +0.859, +0.923, +0.972, +1.028, +1.088, +1.138, +1.200, +1.261, +1.310, +1.395, +1.440, +1.527, +1.592, +1.659, +1.746, +1.815, +1.891, +1.978, +2.052, +2.144, +2.259, +2.392, +2.543, +2.678, +2.895, +3.127, +3.493, +3.947, +4.724, +5.331, +5.921, +6.475, +7.578, +8.071, +8.071, +8.071, +8.071},  +0.078,  -0.050,   1.505},
	{"DC6-4x8Bytes-100",    16, 4096, 0, { -4.697, -4.697, -4.697, -4.697, -4.510, -4.024, -3.692, -3.492, -3.228, -2.906, -2.640, -2.444, -2.320, -2.207, -2.118, -2.006, -1.899, -1.843, -1.783, -1.722, -1.660, -1.595, -1.543, -1.486, -1.436, -1.380, -1.331, -1.294, -1.242, -1.193, -1.151, -1.111, -1.063, -1.012, -0.977, -0.948, -0.910, -0.867, -0.817, -0.770, -0.708, -0.664, -0.632, -0.585, -0.546, -0.509, -0.476, -0.439, -0.407, -0.368, -0.337, -0.304, -0.272, -0.238, -0.205, -0.165, -0.128, -0.088, -0.047, -0.015, +0.018, +0.061, +0.099, +0.137, +0.175, +0.207, +0.259, +0.304, +0.346, +0.383, +0.431, +0.474, +0.515, +0.557, +0.597, +0.647, +0.696, +0.738, +0.783, +0.835, +0.872, +0.912, +0.958, +1.009, +1.059, +1.120, +1.194, +1.255, +1.326, +1.392, +1.462, +1.521, +1.584, +1.652, +1.723, +1.798, +1.889, +1.977, +2.072, +2.182, +2.281, +2.389, +2.526, +2.699, +2.946, +3.158, +3.497, +4.012, +4.355, +5.170, +5.471, +6.279, +7.060, +7.308, +7.308, +7.308, +7.308},  +0.067,  -0.047,   1.508},
	{"DC6-4x8Bytes-100",    20, 4096, 0, { -4.086, -4.086, -4.086, -4.086, -4.051, -3.955, -3.588, -3.509, -3.286, -3.019, -2.675, -2.483, -2.334, -2.211, -2.096, -2.022, -1.943, -1.880, -1.793, -1.728, -1.657, -1.601, -1.539, -1.474, -1.426, -1.383, -1.339, -1.297, -1.247, -1.194, -1.147, -1.097, -1.052, -1.003, -0.965, -0.925, -0.871, -0.842, -0.793, -0.746, -0.702, -0.665, -0.628, -0.597, -0.554, -0.524, -0.491, -0.458, -0.410, -0.365, -0.326, -0.295, -0.248, -0.201, -0.167, -0.126, -0.100, -0.067, -0.036, +0.006, +0.049, +0.083, +0.114, +0.149, +0.191, +0.237, +0.274, +0.324, +0.363, +0.402, +0.438, +0.483, +0.544, +0.604, +0.644, +0.686, +0.725, +0.771, +0.814, +0.882, +0.926, +0.974, +1.014, +1.055, +1.110, +1.159, +1.212, +1.268, +1.323, +1.367, +1.424, +1.488, +1.546, +1.617, +1.708, +1.783, +1.866, +1.944, +2.045, +2.150, +2.237, +2.355, +2.490, +2.691, +2.869, +3.111, +3.424, +3.998, +4.571, +5.170, +5.579, +6.171, +6.485, +6.616, +6.616, +6.616, +6.616},  +0.070,  -0.036,   1.507},
	{"DC6-4x8Bytes-100",    24, 4096, 0, { -4.006, -4.006, -4.006, -4.006, -3.964, -3.874, -3.750, -3.581, -3.332, -3.016, -2.734, -2.575, -2.406, -2.253, -2.156, -2.053, -1.957, -1.879, -1.792, -1.734, -1.670, -1.599, -1.534, -1.471, -1.413, -1.365, -1.322, -1.254, -1.205, -1.153, -1.103, -1.062, -1.023, -0.963, -0.929, -0.879, -0.841, -0.797, -0.759, -0.711, -0.678, -0.644, -0.603, -0.566, -0.524, -0.483, -0.440, -0.397, -0.346, -0.311, -0.275, -0.229, -0.198, -0.154, -0.122, -0.089, -0.049, -0.013, +0.023, +0.067, +0.109, +0.144, +0.179, +0.211, +0.245, +0.275, +0.309, +0.346, +0.376, +0.415, +0.452, +0.486, +0.534, +0.561, +0.604, +0.657, +0.694, +0.744, +0.787, +0.828, +0.876, +0.933, +0.974, +1.022, +1.061, +1.099, +1.148, +1.200, +1.242, +1.311, +1.363, +1.425, +1.508, +1.569, +1.673, +1.738, +1.807, +1.897, +2.005, +2.094, +2.210, +2.330, +2.497, +2.624, +2.784, +3.030, +3.483, +4.015, +4.622, +5.264, +5.558, +5.892, +6.055, +6.128, +6.128, +6.128, +6.128},  +0.071,  +0.023,   1.494},
	{"DC6-4x8Bytes-100",    28, 4096, 0, { -4.079, -4.079, -4.079, -4.079, -4.004, -3.825, -3.625, -3.558, -3.211, -3.000, -2.721, -2.521, -2.378, -2.234, -2.133, -2.015, -1.925, -1.848, -1.777, -1.716, -1.669, -1.608, -1.552, -1.491, -1.428, -1.378, -1.298, -1.251, -1.204, -1.151, -1.108, -1.066, -1.021, -0.975, -0.934, -0.897, -0.853, -0.812, -0.774, -0.726, -0.693, -0.650, -0.618, -0.578, -0.531, -0.491, -0.453, -0.415, -0.385, -0.349, -0.307, -0.275, -0.243, -0.209, -0.177, -0.132, -0.094, -0.054, -0.020, +0.011, +0.049, +0.089, +0.144, +0.192, +0.232, +0.274, +0.303, +0.352, +0.380, +0.421, +0.454, +0.490, +0.530, +0.577, +0.615, +0.667, +0.712, +0.758, +0.796, +0.836, +0.889, +0.939, +0.997, +1.052, +1.092, +1.146, +1.200, +1.251, +1.304, +1.366, +1.438, +1.486, +1.572, +1.646, +1.718, +1.781, +1.863, +1.933, +2.001, +2.087, +2.173, +2.294, +2.390, +2.553, +2.749, +2.992, +3.357, +4.023, +4.646, +5.109, +5.882, +6.290, +6.529, +6.568, +6.568, +6.568, +6.568},  +0.069,  -0.020,   1.492},
	{"DC6-4x8Bytes-100",    32, 4096, 0, { -4.352, -4.352, -4.352, -4.352, -4.351, -4.262, -4.089, -3.984, -3.425, -3.068, -2.761, -2.574, -2.424, -2.291, -2.170, -2.058, -1.965, -1.879, -1.819, -1.772, -1.706, -1.659, -1.582, -1.541, -1.484, -1.413, -1.354, -1.292, -1.241, -1.195, -1.144, -1.096, -1.045, -1.002, -0.958, -0.910, -0.873, -0.843, -0.806, -0.758, -0.719, -0.677, -0.636, -0.595, -0.547, -0.508, -0.464, -0.417, -0.387, -0.348, -0.305, -0.273, -0.245, -0.201, -0.162, -0.120, -0.080, -0.036, -0.005, +0.036, +0.073, +0.112, +0.149, +0.197, +0.230, +0.271, +0.310, +0.349, +0.383, +0.424, +0.460, +0.506, +0.542, +0.593, +0.626, +0.660, +0.706, +0.744, +0.789, +0.825, +0.870, +0.933, +0.977, +1.023, +1.076, +1.126, +1.186, +1.242, +1.287, +1.361, +1.416, +1.469, +1.532, +1.600, +1.663, +1.768, +1.836, +1.939, +2.025, +2.128, +2.230, +2.373, +2.498, +2.633, +2.844, +3.082, +3.433, +3.861, +4.304, +4.752, +5.039, +5.548, +6.029, +6.048, +6.048, +6.048, +6.048},  +0.055,  -0.005,   1.506},
	{"DC6-4x8Bytes-100",    40, 4096, 0, { -4.150, -4.150, -4.150, -4.150, -4.145, -4.085, -3.983, -3.838, -3.415, -3.150, -2.818, -2.605, -2.473, -2.337, -2.197, -2.097, -2.003, -1.923, -1.844, -1.780, -1.699, -1.644, -1.581, -1.529, -1.487, -1.433, -1.375, -1.323, -1.267, -1.201, -1.163, -1.120, -1.068, -1.030, -0.996, -0.944, -0.904, -0.864, -0.825, -0.782, -0.735, -0.699, -0.669, -0.632, -0.584, -0.546, -0.504, -0.461, -0.422, -0.395, -0.360, -0.316, -0.280, -0.225, -0.190, -0.159, -0.121, -0.078, -0.048, -0.007, +0.035, +0.071, +0.105, +0.151, +0.187, +0.227, +0.274, +0.309, +0.360, +0.408, +0.440, +0.484, +0.522, +0.560, +0.603, +0.653, +0.690, +0.744, +0.794, +0.834, +0.892, +0.938, +0.982, +1.024, +1.057, +1.105, +1.175, +1.222, +1.278, +1.333, +1.392, +1.448, +1.510, +1.593, +1.658, +1.764, +1.871, +1.958, +2.049, +2.131, +2.249, +2.369, +2.481, +2.617, +2.793, +3.036, +3.399, +3.942, +4.431, +5.009, +5.212, +5.632, +5.911, +6.031, +6.031, +6.031, +6.031},  +0.035,  -0.048,   1.515},
	{"DC6-4x8Bytes-100",    48, 4096, 0, { -4.931, -4.931, -4.931, -4.931, -4.823, -4.556, -4.096, -3.854, -3.652, -3.226, -2.903, -2.671, -2.442, -2.326, -2.221, -2.128, -2.008, -1.928, -1.851, -1.767, -1.688, -1.622, -1.564, -1.502, -1.451, -1.393, -1.331, -1.279, -1.220, -1.155, -1.095, -1.062, -1.010, -0.956, -0.904, -0.854, -0.820, -0.779, -0.730, -0.692, -0.663, -0.623, -0.583, -0.548, -0.503, -0.468, -0.424, -0.376, -0.340, -0.311, -0.275, -0.239, -0.202, -0.164, -0.130, -0.094, -0.063, -0.036, +0.007, +0.040, +0.082, +0.118, +0.151, +0.189, +0.220, +0.262, +0.298, +0.339, +0.371, +0.407, +0.440, +0.490, +0.532, +0.581, +0.617, +0.666, +0.707, +0.749, +0.791, +0.826, +0.866, +0.906, +0.951, +1.007, +1.052, +1.099, +1.141, +1.193, +1.249, +1.319, +1.361, +1.442, +1.509, +1.597, +1.684, +1.768, +1.853, +1.942, +2.040, +2.136, +2.254, +2.367, +2.501, +2.650, +2.828, +3.041, +3.343, +3.913, +4.401, +5.048, +5.637, +6.127, +6.685, +6.806, +6.806, +6.806, +6.806},  +0.058,  +0.007,   1.514},
	{"DC6-4x8Bytes-100",    56, 4096, 0, { -4.585, -4.585, -4.585, -4.585, -4.517, -4.209, -4.063, -3.958, -3.476, -3.250, -2.836, -2.619, -2.437, -2.286, -2.160, -2.067, -1.972, -1.911, -1.839, -1.776, -1.699, -1.619, -1.557, -1.502, -1.457, -1.402, -1.341, -1.295, -1.246, -1.185, -1.145, -1.105, -1.055, -1.027, -0.980, -0.936, -0.885, -0.840, -0.792, -0.750, -0.712, -0.670, -0.623, -0.590, -0.550, -0.510, -0.475, -0.440, -0.396, -0.360, -0.325, -0.280, -0.242, -0.203, -0.175, -0.131, -0.096, -0.057, -0.029, +0.018, +0.051, +0.095, +0.131, +0.163, +0.203, +0.240, +0.265, +0.304, +0.344, +0.383, +0.423, +0.466, +0.514, +0.559, +0.607, +0.643, +0.686, +0.739, +0.783, +0.828, +0.875, +0.928, +0.969, +1.018, +1.089, +1.139, +1.189, +1.245, +1.324, +1.390, +1.442, +1.492, +1.565, +1.634, +1.697, +1.751, +1.818, +1.892, +2.026, +2.136, +2.236, +2.345, +2.474, +2.637, +2.799, +3.078, +3.336, +4.021, +4.427, +4.988, +5.820, +6.237, +6.428, +6.501, +6.501, +6.501, +6.501},  +0.049,  -0.029,   1.518},
	{"DC6-4x8Bytes-100",    64, 4096, 0, { -4.779, -4.779, -4.779, -4.779, -4.606, -4.195, -4.075, -3.813, -3.458, -3.162, -2.848, -2.645, -2.447, -2.323, -2.179, -2.070, -1.985, -1.880, -1.787, -1.701, -1.638, -1.572, -1.513, -1.463, -1.409, -1.358, -1.303, -1.264, -1.221, -1.172, -1.123, -1.068, -1.025, -0.990, -0.945, -0.904, -0.862, -0.827, -0.784, -0.752, -0.719, -0.670, -0.635, -0.589, -0.552, -0.520, -0.490, -0.452, -0.405, -0.377, -0.336, -0.305, -0.265, -0.229, -0.196, -0.141, -0.102, -0.055, -0.015, +0.023, +0.051, +0.082, +0.123, +0.160, +0.193, +0.241, +0.279, +0.325, +0.369, +0.406, +0.448, +0.490, +0.528, +0.581, +0.622, +0.664, +0.699, +0.739, +0.776, +0.824, +0.876, +0.910, +0.961, +1.012, +1.059, +1.095, +1.162, +1.223, +1.275, +1.344, +1.387, +1.438, +1.506, +1.583, +1.647, +1.738, +1.811, +1.909, +1.980, +2.071, +2.186, +2.296, +2.407, +2.534, +2.700, +2.923, +3.238, +3.773, +4.265, +5.049, +5.307, +5.561, +5.676, +5.717, +5.717, +5.717, +5.717},  +0.040,  -0.015,   1.484},
	{"DC6-4x8Bytes-100",    80, 4096, 0, { -4.761, -4.761, -4.761, -4.761, -4.753, -4.652, -3.959, -3.768, -3.536, -3.231, -2.869, -2.683, -2.488, -2.331, -2.202, -2.103, -2.011, -1.912, -1.829, -1.758, -1.675, -1.601, -1.519, -1.453, -1.387, -1.318, -1.249, -1.201, -1.151, -1.101, -1.064, -1.009, -0.972, -0.935, -0.897, -0.854, -0.816, -0.784, -0.735, -0.696, -0.666, -0.621, -0.572, -0.533, -0.503, -0.472, -0.436, -0.395, -0.365, -0.327, -0.289, -0.262, -0.226, -0.192, -0.144, -0.095, -0.067, -0.033, +0.005, +0.040, +0.074, +0.123, +0.157, +0.180, +0.223, +0.251, +0.289, +0.331, +0.371, +0.409, +0.446, +0.481, +0.524, +0.564, +0.596, +0.627, +0.672, +0.714, +0.781, +0.826, +0.862, +0.904, +0.947, +0.993, +1.055, +1.111, +1.179, +1.243, +1.309, +1.365, +1.417, +1.476, +1.543, +1.614, +1.676, +1.770, +1.842, +1.921, +2.018, +2.127, +2.243, +2.339, +2.480, +2.611, +2.782, +3.025, +3.360, +3.811, +4.380, +5.029, +5.520, +5.781, +6.599, +6.934, +6.934, +6.934, +6.934},  +0.063,  +0.005,   1.501},
	{"DC6-4x8Bytes-100",    96, 4096, 0, { -4.334, -4.334, -4.334, -4.334, -4.334, -4.214, -3.871, -3.733, -3.502, -3.172, -2.867, -2.622, -2.490, -2.363, -2.227, -2.111, -2.028, -1.930, -1.840, -1.779, -1.705, -1.628, -1.581, -1.525, -1.463, -1.412, -1.346, -1.304, -1.234, -1.189, -1.132, -1.091, -1.047, -1.005, -0.951, -0.901, -0.860, -0.819, -0.763, -0.715, -0.671, -0.625, -0.593, -0.548, -0.518, -0.480, -0.435, -0.398, -0.362, -0.323, -0.281, -0.241, -0.200, -0.154, -0.112, -0.073, -0.036, +0.005, +0.057, +0.102, +0.136, +0.171, +0.209, +0.245, +0.288, +0.324, +0.363, +0.399, +0.427, +0.469, +0.500, +0.533, +0.580, +0.620, +0.666, +0.713, +0.746, +0.797, +0.839, +0.882, +0.925, +0.984, +1.017, +1.059, +1.105, +1.139, +1.215, +1.262, +1.328, +1.385, +1.443, +1.521, +1.585, +1.651, +1.719, +1.826, +1.888, +1.996, +2.066, +2.156, +2.264, +2.364, +2.483, +2.635, +2.788, +3.082, +3.347, +3.896, +4.253, +4.725, +5.465, +5.881, +6.470, +6.665, +6.665, +6.665, +6.665},  +0.075,  +0.057,   1.520},
	{"DC6-4x8Bytes-100",   112, 4096, 0, { -4.584, -4.584, -4.584, -4.584, -4.557, -4.493, -4.347, -3.981, -3.466, -3.163, -2.821, -2.650, -2.513, -2.336, -2.211, -2.101, -2.004, -1.901, -1.829, -1.755, -1.669, -1.612, -1.554, -1.498, -1.432, -1.376, -1.316, -1.273, -1.221, -1.160, -1.108, -1.068, -1.027, -0.978, -0.921, -0.870, -0.821, -0.779, -0.738, -0.705, -0.662, -0.622, -0.588, -0.545, -0.508, -0.468, -0.434, -0.398, -0.362, -0.322, -0.288, -0.254, -0.215, -0.175, -0.138, -0.095, -0.057, -0.006, +0.030, +0.057, +0.104, +0.151, +0.189, +0.225, +0.273, +0.316, +0.358, +0.396, +0.449, +0.490, +0.531, +0.572, +0.625, +0.668, +0.706, +0.745, +0.782, +0.821, +0.867, +0.908, +0.950, +0.998, +1.037, +1.084, +1.126, +1.184, +1.235, +1.291, +1.369, +1.419, +1.467, +1.522, +1.570, +1.647, +1.718, +1.787, +1.859, +1.954, +2.064, +2.150, +2.268, +2.396, +2.555, +2.691, +2.877, +3.076, +3.385, +3.855, +4.354, +4.837, +5.355, +5.451, +6.216, +6.568, +6.568, +6.568, +6.568},  +0.088,  +0.030,   1.524},
	{"DC6-4x8Bytes-100",   128, 4096, 0, { -5.749, -5.749, -5.749, -5.749, -5.410, -4.630, -4.498, -4.286, -3.667, -3.402, -3.010, -2.747, -2.529, -2.368, -2.228, -2.111, -2.015, -1.935, -1.838, -1.733, -1.643, -1.562, -1.498, -1.437, -1.373, -1.318, -1.264, -1.211, -1.167, -1.107, -1.067, -1.026, -0.984, -0.937, -0.886, -0.846, -0.784, -0.746, -0.702, -0.660, -0.625, -0.591, -0.542, -0.496, -0.464, -0.409, -0.365, -0.329, -0.292, -0.257, -0.212, -0.179, -0.144, -0.109, -0.066, -0.032, +0.006, +0.046, +0.078, +0.118, +0.153, +0.183, +0.214, +0.260, +0.302, +0.341, +0.374, +0.407, +0.448, +0.490, +0.523, +0.576, +0.623, +0.654, +0.703, +0.756, +0.795, +0.828, +0.859, +0.891, +0.938, +0.980, +1.023, +1.075, +1.122, +1.175, +1.220, +1.287, +1.351, +1.409, +1.478, +1.541, +1.605, +1.670, +1.737, +1.818, +1.913, +1.994, +2.077, +2.192, +2.318, +2.425, +2.541, +2.664, +2.839, +3.051, +3.249, +3.750, +4.205, +4.691, +5.213, +5.288, +5.851, +6.105, +6.105, +6.105, +6.105},  +0.101,  +0.078,   1.524},
	{"DC6-4x8Bytes-100",   160, 4096, 0, { -4.532, -4.532, -4.532, -4.532, -4.505, -4.397, -4.220, -4.072, -3.796, -3.307, -2.999, -2.747, -2.582, -2.430, -2.300, -2.192, -2.068, -1.967, -1.884, -1.787, -1.698, -1.629, -1.553, -1.498, -1.432, -1.376, -1.316, -1.257, -1.193, -1.150, -1.098, -1.052, -0.993, -0.942, -0.887, -0.844, -0.794, -0.750, -0.708, -0.666, -0.631, -0.595, -0.555, -0.506, -0.463, -0.427, -0.388, -0.354, -0.326, -0.286, -0.248, -0.204, -0.167, -0.124, -0.076, -0.037, +0.005, +0.040, +0.087, +0.129, +0.163, +0.195, +0.246, +0.276, +0.328, +0.372, +0.418, +0.459, +0.496, +0.521, +0.568, +0.610, +0.653, +0.697, +0.746, +0.779, +0.819, +0.857, +0.914, +0.953, +1.003, +1.041, +1.089, +1.148, +1.195, +1.257, +1.297, +1.353, +1.420, +1.487, +1.534, +1.590, +1.674, +1.757, +1.811, +1.861, +1.934, +2.002, +2.068, +2.187, +2.291, +2.390, +2.546, +2.694, +2.881, +3.103, +3.447, +3.895, +4.152, +4.488, +4.775, +5.110, +5.825, +6.046, +6.046, +6.046, +6.046},  +0.109,  +0.087,   1.549},
	{"DC6-4x8Bytes-100",   192, 4096, 0, { -4.643, -4.643, -4.643, -4.643, -4.583, -4.392, -4.097, -3.936, -3.641, -3.294, -2.920, -2.630, -2.469, -2.316, -2.193, -2.110, -2.012, -1.929, -1.820, -1.736, -1.672, -1.603, -1.531, -1.482, -1.429, -1.370, -1.332, -1.273, -1.210, -1.153, -1.111, -1.053, -1.003, -0.959, -0.913, -0.864, -0.830, -0.785, -0.750, -0.716, -0.664, -0.627, -0.570, -0.535, -0.498, -0.458, -0.405, -0.369, -0.324, -0.283, -0.235, -0.207, -0.175, -0.129, -0.086, -0.051, -0.019, +0.015, +0.042, +0.084, +0.121, +0.164, +0.199, +0.247, +0.289, +0.328, +0.371, +0.409, +0.453, +0.495, +0.535, +0.563, +0.611, +0.648, +0.683, +0.726, +0.774, +0.826, +0.875, +0.911, +0.947, +0.995, +1.049, +1.107, +1.171, +1.222, +1.275, +1.329, +1.405, +1.466, +1.547, +1.612, +1.680, +1.745, +1.813, +1.881, +1.948, +2.043, +2.153, +2.231, +2.337, +2.441, +2.574, +2.739, +2.904, +3.102, +3.362, +3.792, +4.056, +4.538, +4.650, +4.787, +5.308, +5.541, +5.541, +5.541, +5.541},  +0.103,  +0.042,   1.531},
	{"DC6-4x8Bytes-100",   224, 4096, 0, { -4.269, -4.269, -4.269, -4.269, -4.235, -4.151, -4.054, -3.825, -3.564, -3.184, -2.884, -2.622, -2.446, -2.315, -2.216, -2.096, -2.020, -1.952, -1.872, -1.778, -1.706, -1.648, -1.577, -1.519, -1.454, -1.395, -1.327, -1.277, -1.230, -1.178, -1.138, -1.085, -1.041, -1.004, -0.957, -0.903, -0.860, -0.818, -0.772, -0.727, -0.693, -0.649, -0.603, -0.563, -0.520, -0.461, -0.415, -0.379, -0.339, -0.300, -0.264, -0.228, -0.178, -0.136, -0.108, -0.064, -0.019, +0.025, +0.064, +0.095, +0.124, +0.156, +0.196, +0.235, +0.290, +0.331, +0.373, +0.420, +0.460, +0.502, +0.555, +0.590, +0.629, +0.672, +0.706, +0.744, +0.792, +0.834, +0.876, +0.923, +0.965, +1.013, +1.061, +1.122, +1.169, +1.226, +1.275, +1.328, +1.371, +1.436, +1.493, +1.567, +1.660, +1.728, +1.800, +1.874, +1.931, +1.997, +2.070, +2.163, +2.257, +2.377, +2.519, +2.679, +2.827, +3.050, +3.302, +3.706, +4.014, +4.340, +4.679, +5.235, +5.513, +5.581, +5.581, +5.581, +5.581},  +0.089,  +0.064,   1.520},
	{"DC6-4x8Bytes-100",   256, 4096, 0, { -4.833, -4.833, -4.833, -4.833, -4.767, -4.599, -4.489, -4.118, -3.585, -3.212, -2.921, -2.729, -2.561, -2.388, -2.263, -2.125, -2.032, -1.951, -1.868, -1.796, -1.712, -1.652, -1.589, -1.522, -1.445, -1.392, -1.338, -1.289, -1.242, -1.181, -1.118, -1.061, -1.008, -0.964, -0.914, -0.868, -0.815, -0.777, -0.726, -0.685, -0.644, -0.588, -0.545, -0.507, -0.465, -0.414, -0.379, -0.349, -0.315, -0.284, -0.250, -0.213, -0.171, -0.134, -0.095, -0.062, -0.008, +0.033, +0.071, +0.116, +0.155, +0.200, +0.231, +0.266, +0.307, +0.343, +0.379, +0.421, +0.462, +0.505, +0.546, +0.586, +0.621, +0.667, +0.707, +0.747, +0.799, +0.847, +0.894, +0.934, +0.982, +1.032, +1.078, +1.135, +1.191, +1.247, +1.295, +1.359, +1.411, +1.463, +1.512, +1.580, +1.653, +1.727, +1.793, +1.859, +1.927, +1.997, +2.131, +2.230, +2.334, +2.478, +2.614, +2.760, +2.948, +3.133, +3.426, +3.935, +4.320, +4.752, +5.086, +5.497, +5.716, +5.770, +5.770, +5.770, +5.770},  +0.108,  +0.071,   1.554},
	{"DC6-4x8Bytes-100",   320, 4096, 0, { -5.143, -5.143, -5.143, -5.143, -4.955, -4.529, -4.393, -3.993, -3.611, -3.255, -2.844, -2.651, -2.477, -2.295, -2.160, -2.047, -1.941, -1.860, -1.784, -1.703, -1.631, -1.561, -1.471, -1.404, -1.349, -1.297, -1.234, -1.179, -1.124, -1.076, -1.025, -0.977, -0.928, -0.874, -0.835, -0.789, -0.750, -0.705, -0.665, -0.629, -0.596, -0.553, -0.510, -0.468, -0.435, -0.399, -0.367, -0.336, -0.296, -0.247, -0.209, -0.178, -0.131, -0.099, -0.061, -0.024, +0.018, +0.055, +0.095, +0.137, +0.178, +0.214, +0.258, +0.301, +0.334, +0.375, +0.408, +0.462, +0.499, +0.539, +0.586, +0.641, +0.686, +0.728, +0.766, +0.810, +0.854, +0.893, +0.957, +1.004, +1.043, +1.089, +1.143, +1.189, +1.238, +1.285, +1.336, +1.389, +1.453, +1.507, +1.559, +1.636, +1.693, +1.765, +1.815, +1.890, +1.951, +2.038, +2.110, +2.175, +2.255, +2.357, +2.563, +2.741, +2.916, +3.088, +3.511, +3.993, +4.468, +4.752, +5.258, +5.955, +6.521, +6.573, +6.573, +6.573, +6.573},  +0.156,  +0.095,   1.533},
	{"DC6-4x8Bytes-100",   384, 4096, 0, { -5.246, -5.246, -5.246, -5.246, -5.089, -4.651, -4.310, -3.970, -3.513, -3.129, -2.831, -2.618, -2.422, -2.301, -2.159, -2.042, -1.920, -1.837, -1.749, -1.656, -1.587, -1.530, -1.455, -1.405, -1.345, -1.285, -1.228, -1.180, -1.109, -1.057, -1.008, -0.963, -0.910, -0.867, -0.829, -0.777, -0.743, -0.691, -0.655, -0.617, -0.579, -0.542, -0.486, -0.438, -0.389, -0.340, -0.312, -0.280, -0.240, -0.195, -0.149, -0.107, -0.061, -0.027, +0.016, +0.062, +0.097, +0.131, +0.172, +0.212, +0.246, +0.284, +0.319, +0.356, +0.396, +0.437, +0.471, +0.515, +0.546, +0.587, +0.628, +0.668, +0.714, +0.766, +0.801, +0.855, +0.890, +0.936, +0.992, +1.041, +1.079, +1.114, +1.159, +1.209, +1.257, +1.307, +1.372, +1.414, +1.469, +1.535, +1.590, +1.656, +1.729, +1.802, +1.855, +1.946, +2.019, +2.077, +2.153, +2.250, +2.355, +2.465, +2.623, +2.739, +2.855, +3.060, +3.317, +3.684, +4.402, +5.045, +5.303, +5.784, +6.028, +6.125, +6.125, +6.125, +6.125},  +0.187,  +0.172,   1.525},
	{"DC6-4x8Bytes-100",   448, 4096, 0, { -5.383, -5.383, -5.383, -5.383, -5.238, -4.710, -4.303, -3.982, -3.433, -3.114, -2.796, -2.547, -2.370, -2.206, -2.061, -1.964, -1.874, -1.781, -1.690, -1.635, -1.557, -1.495, -1.444, -1.379, -1.329, -1.261, -1.209, -1.133, -1.074, -1.022, -0.988, -0.946, -0.899, -0.834, -0.786, -0.739, -0.683, -0.648, -0.598, -0.560, -0.509, -0.464, -0.426, -0.383, -0.343, -0.298, -0.257, -0.221, -0.188, -0.150, -0.120, -0.079, -0.040, +0.005, +0.044, +0.076, +0.118, +0.156, +0.198, +0.226, +0.268, +0.303, +0.339, +0.379, +0.419, +0.458, +0.491, +0.531, +0.570, +0.617, +0.659, +0.691, +0.737, +0.784, +0.821, +0.860, +0.905, +0.942, +0.996, +1.046, +1.100, +1.147, +1.202, +1.245, +1.292, +1.347, +1.388, +1.435, +1.493, +1.551, +1.600, +1.674, +1.733, +1.789, +1.853, +1.933, +2.011, +2.092, +2.167, +2.249, +2.351, +2.444, +2.573, +2.714, +2.864, +3.071, +3.326, +3.706, +4.067, +4.644, +5.117, +5.297, +5.486, +5.536, +5.536, +5.536, +5.536},  +0.212,  +0.198,   1.503},
	{"DC6-4x8Bytes-100",   512, 4096, 0, { -4.376, -4.376, -4.376, -4.376, -4.325, -4.056, -3.874, -3.753, -3.490, -3.207, -2.879, -2.629, -2.479, -2.310, -2.170, -2.029, -1.941, -1.838, -1.741, -1.631, -1.562, -1.470, -1.395, -1.322, -1.268, -1.213, -1.151, -1.083, -1.030, -0.978, -0.922, -0.866, -0.817, -0.771, -0.737, -0.698, -0.660, -0.613, -0.575, -0.540, -0.502, -0.460, -0.415, -0.379, -0.342, -0.289, -0.250, -0.217, -0.176, -0.135, -0.095, -0.058, -0.022, +0.012, +0.051, +0.091, +0.126, +0.170, +0.204, +0.234, +0.268, +0.318, +0.358, +0.407, +0.441, +0.483, +0.528, +0.562, +0.602, +0.643, +0.676, +0.718, +0.763, +0.802, +0.845, +0.895, +0.942, +0.975, +1.018, +1.064, +1.107, +1.147, +1.199, +1.246, +1.293, +1.340, +1.388, +1.435, +1.482, +1.524, +1.587, +1.654, +1.719, +1.782, +1.851, +1.910, +1.994, +2.085, +2.158, +2.258, +2.342, +2.477, +2.567, +2.703, +2.846, +3.021, +3.250, +3.713, +4.335, +4.986, +5.222, +5.527, +5.678, +5.741, +5.741, +5.741, +5.741},  +0.220,  +0.204,   1.508},
	{"DC6-4x8Bytes-100",   640, 4096, 0, { -4.812, -4.812, -4.812, -4.812, -4.772, -4.528, -4.208, -3.870, -3.515, -3.197, -2.810, -2.584, -2.413, -2.235, -2.080, -1.949, -1.859, -1.763, -1.675, -1.601, -1.528, -1.466, -1.397, -1.317, -1.261, -1.211, -1.147, -1.086, -1.032, -0.983, -0.930, -0.889, -0.854, -0.821, -0.775, -0.733, -0.690, -0.653, -0.592, -0.545, -0.501, -0.450, -0.395, -0.339, -0.311, -0.269, -0.233, -0.194, -0.158, -0.130, -0.084, -0.053, -0.020, +0.022, +0.074, +0.115, +0.146, +0.179, +0.216, +0.252, +0.284, +0.321, +0.359, +0.394, +0.435, +0.484, +0.519, +0.565, +0.603, +0.649, +0.714, +0.750, +0.788, +0.822, +0.859, +0.902, +0.937, +0.971, +1.013, +1.061, +1.109, +1.160, +1.219, +1.263, +1.310, +1.363, +1.409, +1.463, +1.532, +1.591, +1.669, +1.720, +1.785, +1.856, +1.911, +1.982, +2.047, +2.125, +2.208, +2.309, +2.397, +2.487, +2.654, +2.776, +2.910, +3.111, +3.360, +3.635, +4.159, +4.767, +5.080, +5.646, +6.555, +6.817, +6.817, +6.817, +6.817},  +0.241,  +0.216,   1.516},
	{"DC6-4x8Bytes-100",   768, 4096, 0, { -5.188, -5.188, -5.188, -5.188, -4.956, -4.306, -4.054, -3.794, -3.575, -3.223, -2.853, -2.563, -2.354, -2.216, -2.095, -1.973, -1.860, -1.754, -1.659, -1.579, -1.488, -1.425, -1.355, -1.292, -1.243, -1.192, -1.136, -1.081, -1.037, -0.974, -0.917, -0.848, -0.803, -0.755, -0.710, -0.669, -0.624, -0.569, -0.522, -0.478, -0.438, -0.385, -0.346, -0.308, -0.264, -0.229, -0.194, -0.155, -0.107, -0.066, -0.033, +0.016, +0.050, +0.086, +0.124, +0.172, +0.203, +0.232, +0.274, +0.312, +0.348, +0.381, +0.411, +0.452, +0.484, +0.514, +0.558, +0.594, +0.632, +0.675, +0.713, +0.752, +0.790, +0.839, +0.890, +0.933, +0.970, +1.008, +1.045, +1.087, +1.122, +1.164, +1.209, +1.253, +1.304, +1.356, +1.421, +1.471, +1.521, +1.579, +1.637, +1.691, +1.750, +1.817, +1.881, +1.934, +2.029, +2.109, +2.212, +2.304, +2.381, +2.525, +2.664, +2.820, +3.000, +3.182, +3.456, +3.945, +4.435, +4.729, +5.347, +5.763, +7.028, +7.592, +7.592, +7.592, +7.592},  +0.270,  +0.274,   1.521},
	{"DC6-4x8Bytes-100",   896, 4096, 0, { -5.009, -5.009, -5.009, -5.009, -4.918, -4.549, -4.164, -3.990, -3.583, -3.130, -2.769, -2.526, -2.342, -2.170, -2.070, -1.933, -1.811, -1.724, -1.633, -1.564, -1.485, -1.423, -1.372, -1.297, -1.232, -1.176, -1.117, -1.057, -1.009, -0.950, -0.914, -0.843, -0.788, -0.748, -0.706, -0.659, -0.604, -0.544, -0.512, -0.465, -0.428, -0.381, -0.328, -0.287, -0.247, -0.211, -0.174, -0.134, -0.098, -0.062, -0.033, +0.022, +0.067, +0.098, +0.133, +0.172, +0.213, +0.241, +0.284, +0.321, +0.362, +0.385, +0.424, +0.466, +0.497, +0.544, +0.584, +0.618, +0.659, +0.698, +0.729, +0.765, +0.807, +0.849, +0.888, +0.937, +1.002, +1.045, +1.079, +1.122, +1.169, +1.208, +1.240, +1.289, +1.335, +1.383, +1.418, +1.465, +1.516, +1.570, +1.627, +1.700, +1.756, +1.822, +1.912, +1.984, +2.063, +2.135, +2.222, +2.314, +2.414, +2.519, +2.625, +2.784, +2.959, +3.169, +3.436, +3.909, +4.381, +4.810, +5.450, +5.786, +5.962, +5.996, +5.996, +5.996, +5.996},  +0.285,  +0.284,   1.514},
	{"DC6-4x8Bytes-100",  1024, 4096, 0, { -5.178, -5.178, -5.178, -5.178, -4.947, -4.438, -4.194, -3.994, -3.610, -3.210, -2.768, -2.530, -2.319, -2.178, -2.056, -1.918, -1.838, -1.734, -1.647, -1.560, -1.481, -1.401, -1.343, -1.267, -1.215, -1.159, -1.115, -1.052, -0.996, -0.948, -0.902, -0.848, -0.800, -0.745, -0.689, -0.648, -0.613, -0.578, -0.529, -0.487, -0.450, -0.401, -0.351, -0.314, -0.276, -0.232, -0.187, -0.144, -0.101, -0.056, -0.019, +0.018, +0.051, +0.095, +0.146, +0.192, +0.236, +0.279, +0.312, +0.353, +0.391, +0.430, +0.465, +0.506, +0.544, +0.587, +0.632, +0.677, +0.711, +0.741, +0.778, +0.819, +0.845, +0.885, +0.913, +0.954, +0.997, +1.047, +1.099, +1.153, +1.207, +1.249, +1.299, +1.347, +1.388, +1.432, +1.471, +1.525, +1.573, +1.615, +1.683, +1.734, +1.793, +1.839, +1.914, +1.976, +2.061, +2.141, +2.246, +2.332, +2.428, +2.538, +2.644, +2.792, +2.990, +3.180, +3.408, +3.814, +4.157, +4.398, +4.565, +4.700, +5.413, +5.722, +5.722, +5.722, +5.722},  +0.296,  +0.312,   1.512},
	{"DC6-4x8Bytes-100",  1280, 4096, 0, { -4.548, -4.548, -4.548, -4.548, -4.522, -4.363, -4.071, -3.940, -3.481, -3.165, -2.774, -2.497, -2.280, -2.102, -1.990, -1.892, -1.787, -1.683, -1.592, -1.501, -1.431, -1.371, -1.310, -1.237, -1.173, -1.122, -1.068, -1.013, -0.951, -0.904, -0.848, -0.802, -0.753, -0.705, -0.663, -0.621, -0.567, -0.528, -0.478, -0.438, -0.391, -0.342, -0.302, -0.261, -0.227, -0.191, -0.154, -0.105, -0.075, -0.035, +0.002, +0.035, +0.083, +0.128, +0.171, +0.203, +0.243, +0.270, +0.304, +0.341, +0.379, +0.419, +0.452, +0.483, +0.526, +0.562, +0.596, +0.637, +0.678, +0.715, +0.756, +0.792, +0.827, +0.861, +0.902, +0.947, +0.987, +1.027, +1.071, +1.119, +1.165, +1.213, +1.269, +1.318, +1.360, +1.416, +1.475, +1.539, +1.597, +1.656, +1.714, +1.776, +1.834, +1.902, +1.955, +2.007, +2.080, +2.152, +2.254, +2.341, +2.457, +2.547, +2.713, +2.800, +2.988, +3.205, +3.494, +3.926, +4.309, +4.602, +4.871, +5.142, +5.385, +5.434, +5.434, +5.434, +5.434},  +0.317,  +0.304,   1.504},
	{"DC6-4x8Bytes-100",  1536, 4096, 0, { -4.884, -4.884, -4.884, -4.884, -4.873, -4.623, -4.270, -3.983, -3.520, -3.162, -2.724, -2.485, -2.295, -2.178, -2.062, -1.941, -1.819, -1.722, -1.626, -1.539, -1.469, -1.390, -1.321, -1.248, -1.193, -1.125, -1.072, -0.998, -0.935, -0.886, -0.818, -0.775, -0.717, -0.671, -0.621, -0.577, -0.521, -0.467, -0.427, -0.385, -0.342, -0.305, -0.261, -0.205, -0.173, -0.137, -0.081, -0.048, -0.018, +0.018, +0.054, +0.091, +0.127, +0.163, +0.205, +0.236, +0.272, +0.320, +0.358, +0.392, +0.434, +0.472, +0.514, +0.546, +0.575, +0.609, +0.654, +0.692, +0.732, +0.770, +0.806, +0.837, +0.870, +0.915, +0.946, +0.995, +1.044, +1.083, +1.133, +1.172, +1.224, +1.278, +1.329, +1.375, +1.421, +1.457, +1.498, +1.539, +1.592, +1.644, +1.692, +1.767, +1.816, +1.892, +1.975, +2.046, +2.147, +2.232, +2.314, +2.404, +2.492, +2.581, +2.682, +2.811, +2.984, +3.174, +3.470, +3.845, +4.224, +4.696, +5.103, +5.488, +6.085, +6.243, +6.243, +6.243, +6.243},  +0.345,  +0.358,   1.515},
	{"DC6-4x8Bytes-100",  1792, 4096, 0, { -5.505, -5.505, -5.505, -5.505, -5.098, -4.124, -3.967, -3.857, -3.404, -2.953, -2.591, -2.374, -2.211, -2.094, -1.935, -1.847, -1.733, -1.647, -1.552, -1.443, -1.371, -1.300, -1.234, -1.158, -1.099, -1.041, -0.976, -0.912, -0.873, -0.830, -0.764, -0.713, -0.648, -0.587, -0.540, -0.504, -0.458, -0.416, -0.370, -0.335, -0.282, -0.245, -0.195, -0.138, -0.095, -0.062, -0.029, +0.006, +0.034, +0.067, +0.109, +0.149, +0.187, +0.217, +0.245, +0.275, +0.313, +0.352, +0.398, +0.433, +0.469, +0.502, +0.542, +0.579, +0.621, +0.652, +0.693, +0.722, +0.760, +0.805, +0.854, +0.897, +0.946, +0.989, +1.031, +1.071, +1.103, +1.143, +1.192, +1.231, +1.283, +1.332, +1.376, +1.423, +1.478, +1.547, +1.598, +1.669, +1.719, +1.771, +1.817, +1.887, +1.941, +2.008, +2.067, +2.131, +2.205, +2.273, +2.359, +2.465, +2.563, +2.680, +2.799, +2.966, +3.107, +3.284, +3.493, +3.934, +4.454, +4.945, +5.109, +5.330, +5.624, +5.719, +5.719, +5.719, +5.719},  +0.418,  +0.398,   1.513},
	{"DC6-4x8Bytes-100",  2048, 4096, 0, { -4.870, -4.870, -4.870, -4.870, -4.670, -4.177, -4.075, -3.902, -3.387, -2.975, -2.630, -2.385, -2.216, -2.054, -1.927, -1.815, -1.715, -1.603, -1.528, -1.461, -1.388, -1.317, -1.268, -1.186, -1.119, -1.054, -0.995, -0.951, -0.886, -0.832, -0.756, -0.711, -0.670, -0.608, -0.561, -0.522, -0.475, -0.436, -0.389, -0.349, -0.304, -0.256, -0.222, -0.179, -0.135, -0.094, -0.046, -0.005, +0.030, +0.069, +0.105, +0.137, +0.175, +0.206, +0.248, +0.287, +0.323, +0.367, +0.402, +0.433, +0.493, +0.530, +0.565, +0.601, +0.644, +0.685, +0.718, +0.760, +0.787, +0.821, +0.861, +0.897, +0.938, +0.966, +1.005, +1.062, +1.106, +1.150, +1.205, +1.262, +1.312, +1.350, +1.398, +1.451, +1.496, +1.564, +1.613, +1.678, +1.737, +1.785, +1.841, +1.905, +1.981, +2.036, +2.106, +2.170, +2.247, +2.340, +2.433, +2.506, +2.607, +2.731, +2.848, +2.973, +3.132, +3.362, +3.663, +4.112, +4.335, +4.900, +5.027, +5.365, +5.567, +5.568, +5.568, +5.568, +5.568},  +0.426,  +0.402,   1.532},
	{"DC6-4x8Bytes-100",  2560, 4096, 0, { -5.642, -5.642, -5.642, -5.642, -5.525, -4.805, -4.247, -3.788, -3.409, -3.071, -2.677, -2.390, -2.187, -2.049, -1.932, -1.802, -1.692, -1.606, -1.510, -1.419, -1.337, -1.267, -1.185, -1.117, -1.079, -0.992, -0.924, -0.852, -0.811, -0.756, -0.696, -0.651, -0.608, -0.565, -0.513, -0.466, -0.428, -0.373, -0.315, -0.276, -0.227, -0.183, -0.137, -0.094, -0.054, -0.016, +0.032, +0.067, +0.107, +0.137, +0.181, +0.231, +0.265, +0.309, +0.342, +0.376, +0.406, +0.441, +0.482, +0.511, +0.559, +0.591, +0.621, +0.659, +0.703, +0.742, +0.781, +0.816, +0.845, +0.875, +0.927, +0.973, +1.006, +1.065, +1.105, +1.147, +1.193, +1.226, +1.265, +1.304, +1.347, +1.396, +1.441, +1.489, +1.531, +1.591, +1.630, +1.673, +1.734, +1.811, +1.860, +1.933, +1.993, +2.060, +2.152, +2.222, +2.303, +2.382, +2.464, +2.564, +2.635, +2.737, +2.880, +3.036, +3.140, +3.367, +3.654, +4.260, +4.690, +5.262, +5.522, +5.774, +5.914, +5.964, +5.964, +5.964, +5.964},  +0.479,  +0.482,   1.540},
	{"DC6-4x8Bytes-100",  3072, 4096, 0, { -5.064, -5.064, -5.064, -5.064, -4.977, -4.628, -3.956, -3.854, -3.291, -2.981, -2.544, -2.314, -2.160, -2.001, -1.885, -1.760, -1.637, -1.544, -1.435, -1.319, -1.233, -1.157, -1.097, -1.029, -0.973, -0.912, -0.854, -0.798, -0.753, -0.684, -0.629, -0.587, -0.542, -0.502, -0.454, -0.416, -0.374, -0.331, -0.290, -0.239, -0.205, -0.169, -0.108, -0.078, -0.034, +0.003, +0.038, +0.075, +0.122, +0.159, +0.210, +0.248, +0.282, +0.328, +0.366, +0.393, +0.430, +0.460, +0.507, +0.542, +0.590, +0.626, +0.657, +0.693, +0.740, +0.780, +0.814, +0.860, +0.903, +0.955, +0.988, +1.035, +1.074, +1.108, +1.144, +1.182, +1.229, +1.281, +1.318, +1.353, +1.402, +1.458, +1.493, +1.543, +1.588, +1.644, +1.688, +1.759, +1.805, +1.851, +1.917, +1.980, +2.042, +2.100, +2.177, +2.254, +2.343, +2.404, +2.474, +2.574, +2.650, +2.769, +2.940, +3.113, +3.297, +3.538, +3.818, +4.255, +4.596, +4.904, +5.351, +5.586, +6.397, +6.732, +6.732, +6.732, +6.732},  +0.530,  +0.507,   1.536},
	{"DC6-4x8Bytes-100",  3584, 4096, 0, { -5.426, -5.426, -5.426, -5.426, -5.363, -5.057, -4.249, -4.019, -3.299, -2.990, -2.572, -2.321, -2.095, -1.984, -1.832, -1.695, -1.588, -1.495, -1.403, -1.337, -1.251, -1.179, -1.123, -1.064, -0.988, -0.934, -0.892, -0.834, -0.770, -0.720, -0.671, -0.601, -0.543, -0.492, -0.443, -0.400, -0.358, -0.294, -0.242, -0.191, -0.146, -0.100, -0.062, -0.026, +0.010, +0.039, +0.081, +0.125, +0.167, +0.218, +0.272, +0.314, +0.356, +0.398, +0.433, +0.462, +0.507, +0.547, +0.587, +0.622, +0.658, +0.693, +0.747, +0.786, +0.825, +0.866, +0.911, +0.943, +0.990, +1.024, +1.073, +1.120, +1.161, +1.193, +1.224, +1.267, +1.314, +1.356, +1.395, +1.435, +1.479, +1.521, +1.572, +1.638, +1.687, +1.732, +1.775, +1.823, +1.868, +1.928, +1.977, +2.021, +2.098, +2.180, +2.258, +2.319, +2.410, +2.490, +2.585, +2.709, +2.833, +2.929, +3.017, +3.177, +3.335, +3.552, +3.756, +4.203, +4.435, +4.801, +5.277, +6.015, +6.183, +6.244, +6.244, +6.244, +6.244},  +0.579,  +0.587,   1.557},
	{"DC6-4x8Bytes-100",  4096, 4096, 0, { -5.658, -5.658, -5.658, -5.658, -5.459, -4.733, -4.186, -3.922, -3.249, -2.928, -2.493, -2.323, -2.090, -1.945, -1.777, -1.670, -1.547, -1.447, -1.338, -1.251, -1.162, -1.111, -1.041, -0.979, -0.910, -0.856, -0.812, -0.752, -0.699, -0.641, -0.597, -0.526, -0.479, -0.426, -0.381, -0.341, -0.298, -0.258, -0.202, -0.154, -0.117, -0.076, -0.036, +0.014, +0.066, +0.110, +0.142, +0.182, +0.231, +0.262, +0.302, +0.331, +0.376, +0.412, +0.453, +0.493, +0.537, +0.581, +0.619, +0.655, +0.708, +0.749, +0.791, +0.829, +0.869, +0.905, +0.954, +0.994, +1.040, +1.083, +1.119, +1.167, +1.196, +1.247, +1.292, +1.337, +1.382, +1.409, +1.458, +1.494, +1.550, +1.592, +1.647, +1.696, +1.745, +1.788, +1.845, +1.902, +1.971, +2.021, +2.070, +2.120, +2.173, +2.229, +2.305, +2.385, +2.461, +2.550, +2.631, +2.718, +2.818, +2.940, +3.033, +3.186, +3.352, +3.548, +3.854, +4.290, +4.770, +5.182, +5.306, +5.423, +5.665, +5.775, +5.775, +5.775, +5.775},  +0.632,  +0.619,   1.557},
	{"DC6-4x8Bytes-100",  5120, 4096, 0, { -5.869, -5.869, -5.869, -5.869, -5.591, -4.942, -4.123, -3.857, -3.287, -2.955, -2.407, -2.158, -1.992, -1.841, -1.714, -1.604, -1.535, -1.431, -1.350, -1.249, -1.156, -1.077, -0.993, -0.915, -0.870, -0.813, -0.756, -0.706, -0.634, -0.581, -0.530, -0.470, -0.406, -0.341, -0.291, -0.246, -0.209, -0.151, -0.104, -0.070, -0.030, +0.017, +0.059, +0.086, +0.135, +0.161, +0.197, +0.237, +0.280, +0.322, +0.356, +0.395, +0.441, +0.493, +0.539, +0.573, +0.617, +0.653, +0.688, +0.711, +0.758, +0.791, +0.830, +0.872, +0.914, +0.951, +0.982, +1.020, +1.059, +1.106, +1.149, +1.198, +1.239, +1.286, +1.328, +1.363, +1.406, +1.448, +1.485, +1.526, +1.562, +1.604, +1.637, +1.693, +1.750, +1.811, +1.861, +1.903, +1.968, +2.023, +2.078, +2.139, +2.215, +2.287, +2.377, +2.427, +2.523, +2.585, +2.666, +2.773, +2.861, +2.962, +3.094, +3.203, +3.377, +3.585, +3.904, +4.337, +4.609, +5.141, +5.371, +5.674, +5.860, +5.861, +5.861, +5.861, +5.861},  +0.679,  +0.688,   1.548},
	{"DC6-4x8Bytes-100",  6144, 4096, 0, { -4.845, -4.845, -4.845, -4.845, -4.706, -4.220, -4.035, -3.580, -3.114, -2.800, -2.401, -2.131, -1.936, -1.786, -1.671, -1.571, -1.444, -1.349, -1.280, -1.184, -1.098, -1.031, -0.951, -0.894, -0.819, -0.755, -0.711, -0.665, -0.614, -0.566, -0.526, -0.482, -0.436, -0.377, -0.322, -0.271, -0.235, -0.181, -0.128, -0.076, -0.038, +0.005, +0.044, +0.095, +0.142, +0.187, +0.222, +0.269, +0.312, +0.342, +0.372, +0.420, +0.464, +0.499, +0.536, +0.580, +0.613, +0.652, +0.687, +0.723, +0.761, +0.795, +0.839, +0.885, +0.926, +0.969, +1.005, +1.038, +1.076, +1.120, +1.150, +1.185, +1.241, +1.294, +1.336, +1.395, +1.441, +1.486, +1.521, +1.564, +1.612, +1.675, +1.720, +1.767, +1.803, +1.847, +1.888, +1.941, +2.000, +2.064, +2.117, +2.189, +2.266, +2.318, +2.380, +2.450, +2.531, +2.604, +2.668, +2.794, +2.911, +3.027, +3.176, +3.281, +3.417, +3.607, +3.817, +4.184, +4.611, +5.345, +5.598, +5.704, +6.950, +7.522, +7.522, +7.522, +7.522},  +0.704,  +0.687,   1.539},
	{"DC6-4x8Bytes-100",  7168, 4096, 0, { -4.401, -4.401, -4.401, -4.401, -4.334, -4.185, -3.914, -3.577, -3.016, -2.624, -2.284, -2.088, -1.880, -1.748, -1.601, -1.477, -1.404, -1.314, -1.225, -1.143, -1.072, -1.003, -0.933, -0.865, -0.811, -0.730, -0.686, -0.631, -0.564, -0.527, -0.468, -0.424, -0.385, -0.337, -0.303, -0.258, -0.204, -0.162, -0.120, -0.070, -0.027, +0.012, +0.070, +0.116, +0.158, +0.202, +0.244, +0.297, +0.335, +0.378, +0.414, +0.455, +0.501, +0.546, +0.589, +0.631, +0.676, +0.709, +0.754, +0.797, +0.832, +0.873, +0.916, +0.950, +0.983, +1.016, +1.059, +1.097, +1.142, +1.186, +1.227, +1.273, +1.310, +1.352, +1.387, +1.431, +1.479, +1.521, +1.557, +1.608, +1.652, +1.689, +1.744, +1.792, +1.845, +1.905, +1.954, +2.012, +2.076, +2.143, +2.200, +2.264, +2.316, +2.390, +2.462, +2.528, +2.583, +2.647, +2.719, +2.799, +2.873, +3.014, +3.165, +3.337, +3.495, +3.713, +3.945, +4.413, +4.844, +5.455, +5.548, +5.693, +6.018, +6.118, +6.118, +6.118, +6.118},  +0.753,  +0.754,   1.546},
	{"DC6-4x8Bytes-100",  8192, 4096, 0, { -4.536, -4.536, -4.536, -4.536, -4.474, -4.294, -4.104, -3.930, -3.367, -2.849, -2.411, -2.090, -1.907, -1.765, -1.619, -1.519, -1.415, -1.338, -1.233, -1.146, -1.066, -0.953, -0.881, -0.819, -0.769, -0.718, -0.642, -0.580, -0.533, -0.476, -0.429, -0.384, -0.340, -0.281, -0.241, -0.203, -0.157, -0.110, -0.067, -0.029, +0.027, +0.065, +0.102, +0.131, +0.175, +0.214, +0.267, +0.315, +0.356, +0.401, +0.436, +0.474, +0.517, +0.555, +0.596, +0.647, +0.683, +0.718, +0.752, +0.799, +0.839, +0.871, +0.911, +0.945, +0.990, +1.029, +1.062, +1.096, +1.140, +1.180, +1.220, +1.272, +1.312, +1.351, +1.383, +1.433, +1.479, +1.527, +1.568, +1.617, +1.680, +1.732, +1.764, +1.795, +1.853, +1.904, +1.970, +2.019, +2.077, +2.151, +2.214, +2.272, +2.329, +2.399, +2.463, +2.542, +2.618, +2.710, +2.812, +2.908, +3.005, +3.103, +3.193, +3.350, +3.518, +3.739, +3.998, +4.371, +4.743, +5.208, +5.397, +5.940, +6.207, +6.283, +6.283, +6.283, +6.283},  +0.766,  +0.752,   1.558},
	{"DC6-4x8Bytes-100", 10240, 4096, 0, { -5.520, -5.520, -5.520, -5.520, -5.028, -3.933, -3.728, -3.547, -3.138, -2.871, -2.388, -2.113, -1.904, -1.725, -1.560, -1.446, -1.333, -1.264, -1.159, -1.080, -1.014, -0.929, -0.860, -0.787, -0.720, -0.674, -0.614, -0.541, -0.493, -0.434, -0.385, -0.338, -0.281, -0.239, -0.195, -0.156, -0.117, -0.078, -0.044, +0.007, +0.049, +0.094, +0.135, +0.180, +0.219, +0.273, +0.318, +0.357, +0.404, +0.443, +0.483, +0.517, +0.561, +0.594, +0.640, +0.678, +0.716, +0.753, +0.786, +0.824, +0.859, +0.892, +0.925, +0.950, +0.992, +1.036, +1.083, +1.127, +1.166, +1.201, +1.241, +1.281, +1.323, +1.358, +1.395, +1.443, +1.482, +1.529, +1.574, +1.621, +1.667, +1.722, +1.779, +1.833, +1.876, +1.933, +1.986, +2.039, +2.104, +2.174, +2.243, +2.306, +2.363, +2.422, +2.487, +2.569, +2.631, +2.723, +2.794, +2.878, +2.963, +3.062, +3.163, +3.344, +3.519, +3.714, +3.962, +4.395, +4.724, +5.087, +5.378, +5.552, +5.736, +5.794, +5.794, +5.794, +5.794},  +0.792,  +0.786,   1.541},
	{"DC6-4x8Bytes-100", 12288, 4096, 0, { -4.055, -4.055, -4.055, -4.055, -4.032, -3.931, -3.801, -3.607, -3.144, -2.734, -2.323, -2.088, -1.881, -1.714, -1.581, -1.412, -1.298, -1.181, -1.085, -1.013, -0.948, -0.879, -0.798, -0.749, -0.681, -0.623, -0.549, -0.501, -0.455, -0.405, -0.353, -0.303, -0.240, -0.200, -0.160, -0.127, -0.083, -0.033, +0.016, +0.063, +0.106, +0.150, +0.187, +0.235, +0.269, +0.318, +0.356, +0.398, +0.428, +0.474, +0.506, +0.544, +0.587, +0.623, +0.661, +0.696, +0.730, +0.757, +0.794, +0.825, +0.867, +0.909, +0.943, +0.975, +1.014, +1.046, +1.087, +1.137, +1.180, +1.221, +1.257, +1.306, +1.359, +1.401, +1.431, +1.477, +1.522, +1.555, +1.617, +1.666, +1.728, +1.769, +1.807, +1.860, +1.912, +1.967, +2.022, +2.090, +2.146, +2.225, +2.271, +2.322, +2.371, +2.442, +2.514, +2.582, +2.654, +2.732, +2.814, +2.881, +3.006, +3.093, +3.224, +3.389, +3.545, +3.770, +4.057, +4.476, +4.849, +5.252, +5.685, +5.980, +6.270, +6.312, +6.312, +6.312, +6.312},  +0.828,  +0.794,   1.539},
	{"DC6-4x8Bytes-100", 14336, 4096, 0, { -4.670, -4.670, -4.670, -4.670, -4.616, -4.297, -3.891, -3.603, -3.087, -2.689, -2.255, -1.987, -1.826, -1.672, -1.535, -1.390, -1.316, -1.208, -1.112, -1.023, -0.948, -0.881, -0.818, -0.767, -0.696, -0.632, -0.570, -0.517, -0.452, -0.409, -0.355, -0.300, -0.244, -0.184, -0.138, -0.100, -0.060, -0.010, +0.036, +0.082, +0.130, +0.175, +0.214, +0.249, +0.299, +0.348, +0.385, +0.424, +0.463, +0.494, +0.541, +0.578, +0.611, +0.651, +0.697, +0.729, +0.760, +0.806, +0.836, +0.887, +0.922, +0.969, +1.008, +1.045, +1.081, +1.118, +1.160, +1.203, +1.231, +1.260, +1.308, +1.346, +1.380, +1.425, +1.471, +1.503, +1.532, +1.572, +1.616, +1.664, +1.707, +1.759, +1.810, +1.856, +1.907, +1.961, +2.001, +2.055, +2.111, +2.161, +2.223, +2.283, +2.346, +2.413, +2.487, +2.579, +2.649, +2.751, +2.834, +2.933, +3.013, +3.157, +3.250, +3.391, +3.568, +3.730, +3.990, +4.442, +4.772, +5.203, +5.517, +5.948, +6.663, +6.913, +6.913, +6.913, +6.913},  +0.844,  +0.836,   1.530},
	{"DC6-4x8Bytes-100", 16384, 4096, 0, { -4.476, -4.476, -4.476, -4.476, -4.346, -4.020, -3.832, -3.383, -3.086, -2.692, -2.341, -2.018, -1.813, -1.659, -1.508, -1.416, -1.304, -1.190, -1.113, -1.043, -0.957, -0.876, -0.802, -0.733, -0.675, -0.626, -0.570, -0.514, -0.460, -0.375, -0.322, -0.264, -0.204, -0.165, -0.116, -0.070, -0.033, +0.007, +0.045, +0.094, +0.150, +0.198, +0.238, +0.293, +0.331, +0.368, +0.403, +0.433, +0.475, +0.510, +0.549, +0.596, +0.641, +0.683, +0.717, +0.754, +0.797, +0.839, +0.877, +0.914, +0.949, +0.981, +1.016, +1.061, +1.101, +1.137, +1.167, +1.198, +1.238, +1.271, +1.313, +1.345, +1.372, +1.420, +1.461, +1.503, +1.552, +1.604, +1.641, +1.708, +1.751, +1.794, +1.852, +1.892, +1.935, +1.982, +2.030, +2.091, +2.157, +2.209, +2.253, +2.312, +2.365, +2.438, +2.509, +2.578, +2.634, +2.705, +2.787, +2.902, +3.006, +3.104, +3.226, +3.342, +3.514, +3.678, +3.911, +4.257, +4.615, +5.252, +5.659, +5.906, +6.209, +6.270, +6.270, +6.270, +6.270},  +0.851,  +0.877,   1.518},
	{"DC6-4x8Bytes-100", 20480, 4096, 0, { -4.046, -4.046, -4.046, -4.046, -3.996, -3.787, -3.620, -3.393, -2.980, -2.647, -2.287, -2.055, -1.825, -1.604, -1.441, -1.352, -1.248, -1.138, -1.039, -0.966, -0.890, -0.820, -0.761, -0.702, -0.633, -0.591, -0.536, -0.476, -0.416, -0.358, -0.314, -0.267, -0.213, -0.152, -0.097, -0.045, -0.001, +0.039, +0.082, +0.127, +0.170, +0.211, +0.244, +0.293, +0.337, +0.380, +0.408, +0.440, +0.487, +0.533, +0.567, +0.607, +0.640, +0.681, +0.712, +0.744, +0.783, +0.824, +0.862, +0.904, +0.927, +0.973, +1.008, +1.048, +1.099, +1.139, +1.167, +1.204, +1.243, +1.282, +1.321, +1.367, +1.401, +1.438, +1.482, +1.535, +1.589, +1.621, +1.663, +1.705, +1.745, +1.782, +1.848, +1.912, +1.949, +1.998, +2.050, +2.104, +2.160, +2.204, +2.262, +2.334, +2.392, +2.449, +2.523, +2.602, +2.672, +2.732, +2.807, +2.905, +3.002, +3.090, +3.214, +3.383, +3.541, +3.747, +3.953, +4.371, +4.637, +5.257, +5.820, +6.148, +6.299, +6.367, +6.367, +6.367, +6.367},  +0.871,  +0.862,   1.515},
	{"DC6-4x8Bytes-100", 24576, 4096, 0, { -4.617, -4.617, -4.617, -4.617, -4.422, -3.886, -3.638, -3.342, -2.907, -2.655, -2.234, -1.948, -1.751, -1.617, -1.459, -1.355, -1.266, -1.188, -1.083, -0.986, -0.880, -0.811, -0.721, -0.660, -0.591, -0.553, -0.502, -0.459, -0.399, -0.344, -0.276, -0.235, -0.205, -0.159, -0.110, -0.069, -0.019, +0.018, +0.066, +0.110, +0.149, +0.195, +0.243, +0.276, +0.317, +0.349, +0.381, +0.419, +0.467, +0.504, +0.544, +0.587, +0.625, +0.656, +0.702, +0.745, +0.787, +0.823, +0.860, +0.910, +0.946, +0.989, +1.048, +1.088, +1.112, +1.158, +1.202, +1.249, +1.290, +1.334, +1.375, +1.420, +1.464, +1.503, +1.551, +1.591, +1.625, +1.666, +1.703, +1.745, +1.795, +1.852, +1.886, +1.936, +1.974, +2.030, +2.091, +2.140, +2.190, +2.232, +2.282, +2.337, +2.402, +2.463, +2.528, +2.585, +2.661, +2.749, +2.838, +2.941, +3.043, +3.124, +3.246, +3.406, +3.524, +3.712, +3.987, +4.531, +4.859, +5.097, +5.268, +6.138, +6.944, +7.180, +7.180, +7.180, +7.180},  +0.886,  +0.860,   1.523},
	{"DC6-4x8Bytes-100", 28672, 4096, 0, { -4.199, -4.199, -4.199, -4.199, -4.189, -3.852, -3.570, -3.284, -2.835, -2.552, -2.203, -1.934, -1.694, -1.540, -1.390, -1.284, -1.187, -1.091, -0.992, -0.910, -0.823, -0.765, -0.692, -0.631, -0.577, -0.515, -0.459, -0.399, -0.352, -0.301, -0.255, -0.205, -0.163, -0.114, -0.068, -0.018, +0.012, +0.056, +0.095, +0.152, +0.205, +0.243, +0.295, +0.338, +0.391, +0.419, +0.463, +0.506, +0.553, +0.596, +0.635, +0.666, +0.705, +0.743, +0.785, +0.828, +0.868, +0.907, +0.941, +0.972, +1.002, +1.047, +1.080, +1.113, +1.144, +1.192, +1.228, +1.266, +1.308, +1.352, +1.391, +1.427, +1.471, +1.517, +1.565, +1.608, +1.653, +1.704, +1.747, +1.793, +1.843, +1.884, +1.940, +1.983, +2.031, +2.074, +2.127, +2.175, +2.229, +2.284, +2.339, +2.402, +2.471, +2.544, +2.590, +2.657, +2.720, +2.819, +2.885, +2.952, +3.036, +3.158, +3.287, +3.395, +3.567, +3.768, +4.061, +4.556, +4.839, +5.458, +5.699, +6.259, +6.824, +7.069, +7.069, +7.069, +7.069},  +0.936,  +0.941,   1.518},
	{"DC6-4x8Bytes-100", 32768, 4096, 0, { -4.088, -4.088, -4.088, -4.088, -4.060, -3.971, -3.780, -3.527, -2.964, -2.591, -2.173, -1.924, -1.715, -1.544, -1.377, -1.275, -1.139, -1.031, -0.956, -0.879, -0.776, -0.690, -0.631, -0.555, -0.489, -0.424, -0.378, -0.324, -0.278, -0.229, -0.179, -0.117, -0.071, -0.025, +0.010, +0.048, +0.087, +0.121, +0.169, +0.209, +0.251, +0.294, +0.332, +0.385, +0.433, +0.477, +0.518, +0.557, +0.591, +0.629, +0.662, +0.697, +0.735, +0.781, +0.815, +0.849, +0.886, +0.929, +0.967, +1.011, +1.053, +1.107, +1.146, +1.174, +1.203, +1.258, +1.304, +1.339, +1.380, +1.421, +1.453, +1.494, +1.532, +1.567, +1.611, +1.642, +1.669, +1.704, +1.748, +1.791, +1.841, +1.883, +1.935, +1.986, +2.030, +2.059, +2.097, +2.145, +2.196, +2.256, +2.303, +2.348, +2.396, +2.459, +2.522, +2.609, +2.693, +2.756, +2.847, +2.936, +3.046, +3.140, +3.242, +3.349, +3.498, +3.671, +3.968, +4.412, +4.857, +5.249, +5.731, +5.856, +6.682, +7.042, +7.042, +7.042, +7.042},  +0.959,  +0.967,   1.491},
	{"DC6-4x8Bytes-100", 40960, 4096, 0, { -4.227, -4.227, -4.227, -4.227, -4.121, -3.756, -3.579, -3.247, -2.872, -2.508, -2.073, -1.839, -1.677, -1.512, -1.371, -1.225, -1.138, -1.069, -0.993, -0.903, -0.803, -0.741, -0.662, -0.591, -0.535, -0.476, -0.428, -0.375, -0.324, -0.272, -0.221, -0.177, -0.117, -0.060, -0.016, +0.031, +0.065, +0.114, +0.161, +0.212, +0.253, +0.301, +0.339, +0.373, +0.408, +0.443, +0.486, +0.526, +0.578, +0.623, +0.663, +0.706, +0.747, +0.773, +0.812, +0.857, +0.901, +0.935, +0.978, +1.025, +1.065, +1.095, +1.128, +1.154, +1.186, +1.219, +1.256, +1.299, +1.333, +1.369, +1.406, +1.444, +1.479, +1.523, +1.576, +1.632, +1.673, +1.723, +1.764, +1.807, +1.840, +1.896, +1.937, +1.980, +2.019, +2.073, +2.125, +2.172, +2.227, +2.273, +2.316, +2.374, +2.418, +2.497, +2.571, +2.647, +2.711, +2.793, +2.890, +2.974, +3.092, +3.174, +3.306, +3.439, +3.645, +3.862, +4.074, +4.489, +4.796, +5.074, +5.262, +5.767, +6.697, +7.127, +7.127, +7.127, +7.127},  +0.961,  +0.978,   1.501},
	{"DC6-4x8Bytes-100", 49152, 4096, 0, { -4.471, -4.471, -4.471, -4.471, -4.336, -4.029, -3.881, -3.502, -2.953, -2.391, -1.975, -1.750, -1.564, -1.415, -1.289, -1.177, -1.088, -1.021, -0.953, -0.881, -0.788, -0.730, -0.654, -0.581, -0.518, -0.448, -0.388, -0.325, -0.280, -0.235, -0.173, -0.117, -0.071, -0.027, +0.029, +0.074, +0.120, +0.158, +0.195, +0.237, +0.287, +0.334, +0.376, +0.416, +0.449, +0.492, +0.538, +0.579, +0.610, +0.643, +0.674, +0.705, +0.742, +0.780, +0.816, +0.852, +0.894, +0.930, +0.968, +1.002, +1.033, +1.080, +1.123, +1.163, +1.205, +1.233, +1.272, +1.306, +1.351, +1.396, +1.431, +1.461, +1.507, +1.550, +1.596, +1.639, +1.686, +1.734, +1.776, +1.811, +1.854, +1.903, +1.945, +1.981, +2.035, +2.103, +2.146, +2.196, +2.240, +2.298, +2.350, +2.423, +2.482, +2.550, +2.612, +2.665, +2.720, +2.788, +2.874, +2.978, +3.067, +3.193, +3.350, +3.497, +3.681, +3.841, +4.102, +4.629, +5.086, +5.531, +5.780, +5.985, +6.099, +6.107, +6.107, +6.107, +6.107},  +0.989,  +0.968,   1.499},
	{"DC6-4x8Bytes-100", 57344, 4096, 0, { -4.426, -4.426, -4.426, -4.426, -4.321, -3.996, -3.468, -3.153, -2.770, -2.447, -2.040, -1.780, -1.610, -1.465, -1.329, -1.224, -1.088, -1.012, -0.908, -0.844, -0.777, -0.690, -0.636, -0.579, -0.528, -0.465, -0.414, -0.358, -0.289, -0.242, -0.197, -0.155, -0.110, -0.054, -0.015, +0.028, +0.087, +0.121, +0.169, +0.215, +0.262, +0.302, +0.349, +0.389, +0.428, +0.459, +0.498, +0.544, +0.589, +0.623, +0.662, +0.696, +0.738, +0.777, +0.820, +0.860, +0.898, +0.933, +0.972, +1.005, +1.037, +1.082, +1.120, +1.160, +1.198, +1.243, +1.303, +1.347, +1.381, +1.428, +1.473, +1.517, +1.557, +1.592, +1.634, +1.676, +1.718, +1.761, +1.799, +1.832, +1.878, +1.917, +1.947, +1.994, +2.041, +2.087, +2.136, +2.196, +2.259, +2.321, +2.388, +2.440, +2.506, +2.571, +2.634, +2.713, +2.797, +2.879, +2.967, +3.026, +3.123, +3.234, +3.344, +3.486, +3.643, +3.842, +4.183, +4.583, +4.989, +5.404, +5.553, +5.930, +6.046, +6.089, +6.089, +6.089, +6.089},  +0.992,  +0.972,   1.511},
	{"DC6-4x8Bytes-100", 65536, 4096, 0, { -4.640, -4.640, -4.640, -4.640, -4.528, -4.202, -3.931, -3.406, -2.931, -2.532, -2.101, -1.823, -1.612, -1.481, -1.351, -1.228, -1.115, -1.033, -0.930, -0.858, -0.766, -0.704, -0.633, -0.585, -0.521, -0.466, -0.403, -0.336, -0.280, -0.229, -0.190, -0.139, -0.084, -0.039, +0.007, +0.055, +0.109, +0.156, +0.202, +0.244, +0.299, +0.344, +0.382, +0.425, +0.477, +0.504, +0.551, +0.585, +0.627, +0.668, +0.715, +0.756, +0.798, +0.827, +0.864, +0.897, +0.931, +0.964, +1.001, +1.044, +1.084, +1.120, +1.155, +1.205, +1.240, +1.273, +1.324, +1.367, +1.404, +1.441, +1.478, +1.522, +1.552, +1.590, +1.621, +1.657, +1.693, +1.724, +1.774, +1.819, +1.873, +1.921, +1.966, +2.016, +2.084, +2.133, +2.185, +2.238, +2.294, +2.340, +2.394, +2.467, +2.540, +2.598, +2.658, +2.734, +2.816, +2.880, +2.972, +3.068, +3.162, +3.255, +3.384, +3.531, +3.708, +3.903, +4.140, +4.481, +4.753, +5.151, +5.521, +5.703, +5.776, +5.798, +5.798, +5.798, +5.798},  +1.006,  +1.001,   1.519},
	{"DC6-4x8Bytes-100", 81920, 4096, 0, { -3.889, -3.889, -3.889, -3.889, -3.884, -3.774, -3.607, -3.453, -2.590, -2.344, -1.938, -1.716, -1.508, -1.369, -1.239, -1.135, -1.025, -0.925, -0.849, -0.764, -0.673, -0.594, -0.515, -0.446, -0.389, -0.325, -0.264, -0.226, -0.181, -0.130, -0.074, -0.025, +0.020, +0.062, +0.101, +0.143, +0.196, +0.235, +0.280, +0.333, +0.376, +0.419, +0.452, +0.484, +0.518, +0.555, +0.595, +0.629, +0.675, +0.707, +0.746, +0.791, +0.825, +0.866, +0.903, +0.948, +0.980, +1.018, +1.062, +1.094, +1.126, +1.169, +1.220, +1.258, +1.290, +1.323, +1.365, +1.408, +1.445, +1.481, +1.510, +1.546, +1.587, +1.622, +1.657, +1.698, +1.741, +1.783, +1.838, +1.875, +1.923, +1.977, +2.021, +2.062, +2.121, +2.169, +2.228, +2.276, +2.330, +2.373, +2.439, +2.484, +2.550, +2.598, +2.666, +2.745, +2.827, +2.900, +2.975, +3.075, +3.182, +3.329, +3.425, +3.559, +3.715, +3.915, +4.221, +4.555, +4.963, +5.173, +5.355, +5.773, +6.285, +6.488, +6.488, +6.488, +6.488},  +1.070,  +1.062,   1.489},
	{"DC6-4x8Bytes-100", 98304, 4096, 0, { -4.033, -4.033, -4.033, -4.033, -3.888, -3.577, -3.519, -3.296, -2.826, -2.455, -2.093, -1.831, -1.641, -1.462, -1.332, -1.204, -1.077, -0.969, -0.892, -0.784, -0.708, -0.638, -0.565, -0.502, -0.432, -0.383, -0.308, -0.237, -0.191, -0.130, -0.083, -0.037, +0.007, +0.053, +0.109, +0.154, +0.193, +0.234, +0.267, +0.317, +0.366, +0.407, +0.446, +0.498, +0.544, +0.571, +0.608, +0.645, +0.681, +0.728, +0.770, +0.808, +0.847, +0.890, +0.920, +0.957, +1.000, +1.036, +1.082, +1.117, +1.161, +1.197, +1.237, +1.274, +1.311, +1.340, +1.386, +1.434, +1.474, +1.523, +1.558, +1.592, +1.629, +1.663, +1.709, +1.760, +1.796, +1.829, +1.872, +1.923, +1.959, +2.014, +2.067, +2.106, +2.150, +2.197, +2.264, +2.309, +2.372, +2.415, +2.481, +2.538, +2.594, +2.656, +2.714, +2.779, +2.880, +2.951, +3.047, +3.134, +3.223, +3.324, +3.444, +3.560, +3.726, +3.902, +4.132, +4.543, +4.972, +5.344, +5.719, +6.324, +6.511, +6.549, +6.549, +6.549, +6.549},  +1.076,  +1.082,   1.521},
	{"DC6-4x8Bytes-100",114688, 4096, 0, { -4.181, -4.181, -4.181, -4.181, -4.143, -3.777, -3.504, -3.224, -2.958, -2.510, -2.010, -1.771, -1.534, -1.388, -1.260, -1.139, -1.021, -0.904, -0.792, -0.726, -0.660, -0.600, -0.538, -0.486, -0.422, -0.370, -0.315, -0.266, -0.217, -0.169, -0.121, -0.063, -0.009, +0.045, +0.084, +0.127, +0.164, +0.202, +0.249, +0.294, +0.339, +0.387, +0.429, +0.472, +0.511, +0.559, +0.593, +0.637, +0.676, +0.702, +0.744, +0.782, +0.829, +0.870, +0.908, +0.952, +0.982, +1.026, +1.067, +1.103, +1.145, +1.185, +1.218, +1.254, +1.294, +1.337, +1.369, +1.410, +1.453, +1.488, +1.529, +1.568, +1.626, +1.665, +1.702, +1.747, +1.792, +1.827, +1.864, +1.899, +1.947, +1.996, +2.033, +2.081, +2.131, +2.199, +2.258, +2.313, +2.367, +2.429, +2.469, +2.527, +2.575, +2.644, +2.722, +2.774, +2.830, +2.894, +2.975, +3.063, +3.162, +3.254, +3.394, +3.486, +3.667, +3.858, +4.203, +4.635, +5.056, +5.484, +5.766, +5.996, +6.609, +6.819, +6.819, +6.819, +6.819},  +1.068,  +1.067,   1.507},
	{"DC6-4x8Bytes-100",131072, 4096, 0, { -4.529, -4.529, -4.529, -4.529, -4.403, -4.000, -3.591, -3.512, -2.794, -2.456, -1.994, -1.770, -1.586, -1.382, -1.245, -1.153, -1.035, -0.960, -0.871, -0.799, -0.731, -0.672, -0.615, -0.549, -0.486, -0.435, -0.388, -0.321, -0.260, -0.197, -0.143, -0.085, -0.040, +0.002, +0.053, +0.098, +0.140, +0.195, +0.242, +0.303, +0.340, +0.391, +0.438, +0.471, +0.514, +0.552, +0.591, +0.635, +0.679, +0.725, +0.761, +0.792, +0.837, +0.878, +0.920, +0.952, +0.993, +1.032, +1.074, +1.116, +1.148, +1.189, +1.229, +1.273, +1.309, +1.353, +1.391, +1.420, +1.458, +1.502, +1.539, +1.572, +1.616, +1.654, +1.685, +1.730, +1.766, +1.808, +1.862, +1.906, +1.956, +2.005, +2.045, +2.081, +2.126, +2.179, +2.232, +2.277, +2.342, +2.405, +2.482, +2.533, +2.587, +2.650, +2.717, +2.784, +2.844, +2.924, +3.014, +3.116, +3.216, +3.326, +3.432, +3.540, +3.687, +3.894, +4.221, +4.585, +4.917, +5.418, +5.628, +6.109, +6.738, +6.799, +6.799, +6.799, +6.799},  +1.062,  +1.074,   1.520},
	{"DC6-4x8Bytes-100",163840, 4096, 0, { -4.660, -4.660, -4.660, -4.660, -4.551, -4.064, -3.763, -3.327, -2.776, -2.345, -1.948, -1.660, -1.499, -1.330, -1.177, -1.107, -1.011, -0.940, -0.858, -0.759, -0.679, -0.610, -0.554, -0.490, -0.420, -0.372, -0.306, -0.259, -0.206, -0.155, -0.109, -0.057, +0.006, +0.049, +0.092, +0.131, +0.172, +0.221, +0.264, +0.309, +0.345, +0.393, +0.445, +0.486, +0.518, +0.549, +0.595, +0.626, +0.669, +0.708, +0.752, +0.794, +0.823, +0.860, +0.887, +0.928, +0.970, +1.007, +1.048, +1.087, +1.122, +1.161, +1.198, +1.231, +1.264, +1.307, +1.354, +1.380, +1.420, +1.469, +1.502, +1.530, +1.568, +1.620, +1.665, +1.701, +1.735, +1.773, +1.830, +1.885, +1.928, +1.979, +2.033, +2.066, +2.113, +2.163, +2.201, +2.268, +2.326, +2.386, +2.458, +2.512, +2.567, +2.624, +2.695, +2.754, +2.799, +2.888, +2.973, +3.051, +3.157, +3.255, +3.344, +3.477, +3.648, +3.784, +3.970, +4.391, +4.794, +5.427, +5.735, +6.021, +6.773, +7.069, +7.069, +7.069, +7.069},  +1.055,  +1.048,   1.477},
	{"DC6-4x8Bytes-100",196608, 4096, 0, { -4.481, -4.481, -4.481, -4.481, -4.418, -3.988, -3.694, -3.406, -2.852, -2.450, -2.005, -1.760, -1.569, -1.412, -1.261, -1.174, -1.075, -0.972, -0.890, -0.798, -0.725, -0.661, -0.591, -0.513, -0.453, -0.397, -0.329, -0.293, -0.231, -0.179, -0.120, -0.064, +0.000, +0.051, +0.104, +0.153, +0.202, +0.247, +0.284, +0.332, +0.369, +0.414, +0.457, +0.492, +0.535, +0.574, +0.607, +0.651, +0.684, +0.712, +0.743, +0.779, +0.825, +0.866, +0.907, +0.951, +0.992, +1.036, +1.068, +1.101, +1.138, +1.182, +1.221, +1.253, +1.288, +1.333, +1.373, +1.418, +1.465, +1.501, +1.542, +1.578, +1.613, +1.664, +1.701, +1.737, +1.782, +1.824, +1.862, +1.908, +1.946, +1.994, +2.037, +2.080, +2.130, +2.170, +2.216, +2.270, +2.331, +2.382, +2.438, +2.493, +2.558, +2.616, +2.672, +2.759, +2.823, +2.887, +2.966, +3.057, +3.175, +3.295, +3.414, +3.530, +3.676, +3.865, +4.133, +4.583, +4.890, +5.400, +5.448, +5.719, +5.953, +6.022, +6.022, +6.022, +6.022},  +1.060,  +1.068,   1.504},
	{"DC6-4x8Bytes-100",229376, 4096, 0, { -4.936, -4.936, -4.936, -4.936, -4.681, -4.077, -3.854, -3.381, -2.994, -2.643, -2.063, -1.831, -1.648, -1.474, -1.306, -1.210, -1.128, -1.027, -0.929, -0.851, -0.755, -0.690, -0.619, -0.568, -0.498, -0.432, -0.362, -0.328, -0.257, -0.203, -0.132, -0.081, -0.037, +0.005, +0.046, +0.093, +0.148, +0.195, +0.248, +0.287, +0.332, +0.378, +0.404, +0.450, +0.486, +0.520, +0.565, +0.604, +0.641, +0.679, +0.714, +0.750, +0.804, +0.835, +0.874, +0.911, +0.942, +0.976, +1.011, +1.039, +1.078, +1.120, +1.164, +1.213, +1.265, +1.312, +1.353, +1.406, +1.444, +1.482, +1.523, +1.563, +1.605, +1.641, +1.685, +1.724, +1.773, +1.823, +1.864, +1.909, +1.958, +2.009, +2.046, +2.093, +2.138, +2.178, +2.243, +2.283, +2.345, +2.402, +2.455, +2.512, +2.563, +2.613, +2.686, +2.740, +2.822, +2.902, +2.981, +3.070, +3.164, +3.276, +3.387, +3.554, +3.696, +3.869, +4.118, +4.616, +5.026, +5.453, +5.732, +6.197, +6.922, +7.154, +7.154, +7.154, +7.154},  +1.037,  +1.011,   1.533},
	{"DC6-4x8Bytes-100",262144, 4096, 0, { -4.396, -4.396, -4.396, -4.396, -4.326, -3.952, -3.620, -3.392, -3.041, -2.584, -2.031, -1.686, -1.533, -1.399, -1.258, -1.168, -1.064, -0.977, -0.892, -0.797, -0.711, -0.635, -0.572, -0.504, -0.445, -0.394, -0.330, -0.287, -0.245, -0.166, -0.121, -0.066, -0.023, +0.036, +0.077, +0.123, +0.178, +0.233, +0.272, +0.317, +0.359, +0.396, +0.437, +0.471, +0.510, +0.553, +0.588, +0.632, +0.667, +0.711, +0.746, +0.783, +0.836, +0.881, +0.924, +0.956, +0.994, +1.023, +1.061, +1.094, +1.129, +1.180, +1.220, +1.257, +1.286, +1.322, +1.366, +1.407, +1.439, +1.472, +1.511, +1.550, +1.587, +1.627, +1.663, +1.697, +1.746, +1.788, +1.826, +1.866, +1.927, +1.986, +2.034, +2.071, +2.117, +2.172, +2.228, +2.281, +2.342, +2.410, +2.470, +2.525, +2.581, +2.650, +2.717, +2.768, +2.843, +2.921, +3.010, +3.119, +3.211, +3.340, +3.468, +3.637, +3.781, +4.005, +4.192, +4.576, +5.126, +5.695, +5.941, +6.390, +6.785, +6.969, +6.969, +6.969, +6.969},  +1.064,  +1.061,   1.526},
	{"DC6-4x8Bytes-100",327680, 1024, 0, { -3.198, -3.198, -3.198, -3.198, -3.198, -3.198, -3.197, -3.048, -2.763, -2.522, -2.020, -1.657, -1.351, -1.114, -1.022, -0.920, -0.835, -0.768, -0.703, -0.657, -0.573, -0.486, -0.436, -0.325, -0.234, -0.191, -0.166, -0.121, -0.074, -0.001, +0.060, +0.110, +0.150, +0.192, +0.217, +0.245, +0.294, +0.336, +0.383, +0.438, +0.476, +0.507, +0.539, +0.584, +0.623, +0.668, +0.688, +0.741, +0.772, +0.802, +0.833, +0.866, +0.899, +0.930, +0.974, +1.016, +1.068, +1.108, +1.148, +1.179, +1.211, +1.270, +1.310, +1.342, +1.370, +1.422, +1.466, +1.498, +1.543, +1.587, +1.631, +1.684, +1.710, +1.743, +1.794, +1.849, +1.890, +1.933, +1.964, +2.021, +2.081, +2.134, +2.165, +2.204, +2.271, +2.315, +2.348, +2.388, +2.430, +2.474, +2.543, +2.586, +2.638, +2.735, +2.852, +2.920, +2.980, +3.073, +3.157, +3.252, +3.340, +3.462, +3.574, +3.692, +3.844, +3.976, +4.264, +4.559, +4.853, +5.064, +5.113, +5.118, +5.118, +5.118, +5.118, +5.118, +5.118}, +1.182, +1.148, 1.488},
	{"DC6-4x8Bytes-100",393216, 1024, 0, { -3.689, -3.689, -3.689, -3.689, -3.689, -3.683, -3.401, -2.989, -2.555, -2.320, -2.014, -1.676, -1.441, -1.250, -1.130, -1.042, -0.953, -0.834, -0.718, -0.651, -0.528, -0.473, -0.431, -0.358, -0.266, -0.213, -0.169, -0.116, -0.064, -0.028, +0.002, +0.058, +0.123, +0.153, +0.210, +0.239, +0.276, +0.306, +0.345, +0.395, +0.432, +0.475, +0.520, +0.555, +0.591, +0.644, +0.688, +0.728, +0.756, +0.796, +0.842, +0.882, +0.935, +0.984, +1.022, +1.061, +1.082, +1.123, +1.158, +1.186, +1.219, +1.243, +1.275, +1.306, +1.336, +1.373, +1.411, +1.440, +1.489, +1.528, +1.567, +1.623, +1.664, +1.725, +1.805, +1.865, +1.931, +1.955, +2.001, +2.047, +2.085, +2.120, +2.167, +2.198, +2.249, +2.294, +2.358, +2.410, +2.447, +2.508, +2.566, +2.620, +2.673, +2.732, +2.823, +2.892, +3.018, +3.098, +3.187, +3.308, +3.378, +3.494, +3.595, +3.720, +3.858, +4.093, +4.415, +4.698, +5.015, +5.413, +5.501, +5.565, +5.566, +5.566, +5.566, +5.566, +5.566}, +1.180, +1.158, 1.514},
	{"DC6-4x8Bytes-100",458752, 1024, 0, { -3.668, -3.668, -3.668, -3.668, -3.668, -3.667, -3.616, -3.358, -2.824, -2.326, -1.945, -1.719, -1.429, -1.274, -1.173, -1.041, -0.916, -0.865, -0.740, -0.646, -0.564, -0.520, -0.493, -0.432, -0.372, -0.321, -0.263, -0.207, -0.136, -0.080, -0.010, +0.043, +0.127, +0.169, +0.215, +0.254, +0.288, +0.331, +0.370, +0.399, +0.429, +0.489, +0.513, +0.546, +0.580, +0.611, +0.644, +0.683, +0.749, +0.786, +0.829, +0.877, +0.920, +0.946, +0.977, +0.997, +1.042, +1.076, +1.096, +1.133, +1.188, +1.219, +1.278, +1.316, +1.369, +1.423, +1.459, +1.489, +1.518, +1.550, +1.596, +1.625, +1.668, +1.713, +1.746, +1.792, +1.815, +1.852, +1.885, +1.918, +1.973, +2.026, +2.063, +2.110, +2.173, +2.233, +2.283, +2.348, +2.395, +2.457, +2.519, +2.570, +2.655, +2.719, +2.808, +2.887, +2.938, +3.040, +3.132, +3.218, +3.343, +3.485, +3.634, +3.818, +3.920, +4.125, +4.319, +4.672, +5.200, +5.606, +5.796, +5.876, +5.878, +5.878, +5.878, +5.878, +5.878}, +1.152, +1.096, 1.518},
	{"DC6-4x8Bytes-100",524288, 1024, 0, { -3.627, -3.627, -3.627, -3.627, -3.627, -3.624, -3.513, -3.184, -2.716, -2.212, -1.761, -1.605, -1.461, -1.310, -1.173, -1.107, -1.025, -0.905, -0.828, -0.779, -0.667, -0.577, -0.503, -0.425, -0.368, -0.304, -0.231, -0.171, -0.123, -0.079, -0.033, +0.049, +0.092, +0.140, +0.197, +0.267, +0.307, +0.377, +0.401, +0.454, +0.500, +0.543, +0.569, +0.597, +0.632, +0.669, +0.711, +0.755, +0.773, +0.804, +0.836, +0.889, +0.928, +0.946, +0.973, +1.011, +1.039, +1.076, +1.110, +1.138, +1.170, +1.222, +1.252, +1.316, +1.369, +1.409, +1.452, +1.479, +1.524, +1.575, +1.618, +1.672, +1.710, +1.750, +1.797, +1.833, +1.866, +1.893, +1.949, +1.974, +2.018, +2.089, +2.158, +2.224, +2.260, +2.311, +2.349, +2.397, +2.459, +2.516, +2.576, +2.646, +2.735, +2.800, +2.867, +2.960, +3.006, +3.094, +3.189, +3.276, +3.350, +3.411, +3.588, +3.713, +3.918, +4.152, +4.512, +4.861, +5.206, +5.455, +5.705, +5.932, +5.937, +5.937, +5.937, +5.937, +5.937}, +1.175, +1.110, 1.537},
	{"DC6-4x8Bytes-100",655360, 1024, 0, { -3.740, -3.740, -3.740, -3.740, -3.740, -3.733, -3.438, -3.153, -2.907, -2.288, -2.043, -1.812, -1.675, -1.466, -1.234, -1.139, -0.990, -0.865, -0.777, -0.682, -0.599, -0.544, -0.492, -0.397, -0.331, -0.290, -0.238, -0.183, -0.151, -0.098, -0.063, -0.014, +0.020, +0.045, +0.084, +0.120, +0.198, +0.260, +0.287, +0.345, +0.378, +0.413, +0.452, +0.482, +0.523, +0.571, +0.609, +0.645, +0.700, +0.746, +0.787, +0.821, +0.874, +0.897, +0.931, +0.987, +1.030, +1.064, +1.109, +1.127, +1.177, +1.209, +1.250, +1.278, +1.307, +1.341, +1.380, +1.425, +1.451, +1.490, +1.514, +1.539, +1.597, +1.629, +1.694, +1.728, +1.771, +1.801, +1.861, +1.904, +1.956, +2.019, +2.072, +2.106, +2.163, +2.203, +2.250, +2.317, +2.374, +2.434, +2.534, +2.586, +2.650, +2.695, +2.755, +2.817, +2.890, +2.965, +3.054, +3.163, +3.262, +3.359, +3.437, +3.584, +3.809, +4.019, +4.327, +4.768, +5.042, +5.432, +6.083, +6.524, +6.534, +6.534, +6.534, +6.534, +6.534}, +1.101, +1.109, 1.519},
	{"DC6-4x8Bytes-100",786432, 1024, 0, { -3.278, -3.278, -3.278, -3.278, -3.278, -3.276, -3.194, -2.982, -2.407, -2.146, -1.736, -1.594, -1.434, -1.341, -1.175, -1.083, -0.964, -0.871, -0.733, -0.680, -0.595, -0.546, -0.431, -0.377, -0.320, -0.253, -0.187, -0.156, -0.122, -0.085, -0.037, +0.013, +0.059, +0.107, +0.144, +0.190, +0.213, +0.238, +0.287, +0.327, +0.355, +0.376, +0.414, +0.444, +0.492, +0.525, +0.565, +0.595, +0.636, +0.664, +0.715, +0.746, +0.828, +0.875, +0.930, +0.973, +1.003, +1.035, +1.053, +1.089, +1.114, +1.145, +1.178, +1.199, +1.227, +1.269, +1.310, +1.344, +1.400, +1.461, +1.509, +1.534, +1.581, +1.624, +1.656, +1.704, +1.747, +1.811, +1.860, +1.905, +1.939, +1.985, +2.047, +2.098, +2.138, +2.204, +2.254, +2.309, +2.358, +2.411, +2.453, +2.498, +2.563, +2.596, +2.644, +2.751, +2.831, +2.925, +3.015, +3.102, +3.173, +3.323, +3.546, +3.764, +3.991, +4.198, +4.357, +4.862, +5.443, +5.847, +5.971, +6.012, +6.013, +6.013, +6.013, +6.013, +6.013}, +1.105, +1.053, 1.497},
	{"DC6-4x8Bytes-100",917504, 1024, 0, { -3.106, -3.106, -3.106, -3.106, -3.106, -3.101, -2.890, -2.665, -2.354, -2.123, -1.815, -1.704, -1.515, -1.307, -1.225, -1.124, -1.035, -0.905, -0.745, -0.685, -0.608, -0.557, -0.493, -0.462, -0.370, -0.253, -0.153, -0.098, -0.046, -0.013, +0.050, +0.109, +0.156, +0.190, +0.283, +0.325, +0.375, +0.415, +0.444, +0.480, +0.499, +0.539, +0.578, +0.609, +0.635, +0.673, +0.706, +0.730, +0.775, +0.794, +0.847, +0.884, +0.913, +0.956, +1.002, +1.042, +1.081, +1.119, +1.176, +1.202, +1.235, +1.253, +1.276, +1.299, +1.338, +1.366, +1.391, +1.412, +1.477, +1.504, +1.543, +1.573, +1.625, +1.653, +1.692, +1.722, +1.739, +1.790, +1.816, +1.859, +1.895, +1.954, +2.019, +2.052, +2.087, +2.148, +2.192, +2.221, +2.264, +2.333, +2.413, +2.475, +2.548, +2.607, +2.657, +2.720, +2.842, +2.935, +3.013, +3.164, +3.242, +3.393, +3.492, +3.572, +3.689, +4.010, +4.237, +4.798, +5.240, +5.992, +6.339, +6.439, +6.442, +6.442, +6.442, +6.442, +6.442}, +1.136, +1.176, 1.468},
	{"DC6-4x8Bytes-100",1048576, 1024, 0, { -3.223, -3.223, -3.223, -3.223, -3.223, -3.219, -3.062, -2.822, -2.463, -2.110, -1.844, -1.639, -1.474, -1.355, -1.205, -1.080, -0.987, -0.864, -0.724, -0.622, -0.558, -0.446, -0.386, -0.347, -0.297, -0.271, -0.216, -0.151, -0.116, -0.080, -0.033, +0.022, +0.064, +0.115, +0.158, +0.198, +0.242, +0.298, +0.339, +0.390, +0.429, +0.467, +0.518, +0.559, +0.603, +0.620, +0.635, +0.676, +0.714, +0.787, +0.809, +0.863, +0.913, +0.933, +0.968, +0.997, +1.028, +1.063, +1.110, +1.149, +1.174, +1.205, +1.239, +1.292, +1.328, +1.356, +1.389, +1.427, +1.468, +1.509, +1.540, +1.581, +1.617, +1.652, +1.697, +1.743, +1.773, +1.838, +1.911, +1.938, +1.984, +2.026, +2.070, +2.092, +2.119, +2.194, +2.222, +2.299, +2.343, +2.421, +2.483, +2.538, +2.584, +2.650, +2.716, +2.792, +2.857, +2.929, +3.013, +3.115, +3.237, +3.343, +3.449, +3.532, +3.765, +4.021, +4.371, +4.968, +5.514, +5.979, +6.057, +6.080, +6.080, +6.080, +6.080, +6.080, +6.080}, +1.133, +1.110, 1.488},
	{"DC6-4x8Bytes-100",1310720, 1024, 0, { -3.350, -3.350, -3.350, -3.350, -3.350, -3.347, -3.200, -3.053, -2.872, -2.411, -2.045, -1.699, -1.471, -1.261, -1.102, -1.025, -0.920, -0.847, -0.777, -0.714, -0.645, -0.548, -0.457, -0.400, -0.341, -0.279, -0.211, -0.158, -0.085, -0.041, +0.006, +0.062, +0.088, +0.122, +0.166, +0.223, +0.258, +0.326, +0.351, +0.388, +0.417, +0.463, +0.496, +0.518, +0.535, +0.569, +0.611, +0.653, +0.712, +0.761, +0.793, +0.829, +0.859, +0.914, +0.973, +0.994, +1.027, +1.055, +1.086, +1.133, +1.160, +1.206, +1.253, +1.306, +1.333, +1.374, +1.403, +1.440, +1.485, +1.511, +1.554, +1.600, +1.641, +1.669, +1.707, +1.742, +1.763, +1.794, +1.842, +1.897, +1.922, +1.959, +2.010, +2.073, +2.122, +2.159, +2.194, +2.256, +2.317, +2.383, +2.476, +2.532, +2.581, +2.624, +2.748, +2.837, +2.901, +2.987, +3.072, +3.143, +3.234, +3.354, +3.539, +3.715, +3.953, +4.287, +4.678, +5.172, +5.488, +6.233, +6.945, +7.325, +7.334, +7.334, +7.334, +7.334, +7.334}, +1.133, +1.086, 1.534},
	{"DC6-4x8Bytes-100",1572864, 1024, 0, { -3.858, -3.858, -3.858, -3.858, -3.858, -3.857, -3.803, -3.692, -2.969, -2.592, -1.935, -1.812, -1.515, -1.365, -1.197, -1.126, -0.979, -0.810, -0.756, -0.683, -0.604, -0.544, -0.507, -0.417, -0.330, -0.244, -0.187, -0.127, -0.091, -0.023, +0.010, +0.065, +0.123, +0.172, +0.215, +0.262, +0.299, +0.345, +0.388, +0.427, +0.486, +0.509, +0.530, +0.567, +0.592, +0.622, +0.655, +0.697, +0.720, +0.740, +0.761, +0.786, +0.829, +0.859, +0.887, +0.974, +1.023, +1.064, +1.084, +1.140, +1.191, +1.243, +1.283, +1.301, +1.331, +1.379, +1.399, +1.421, +1.446, +1.468, +1.504, +1.552, +1.582, +1.623, +1.650, +1.699, +1.750, +1.786, +1.823, +1.868, +1.911, +1.970, +2.019, +2.086, +2.114, +2.157, +2.228, +2.285, +2.334, +2.400, +2.442, +2.544, +2.603, +2.656, +2.731, +2.785, +2.850, +2.960, +3.124, +3.179, +3.254, +3.380, +3.519, +3.667, +3.761, +3.972, +4.320, +4.925, +5.541, +6.105, +6.531, +6.985, +6.996, +6.996, +6.996, +6.996, +6.996}, +1.118, +1.084, 1.518},
	{"DC6-4x8Bytes-100",1835008, 1024, 0, { -2.955, -2.955, -2.955, -2.955, -2.955, -2.955, -2.941, -2.867, -2.583, -2.325, -2.019, -1.829, -1.664, -1.386, -1.212, -1.060, -0.973, -0.838, -0.732, -0.659, -0.612, -0.544, -0.489, -0.429, -0.357, -0.300, -0.243, -0.180, -0.144, -0.095, -0.036, +0.017, +0.072, +0.104, +0.129, +0.174, +0.208, +0.259, +0.305, +0.379, +0.420, +0.461, +0.491, +0.530, +0.574, +0.592, +0.642, +0.686, +0.731, +0.758, +0.788, +0.817, +0.848, +0.897, +0.928, +0.987, +1.044, +1.066, +1.105, +1.136, +1.167, +1.193, +1.250, +1.291, +1.334, +1.372, +1.385, +1.463, +1.494, +1.529, +1.578, +1.611, +1.640, +1.678, +1.708, +1.782, +1.824, +1.896, +1.921, +1.986, +2.015, +2.056, +2.109, +2.154, +2.203, +2.283, +2.344, +2.386, +2.441, +2.506, +2.570, +2.627, +2.695, +2.732, +2.789, +2.882, +2.959, +2.990, +3.037, +3.119, +3.230, +3.309, +3.444, +3.615, +3.760, +3.963, +4.498, +4.881, +5.490, +6.521, +6.735, +6.805, +6.807, +6.807, +6.807, +6.807, +6.807}, +1.137, +1.105, 1.535},
	{"DC6-4x8Bytes-100",2097152, 1024, 0, { -3.645, -3.645, -3.645, -3.645, -3.645, -3.636, -3.275, -2.910, -2.657, -2.318, -1.937, -1.709, -1.464, -1.279, -1.170, -1.089, -1.000, -0.910, -0.857, -0.783, -0.703, -0.628, -0.527, -0.441, -0.365, -0.294, -0.239, -0.191, -0.124, -0.057, -0.018, +0.019, +0.068, +0.096, +0.139, +0.189, +0.216, +0.262, +0.298, +0.346, +0.399, +0.457, +0.499, +0.531, +0.566, +0.632, +0.681, +0.712, +0.737, +0.779, +0.822, +0.859, +0.897, +0.932, +0.970, +0.994, +1.036, +1.095, +1.134, +1.166, +1.204, +1.285, +1.302, +1.336, +1.381, +1.412, +1.450, +1.522, +1.566, +1.597, +1.618, +1.655, +1.691, +1.713, +1.769, +1.830, +1.863, +1.907, +1.959, +1.995, +2.056, +2.097, +2.122, +2.172, +2.227, +2.281, +2.325, +2.373, +2.407, +2.448, +2.500, +2.550, +2.646, +2.696, +2.768, +2.821, +2.883, +2.953, +3.076, +3.185, +3.276, +3.389, +3.532, +3.643, +3.801, +3.988, +4.281, +4.884, +5.453, +6.215, +6.751, +7.077, +7.084, +7.084, +7.084, +7.084, +7.084}, +1.146, +1.134, 1.530},
	{"DC6-4x8Bytes-100",2621440, 1024, 0, { -3.324, -3.324, -3.324, -3.324, -3.324, -3.324, -3.306, -3.197, -2.635, -2.287, -1.775, -1.498, -1.426, -1.296, -1.232, -1.091, -1.049, -0.921, -0.824, -0.750, -0.678, -0.555, -0.479, -0.412, -0.349, -0.286, -0.251, -0.185, -0.110, -0.045, +0.022, +0.074, +0.111, +0.161, +0.195, +0.250, +0.276, +0.313, +0.369, +0.409, +0.462, +0.489, +0.529, +0.558, +0.617, +0.700, +0.728, +0.751, +0.812, +0.841, +0.868, +0.922, +0.958, +0.992, +1.018, +1.059, +1.089, +1.109, +1.133, +1.189, +1.209, +1.252, +1.293, +1.326, +1.361, +1.409, +1.458, +1.496, +1.532, +1.589, +1.632, +1.668, +1.708, +1.732, +1.770, +1.832, +1.870, +1.919, +1.975, +2.026, +2.068, +2.109, +2.138, +2.217, +2.269, +2.315, +2.347, +2.389, +2.413, +2.494, +2.519, +2.581, +2.634, +2.696, +2.765, +2.884, +2.989, +3.042, +3.141, +3.221, +3.293, +3.414, +3.558, +3.685, +3.868, +4.034, +4.339, +4.563, +5.028, +5.544, +5.554, +5.555, +5.555, +5.555, +5.555, +5.555, +5.555}, +1.168, +1.133, 1.506},
	{"DC6-4x8Bytes-100",3145728, 1024, 0, { -4.178, -4.178, -4.178, -4.178, -4.178, -4.174, -4.016, -3.666, -2.815, -2.328, -2.018, -1.645, -1.425, -1.243, -1.074, -0.940, -0.870, -0.754, -0.693, -0.638, -0.542, -0.433, -0.383, -0.315, -0.266, -0.217, -0.175, -0.112, -0.072, -0.036, +0.022, +0.060, +0.116, +0.168, +0.210, +0.260, +0.299, +0.329, +0.392, +0.446, +0.489, +0.545, +0.574, +0.608, +0.657, +0.704, +0.729, +0.792, +0.838, +0.879, +0.926, +0.964, +0.989, +1.011, +1.033, +1.055, +1.094, +1.145, +1.204, +1.273, +1.308, +1.341, +1.375, +1.416, +1.444, +1.478, +1.505, +1.523, +1.547, +1.588, +1.643, +1.690, +1.716, +1.741, +1.787, +1.832, +1.884, +1.915, +1.957, +1.983, +2.040, +2.099, +2.136, +2.181, +2.225, +2.287, +2.337, +2.368, +2.418, +2.465, +2.560, +2.607, +2.666, +2.732, +2.806, +2.865, +2.955, +3.007, +3.070, +3.192, +3.292, +3.385, +3.615, +3.857, +3.971, +4.104, +4.353, +4.831, +5.065, +5.280, +5.576, +5.769, +5.774, +5.774, +5.774, +5.774, +5.774}, +1.195, +1.204, 1.508},
	{"DC6-4x8Bytes-100",3670016, 1024, 0, { -3.551, -3.551, -3.551, -3.551, -3.551, -3.549, -3.484, -3.325, -2.835, -2.403, -1.947, -1.705, -1.507, -1.333, -1.182, -1.065, -0.936, -0.842, -0.773, -0.657, -0.590, -0.522, -0.446, -0.389, -0.333, -0.284, -0.166, -0.116, -0.072, -0.007, +0.028, +0.076, +0.149, +0.214, +0.269, +0.303, +0.342, +0.380, +0.435, +0.458, +0.500, +0.513, +0.542, +0.600, +0.641, +0.685, +0.722, +0.750, +0.788, +0.819, +0.858, +0.881, +0.907, +0.969, +1.017, +1.032, +1.069, +1.088, +1.130, +1.156, +1.185, +1.209, +1.257, +1.302, +1.330, +1.369, +1.434, +1.463, +1.502, +1.552, +1.607, +1.645, +1.693, +1.732, +1.767, +1.807, +1.877, +1.920, +1.950, +1.993, +2.039, +2.073, +2.128, +2.178, +2.217, +2.262, +2.322, +2.399, +2.440, +2.473, +2.540, +2.583, +2.645, +2.741, +2.807, +2.872, +2.934, +3.035, +3.130, +3.244, +3.335, +3.475, +3.585, +3.765, +3.900, +4.068, +4.284, +4.635, +5.208, +6.403, +6.538, +6.571, +6.572, +6.572, +6.572, +6.572, +6.572}, +1.172, +1.130, 1.518},

	//{"DC6-5x8Bytes-101",     1,4608,3930,{ -1.406, -1.406, -1.406, -1.406, -1.406, -1.406, -1.406, -1.406, -1.400, -1.400, -1.376, -1.359, -1.339, -1.332, -1.322, -1.276, -1.260, -1.246, -1.231, -1.218, -1.197, -1.192, -1.153, -1.114, -1.100, -1.083, -1.078, -1.066, -1.057, -1.032, -0.989, -0.986, -0.952, -0.895, -0.884, -0.872, -0.836, -0.834, -0.828, -0.809, -0.774, -0.720, -0.699, -0.651, -0.622, -0.612, -0.607, -0.581, -0.537, -0.518, -0.497, -0.444, -0.385, -0.344, -0.323, -0.295, -0.282, -0.278, -0.241, -0.220, -0.196, -0.153, -0.118, -0.074, +0.005, +0.024, +0.064, +0.090, +0.132, +0.160, +0.196, +0.258, +0.311, +0.390, +0.434, +0.494, +0.543, +0.573, +0.630, +0.664, +0.769, +0.839, +0.893, +0.959, +1.022, +1.081, +1.197, +1.267, +1.363, +1.444, +1.572, +1.628, +1.698, +1.851, +1.938, +2.045, +2.202, +2.338, +2.510, +2.739, +2.976, +3.240, +3.667, +3.882, +4.339, +4.859, +5.476, +7.027, +8.578, +9.760,+10.529,+12.067,+13.376,+14.133,+14.133,+14.133,+14.133}, +0.317, -0.241, 1.778},
	{"DC6-5x8Bytes-101",     2, 4608, 4, { -2.160, -2.160, -2.160, -2.160, -2.157, -2.146, -2.135, -2.102, -2.014, -1.940, -1.861, -1.790, -1.736, -1.681, -1.630, -1.570, -1.515, -1.471, -1.437, -1.391, -1.355, -1.309, -1.279, -1.250, -1.209, -1.179, -1.147, -1.117, -1.086, -1.046, -1.010, -0.976, -0.946, -0.908, -0.879, -0.841, -0.805, -0.768, -0.744, -0.714, -0.674, -0.641, -0.603, -0.569, -0.536, -0.507, -0.476, -0.451, -0.418, -0.377, -0.351, -0.319, -0.277, -0.246, -0.223, -0.188, -0.153, -0.122, -0.087, -0.053, -0.013, +0.019, +0.047, +0.085, +0.132, +0.170, +0.219, +0.264, +0.302, +0.348, +0.395, +0.435, +0.473, +0.529, +0.566, +0.618, +0.666, +0.722, +0.770, +0.814, +0.847, +0.899, +0.946, +1.010, +1.069, +1.127, +1.213, +1.284, +1.352, +1.425, +1.506, +1.585, +1.668, +1.749, +1.818, +1.910, +2.009, +2.152, +2.270, +2.427, +2.561, +2.688, +2.905, +3.123, +3.399, +3.834, +4.303, +5.375, +6.358, +8.180, +8.942, +9.376,+10.227,+10.727,+10.727,+10.727,+10.727}, +0.231, -0.087, 1.563},
	{"DC6-5x8Bytes-101",     3, 4608, 0, { -2.926, -2.926, -2.926, -2.926, -2.921, -2.761, -2.695, -2.652, -2.416, -2.281, -2.162, -2.059, -1.992, -1.912, -1.834, -1.772, -1.709, -1.642, -1.599, -1.554, -1.505, -1.449, -1.408, -1.346, -1.299, -1.253, -1.222, -1.192, -1.157, -1.119, -1.086, -1.046, -1.003, -0.976, -0.935, -0.899, -0.857, -0.817, -0.794, -0.753, -0.724, -0.691, -0.657, -0.629, -0.599, -0.568, -0.529, -0.490, -0.448, -0.416, -0.390, -0.366, -0.325, -0.278, -0.244, -0.204, -0.164, -0.136, -0.101, -0.069, -0.016, +0.017, +0.060, +0.113, +0.160, +0.210, +0.248, +0.294, +0.333, +0.378, +0.414, +0.453, +0.502, +0.547, +0.594, +0.632, +0.686, +0.736, +0.791, +0.840, +0.891, +0.947, +0.997, +1.041, +1.102, +1.157, +1.224, +1.282, +1.355, +1.424, +1.494, +1.565, +1.660, +1.771, +1.843, +1.942, +2.031, +2.133, +2.255, +2.395, +2.513, +2.686, +2.860, +3.091, +3.325, +3.614, +4.080, +4.750, +5.584, +6.486, +7.172, +7.909, +9.410,+10.336,+10.336,+10.336,+10.336}, +0.168, -0.101, 1.556},
	{"DC6-5x8Bytes-101",     4, 4608, 0, { -3.126, -3.126, -3.126, -3.126, -3.094, -3.034, -2.874, -2.797, -2.630, -2.497, -2.336, -2.203, -2.102, -2.005, -1.942, -1.875, -1.808, -1.761, -1.697, -1.649, -1.606, -1.541, -1.501, -1.448, -1.391, -1.351, -1.315, -1.281, -1.245, -1.201, -1.169, -1.138, -1.099, -1.053, -1.012, -0.969, -0.939, -0.893, -0.859, -0.828, -0.791, -0.747, -0.707, -0.675, -0.625, -0.592, -0.555, -0.524, -0.491, -0.450, -0.417, -0.372, -0.337, -0.300, -0.262, -0.224, -0.188, -0.157, -0.126, -0.091, -0.055, -0.014, +0.026, +0.060, +0.097, +0.133, +0.170, +0.216, +0.260, +0.302, +0.342, +0.396, +0.436, +0.480, +0.538, +0.576, +0.621, +0.661, +0.705, +0.761, +0.816, +0.867, +0.918, +0.968, +1.023, +1.078, +1.157, +1.219, +1.266, +1.328, +1.403, +1.488, +1.582, +1.653, +1.760, +1.860, +1.973, +2.083, +2.222, +2.345, +2.516, +2.698, +2.865, +3.018, +3.255, +3.545, +4.016, +4.808, +5.863, +6.600, +6.957, +8.100, +9.103, +9.153, +9.153, +9.153, +9.153}, +0.102, -0.126, 1.577},
	{"DC6-5x8Bytes-101",     5, 4608, 0, { -3.261, -3.261, -3.261, -3.261, -3.213, -3.121, -3.068, -3.001, -2.810, -2.626, -2.425, -2.257, -2.147, -2.065, -1.977, -1.900, -1.844, -1.780, -1.713, -1.650, -1.577, -1.542, -1.494, -1.441, -1.395, -1.352, -1.305, -1.258, -1.222, -1.181, -1.146, -1.108, -1.076, -1.030, -0.989, -0.959, -0.920, -0.886, -0.850, -0.810, -0.768, -0.738, -0.694, -0.658, -0.621, -0.582, -0.535, -0.496, -0.455, -0.415, -0.373, -0.341, -0.309, -0.261, -0.230, -0.190, -0.160, -0.129, -0.097, -0.059, -0.020, +0.020, +0.058, +0.101, +0.140, +0.173, +0.199, +0.243, +0.281, +0.324, +0.367, +0.404, +0.448, +0.493, +0.549, +0.593, +0.638, +0.703, +0.756, +0.805, +0.859, +0.917, +0.982, +1.032, +1.095, +1.155, +1.220, +1.283, +1.343, +1.413, +1.470, +1.545, +1.628, +1.689, +1.764, +1.862, +1.954, +2.125, +2.251, +2.366, +2.526, +2.718, +2.888, +3.076, +3.330, +3.586, +4.054, +5.036, +5.693, +6.373, +6.639, +7.750, +8.245, +8.579, +8.579, +8.579, +8.579}, +0.121, -0.097, 1.591},
	{"DC6-5x8Bytes-101",     6, 4608, 0, { -3.415, -3.415, -3.415, -3.415, -3.402, -3.271, -3.191, -3.042, -2.883, -2.756, -2.510, -2.357, -2.216, -2.109, -2.038, -1.957, -1.898, -1.843, -1.786, -1.734, -1.666, -1.590, -1.519, -1.467, -1.415, -1.366, -1.318, -1.271, -1.225, -1.183, -1.144, -1.103, -1.056, -1.012, -0.967, -0.928, -0.888, -0.841, -0.804, -0.768, -0.736, -0.696, -0.669, -0.631, -0.592, -0.554, -0.521, -0.486, -0.457, -0.417, -0.376, -0.335, -0.297, -0.269, -0.224, -0.180, -0.153, -0.118, -0.079, -0.048, -0.013, +0.023, +0.061, +0.101, +0.132, +0.180, +0.221, +0.268, +0.302, +0.348, +0.397, +0.448, +0.493, +0.541, +0.595, +0.644, +0.692, +0.737, +0.787, +0.837, +0.888, +0.937, +1.008, +1.079, +1.140, +1.194, +1.250, +1.317, +1.370, +1.434, +1.485, +1.582, +1.644, +1.725, +1.814, +1.906, +2.007, +2.104, +2.199, +2.338, +2.455, +2.596, +2.798, +3.018, +3.280, +3.672, +4.080, +4.856, +5.591, +6.292, +6.803, +7.167, +7.691, +8.006, +8.006, +8.006, +8.006}, +0.121, -0.079, 1.598},
	{"DC6-5x8Bytes-101",     7, 4608, 0, { -3.771, -3.771, -3.771, -3.771, -3.744, -3.681, -3.424, -3.189, -2.986, -2.778, -2.563, -2.392, -2.313, -2.222, -2.118, -2.026, -1.944, -1.872, -1.804, -1.736, -1.668, -1.607, -1.544, -1.475, -1.432, -1.382, -1.334, -1.293, -1.250, -1.190, -1.146, -1.106, -1.065, -1.019, -0.976, -0.938, -0.899, -0.866, -0.813, -0.782, -0.737, -0.700, -0.665, -0.625, -0.575, -0.541, -0.507, -0.470, -0.418, -0.374, -0.333, -0.294, -0.254, -0.221, -0.177, -0.138, -0.106, -0.072, -0.034, +0.007, +0.042, +0.086, +0.126, +0.168, +0.214, +0.253, +0.295, +0.335, +0.370, +0.430, +0.479, +0.518, +0.554, +0.609, +0.652, +0.697, +0.737, +0.789, +0.832, +0.880, +0.918, +0.975, +1.017, +1.076, +1.134, +1.189, +1.239, +1.302, +1.376, +1.446, +1.512, +1.601, +1.675, +1.756, +1.845, +1.948, +2.068, +2.180, +2.287, +2.410, +2.524, +2.659, +2.827, +3.037, +3.311, +3.641, +3.927, +4.611, +5.237, +5.713, +6.257, +6.617, +7.552, +7.751, +7.751, +7.751, +7.751}, +0.132, -0.034, 1.602},
	{"DC6-5x8Bytes-101",     8, 4608, 0, { -3.897, -3.897, -3.897, -3.897, -3.755, -3.503, -3.391, -3.248, -3.035, -2.831, -2.601, -2.436, -2.318, -2.185, -2.078, -1.984, -1.903, -1.819, -1.742, -1.689, -1.636, -1.569, -1.523, -1.483, -1.436, -1.382, -1.324, -1.285, -1.243, -1.200, -1.156, -1.119, -1.053, -1.006, -0.969, -0.918, -0.875, -0.827, -0.784, -0.743, -0.696, -0.655, -0.629, -0.590, -0.550, -0.511, -0.473, -0.434, -0.396, -0.363, -0.317, -0.275, -0.250, -0.210, -0.172, -0.140, -0.096, -0.057, -0.018, +0.020, +0.049, +0.085, +0.136, +0.163, +0.207, +0.254, +0.296, +0.329, +0.372, +0.423, +0.480, +0.519, +0.571, +0.616, +0.656, +0.696, +0.747, +0.791, +0.843, +0.899, +0.945, +0.997, +1.048, +1.108, +1.162, +1.227, +1.307, +1.363, +1.414, +1.478, +1.545, +1.628, +1.699, +1.798, +1.884, +1.958, +2.030, +2.146, +2.251, +2.376, +2.506, +2.659, +2.827, +3.032, +3.188, +3.410, +3.804, +4.474, +5.136, +5.819, +6.904, +7.223, +7.692, +7.708, +7.708, +7.708, +7.708}, +0.139, -0.018, 1.588},
	{"DC6-5x8Bytes-101",    10, 4608, 0, { -4.208, -4.208, -4.208, -4.208, -4.088, -3.918, -3.788, -3.459, -3.172, -2.934, -2.647, -2.427, -2.288, -2.176, -2.082, -1.978, -1.908, -1.838, -1.763, -1.712, -1.652, -1.591, -1.526, -1.457, -1.405, -1.364, -1.319, -1.280, -1.241, -1.199, -1.143, -1.108, -1.067, -1.015, -0.963, -0.930, -0.886, -0.845, -0.813, -0.777, -0.738, -0.692, -0.654, -0.623, -0.582, -0.544, -0.498, -0.459, -0.428, -0.388, -0.333, -0.294, -0.256, -0.214, -0.175, -0.143, -0.104, -0.068, -0.029, +0.008, +0.053, +0.099, +0.146, +0.193, +0.220, +0.266, +0.309, +0.343, +0.377, +0.430, +0.475, +0.521, +0.571, +0.609, +0.657, +0.716, +0.763, +0.812, +0.864, +0.918, +0.971, +1.025, +1.083, +1.130, +1.186, +1.248, +1.325, +1.401, +1.463, +1.530, +1.581, +1.664, +1.720, +1.814, +1.873, +1.987, +2.078, +2.158, +2.263, +2.357, +2.460, +2.591, +2.783, +3.045, +3.236, +3.510, +3.874, +4.679, +5.331, +6.367, +7.033, +7.219, +7.437, +7.514, +7.514, +7.514, +7.514}, +0.142, -0.029, 1.610},
	{"DC6-5x8Bytes-101",    12, 4608, 0, { -3.972, -3.972, -3.972, -3.972, -3.912, -3.703, -3.630, -3.411, -3.170, -2.922, -2.621, -2.453, -2.361, -2.251, -2.143, -2.079, -1.969, -1.893, -1.834, -1.763, -1.691, -1.617, -1.555, -1.510, -1.444, -1.395, -1.352, -1.302, -1.255, -1.203, -1.146, -1.100, -1.055, -1.022, -0.979, -0.939, -0.908, -0.859, -0.820, -0.785, -0.740, -0.699, -0.654, -0.622, -0.586, -0.549, -0.514, -0.470, -0.428, -0.389, -0.349, -0.308, -0.269, -0.225, -0.189, -0.141, -0.094, -0.058, -0.010, +0.019, +0.057, +0.087, +0.118, +0.159, +0.212, +0.254, +0.303, +0.340, +0.376, +0.416, +0.461, +0.512, +0.561, +0.622, +0.674, +0.724, +0.765, +0.808, +0.863, +0.907, +0.955, +1.006, +1.050, +1.111, +1.178, +1.242, +1.306, +1.358, +1.424, +1.495, +1.570, +1.639, +1.708, +1.791, +1.871, +1.980, +2.083, +2.187, +2.277, +2.390, +2.519, +2.681, +2.799, +2.953, +3.153, +3.505, +3.856, +4.318, +4.970, +5.809, +6.408, +7.183, +9.219, +9.571, +9.571, +9.571, +9.571}, +0.124, -0.010, 1.604},
	{"DC6-5x8Bytes-101",    14, 4608, 0, { -4.408, -4.408, -4.408, -4.408, -4.291, -4.068, -3.836, -3.627, -3.119, -2.899, -2.627, -2.478, -2.341, -2.221, -2.118, -2.039, -1.948, -1.879, -1.809, -1.739, -1.669, -1.596, -1.535, -1.476, -1.399, -1.342, -1.299, -1.239, -1.196, -1.147, -1.096, -1.058, -1.019, -0.977, -0.946, -0.879, -0.839, -0.798, -0.762, -0.714, -0.680, -0.643, -0.614, -0.580, -0.533, -0.502, -0.458, -0.426, -0.392, -0.353, -0.321, -0.285, -0.244, -0.208, -0.170, -0.140, -0.099, -0.059, -0.023, +0.017, +0.058, +0.094, +0.123, +0.163, +0.194, +0.229, +0.272, +0.304, +0.354, +0.390, +0.439, +0.477, +0.529, +0.572, +0.617, +0.667, +0.706, +0.761, +0.810, +0.853, +0.904, +0.956, +1.002, +1.055, +1.108, +1.183, +1.245, +1.296, +1.358, +1.433, +1.519, +1.583, +1.652, +1.742, +1.820, +1.923, +2.015, +2.120, +2.190, +2.305, +2.442, +2.622, +2.752, +2.967, +3.170, +3.463, +3.780, +4.414, +5.032, +5.834, +6.283, +6.773, +7.334, +7.621, +7.621, +7.621, +7.621}, +0.121, -0.023, 1.575},
	{"DC6-5x8Bytes-101",    16, 4608, 0, { -4.370, -4.370, -4.370, -4.370, -4.214, -3.787, -3.687, -3.516, -3.197, -2.953, -2.681, -2.509, -2.359, -2.232, -2.136, -2.044, -1.979, -1.904, -1.822, -1.733, -1.661, -1.600, -1.544, -1.501, -1.441, -1.390, -1.345, -1.303, -1.254, -1.205, -1.147, -1.105, -1.067, -1.024, -0.977, -0.939, -0.898, -0.856, -0.809, -0.764, -0.724, -0.671, -0.626, -0.587, -0.550, -0.507, -0.466, -0.432, -0.394, -0.353, -0.312, -0.267, -0.224, -0.192, -0.153, -0.117, -0.084, -0.042, +0.003, +0.053, +0.093, +0.134, +0.165, +0.207, +0.248, +0.293, +0.334, +0.373, +0.417, +0.452, +0.503, +0.555, +0.601, +0.631, +0.663, +0.701, +0.747, +0.800, +0.836, +0.886, +0.927, +0.987, +1.050, +1.096, +1.163, +1.220, +1.273, +1.324, +1.390, +1.455, +1.520, +1.562, +1.629, +1.698, +1.766, +1.847, +1.932, +2.027, +2.138, +2.273, +2.413, +2.600, +2.739, +2.889, +3.085, +3.387, +3.748, +4.473, +4.961, +5.629, +5.853, +6.069, +6.597, +6.642, +6.642, +6.642, +6.642}, +0.114, +0.003, 1.573},
	{"DC6-5x8Bytes-101",    20, 4608, 0, { -4.842, -4.842, -4.842, -4.842, -4.738, -4.398, -4.159, -3.804, -3.325, -3.040, -2.792, -2.553, -2.395, -2.267, -2.156, -2.054, -1.932, -1.852, -1.779, -1.709, -1.641, -1.577, -1.521, -1.481, -1.421, -1.373, -1.327, -1.275, -1.229, -1.165, -1.121, -1.067, -1.006, -0.974, -0.936, -0.889, -0.831, -0.786, -0.735, -0.702, -0.674, -0.634, -0.591, -0.546, -0.505, -0.457, -0.416, -0.372, -0.328, -0.297, -0.264, -0.228, -0.192, -0.149, -0.114, -0.077, -0.043, +0.012, +0.055, +0.087, +0.136, +0.181, +0.217, +0.268, +0.306, +0.336, +0.370, +0.418, +0.462, +0.504, +0.542, +0.585, +0.624, +0.665, +0.707, +0.755, +0.813, +0.860, +0.914, +0.956, +0.992, +1.040, +1.096, +1.158, +1.213, +1.275, +1.349, +1.423, +1.478, +1.536, +1.601, +1.675, +1.756, +1.862, +1.934, +2.013, +2.122, +2.209, +2.310, +2.389, +2.500, +2.630, +2.775, +2.947, +3.141, +3.406, +3.759, +4.170, +4.704, +5.475, +6.110, +6.878, +8.295, +9.236, +9.236, +9.236, +9.236}, +0.161, +0.055, 1.597},
	{"DC6-5x8Bytes-101",    24, 4608, 0, { -4.251, -4.251, -4.251, -4.251, -4.236, -4.163, -3.944, -3.609, -3.375, -3.106, -2.765, -2.581, -2.393, -2.259, -2.154, -2.085, -2.002, -1.916, -1.824, -1.751, -1.679, -1.617, -1.533, -1.457, -1.392, -1.332, -1.286, -1.247, -1.193, -1.149, -1.095, -1.047, -0.990, -0.951, -0.912, -0.865, -0.814, -0.767, -0.728, -0.692, -0.652, -0.615, -0.579, -0.541, -0.499, -0.464, -0.427, -0.377, -0.335, -0.292, -0.253, -0.207, -0.156, -0.115, -0.075, -0.035, +0.008, +0.055, +0.094, +0.127, +0.170, +0.212, +0.243, +0.296, +0.329, +0.363, +0.411, +0.445, +0.481, +0.519, +0.565, +0.608, +0.656, +0.700, +0.744, +0.784, +0.823, +0.869, +0.915, +0.964, +1.025, +1.069, +1.125, +1.172, +1.236, +1.284, +1.355, +1.408, +1.486, +1.557, +1.628, +1.692, +1.740, +1.814, +1.919, +1.979, +2.069, +2.138, +2.209, +2.327, +2.439, +2.563, +2.727, +2.922, +3.154, +3.359, +3.685, +4.073, +4.544, +5.371, +5.705, +5.880, +6.576, +6.733, +6.733, +6.733, +6.733}, +0.161, +0.094, 1.578},
	{"DC6-5x8Bytes-101",    28, 4608, 0, { -4.477, -4.477, -4.477, -4.477, -4.302, -3.911, -3.777, -3.589, -3.386, -3.175, -2.846, -2.633, -2.457, -2.341, -2.183, -2.089, -2.021, -1.937, -1.858, -1.768, -1.698, -1.632, -1.576, -1.506, -1.448, -1.396, -1.337, -1.274, -1.209, -1.171, -1.127, -1.075, -1.033, -0.977, -0.917, -0.868, -0.825, -0.773, -0.718, -0.681, -0.634, -0.594, -0.555, -0.502, -0.459, -0.430, -0.393, -0.347, -0.314, -0.264, -0.225, -0.198, -0.161, -0.121, -0.072, -0.039, +0.007, +0.051, +0.086, +0.118, +0.163, +0.198, +0.232, +0.273, +0.312, +0.356, +0.405, +0.444, +0.492, +0.536, +0.572, +0.610, +0.652, +0.694, +0.741, +0.783, +0.828, +0.872, +0.920, +0.964, +1.004, +1.049, +1.096, +1.153, +1.204, +1.248, +1.312, +1.365, +1.435, +1.494, +1.562, +1.632, +1.707, +1.784, +1.861, +1.942, +2.030, +2.111, +2.223, +2.347, +2.458, +2.573, +2.734, +2.944, +3.129, +3.420, +3.789, +4.342, +4.727, +5.484, +6.274, +6.424, +6.617, +6.630, +6.630, +6.630, +6.630}, +0.153, +0.086, 1.597},
	{"DC6-5x8Bytes-101",    32, 4608, 0, { -4.653, -4.653, -4.653, -4.653, -4.472, -4.088, -3.849, -3.603, -3.425, -3.195, -2.846, -2.626, -2.452, -2.301, -2.181, -2.077, -2.001, -1.900, -1.813, -1.737, -1.679, -1.614, -1.553, -1.486, -1.435, -1.387, -1.324, -1.273, -1.211, -1.171, -1.126, -1.075, -1.021, -0.976, -0.933, -0.892, -0.849, -0.814, -0.778, -0.725, -0.683, -0.642, -0.609, -0.559, -0.513, -0.474, -0.429, -0.385, -0.343, -0.306, -0.267, -0.228, -0.187, -0.157, -0.117, -0.078, -0.051, -0.013, +0.023, +0.068, +0.112, +0.156, +0.199, +0.239, +0.285, +0.329, +0.368, +0.414, +0.466, +0.504, +0.549, +0.589, +0.631, +0.670, +0.699, +0.748, +0.802, +0.856, +0.922, +0.966, +1.006, +1.055, +1.106, +1.161, +1.228, +1.283, +1.355, +1.411, +1.454, +1.509, +1.569, +1.652, +1.716, +1.793, +1.860, +1.947, +2.033, +2.115, +2.200, +2.341, +2.443, +2.567, +2.730, +2.921, +3.203, +3.392, +3.757, +4.379, +4.905, +5.530, +5.993, +6.311, +6.530, +6.538, +6.538, +6.538, +6.538}, +0.143, +0.023, 1.600},
	{"DC6-5x8Bytes-101",    40, 4608, 0, { -4.570, -4.570, -4.570, -4.570, -4.567, -4.462, -4.005, -3.914, -3.534, -3.209, -2.942, -2.688, -2.508, -2.360, -2.258, -2.166, -2.059, -1.987, -1.912, -1.834, -1.740, -1.645, -1.578, -1.518, -1.463, -1.402, -1.337, -1.275, -1.226, -1.170, -1.124, -1.078, -1.035, -0.982, -0.945, -0.892, -0.837, -0.789, -0.749, -0.715, -0.677, -0.649, -0.611, -0.566, -0.521, -0.487, -0.451, -0.412, -0.382, -0.334, -0.300, -0.259, -0.225, -0.171, -0.133, -0.101, -0.065, -0.025, +0.017, +0.066, +0.104, +0.141, +0.189, +0.234, +0.269, +0.310, +0.345, +0.388, +0.429, +0.472, +0.515, +0.551, +0.584, +0.633, +0.666, +0.712, +0.759, +0.816, +0.875, +0.918, +0.975, +1.017, +1.065, +1.113, +1.162, +1.236, +1.300, +1.362, +1.426, +1.476, +1.557, +1.617, +1.701, +1.759, +1.840, +1.955, +2.044, +2.131, +2.215, +2.324, +2.439, +2.554, +2.689, +2.875, +3.070, +3.320, +3.638, +4.244, +4.961, +5.523, +6.121, +6.610, +6.993, +7.055, +7.055, +7.055, +7.055}, +0.111, +0.017, 1.601},
	{"DC6-5x8Bytes-101",    48, 4608, 0, { -4.854, -4.854, -4.854, -4.854, -4.719, -4.229, -4.065, -3.817, -3.483, -3.252, -2.831, -2.633, -2.492, -2.389, -2.303, -2.197, -2.068, -1.974, -1.899, -1.817, -1.754, -1.686, -1.615, -1.563, -1.509, -1.449, -1.392, -1.333, -1.265, -1.205, -1.151, -1.115, -1.061, -1.006, -0.964, -0.916, -0.867, -0.810, -0.767, -0.728, -0.683, -0.641, -0.590, -0.555, -0.509, -0.472, -0.428, -0.383, -0.337, -0.297, -0.259, -0.228, -0.193, -0.165, -0.131, -0.093, -0.060, -0.005, +0.037, +0.076, +0.118, +0.167, +0.204, +0.252, +0.294, +0.328, +0.370, +0.408, +0.451, +0.486, +0.519, +0.564, +0.597, +0.644, +0.681, +0.728, +0.774, +0.831, +0.873, +0.919, +0.975, +1.033, +1.084, +1.139, +1.214, +1.261, +1.315, +1.370, +1.445, +1.508, +1.572, +1.654, +1.722, +1.784, +1.858, +1.936, +2.048, +2.139, +2.214, +2.292, +2.408, +2.553, +2.727, +2.892, +3.087, +3.320, +3.634, +4.109, +4.713, +5.138, +5.321, +5.629, +5.889, +6.057, +6.057, +6.057, +6.057}, +0.114, +0.037, 1.597},
	{"DC6-5x8Bytes-101",    56, 4608, 0, { -4.607, -4.607, -4.607, -4.607, -4.506, -4.288, -4.128, -3.956, -3.616, -3.325, -2.973, -2.734, -2.580, -2.418, -2.303, -2.221, -2.112, -2.020, -1.906, -1.828, -1.752, -1.689, -1.604, -1.545, -1.483, -1.425, -1.362, -1.310, -1.252, -1.195, -1.140, -1.083, -1.032, -0.982, -0.928, -0.867, -0.820, -0.786, -0.743, -0.705, -0.674, -0.624, -0.588, -0.554, -0.510, -0.472, -0.439, -0.407, -0.372, -0.333, -0.293, -0.260, -0.218, -0.173, -0.127, -0.082, -0.045, -0.016, +0.023, +0.076, +0.113, +0.148, +0.202, +0.245, +0.285, +0.330, +0.369, +0.418, +0.461, +0.493, +0.542, +0.590, +0.634, +0.679, +0.726, +0.770, +0.824, +0.870, +0.914, +0.963, +1.004, +1.050, +1.104, +1.154, +1.205, +1.265, +1.326, +1.398, +1.451, +1.506, +1.582, +1.645, +1.726, +1.793, +1.871, +1.949, +2.080, +2.176, +2.248, +2.369, +2.486, +2.609, +2.729, +2.875, +3.100, +3.335, +3.662, +4.247, +4.833, +5.528, +5.754, +5.956, +6.302, +6.334, +6.334, +6.334, +6.334}, +0.120, +0.023, 1.619},
	{"DC6-5x8Bytes-101",    64, 4608, 0, { -5.222, -5.222, -5.222, -5.222, -5.158, -4.785, -4.448, -4.080, -3.695, -3.405, -3.016, -2.713, -2.542, -2.404, -2.291, -2.159, -2.060, -1.973, -1.902, -1.804, -1.735, -1.652, -1.591, -1.501, -1.431, -1.372, -1.324, -1.270, -1.229, -1.174, -1.119, -1.077, -1.034, -0.986, -0.938, -0.891, -0.835, -0.787, -0.726, -0.692, -0.647, -0.606, -0.562, -0.525, -0.492, -0.452, -0.413, -0.365, -0.330, -0.295, -0.249, -0.211, -0.161, -0.122, -0.083, -0.041, +0.002, +0.036, +0.081, +0.117, +0.150, +0.201, +0.232, +0.266, +0.303, +0.345, +0.390, +0.427, +0.461, +0.505, +0.540, +0.579, +0.624, +0.674, +0.734, +0.785, +0.837, +0.879, +0.928, +0.980, +1.039, +1.088, +1.130, +1.188, +1.230, +1.283, +1.334, +1.405, +1.476, +1.531, +1.592, +1.635, +1.683, +1.755, +1.835, +1.911, +1.998, +2.101, +2.210, +2.318, +2.440, +2.566, +2.755, +2.953, +3.175, +3.397, +3.702, +4.323, +4.887, +5.387, +5.813, +6.140, +6.830, +7.172, +7.172, +7.172, +7.172}, +0.137, +0.081, 1.621},
	{"DC6-5x8Bytes-101",    80, 4608, 0, { -5.556, -5.556, -5.556, -5.556, -5.340, -4.971, -4.633, -4.222, -3.731, -3.378, -3.046, -2.800, -2.611, -2.443, -2.322, -2.215, -2.110, -2.020, -1.948, -1.871, -1.792, -1.704, -1.633, -1.561, -1.507, -1.438, -1.384, -1.329, -1.267, -1.210, -1.162, -1.118, -1.067, -1.025, -0.978, -0.911, -0.866, -0.821, -0.779, -0.738, -0.692, -0.641, -0.590, -0.545, -0.502, -0.466, -0.424, -0.380, -0.340, -0.294, -0.247, -0.212, -0.176, -0.122, -0.084, -0.052, -0.009, +0.044, +0.083, +0.124, +0.159, +0.201, +0.247, +0.289, +0.333, +0.383, +0.435, +0.477, +0.511, +0.553, +0.596, +0.632, +0.684, +0.737, +0.787, +0.845, +0.889, +0.937, +0.983, +1.032, +1.086, +1.133, +1.194, +1.253, +1.318, +1.391, +1.466, +1.513, +1.581, +1.639, +1.695, +1.752, +1.812, +1.877, +1.958, +2.040, +2.124, +2.202, +2.296, +2.415, +2.542, +2.688, +2.829, +2.998, +3.151, +3.374, +3.708, +4.132, +4.639, +5.236, +5.881, +6.096, +6.531, +6.627, +6.627, +6.627, +6.627}, +0.149, +0.083, 1.658},
	{"DC6-5x8Bytes-101",    96, 4608, 0, { -5.383, -5.383, -5.383, -5.383, -5.243, -4.630, -4.361, -4.053, -3.681, -3.420, -3.054, -2.801, -2.588, -2.416, -2.260, -2.123, -2.028, -1.942, -1.855, -1.755, -1.682, -1.622, -1.556, -1.494, -1.430, -1.374, -1.326, -1.262, -1.220, -1.166, -1.113, -1.060, -1.023, -0.975, -0.928, -0.878, -0.824, -0.788, -0.754, -0.705, -0.654, -0.610, -0.565, -0.528, -0.491, -0.453, -0.408, -0.372, -0.336, -0.306, -0.266, -0.223, -0.182, -0.144, -0.107, -0.067, -0.021, +0.030, +0.083, +0.127, +0.168, +0.208, +0.255, +0.290, +0.315, +0.361, +0.402, +0.441, +0.501, +0.540, +0.583, +0.626, +0.681, +0.725, +0.764, +0.805, +0.844, +0.881, +0.944, +1.002, +1.056, +1.102, +1.161, +1.224, +1.289, +1.347, +1.401, +1.453, +1.511, +1.578, +1.656, +1.720, +1.793, +1.835, +1.908, +1.977, +2.051, +2.156, +2.255, +2.364, +2.487, +2.602, +2.723, +2.912, +3.097, +3.379, +3.749, +4.166, +4.704, +5.199, +5.539, +6.043, +6.912, +7.455, +7.455, +7.455, +7.455}, +0.151, +0.083, 1.623},
	{"DC6-5x8Bytes-101",   112, 4608, 0, { -4.972, -4.972, -4.972, -4.972, -4.903, -4.792, -4.654, -4.415, -3.874, -3.478, -3.058, -2.779, -2.588, -2.409, -2.270, -2.148, -2.053, -1.968, -1.909, -1.829, -1.749, -1.679, -1.592, -1.532, -1.459, -1.394, -1.339, -1.296, -1.247, -1.188, -1.132, -1.076, -1.017, -0.960, -0.916, -0.868, -0.826, -0.786, -0.736, -0.691, -0.650, -0.608, -0.568, -0.540, -0.487, -0.439, -0.397, -0.356, -0.320, -0.269, -0.224, -0.187, -0.145, -0.108, -0.072, -0.023, +0.021, +0.058, +0.094, +0.132, +0.184, +0.227, +0.266, +0.306, +0.358, +0.399, +0.436, +0.476, +0.515, +0.548, +0.582, +0.623, +0.659, +0.708, +0.767, +0.815, +0.856, +0.926, +0.983, +1.034, +1.081, +1.127, +1.182, +1.239, +1.298, +1.365, +1.408, +1.477, +1.541, +1.595, +1.662, +1.736, +1.798, +1.867, +1.935, +2.001, +2.094, +2.192, +2.269, +2.374, +2.469, +2.583, +2.756, +2.903, +3.135, +3.376, +3.685, +4.207, +4.914, +5.389, +5.715, +6.027, +6.194, +6.299, +6.299, +6.299, +6.299}, +0.156, +0.094, 1.641},
	{"DC6-5x8Bytes-101",   128, 4608, 0, { -5.527, -5.527, -5.527, -5.527, -5.386, -4.974, -4.685, -4.406, -3.943, -3.428, -3.063, -2.776, -2.606, -2.450, -2.320, -2.176, -2.062, -1.949, -1.861, -1.784, -1.693, -1.632, -1.567, -1.496, -1.431, -1.362, -1.309, -1.250, -1.201, -1.144, -1.103, -1.053, -0.999, -0.951, -0.910, -0.857, -0.809, -0.767, -0.723, -0.681, -0.639, -0.595, -0.553, -0.511, -0.456, -0.423, -0.382, -0.332, -0.289, -0.244, -0.201, -0.159, -0.127, -0.081, -0.036, +0.001, +0.045, +0.072, +0.108, +0.144, +0.177, +0.215, +0.264, +0.306, +0.352, +0.412, +0.456, +0.493, +0.535, +0.584, +0.625, +0.664, +0.714, +0.754, +0.791, +0.829, +0.872, +0.929, +0.974, +1.018, +1.070, +1.123, +1.181, +1.229, +1.287, +1.324, +1.385, +1.430, +1.486, +1.545, +1.607, +1.690, +1.753, +1.818, +1.893, +1.966, +2.043, +2.129, +2.234, +2.339, +2.459, +2.584, +2.708, +2.866, +3.071, +3.276, +3.617, +4.166, +4.608, +5.266, +5.670, +5.756, +5.956, +6.001, +6.001, +6.001, +6.001}, +0.155, +0.108, 1.618},
	{"DC6-5x8Bytes-101",   160, 4608, 0, { -6.745, -6.745, -6.745, -6.745, -6.300, -5.441, -4.823, -4.511, -3.820, -3.405, -3.027, -2.830, -2.611, -2.443, -2.307, -2.187, -2.083, -1.977, -1.884, -1.807, -1.739, -1.659, -1.590, -1.539, -1.465, -1.410, -1.346, -1.271, -1.225, -1.164, -1.108, -1.060, -1.003, -0.943, -0.892, -0.851, -0.805, -0.749, -0.705, -0.656, -0.612, -0.561, -0.519, -0.475, -0.440, -0.393, -0.351, -0.313, -0.274, -0.246, -0.203, -0.163, -0.123, -0.076, -0.040, -0.011, +0.035, +0.072, +0.120, +0.162, +0.209, +0.253, +0.291, +0.333, +0.368, +0.409, +0.456, +0.501, +0.542, +0.593, +0.640, +0.677, +0.718, +0.760, +0.791, +0.844, +0.899, +0.937, +0.981, +1.015, +1.058, +1.092, +1.145, +1.194, +1.250, +1.301, +1.368, +1.430, +1.499, +1.561, +1.610, +1.672, +1.738, +1.781, +1.847, +1.935, +2.035, +2.139, +2.245, +2.366, +2.464, +2.594, +2.710, +2.867, +3.091, +3.314, +3.582, +4.206, +4.788, +5.261, +5.795, +5.981, +6.273, +6.385, +6.385, +6.385, +6.385}, +0.156, +0.120, 1.625},
	{"DC6-5x8Bytes-101",   192, 4608, 0, { -6.296, -6.296, -6.296, -6.296, -6.155, -5.194, -4.741, -4.545, -3.950, -3.606, -3.054, -2.784, -2.568, -2.382, -2.249, -2.146, -2.041, -1.954, -1.884, -1.810, -1.719, -1.635, -1.577, -1.513, -1.440, -1.382, -1.325, -1.267, -1.209, -1.156, -1.098, -1.060, -1.016, -0.963, -0.917, -0.874, -0.828, -0.768, -0.736, -0.693, -0.653, -0.588, -0.549, -0.504, -0.460, -0.417, -0.381, -0.337, -0.291, -0.246, -0.202, -0.160, -0.120, -0.075, -0.021, +0.029, +0.067, +0.098, +0.146, +0.179, +0.220, +0.258, +0.298, +0.341, +0.379, +0.425, +0.465, +0.504, +0.543, +0.586, +0.619, +0.671, +0.711, +0.754, +0.799, +0.836, +0.902, +0.957, +0.998, +1.033, +1.077, +1.126, +1.182, +1.227, +1.272, +1.327, +1.390, +1.453, +1.512, +1.583, +1.639, +1.691, +1.778, +1.842, +1.905, +1.994, +2.072, +2.149, +2.260, +2.377, +2.497, +2.627, +2.733, +2.895, +3.056, +3.288, +3.591, +4.211, +4.804, +5.798, +5.925, +6.161, +6.361, +6.432, +6.432, +6.432, +6.432}, +0.164, +0.146, 1.636},
	{"DC6-5x8Bytes-101",   224, 4608, 0, { -5.646, -5.646, -5.646, -5.646, -5.546, -5.072, -4.787, -4.548, -3.947, -3.464, -3.025, -2.787, -2.582, -2.424, -2.312, -2.191, -2.063, -1.981, -1.902, -1.819, -1.756, -1.696, -1.600, -1.515, -1.444, -1.363, -1.295, -1.229, -1.180, -1.133, -1.070, -1.025, -0.979, -0.933, -0.893, -0.845, -0.795, -0.754, -0.703, -0.650, -0.600, -0.554, -0.521, -0.482, -0.437, -0.390, -0.350, -0.314, -0.273, -0.241, -0.194, -0.167, -0.124, -0.081, -0.032, +0.003, +0.048, +0.090, +0.133, +0.172, +0.210, +0.256, +0.293, +0.330, +0.371, +0.411, +0.461, +0.499, +0.548, +0.590, +0.635, +0.680, +0.730, +0.778, +0.831, +0.871, +0.922, +0.970, +1.031, +1.073, +1.119, +1.170, +1.219, +1.269, +1.320, +1.375, +1.421, +1.484, +1.543, +1.608, +1.665, +1.723, +1.790, +1.866, +1.937, +1.993, +2.077, +2.179, +2.269, +2.374, +2.475, +2.593, +2.750, +2.963, +3.133, +3.408, +3.687, +4.269, +4.763, +5.522, +5.816, +6.442, +6.778, +6.960, +6.960, +6.960, +6.960}, +0.179, +0.133, 1.643},
	{"DC6-5x8Bytes-101",   256, 4608, 0, { -5.680, -5.680, -5.680, -5.680, -5.529, -5.001, -4.620, -4.451, -4.051, -3.648, -3.058, -2.807, -2.644, -2.483, -2.329, -2.203, -2.100, -2.018, -1.912, -1.828, -1.744, -1.667, -1.595, -1.521, -1.464, -1.403, -1.353, -1.291, -1.235, -1.176, -1.119, -1.063, -1.000, -0.942, -0.890, -0.842, -0.795, -0.754, -0.701, -0.657, -0.619, -0.581, -0.527, -0.488, -0.437, -0.386, -0.338, -0.294, -0.256, -0.217, -0.166, -0.126, -0.084, -0.038, -0.004, +0.028, +0.064, +0.118, +0.156, +0.196, +0.244, +0.284, +0.323, +0.367, +0.404, +0.450, +0.484, +0.528, +0.574, +0.617, +0.676, +0.722, +0.769, +0.804, +0.842, +0.880, +0.928, +0.966, +1.010, +1.046, +1.102, +1.155, +1.218, +1.264, +1.305, +1.375, +1.429, +1.492, +1.542, +1.598, +1.654, +1.711, +1.781, +1.870, +1.984, +2.051, +2.130, +2.202, +2.291, +2.356, +2.467, +2.580, +2.699, +2.875, +3.038, +3.264, +3.656, +3.982, +4.622, +5.238, +5.526, +6.030, +6.407, +6.559, +6.559, +6.559, +6.559}, +0.172, +0.156, 1.637},
	{"DC6-5x8Bytes-101",   320, 4608, 0, { -5.508, -5.508, -5.508, -5.508, -5.504, -5.082, -4.680, -4.501, -3.959, -3.688, -3.189, -2.898, -2.654, -2.508, -2.358, -2.223, -2.122, -2.001, -1.909, -1.807, -1.717, -1.645, -1.546, -1.485, -1.408, -1.342, -1.288, -1.223, -1.178, -1.128, -1.077, -1.011, -0.948, -0.899, -0.855, -0.810, -0.766, -0.719, -0.676, -0.629, -0.586, -0.526, -0.485, -0.447, -0.401, -0.363, -0.333, -0.291, -0.261, -0.227, -0.193, -0.148, -0.097, -0.062, -0.019, +0.022, +0.077, +0.118, +0.172, +0.213, +0.255, +0.297, +0.328, +0.379, +0.424, +0.455, +0.492, +0.538, +0.589, +0.629, +0.664, +0.695, +0.738, +0.780, +0.817, +0.858, +0.902, +0.946, +0.995, +1.050, +1.095, +1.149, +1.192, +1.234, +1.295, +1.354, +1.403, +1.475, +1.535, +1.606, +1.662, +1.734, +1.803, +1.866, +1.929, +2.016, +2.087, +2.166, +2.269, +2.363, +2.460, +2.562, +2.722, +2.857, +3.028, +3.251, +3.509, +4.033, +4.568, +5.133, +5.559, +6.036, +6.887, +7.046, +7.046, +7.046, +7.046}, +0.174, +0.172, 1.630},
	{"DC6-5x8Bytes-101",   384, 4608, 0, { -4.947, -4.947, -4.947, -4.947, -4.930, -4.662, -4.426, -4.283, -3.980, -3.582, -3.158, -2.873, -2.653, -2.457, -2.348, -2.204, -2.100, -2.005, -1.884, -1.792, -1.713, -1.639, -1.573, -1.485, -1.425, -1.372, -1.317, -1.265, -1.200, -1.148, -1.096, -1.031, -0.984, -0.937, -0.882, -0.827, -0.782, -0.737, -0.698, -0.666, -0.615, -0.569, -0.528, -0.488, -0.451, -0.401, -0.358, -0.315, -0.266, -0.222, -0.174, -0.138, -0.099, -0.056, -0.026, +0.018, +0.066, +0.110, +0.164, +0.212, +0.251, +0.296, +0.340, +0.384, +0.438, +0.496, +0.525, +0.568, +0.616, +0.654, +0.702, +0.739, +0.794, +0.835, +0.876, +0.919, +0.954, +0.996, +1.043, +1.102, +1.157, +1.211, +1.269, +1.327, +1.387, +1.447, +1.490, +1.544, +1.609, +1.666, +1.744, +1.806, +1.868, +1.939, +2.019, +2.097, +2.176, +2.270, +2.365, +2.454, +2.541, +2.659, +2.792, +2.879, +3.113, +3.305, +3.640, +4.107, +4.578, +5.096, +5.569, +6.036, +6.457, +6.485, +6.485, +6.485, +6.485}, +0.200, +0.164, 1.655},
	{"DC6-5x8Bytes-101",   448, 4608, 0, { -5.527, -5.527, -5.527, -5.527, -5.428, -5.065, -4.611, -4.142, -3.780, -3.429, -3.119, -2.849, -2.631, -2.482, -2.337, -2.212, -2.098, -2.015, -1.914, -1.840, -1.747, -1.672, -1.605, -1.544, -1.472, -1.406, -1.331, -1.273, -1.230, -1.171, -1.111, -1.071, -1.023, -0.977, -0.929, -0.883, -0.832, -0.771, -0.708, -0.659, -0.620, -0.568, -0.523, -0.475, -0.433, -0.393, -0.361, -0.318, -0.272, -0.227, -0.178, -0.132, -0.087, -0.050, -0.011, +0.036, +0.084, +0.115, +0.151, +0.197, +0.234, +0.288, +0.326, +0.366, +0.413, +0.449, +0.487, +0.525, +0.559, +0.593, +0.637, +0.677, +0.715, +0.764, +0.803, +0.849, +0.887, +0.927, +0.976, +1.027, +1.076, +1.127, +1.171, +1.222, +1.290, +1.346, +1.400, +1.461, +1.513, +1.561, +1.631, +1.683, +1.746, +1.817, +1.892, +1.969, +2.056, +2.125, +2.232, +2.381, +2.496, +2.612, +2.739, +2.907, +3.092, +3.326, +3.622, +4.063, +4.501, +5.233, +5.650, +6.026, +6.256, +6.406, +6.406, +6.406, +6.406}, +0.162, +0.151, 1.630},
	{"DC6-5x8Bytes-101",   512, 4608, 0, { -5.258, -5.258, -5.258, -5.258, -5.047, -4.733, -4.438, -4.283, -3.915, -3.576, -3.190, -2.849, -2.642, -2.488, -2.342, -2.213, -2.114, -1.998, -1.900, -1.829, -1.751, -1.679, -1.615, -1.558, -1.472, -1.409, -1.346, -1.288, -1.225, -1.140, -1.092, -1.040, -0.998, -0.944, -0.897, -0.828, -0.792, -0.735, -0.685, -0.645, -0.598, -0.555, -0.507, -0.465, -0.416, -0.370, -0.319, -0.272, -0.238, -0.196, -0.163, -0.125, -0.076, -0.030, +0.018, +0.060, +0.091, +0.128, +0.173, +0.219, +0.266, +0.301, +0.337, +0.380, +0.426, +0.464, +0.502, +0.539, +0.574, +0.622, +0.662, +0.713, +0.752, +0.796, +0.837, +0.875, +0.917, +0.953, +0.995, +1.036, +1.090, +1.152, +1.197, +1.258, +1.293, +1.345, +1.404, +1.452, +1.531, +1.590, +1.663, +1.745, +1.814, +1.895, +1.985, +2.062, +2.152, +2.236, +2.314, +2.418, +2.505, +2.639, +2.750, +2.890, +3.058, +3.271, +3.563, +4.106, +4.388, +5.131, +5.868, +6.054, +6.316, +6.358, +6.358, +6.358, +6.358}, +0.179, +0.173, 1.639},
	{"DC6-5x8Bytes-101",   640, 4608, 0, { -5.570, -5.570, -5.570, -5.570, -5.439, -4.985, -4.527, -4.290, -3.902, -3.530, -3.037, -2.809, -2.609, -2.477, -2.347, -2.202, -2.091, -2.008, -1.875, -1.770, -1.670, -1.592, -1.541, -1.447, -1.396, -1.333, -1.277, -1.210, -1.139, -1.088, -1.033, -0.971, -0.911, -0.851, -0.790, -0.742, -0.704, -0.652, -0.613, -0.583, -0.537, -0.487, -0.449, -0.405, -0.369, -0.334, -0.295, -0.249, -0.202, -0.156, -0.114, -0.078, -0.024, +0.016, +0.054, +0.099, +0.143, +0.181, +0.218, +0.259, +0.297, +0.332, +0.373, +0.426, +0.472, +0.507, +0.549, +0.584, +0.628, +0.670, +0.707, +0.753, +0.800, +0.835, +0.876, +0.919, +0.970, +1.012, +1.067, +1.116, +1.176, +1.226, +1.265, +1.312, +1.358, +1.417, +1.472, +1.529, +1.583, +1.643, +1.704, +1.756, +1.809, +1.883, +1.955, +2.037, +2.101, +2.190, +2.289, +2.376, +2.489, +2.622, +2.727, +2.901, +3.047, +3.292, +3.495, +4.106, +4.773, +5.354, +5.938, +6.042, +6.312, +6.477, +6.477, +6.477, +6.477}, +0.221, +0.218, 1.628},
	{"DC6-5x8Bytes-101",   768, 4608, 0, { -5.133, -5.133, -5.133, -5.133, -5.072, -4.947, -4.737, -4.407, -4.082, -3.534, -3.085, -2.780, -2.560, -2.386, -2.247, -2.140, -2.049, -1.937, -1.846, -1.758, -1.678, -1.609, -1.540, -1.462, -1.409, -1.333, -1.266, -1.209, -1.145, -1.076, -1.018, -0.976, -0.924, -0.871, -0.818, -0.769, -0.720, -0.678, -0.622, -0.577, -0.522, -0.472, -0.418, -0.378, -0.335, -0.304, -0.262, -0.223, -0.188, -0.150, -0.110, -0.071, -0.016, +0.024, +0.061, +0.100, +0.139, +0.184, +0.219, +0.268, +0.299, +0.354, +0.397, +0.437, +0.470, +0.512, +0.564, +0.610, +0.660, +0.706, +0.754, +0.800, +0.845, +0.894, +0.931, +0.975, +1.020, +1.067, +1.108, +1.151, +1.194, +1.231, +1.276, +1.321, +1.373, +1.438, +1.502, +1.548, +1.618, +1.673, +1.733, +1.808, +1.881, +1.939, +2.000, +2.094, +2.169, +2.286, +2.369, +2.464, +2.575, +2.694, +2.882, +3.074, +3.229, +3.437, +3.770, +4.311, +4.765, +5.181, +5.502, +6.099, +6.701, +7.111, +7.111, +7.111, +7.111}, +0.253, +0.219, 1.655},
	{"DC6-5x8Bytes-101",   896, 4608, 0, { -5.597, -5.597, -5.597, -5.597, -5.516, -5.171, -4.859, -4.365, -3.726, -3.423, -3.020, -2.783, -2.597, -2.398, -2.256, -2.126, -2.035, -1.955, -1.853, -1.767, -1.688, -1.616, -1.533, -1.469, -1.413, -1.335, -1.261, -1.202, -1.135, -1.059, -1.007, -0.943, -0.880, -0.823, -0.768, -0.721, -0.674, -0.614, -0.565, -0.515, -0.469, -0.417, -0.377, -0.330, -0.287, -0.238, -0.203, -0.164, -0.128, -0.090, -0.051, -0.014, +0.029, +0.069, +0.105, +0.154, +0.195, +0.237, +0.280, +0.326, +0.358, +0.409, +0.450, +0.492, +0.532, +0.577, +0.614, +0.660, +0.708, +0.747, +0.791, +0.843, +0.873, +0.921, +0.958, +1.002, +1.052, +1.101, +1.162, +1.212, +1.270, +1.322, +1.375, +1.432, +1.485, +1.541, +1.605, +1.662, +1.721, +1.784, +1.840, +1.899, +1.956, +2.017, +2.093, +2.179, +2.266, +2.360, +2.450, +2.556, +2.672, +2.786, +2.907, +3.039, +3.256, +3.500, +3.824, +4.234, +4.853, +5.238, +5.780, +6.000, +6.173, +6.282, +6.282, +6.282, +6.282}, +0.303, +0.280, 1.671},
	{"DC6-5x8Bytes-101",  1024, 4608, 0, { -5.798, -5.798, -5.798, -5.798, -5.580, -5.168, -4.996, -4.520, -3.838, -3.421, -3.094, -2.787, -2.568, -2.421, -2.264, -2.130, -2.010, -1.904, -1.803, -1.723, -1.633, -1.538, -1.473, -1.411, -1.347, -1.292, -1.208, -1.142, -1.094, -1.040, -0.988, -0.933, -0.878, -0.842, -0.809, -0.754, -0.692, -0.661, -0.616, -0.553, -0.508, -0.463, -0.409, -0.367, -0.306, -0.268, -0.221, -0.170, -0.124, -0.081, -0.043, +0.003, +0.039, +0.088, +0.124, +0.164, +0.214, +0.253, +0.298, +0.340, +0.378, +0.418, +0.448, +0.491, +0.538, +0.586, +0.629, +0.677, +0.718, +0.765, +0.809, +0.858, +0.910, +0.952, +1.001, +1.050, +1.087, +1.146, +1.191, +1.241, +1.290, +1.340, +1.384, +1.430, +1.485, +1.549, +1.604, +1.659, +1.729, +1.793, +1.867, +1.933, +2.007, +2.071, +2.133, +2.215, +2.332, +2.410, +2.487, +2.571, +2.668, +2.805, +2.936, +3.111, +3.267, +3.471, +3.688, +4.123, +4.431, +4.810, +5.097, +5.368, +5.564, +5.656, +5.656, +5.656, +5.656}, +0.310, +0.298, 1.663},
	{"DC6-5x8Bytes-101",  1280, 4608, 0, { -5.400, -5.400, -5.400, -5.400, -5.251, -5.040, -4.976, -4.422, -3.899, -3.530, -3.080, -2.783, -2.538, -2.326, -2.163, -2.013, -1.870, -1.786, -1.710, -1.614, -1.516, -1.441, -1.353, -1.301, -1.249, -1.194, -1.118, -1.069, -1.014, -0.954, -0.897, -0.842, -0.777, -0.732, -0.697, -0.639, -0.590, -0.547, -0.496, -0.438, -0.399, -0.346, -0.311, -0.267, -0.221, -0.185, -0.149, -0.109, -0.059, -0.006, +0.040, +0.084, +0.129, +0.176, +0.214, +0.250, +0.289, +0.339, +0.379, +0.420, +0.457, +0.493, +0.539, +0.574, +0.615, +0.661, +0.704, +0.743, +0.780, +0.823, +0.863, +0.901, +0.939, +0.992, +1.035, +1.083, +1.136, +1.190, +1.239, +1.291, +1.338, +1.386, +1.443, +1.501, +1.550, +1.614, +1.669, +1.742, +1.810, +1.866, +1.929, +2.005, +2.077, +2.140, +2.209, +2.301, +2.383, +2.473, +2.559, +2.668, +2.797, +2.930, +3.052, +3.239, +3.377, +3.571, +3.876, +4.274, +4.658, +5.026, +5.351, +5.962, +6.067, +6.092, +6.092, +6.092, +6.092}, +0.392, +0.379, 1.671},
	{"DC6-5x8Bytes-101",  1536, 4608, 0, { -5.766, -5.766, -5.766, -5.766, -5.467, -4.916, -4.720, -4.271, -3.716, -3.300, -2.847, -2.590, -2.363, -2.229, -2.059, -1.957, -1.841, -1.735, -1.650, -1.560, -1.461, -1.401, -1.338, -1.268, -1.192, -1.114, -1.064, -0.999, -0.935, -0.888, -0.830, -0.779, -0.733, -0.680, -0.624, -0.586, -0.538, -0.503, -0.467, -0.416, -0.366, -0.328, -0.287, -0.252, -0.215, -0.171, -0.133, -0.093, -0.047, -0.005, +0.044, +0.072, +0.108, +0.147, +0.186, +0.230, +0.273, +0.319, +0.368, +0.409, +0.460, +0.502, +0.548, +0.583, +0.633, +0.680, +0.735, +0.785, +0.818, +0.855, +0.899, +0.946, +0.992, +1.034, +1.086, +1.129, +1.182, +1.226, +1.276, +1.320, +1.379, +1.428, +1.470, +1.534, +1.586, +1.641, +1.683, +1.744, +1.812, +1.887, +1.952, +2.020, +2.094, +2.180, +2.260, +2.363, +2.449, +2.541, +2.639, +2.716, +2.816, +2.927, +3.096, +3.248, +3.426, +3.686, +3.980, +4.352, +4.910, +5.441, +5.881, +6.271, +6.975, +7.178, +7.178, +7.178, +7.178}, +0.435, +0.368, 1.663},
	{"DC6-5x8Bytes-101",  1792, 4608, 0, { -5.791, -5.791, -5.791, -5.791, -5.669, -5.345, -5.145, -4.363, -3.815, -3.373, -2.898, -2.672, -2.479, -2.263, -2.105, -1.957, -1.851, -1.752, -1.668, -1.578, -1.491, -1.396, -1.342, -1.261, -1.197, -1.113, -1.046, -0.989, -0.932, -0.866, -0.801, -0.748, -0.691, -0.645, -0.587, -0.538, -0.479, -0.422, -0.384, -0.336, -0.291, -0.249, -0.210, -0.173, -0.133, -0.091, -0.060, -0.018, +0.021, +0.067, +0.116, +0.150, +0.177, +0.232, +0.263, +0.312, +0.349, +0.390, +0.426, +0.470, +0.504, +0.544, +0.587, +0.631, +0.676, +0.717, +0.760, +0.797, +0.848, +0.887, +0.944, +0.999, +1.037, +1.078, +1.113, +1.155, +1.202, +1.245, +1.280, +1.318, +1.362, +1.406, +1.466, +1.528, +1.582, +1.653, +1.710, +1.766, +1.828, +1.889, +1.950, +2.029, +2.093, +2.176, +2.267, +2.334, +2.403, +2.499, +2.575, +2.668, +2.761, +2.863, +2.995, +3.137, +3.294, +3.531, +3.854, +4.455, +4.870, +5.386, +5.803, +6.110, +6.393, +6.437, +6.437, +6.437, +6.437}, +0.448, +0.426, 1.652},
	{"DC6-5x8Bytes-101",  2048, 4608, 0, { -5.866, -5.866, -5.866, -5.866, -5.511, -4.592, -4.273, -4.086, -3.712, -3.336, -2.858, -2.575, -2.309, -2.117, -1.976, -1.883, -1.806, -1.725, -1.641, -1.552, -1.462, -1.386, -1.312, -1.239, -1.189, -1.103, -1.032, -0.961, -0.905, -0.860, -0.793, -0.729, -0.678, -0.628, -0.580, -0.536, -0.487, -0.431, -0.384, -0.340, -0.302, -0.253, -0.217, -0.168, -0.123, -0.070, -0.023, +0.017, +0.049, +0.093, +0.138, +0.186, +0.229, +0.282, +0.320, +0.366, +0.408, +0.449, +0.482, +0.517, +0.550, +0.582, +0.631, +0.676, +0.720, +0.755, +0.793, +0.835, +0.871, +0.922, +0.979, +1.022, +1.058, +1.100, +1.135, +1.182, +1.232, +1.280, +1.335, +1.379, +1.432, +1.487, +1.549, +1.599, +1.642, +1.687, +1.753, +1.805, +1.869, +1.931, +1.994, +2.049, +2.125, +2.194, +2.256, +2.316, +2.383, +2.459, +2.535, +2.652, +2.769, +2.883, +3.003, +3.156, +3.353, +3.643, +4.085, +4.518, +4.872, +5.564, +6.313, +6.482, +7.012, +7.345, +7.345, +7.345, +7.345}, +0.484, +0.482, 1.648},
	{"DC6-5x8Bytes-101",  2560, 4608, 0, { -4.916, -4.916, -4.916, -4.916, -4.808, -4.619, -4.377, -3.980, -3.707, -3.255, -2.796, -2.585, -2.336, -2.198, -2.065, -1.945, -1.819, -1.691, -1.608, -1.530, -1.446, -1.358, -1.281, -1.211, -1.148, -1.096, -1.021, -0.965, -0.913, -0.841, -0.787, -0.736, -0.682, -0.616, -0.564, -0.509, -0.458, -0.408, -0.358, -0.306, -0.261, -0.220, -0.175, -0.125, -0.079, -0.043, -0.001, +0.044, +0.087, +0.128, +0.177, +0.222, +0.271, +0.313, +0.355, +0.392, +0.437, +0.471, +0.508, +0.540, +0.574, +0.628, +0.663, +0.707, +0.752, +0.797, +0.839, +0.876, +0.914, +0.961, +1.012, +1.052, +1.099, +1.143, +1.175, +1.217, +1.256, +1.296, +1.324, +1.363, +1.414, +1.464, +1.521, +1.583, +1.634, +1.679, +1.736, +1.781, +1.847, +1.924, +1.990, +2.060, +2.132, +2.211, +2.278, +2.349, +2.435, +2.530, +2.650, +2.739, +2.813, +2.946, +3.095, +3.222, +3.413, +3.621, +3.888, +4.273, +4.789, +5.367, +5.616, +6.343, +6.577, +6.580, +6.580, +6.580, +6.580}, +0.501, +0.508, 1.640},
	{"DC6-5x8Bytes-101",  3072, 4608, 0, { -5.166, -5.166, -5.166, -5.166, -5.139, -4.777, -4.194, -3.983, -3.412, -3.171, -2.831, -2.541, -2.337, -2.165, -1.992, -1.856, -1.741, -1.655, -1.594, -1.518, -1.456, -1.365, -1.282, -1.207, -1.150, -1.074, -1.019, -0.943, -0.888, -0.835, -0.775, -0.723, -0.669, -0.612, -0.554, -0.500, -0.455, -0.402, -0.351, -0.308, -0.264, -0.220, -0.175, -0.119, -0.080, -0.039, +0.001, +0.045, +0.085, +0.132, +0.168, +0.205, +0.251, +0.284, +0.325, +0.359, +0.397, +0.441, +0.486, +0.525, +0.567, +0.603, +0.646, +0.691, +0.736, +0.781, +0.829, +0.871, +0.920, +0.972, +1.010, +1.055, +1.110, +1.163, +1.199, +1.244, +1.291, +1.339, +1.411, +1.457, +1.508, +1.547, +1.592, +1.655, +1.711, +1.775, +1.844, +1.888, +1.939, +2.007, +2.071, +2.134, +2.191, +2.258, +2.330, +2.427, +2.520, +2.596, +2.677, +2.762, +2.852, +2.951, +3.064, +3.263, +3.454, +3.663, +3.863, +4.278, +4.807, +5.148, +5.436, +5.957, +6.818, +6.950, +6.950, +6.950, +6.950}, +0.522, +0.486, 1.646},
	{"DC6-5x8Bytes-101",  3584, 4608, 0, { -5.008, -5.008, -5.008, -5.008, -4.992, -4.548, -4.228, -4.089, -3.631, -3.194, -2.815, -2.539, -2.311, -2.153, -2.015, -1.850, -1.757, -1.654, -1.561, -1.445, -1.371, -1.312, -1.232, -1.165, -1.099, -1.027, -0.953, -0.883, -0.826, -0.775, -0.732, -0.688, -0.632, -0.588, -0.540, -0.489, -0.445, -0.400, -0.352, -0.305, -0.262, -0.216, -0.176, -0.135, -0.096, -0.039, +0.010, +0.055, +0.108, +0.156, +0.204, +0.243, +0.286, +0.321, +0.361, +0.410, +0.460, +0.490, +0.532, +0.572, +0.610, +0.658, +0.698, +0.747, +0.787, +0.826, +0.868, +0.908, +0.961, +1.009, +1.056, +1.097, +1.144, +1.197, +1.239, +1.286, +1.336, +1.382, +1.433, +1.487, +1.529, +1.584, +1.635, +1.683, +1.743, +1.806, +1.855, +1.905, +1.956, +2.008, +2.079, +2.144, +2.191, +2.262, +2.322, +2.409, +2.497, +2.575, +2.673, +2.775, +2.887, +3.013, +3.156, +3.283, +3.460, +3.658, +3.962, +4.431, +4.824, +5.459, +5.835, +6.045, +6.140, +6.154, +6.154, +6.154, +6.154}, +0.551, +0.532, 1.653},
	{"DC6-5x8Bytes-101",  4096, 4608, 0, { -5.517, -5.517, -5.517, -5.517, -5.316, -4.691, -4.265, -3.948, -3.508, -3.089, -2.720, -2.476, -2.307, -2.141, -2.014, -1.889, -1.727, -1.610, -1.508, -1.429, -1.350, -1.272, -1.198, -1.140, -1.077, -0.998, -0.935, -0.869, -0.817, -0.751, -0.708, -0.658, -0.614, -0.558, -0.511, -0.459, -0.414, -0.364, -0.314, -0.263, -0.224, -0.186, -0.141, -0.091, -0.051, -0.002, +0.045, +0.092, +0.129, +0.180, +0.230, +0.279, +0.317, +0.356, +0.394, +0.443, +0.496, +0.544, +0.586, +0.624, +0.667, +0.704, +0.750, +0.798, +0.837, +0.874, +0.922, +0.956, +0.990, +1.023, +1.065, +1.099, +1.139, +1.176, +1.218, +1.265, +1.306, +1.354, +1.391, +1.456, +1.505, +1.556, +1.609, +1.666, +1.726, +1.771, +1.826, +1.879, +1.934, +1.989, +2.057, +2.133, +2.189, +2.250, +2.327, +2.410, +2.482, +2.572, +2.658, +2.744, +2.859, +2.969, +3.084, +3.259, +3.424, +3.667, +3.898, +4.351, +4.826, +5.314, +5.689, +5.820, +6.449, +6.732, +6.732, +6.732, +6.732}, +0.564, +0.586, 1.632},
	{"DC6-5x8Bytes-101",  5120, 4608, 0, { -5.552, -5.552, -5.552, -5.552, -5.218, -4.656, -4.486, -4.076, -3.583, -3.215, -2.743, -2.423, -2.218, -2.065, -1.902, -1.763, -1.682, -1.587, -1.496, -1.401, -1.342, -1.243, -1.171, -1.107, -1.029, -0.965, -0.888, -0.822, -0.756, -0.712, -0.662, -0.605, -0.558, -0.510, -0.467, -0.420, -0.381, -0.331, -0.277, -0.223, -0.175, -0.123, -0.083, -0.040, -0.001, +0.046, +0.081, +0.120, +0.164, +0.203, +0.246, +0.281, +0.323, +0.352, +0.391, +0.429, +0.474, +0.515, +0.559, +0.603, +0.643, +0.686, +0.723, +0.766, +0.822, +0.861, +0.897, +0.944, +0.993, +1.045, +1.083, +1.123, +1.161, +1.206, +1.263, +1.311, +1.347, +1.396, +1.437, +1.476, +1.524, +1.574, +1.609, +1.672, +1.719, +1.773, +1.821, +1.888, +1.942, +1.994, +2.045, +2.111, +2.184, +2.243, +2.311, +2.387, +2.474, +2.574, +2.700, +2.795, +2.899, +3.048, +3.194, +3.315, +3.488, +3.690, +3.952, +4.407, +4.835, +5.263, +5.451, +5.870, +6.155, +6.337, +6.337, +6.337, +6.337}, +0.586, +0.559, 1.627},
	{"DC6-5x8Bytes-101",  6144, 4608, 0, { -5.438, -5.438, -5.438, -5.438, -5.085, -4.559, -4.482, -4.017, -3.470, -3.062, -2.718, -2.430, -2.229, -2.058, -1.939, -1.812, -1.665, -1.538, -1.433, -1.347, -1.259, -1.182, -1.104, -1.031, -0.960, -0.912, -0.847, -0.791, -0.725, -0.668, -0.628, -0.580, -0.523, -0.474, -0.424, -0.384, -0.321, -0.266, -0.224, -0.177, -0.130, -0.089, -0.036, +0.008, +0.052, +0.100, +0.129, +0.173, +0.216, +0.260, +0.301, +0.342, +0.393, +0.429, +0.462, +0.502, +0.535, +0.576, +0.618, +0.660, +0.696, +0.737, +0.774, +0.810, +0.844, +0.888, +0.924, +0.963, +0.998, +1.039, +1.076, +1.135, +1.179, +1.225, +1.270, +1.313, +1.351, +1.398, +1.461, +1.503, +1.542, +1.584, +1.638, +1.692, +1.751, +1.804, +1.855, +1.901, +1.965, +2.025, +2.080, +2.142, +2.215, +2.288, +2.377, +2.451, +2.535, +2.622, +2.720, +2.800, +2.885, +3.002, +3.149, +3.304, +3.456, +3.682, +3.975, +4.444, +4.827, +5.331, +5.499, +5.675, +5.948, +5.982, +5.982, +5.982, +5.982}, +0.618, +0.618, 1.614},
	{"DC6-5x8Bytes-101",  7168, 4608, 0, { -5.016, -5.016, -5.016, -5.016, -4.970, -4.800, -4.491, -4.054, -3.615, -3.267, -2.704, -2.404, -2.239, -2.063, -1.912, -1.792, -1.665, -1.559, -1.452, -1.353, -1.270, -1.212, -1.148, -1.076, -1.000, -0.941, -0.879, -0.818, -0.765, -0.703, -0.658, -0.602, -0.544, -0.486, -0.432, -0.374, -0.333, -0.271, -0.223, -0.165, -0.111, -0.068, -0.025, +0.013, +0.067, +0.102, +0.150, +0.201, +0.252, +0.301, +0.352, +0.389, +0.431, +0.466, +0.506, +0.543, +0.582, +0.617, +0.650, +0.694, +0.741, +0.787, +0.827, +0.862, +0.906, +0.936, +0.977, +1.025, +1.070, +1.110, +1.149, +1.197, +1.248, +1.284, +1.326, +1.374, +1.420, +1.467, +1.503, +1.543, +1.595, +1.647, +1.693, +1.753, +1.802, +1.855, +1.900, +1.955, +2.014, +2.069, +2.132, +2.194, +2.266, +2.326, +2.398, +2.481, +2.570, +2.651, +2.770, +2.883, +2.972, +3.092, +3.187, +3.355, +3.560, +3.746, +4.086, +4.580, +5.009, +5.344, +5.673, +5.875, +5.979, +6.011, +6.011, +6.011, +6.011}, +0.646, +0.650, 1.649},
	{"DC6-5x8Bytes-101",  8192, 4608, 0, { -5.799, -5.799, -5.799, -5.799, -5.496, -4.954, -4.519, -4.041, -3.445, -3.054, -2.633, -2.351, -2.136, -1.973, -1.828, -1.715, -1.613, -1.529, -1.420, -1.343, -1.261, -1.175, -1.104, -1.037, -0.956, -0.899, -0.834, -0.775, -0.708, -0.652, -0.605, -0.552, -0.494, -0.442, -0.393, -0.343, -0.283, -0.239, -0.196, -0.151, -0.114, -0.073, -0.029, +0.022, +0.072, +0.116, +0.162, +0.220, +0.255, +0.297, +0.336, +0.375, +0.413, +0.448, +0.486, +0.525, +0.558, +0.594, +0.631, +0.678, +0.714, +0.752, +0.798, +0.828, +0.859, +0.899, +0.939, +0.987, +1.032, +1.074, +1.108, +1.142, +1.186, +1.235, +1.271, +1.315, +1.366, +1.408, +1.454, +1.491, +1.549, +1.599, +1.654, +1.709, +1.760, +1.815, +1.874, +1.926, +1.982, +2.059, +2.141, +2.204, +2.263, +2.349, +2.423, +2.481, +2.557, +2.644, +2.734, +2.808, +2.917, +3.046, +3.190, +3.362, +3.535, +3.754, +4.025, +4.575, +4.925, +5.468, +5.828, +6.152, +6.344, +6.425, +6.425, +6.425, +6.425}, +0.647, +0.631, 1.619},
	{"DC6-5x8Bytes-101", 10240, 4608, 0, { -4.773, -4.773, -4.773, -4.773, -4.699, -4.591, -4.223, -3.874, -3.369, -3.093, -2.672, -2.413, -2.185, -2.025, -1.858, -1.724, -1.619, -1.535, -1.418, -1.308, -1.232, -1.157, -1.082, -1.011, -0.950, -0.887, -0.819, -0.770, -0.705, -0.645, -0.607, -0.551, -0.501, -0.445, -0.386, -0.329, -0.270, -0.216, -0.182, -0.140, -0.101, -0.056, -0.015, +0.031, +0.078, +0.129, +0.167, +0.207, +0.249, +0.297, +0.339, +0.377, +0.412, +0.450, +0.492, +0.538, +0.571, +0.609, +0.655, +0.693, +0.730, +0.766, +0.804, +0.843, +0.880, +0.917, +0.959, +1.011, +1.047, +1.092, +1.138, +1.178, +1.221, +1.263, +1.308, +1.348, +1.404, +1.452, +1.505, +1.553, +1.611, +1.652, +1.702, +1.750, +1.797, +1.840, +1.888, +1.950, +2.002, +2.052, +2.113, +2.196, +2.271, +2.323, +2.386, +2.447, +2.513, +2.619, +2.741, +2.852, +2.971, +3.075, +3.235, +3.398, +3.540, +3.736, +4.090, +4.519, +4.878, +5.547, +5.819, +6.139, +7.078, +7.703, +7.703, +7.703, +7.703}, +0.659, +0.655, 1.625},
	{"DC6-5x8Bytes-101", 12288, 4608, 0, { -4.866, -4.866, -4.866, -4.866, -4.827, -4.658, -4.401, -4.063, -3.390, -3.040, -2.586, -2.347, -2.110, -1.932, -1.795, -1.667, -1.587, -1.495, -1.375, -1.289, -1.217, -1.141, -1.043, -0.975, -0.888, -0.827, -0.772, -0.715, -0.664, -0.616, -0.569, -0.515, -0.464, -0.424, -0.369, -0.323, -0.256, -0.198, -0.162, -0.128, -0.085, -0.031, +0.014, +0.069, +0.117, +0.161, +0.203, +0.243, +0.287, +0.327, +0.366, +0.409, +0.442, +0.484, +0.522, +0.559, +0.598, +0.640, +0.677, +0.719, +0.767, +0.811, +0.853, +0.897, +0.935, +0.973, +1.013, +1.055, +1.093, +1.141, +1.181, +1.218, +1.259, +1.301, +1.331, +1.374, +1.422, +1.466, +1.518, +1.570, +1.612, +1.651, +1.700, +1.762, +1.830, +1.884, +1.941, +2.000, +2.060, +2.115, +2.170, +2.239, +2.310, +2.386, +2.460, +2.554, +2.621, +2.681, +2.756, +2.846, +2.942, +3.052, +3.196, +3.345, +3.498, +3.759, +4.100, +4.494, +4.878, +5.363, +5.763, +6.278, +6.510, +6.668, +6.668, +6.668, +6.668}, +0.691, +0.677, 1.615},
	{"DC6-5x8Bytes-101", 14336, 4608, 0, { -4.846, -4.846, -4.846, -4.846, -4.648, -4.264, -4.107, -3.959, -3.576, -3.072, -2.581, -2.318, -2.071, -1.912, -1.739, -1.588, -1.465, -1.387, -1.291, -1.212, -1.126, -1.063, -1.004, -0.945, -0.885, -0.805, -0.746, -0.697, -0.632, -0.579, -0.526, -0.471, -0.422, -0.363, -0.323, -0.277, -0.235, -0.185, -0.148, -0.104, -0.070, -0.029, +0.006, +0.049, +0.102, +0.143, +0.187, +0.232, +0.274, +0.324, +0.369, +0.417, +0.461, +0.496, +0.548, +0.588, +0.618, +0.666, +0.699, +0.736, +0.773, +0.803, +0.843, +0.886, +0.931, +0.978, +1.033, +1.068, +1.116, +1.165, +1.198, +1.240, +1.293, +1.341, +1.376, +1.431, +1.476, +1.525, +1.562, +1.604, +1.648, +1.700, +1.764, +1.821, +1.868, +1.921, +1.981, +2.030, +2.087, +2.144, +2.206, +2.279, +2.348, +2.415, +2.476, +2.546, +2.620, +2.699, +2.812, +2.936, +3.052, +3.176, +3.300, +3.432, +3.660, +3.877, +4.116, +4.584, +5.079, +5.459, +5.743, +6.390, +6.739, +6.760, +6.760, +6.760, +6.760}, +0.726, +0.699, 1.625},
	{"DC6-5x8Bytes-101", 16384, 4608, 0, { -4.781, -4.781, -4.781, -4.781, -4.740, -4.581, -4.256, -4.005, -3.546, -3.135, -2.607, -2.295, -2.103, -1.913, -1.768, -1.621, -1.499, -1.403, -1.300, -1.200, -1.102, -1.036, -0.968, -0.912, -0.854, -0.783, -0.723, -0.661, -0.603, -0.544, -0.471, -0.430, -0.384, -0.335, -0.282, -0.225, -0.177, -0.132, -0.091, -0.042, +0.002, +0.043, +0.087, +0.129, +0.168, +0.225, +0.270, +0.312, +0.351, +0.384, +0.428, +0.464, +0.501, +0.547, +0.596, +0.632, +0.668, +0.723, +0.771, +0.810, +0.847, +0.892, +0.935, +0.975, +1.017, +1.059, +1.092, +1.133, +1.171, +1.213, +1.248, +1.278, +1.313, +1.349, +1.387, +1.424, +1.460, +1.510, +1.554, +1.604, +1.669, +1.721, +1.775, +1.822, +1.874, +1.937, +1.985, +2.052, +2.101, +2.151, +2.222, +2.274, +2.345, +2.418, +2.486, +2.556, +2.617, +2.711, +2.807, +2.927, +3.036, +3.159, +3.265, +3.424, +3.591, +3.774, +4.071, +4.532, +4.967, +5.484, +5.731, +5.913, +6.417, +6.586, +6.586, +6.586, +6.586}, +0.750, +0.771, 1.615},
	{"DC6-5x8Bytes-101", 20480, 4096, 0, { -5.159, -5.159, -5.159, -5.159, -5.126, -4.673, -4.108, -3.882, -3.506, -3.058, -2.551, -2.244, -2.073, -1.905, -1.765, -1.642, -1.527, -1.436, -1.321, -1.246, -1.170, -1.110, -1.065, -1.002, -0.955, -0.875, -0.816, -0.748, -0.678, -0.620, -0.562, -0.505, -0.425, -0.367, -0.322, -0.261, -0.209, -0.157, -0.115, -0.071, -0.022, +0.027, +0.067, +0.109, +0.150, +0.185, +0.220, +0.258, +0.295, +0.343, +0.383, +0.418, +0.461, +0.499, +0.539, +0.573, +0.606, +0.641, +0.674, +0.724, +0.757, +0.791, +0.829, +0.869, +0.910, +0.952, +0.996, +1.053, +1.089, +1.129, +1.166, +1.210, +1.251, +1.287, +1.324, +1.370, +1.419, +1.482, +1.533, +1.585, +1.615, +1.672, +1.711, +1.778, +1.832, +1.899, +1.947, +2.000, +2.049, +2.105, +2.166, +2.232, +2.309, +2.368, +2.436, +2.501, +2.566, +2.637, +2.734, +2.844, +2.954, +3.070, +3.180, +3.342, +3.499, +3.698, +4.017, +4.577, +5.027, +5.540, +5.668, +5.949, +6.052, +6.057, +6.057, +6.057, +6.057}, +0.699, +0.674, 1.604},
	{"DC6-5x8Bytes-101", 24576, 4096, 0, { -4.401, -4.401, -4.401, -4.401, -4.382, -4.340, -4.066, -3.899, -3.488, -3.020, -2.565, -2.273, -2.070, -1.950, -1.814, -1.669, -1.538, -1.452, -1.344, -1.266, -1.173, -1.105, -1.038, -0.951, -0.853, -0.791, -0.745, -0.686, -0.627, -0.556, -0.490, -0.445, -0.393, -0.343, -0.293, -0.258, -0.216, -0.173, -0.124, -0.069, -0.029, +0.011, +0.056, +0.099, +0.147, +0.185, +0.240, +0.285, +0.323, +0.366, +0.412, +0.457, +0.498, +0.529, +0.577, +0.610, +0.642, +0.687, +0.750, +0.782, +0.829, +0.864, +0.920, +0.961, +0.993, +1.044, +1.082, +1.121, +1.167, +1.202, +1.244, +1.280, +1.329, +1.373, +1.418, +1.465, +1.504, +1.541, +1.577, +1.623, +1.679, +1.726, +1.763, +1.799, +1.849, +1.917, +1.968, +2.011, +2.064, +2.111, +2.154, +2.216, +2.277, +2.366, +2.429, +2.510, +2.577, +2.671, +2.763, +2.889, +3.005, +3.126, +3.244, +3.413, +3.547, +3.758, +4.003, +4.400, +4.789, +5.193, +6.083, +6.437, +6.698, +6.762, +6.762, +6.762, +6.762}, +0.728, +0.750, 1.606},
	{"DC6-5x8Bytes-101", 28672, 4096, 0, { -5.360, -5.360, -5.360, -5.360, -5.204, -4.686, -4.508, -3.929, -3.366, -3.073, -2.623, -2.299, -2.068, -1.861, -1.680, -1.554, -1.445, -1.333, -1.242, -1.160, -1.067, -0.993, -0.917, -0.838, -0.772, -0.712, -0.647, -0.586, -0.545, -0.494, -0.447, -0.396, -0.337, -0.294, -0.247, -0.207, -0.157, -0.114, -0.075, -0.036, +0.005, +0.054, +0.100, +0.145, +0.187, +0.227, +0.266, +0.298, +0.337, +0.372, +0.400, +0.434, +0.481, +0.524, +0.551, +0.600, +0.643, +0.690, +0.736, +0.776, +0.821, +0.872, +0.927, +0.975, +1.018, +1.061, +1.107, +1.148, +1.185, +1.231, +1.276, +1.322, +1.360, +1.396, +1.429, +1.481, +1.525, +1.564, +1.608, +1.642, +1.698, +1.747, +1.797, +1.853, +1.911, +1.965, +2.012, +2.077, +2.118, +2.169, +2.238, +2.308, +2.384, +2.471, +2.538, +2.634, +2.735, +2.796, +2.892, +2.975, +3.087, +3.202, +3.335, +3.492, +3.671, +3.818, +4.106, +4.459, +4.953, +5.530, +5.877, +6.009, +6.242, +6.351, +6.351, +6.351, +6.351}, +0.778, +0.736, 1.617},
	{"DC6-5x8Bytes-101", 32768, 4096, 0, { -5.383, -5.383, -5.383, -5.383, -5.216, -4.736, -4.304, -3.989, -3.400, -2.887, -2.396, -2.160, -2.028, -1.833, -1.660, -1.491, -1.401, -1.295, -1.196, -1.120, -1.040, -0.966, -0.903, -0.849, -0.792, -0.741, -0.672, -0.595, -0.535, -0.476, -0.417, -0.372, -0.311, -0.266, -0.217, -0.179, -0.140, -0.094, -0.059, -0.010, +0.021, +0.060, +0.109, +0.147, +0.179, +0.221, +0.282, +0.325, +0.364, +0.408, +0.456, +0.490, +0.535, +0.574, +0.615, +0.658, +0.693, +0.733, +0.785, +0.835, +0.886, +0.922, +0.961, +1.003, +1.050, +1.086, +1.121, +1.168, +1.205, +1.244, +1.285, +1.323, +1.372, +1.423, +1.476, +1.523, +1.572, +1.623, +1.657, +1.717, +1.770, +1.806, +1.866, +1.918, +1.958, +2.005, +2.057, +2.122, +2.176, +2.227, +2.300, +2.346, +2.410, +2.467, +2.537, +2.617, +2.692, +2.785, +2.889, +2.982, +3.130, +3.223, +3.367, +3.470, +3.630, +3.759, +4.027, +4.515, +4.943, +5.588, +5.806, +6.270, +6.734, +6.856, +6.856, +6.856, +6.856}, +0.808, +0.785, 1.605},
	{"DC6-5x8Bytes-101", 40960, 4096, 0, { -5.228, -5.228, -5.228, -5.228, -4.971, -4.318, -4.125, -3.997, -3.360, -2.895, -2.389, -2.143, -1.946, -1.794, -1.617, -1.526, -1.433, -1.367, -1.264, -1.178, -1.094, -0.992, -0.922, -0.859, -0.801, -0.724, -0.662, -0.582, -0.510, -0.463, -0.408, -0.336, -0.273, -0.216, -0.173, -0.134, -0.081, -0.037, +0.010, +0.056, +0.098, +0.148, +0.180, +0.215, +0.256, +0.301, +0.344, +0.378, +0.414, +0.457, +0.489, +0.532, +0.568, +0.605, +0.653, +0.699, +0.737, +0.780, +0.819, +0.857, +0.887, +0.937, +0.973, +1.012, +1.060, +1.098, +1.143, +1.180, +1.225, +1.272, +1.310, +1.351, +1.403, +1.462, +1.504, +1.548, +1.603, +1.648, +1.677, +1.724, +1.767, +1.816, +1.864, +1.918, +1.963, +2.020, +2.093, +2.159, +2.208, +2.275, +2.328, +2.385, +2.466, +2.535, +2.597, +2.667, +2.765, +2.859, +2.961, +3.073, +3.161, +3.276, +3.379, +3.549, +3.727, +3.995, +4.230, +4.675, +4.933, +5.315, +5.507, +5.665, +6.452, +6.773, +6.773, +6.773, +6.773}, +0.842, +0.819, 1.622},
	{"DC6-5x8Bytes-101", 49152, 4096, 0, { -4.791, -4.791, -4.791, -4.791, -4.696, -4.468, -4.175, -3.811, -3.216, -2.927, -2.459, -2.218, -1.962, -1.763, -1.578, -1.430, -1.325, -1.237, -1.167, -1.104, -1.041, -0.942, -0.873, -0.800, -0.743, -0.688, -0.627, -0.567, -0.515, -0.455, -0.399, -0.348, -0.294, -0.235, -0.193, -0.149, -0.105, -0.066, -0.026, +0.031, +0.073, +0.123, +0.179, +0.227, +0.280, +0.327, +0.367, +0.418, +0.450, +0.484, +0.526, +0.577, +0.631, +0.668, +0.714, +0.752, +0.790, +0.833, +0.868, +0.917, +0.955, +0.990, +1.031, +1.066, +1.112, +1.143, +1.185, +1.237, +1.285, +1.325, +1.372, +1.408, +1.454, +1.483, +1.526, +1.572, +1.595, +1.648, +1.695, +1.738, +1.788, +1.846, +1.893, +1.929, +1.978, +2.034, +2.079, +2.141, +2.213, +2.276, +2.341, +2.403, +2.469, +2.546, +2.649, +2.707, +2.770, +2.862, +2.935, +3.007, +3.103, +3.228, +3.369, +3.541, +3.725, +3.923, +4.230, +4.627, +5.009, +5.673, +6.049, +6.185, +6.491, +6.592, +6.592, +6.592, +6.592}, +0.864, +0.868, 1.614},
	{"DC6-5x8Bytes-101", 57344, 4096, 0, { -4.720, -4.720, -4.720, -4.720, -4.618, -4.401, -4.203, -3.826, -3.319, -2.757, -2.332, -2.048, -1.855, -1.705, -1.593, -1.446, -1.333, -1.242, -1.140, -1.049, -0.966, -0.870, -0.782, -0.722, -0.655, -0.588, -0.537, -0.489, -0.430, -0.370, -0.313, -0.262, -0.217, -0.165, -0.113, -0.069, -0.029, +0.008, +0.053, +0.093, +0.128, +0.171, +0.223, +0.270, +0.310, +0.347, +0.385, +0.436, +0.476, +0.511, +0.552, +0.593, +0.628, +0.677, +0.713, +0.753, +0.794, +0.826, +0.863, +0.906, +0.952, +0.987, +1.026, +1.075, +1.115, +1.161, +1.200, +1.238, +1.283, +1.324, +1.372, +1.418, +1.463, +1.501, +1.536, +1.573, +1.634, +1.675, +1.709, +1.753, +1.797, +1.842, +1.878, +1.914, +1.965, +2.018, +2.085, +2.144, +2.195, +2.251, +2.317, +2.384, +2.439, +2.500, +2.564, +2.623, +2.682, +2.757, +2.837, +2.934, +3.040, +3.126, +3.271, +3.438, +3.579, +3.813, +4.048, +4.621, +5.045, +5.558, +5.891, +6.170, +6.350, +6.384, +6.384, +6.384, +6.384}, +0.876, +0.863, 1.565},
	{"DC6-5x8Bytes-101", 65536, 4096, 0, { -4.595, -4.595, -4.595, -4.595, -4.560, -4.381, -4.259, -3.700, -3.238, -2.770, -2.367, -2.048, -1.836, -1.700, -1.595, -1.451, -1.330, -1.241, -1.143, -1.058, -0.976, -0.892, -0.820, -0.760, -0.685, -0.623, -0.557, -0.510, -0.454, -0.402, -0.336, -0.288, -0.237, -0.183, -0.128, -0.083, -0.041, -0.014, +0.027, +0.074, +0.129, +0.168, +0.210, +0.261, +0.317, +0.359, +0.397, +0.432, +0.472, +0.512, +0.552, +0.597, +0.633, +0.674, +0.713, +0.750, +0.788, +0.821, +0.859, +0.893, +0.938, +0.984, +1.024, +1.062, +1.112, +1.157, +1.208, +1.257, +1.295, +1.326, +1.369, +1.400, +1.451, +1.480, +1.527, +1.574, +1.644, +1.688, +1.732, +1.770, +1.805, +1.865, +1.905, +1.955, +2.012, +2.055, +2.113, +2.171, +2.215, +2.265, +2.314, +2.373, +2.421, +2.479, +2.557, +2.637, +2.734, +2.819, +2.885, +2.959, +3.053, +3.148, +3.289, +3.396, +3.556, +3.782, +3.987, +4.545, +4.965, +5.570, +6.162, +6.335, +6.416, +6.421, +6.421, +6.421, +6.421}, +0.873, +0.859, 1.568},
	{"DC6-5x8Bytes-101", 81920, 4096, 0, { -4.970, -4.970, -4.970, -4.970, -4.743, -4.093, -3.877, -3.513, -3.184, -2.779, -2.370, -2.112, -1.868, -1.735, -1.615, -1.499, -1.386, -1.267, -1.173, -1.058, -1.000, -0.911, -0.835, -0.750, -0.694, -0.613, -0.551, -0.498, -0.434, -0.376, -0.335, -0.278, -0.230, -0.185, -0.138, -0.085, -0.034, +0.004, +0.056, +0.093, +0.129, +0.177, +0.223, +0.268, +0.306, +0.341, +0.371, +0.410, +0.442, +0.490, +0.539, +0.569, +0.617, +0.665, +0.705, +0.746, +0.788, +0.843, +0.891, +0.935, +0.978, +1.015, +1.060, +1.102, +1.155, +1.195, +1.228, +1.262, +1.306, +1.336, +1.376, +1.426, +1.471, +1.516, +1.560, +1.594, +1.634, +1.678, +1.713, +1.753, +1.800, +1.845, +1.889, +1.953, +2.008, +2.058, +2.102, +2.151, +2.219, +2.274, +2.321, +2.413, +2.472, +2.522, +2.587, +2.667, +2.737, +2.851, +2.927, +3.024, +3.123, +3.240, +3.371, +3.533, +3.700, +3.905, +4.169, +4.628, +4.992, +5.543, +5.782, +6.225, +7.286, +7.662, +7.662, +7.662, +7.662}, +0.886, +0.891, 1.593},
	{"DC6-5x8Bytes-101", 98304, 4096, 0, { -4.750, -4.750, -4.750, -4.750, -4.640, -4.381, -4.190, -3.716, -3.351, -2.871, -2.425, -2.139, -1.874, -1.702, -1.555, -1.429, -1.299, -1.209, -1.122, -1.051, -0.973, -0.894, -0.820, -0.761, -0.695, -0.612, -0.568, -0.503, -0.443, -0.380, -0.326, -0.267, -0.215, -0.167, -0.116, -0.055, -0.007, +0.050, +0.086, +0.129, +0.176, +0.215, +0.261, +0.296, +0.340, +0.387, +0.428, +0.473, +0.516, +0.556, +0.595, +0.639, +0.679, +0.719, +0.765, +0.807, +0.844, +0.883, +0.921, +0.967, +1.015, +1.048, +1.085, +1.128, +1.164, +1.201, +1.245, +1.306, +1.345, +1.381, +1.418, +1.461, +1.511, +1.564, +1.594, +1.628, +1.664, +1.712, +1.765, +1.809, +1.853, +1.883, +1.926, +1.959, +2.003, +2.052, +2.105, +2.169, +2.240, +2.305, +2.377, +2.452, +2.510, +2.578, +2.630, +2.692, +2.772, +2.866, +2.919, +3.009, +3.123, +3.227, +3.363, +3.503, +3.728, +3.951, +4.222, +4.642, +4.967, +5.332, +5.686, +5.841, +6.448, +6.714, +6.714, +6.714, +6.714}, +0.910, +0.921, 1.597},
	{"DC6-5x8Bytes-101",114688, 4096, 0, { -4.352, -4.352, -4.352, -4.352, -4.319, -4.237, -4.115, -3.856, -3.384, -2.920, -2.430, -2.057, -1.867, -1.658, -1.521, -1.393, -1.323, -1.222, -1.116, -1.022, -0.928, -0.827, -0.766, -0.697, -0.629, -0.573, -0.493, -0.428, -0.379, -0.343, -0.294, -0.242, -0.191, -0.146, -0.105, -0.049, -0.010, +0.041, +0.074, +0.116, +0.157, +0.228, +0.276, +0.315, +0.360, +0.410, +0.449, +0.484, +0.515, +0.553, +0.596, +0.637, +0.671, +0.714, +0.748, +0.782, +0.831, +0.871, +0.909, +0.938, +0.981, +1.027, +1.074, +1.108, +1.159, +1.188, +1.230, +1.270, +1.310, +1.351, +1.388, +1.426, +1.456, +1.494, +1.542, +1.581, +1.622, +1.666, +1.701, +1.747, +1.799, +1.844, +1.878, +1.929, +1.974, +2.031, +2.090, +2.149, +2.196, +2.264, +2.312, +2.382, +2.455, +2.534, +2.619, +2.682, +2.756, +2.830, +2.924, +3.020, +3.168, +3.275, +3.403, +3.547, +3.727, +3.950, +4.187, +4.589, +4.954, +5.461, +5.745, +5.829, +6.357, +6.576, +6.576, +6.576, +6.576}, +0.906, +0.909, 1.581},
	{"DC6-5x8Bytes-101",131072, 4096, 0, { -4.406, -4.406, -4.406, -4.406, -4.297, -3.992, -3.897, -3.598, -3.191, -2.814, -2.423, -2.158, -1.933, -1.717, -1.550, -1.430, -1.312, -1.208, -1.121, -1.046, -0.951, -0.840, -0.758, -0.692, -0.623, -0.558, -0.506, -0.454, -0.389, -0.327, -0.273, -0.208, -0.170, -0.112, -0.057, -0.016, +0.032, +0.066, +0.107, +0.154, +0.197, +0.242, +0.289, +0.338, +0.384, +0.418, +0.463, +0.506, +0.547, +0.593, +0.628, +0.661, +0.698, +0.734, +0.772, +0.813, +0.848, +0.881, +0.924, +0.964, +0.998, +1.031, +1.068, +1.110, +1.142, +1.184, +1.212, +1.241, +1.281, +1.332, +1.379, +1.427, +1.463, +1.506, +1.541, +1.576, +1.618, +1.663, +1.723, +1.770, +1.812, +1.855, +1.902, +1.975, +2.023, +2.085, +2.142, +2.190, +2.242, +2.296, +2.346, +2.421, +2.497, +2.561, +2.639, +2.697, +2.762, +2.826, +2.913, +3.004, +3.130, +3.256, +3.353, +3.482, +3.628, +3.873, +4.192, +4.606, +4.842, +5.184, +5.599, +6.325, +6.659, +6.679, +6.679, +6.679, +6.679}, +0.914, +0.924, 1.574},
	{"DC6-5x8Bytes-101",163840, 4096, 0, { -4.205, -4.205, -4.205, -4.205, -4.150, -4.001, -3.862, -3.546, -3.124, -2.818, -2.354, -2.074, -1.870, -1.692, -1.583, -1.464, -1.338, -1.202, -1.113, -1.021, -0.938, -0.845, -0.780, -0.697, -0.630, -0.568, -0.500, -0.434, -0.382, -0.316, -0.271, -0.220, -0.180, -0.133, -0.091, -0.048, +0.001, +0.041, +0.080, +0.120, +0.160, +0.201, +0.239, +0.279, +0.321, +0.367, +0.414, +0.468, +0.505, +0.547, +0.589, +0.638, +0.674, +0.714, +0.747, +0.802, +0.846, +0.880, +0.921, +0.965, +1.012, +1.054, +1.100, +1.132, +1.166, +1.197, +1.240, +1.275, +1.313, +1.348, +1.384, +1.422, +1.463, +1.517, +1.554, +1.595, +1.640, +1.675, +1.742, +1.779, +1.827, +1.879, +1.930, +1.969, +2.008, +2.055, +2.106, +2.170, +2.233, +2.289, +2.338, +2.403, +2.463, +2.537, +2.607, +2.675, +2.737, +2.812, +2.921, +3.027, +3.125, +3.226, +3.378, +3.506, +3.689, +3.884, +4.157, +4.606, +5.001, +5.705, +6.054, +6.061, +6.490, +6.690, +6.690, +6.690, +6.690}, +0.911, +0.921, 1.577},
	{"DC6-5x8Bytes-101",196608, 4096, 0, { -5.226, -5.226, -5.226, -5.226, -4.984, -4.171, -3.726, -3.430, -3.103, -2.802, -2.458, -2.143, -1.911, -1.745, -1.587, -1.482, -1.384, -1.290, -1.184, -1.062, -0.978, -0.888, -0.825, -0.766, -0.698, -0.642, -0.566, -0.506, -0.454, -0.398, -0.335, -0.281, -0.228, -0.170, -0.113, -0.057, -0.018, +0.028, +0.075, +0.124, +0.181, +0.229, +0.268, +0.323, +0.358, +0.401, +0.447, +0.490, +0.528, +0.568, +0.598, +0.646, +0.693, +0.722, +0.764, +0.808, +0.835, +0.868, +0.902, +0.950, +0.998, +1.033, +1.083, +1.117, +1.152, +1.186, +1.219, +1.272, +1.304, +1.348, +1.385, +1.436, +1.484, +1.527, +1.575, +1.617, +1.657, +1.703, +1.753, +1.802, +1.841, +1.893, +1.934, +1.983, +2.023, +2.071, +2.127, +2.197, +2.239, +2.292, +2.334, +2.381, +2.437, +2.492, +2.563, +2.629, +2.728, +2.809, +2.898, +3.005, +3.122, +3.259, +3.367, +3.511, +3.649, +3.901, +4.176, +4.656, +5.219, +5.570, +5.975, +6.518, +6.839, +6.891, +6.891, +6.891, +6.891}, +0.901, +0.902, 1.594},
	{"DC6-5x8Bytes-101",229376, 4096, 0, { -4.043, -4.043, -4.043, -4.043, -4.035, -3.980, -3.914, -3.536, -3.175, -2.715, -2.289, -2.029, -1.864, -1.693, -1.563, -1.414, -1.289, -1.198, -1.110, -1.025, -0.951, -0.884, -0.823, -0.761, -0.686, -0.635, -0.567, -0.512, -0.459, -0.401, -0.340, -0.283, -0.229, -0.183, -0.126, -0.082, -0.027, +0.031, +0.087, +0.134, +0.180, +0.229, +0.267, +0.308, +0.358, +0.410, +0.471, +0.508, +0.537, +0.582, +0.615, +0.657, +0.712, +0.747, +0.788, +0.834, +0.867, +0.896, +0.944, +0.979, +1.016, +1.050, +1.097, +1.134, +1.179, +1.227, +1.269, +1.306, +1.349, +1.395, +1.431, +1.474, +1.528, +1.567, +1.594, +1.629, +1.679, +1.710, +1.754, +1.807, +1.852, +1.892, +1.941, +1.985, +2.025, +2.067, +2.117, +2.167, +2.237, +2.307, +2.360, +2.418, +2.476, +2.548, +2.616, +2.686, +2.762, +2.843, +2.950, +3.032, +3.119, +3.284, +3.412, +3.551, +3.715, +3.916, +4.139, +4.515, +5.021, +5.663, +6.125, +6.569, +6.772, +6.863, +6.863, +6.863, +6.863}, +0.922, +0.944, 1.586},
	{"DC6-5x8Bytes-101",262144, 4096, 0, { -4.280, -4.280, -4.280, -4.280, -4.244, -4.062, -3.834, -3.514, -3.166, -2.727, -2.337, -2.006, -1.825, -1.644, -1.536, -1.425, -1.290, -1.168, -1.071, -0.987, -0.915, -0.830, -0.765, -0.709, -0.650, -0.581, -0.526, -0.480, -0.406, -0.342, -0.284, -0.233, -0.180, -0.137, -0.080, -0.043, -0.002, +0.039, +0.087, +0.133, +0.165, +0.215, +0.261, +0.299, +0.338, +0.368, +0.408, +0.452, +0.489, +0.540, +0.590, +0.639, +0.688, +0.724, +0.764, +0.805, +0.838, +0.872, +0.912, +0.949, +0.990, +1.031, +1.077, +1.126, +1.159, +1.193, +1.234, +1.270, +1.306, +1.346, +1.389, +1.428, +1.469, +1.518, +1.571, +1.626, +1.668, +1.711, +1.755, +1.810, +1.842, +1.890, +1.936, +1.977, +2.022, +2.075, +2.140, +2.205, +2.269, +2.326, +2.385, +2.436, +2.504, +2.594, +2.667, +2.728, +2.803, +2.867, +2.973, +3.067, +3.172, +3.269, +3.422, +3.575, +3.792, +3.987, +4.239, +4.668, +5.026, +5.455, +5.972, +6.574, +7.292, +7.469, +7.469, +7.469, +7.469}, +0.929, +0.912, 1.589},
	{"DC6-5x8Bytes-101",327680, 1024, 0, { -4.057, -4.057, -4.057, -4.057, -4.057, -4.047, -3.618, -3.183, -3.041, -2.794, -2.272, -2.001, -1.864, -1.658, -1.496, -1.396, -1.292, -1.206, -1.064, -0.950, -0.827, -0.778, -0.733, -0.653, -0.608, -0.517, -0.477, -0.416, -0.348, -0.291, -0.234, -0.170, -0.109, -0.076, -0.027, +0.037, +0.082, +0.138, +0.178, +0.207, +0.230, +0.279, +0.349, +0.390, +0.420, +0.450, +0.491, +0.551, +0.613, +0.659, +0.691, +0.724, +0.762, +0.792, +0.834, +0.857, +0.890, +0.920, +0.953, +1.000, +1.042, +1.083, +1.131, +1.174, +1.215, +1.258, +1.298, +1.358, +1.392, +1.408, +1.458, +1.485, +1.535, +1.579, +1.623, +1.662, +1.697, +1.776, +1.815, +1.871, +1.912, +1.986, +2.022, +2.079, +2.110, +2.200, +2.264, +2.306, +2.352, +2.393, +2.434, +2.547, +2.598, +2.662, +2.745, +2.796, +2.885, +2.944, +3.014, +3.105, +3.199, +3.293, +3.411, +3.492, +3.670, +3.817, +4.110, +4.710, +5.353, +5.895, +6.308, +6.603, +6.610, +6.610, +6.610, +6.610, +6.610}, +0.986, +0.953, 1.582},
	{"DC6-5x8Bytes-101",393216, 1024, 0, { -3.432, -3.432, -3.432, -3.432, -3.432, -3.430, -3.373, -3.276, -2.946, -2.667, -2.279, -2.034, -1.887, -1.717, -1.591, -1.496, -1.389, -1.312, -1.189, -1.073, -0.985, -0.853, -0.783, -0.667, -0.616, -0.582, -0.514, -0.425, -0.381, -0.323, -0.295, -0.268, -0.191, -0.152, -0.093, -0.056, +0.047, +0.114, +0.156, +0.220, +0.280, +0.352, +0.386, +0.403, +0.431, +0.480, +0.520, +0.560, +0.599, +0.630, +0.669, +0.691, +0.738, +0.769, +0.819, +0.882, +0.915, +0.955, +0.977, +1.043, +1.066, +1.127, +1.153, +1.202, +1.258, +1.307, +1.349, +1.392, +1.434, +1.466, +1.511, +1.533, +1.575, +1.605, +1.665, +1.714, +1.744, +1.777, +1.838, +1.912, +1.947, +1.995, +2.036, +2.080, +2.135, +2.173, +2.216, +2.281, +2.339, +2.400, +2.432, +2.495, +2.558, +2.628, +2.685, +2.714, +2.783, +2.836, +2.914, +3.010, +3.095, +3.192, +3.308, +3.460, +3.678, +3.932, +4.158, +4.610, +4.901, +5.337, +5.659, +5.945, +5.952, +5.952, +5.952, +5.952, +5.952}, +0.966, +0.977, 1.580},
	{"DC6-5x8Bytes-101",458752, 1024, 0, { -3.610, -3.610, -3.610, -3.610, -3.610, -3.606, -3.467, -3.208, -2.889, -2.735, -2.378, -2.014, -1.763, -1.592, -1.430, -1.321, -1.256, -1.153, -1.032, -0.966, -0.867, -0.792, -0.711, -0.667, -0.593, -0.537, -0.473, -0.415, -0.320, -0.270, -0.222, -0.177, -0.119, -0.065, -0.025, +0.030, +0.082, +0.139, +0.176, +0.212, +0.267, +0.295, +0.317, +0.361, +0.410, +0.446, +0.498, +0.560, +0.592, +0.623, +0.663, +0.718, +0.766, +0.814, +0.862, +0.900, +0.945, +0.961, +1.015, +1.036, +1.072, +1.112, +1.144, +1.204, +1.248, +1.276, +1.316, +1.347, +1.418, +1.457, +1.481, +1.497, +1.533, +1.589, +1.611, +1.666, +1.688, +1.745, +1.775, +1.816, +1.884, +1.906, +1.955, +2.018, +2.053, +2.096, +2.134, +2.188, +2.226, +2.323, +2.389, +2.463, +2.505, +2.563, +2.659, +2.728, +2.826, +2.945, +3.073, +3.143, +3.241, +3.324, +3.499, +3.629, +3.790, +4.020, +4.268, +4.588, +4.846, +5.272, +5.625, +5.952, +5.959, +5.959, +5.959, +5.959, +5.959}, +0.984, +1.015, 1.568},
	{"DC6-5x8Bytes-101",524288, 1024, 0, { -3.359, -3.359, -3.359, -3.359, -3.359, -3.358, -3.304, -3.146, -2.789, -2.179, -2.010, -1.761, -1.656, -1.491, -1.387, -1.291, -1.171, -1.110, -1.042, -0.952, -0.865, -0.811, -0.722, -0.643, -0.572, -0.521, -0.450, -0.392, -0.334, -0.287, -0.233, -0.188, -0.134, -0.066, -0.032, +0.014, +0.069, +0.090, +0.127, +0.158, +0.197, +0.236, +0.281, +0.323, +0.380, +0.426, +0.484, +0.533, +0.576, +0.621, +0.677, +0.735, +0.775, +0.810, +0.844, +0.885, +0.931, +0.979, +1.016, +1.039, +1.066, +1.097, +1.135, +1.183, +1.222, +1.269, +1.299, +1.327, +1.380, +1.414, +1.454, +1.505, +1.554, +1.611, +1.663, +1.704, +1.738, +1.784, +1.824, +1.870, +1.913, +1.945, +1.991, +2.023, +2.052, +2.098, +2.146, +2.192, +2.257, +2.317, +2.361, +2.432, +2.487, +2.547, +2.607, +2.662, +2.763, +2.856, +2.909, +3.003, +3.146, +3.252, +3.342, +3.468, +3.682, +3.883, +4.350, +4.677, +5.014, +5.350, +5.477, +5.488, +5.488, +5.488, +5.488, +5.488, +5.488}, +0.986, +1.016, 1.527},
	{"DC6-5x8Bytes-101",655360, 1024, 0, { -3.447, -3.447, -3.447, -3.447, -3.447, -3.446, -3.416, -3.384, -3.061, -2.604, -2.214, -1.970, -1.832, -1.568, -1.313, -1.129, -1.030, -0.994, -0.911, -0.860, -0.785, -0.720, -0.681, -0.572, -0.498, -0.439, -0.393, -0.369, -0.299, -0.232, -0.176, -0.097, -0.041, +0.033, +0.071, +0.116, +0.151, +0.180, +0.222, +0.273, +0.331, +0.358, +0.403, +0.456, +0.493, +0.541, +0.615, +0.647, +0.673, +0.702, +0.722, +0.752, +0.799, +0.818, +0.849, +0.893, +0.918, +0.972, +1.021, +1.051, +1.095, +1.135, +1.192, +1.225, +1.261, +1.331, +1.364, +1.398, +1.428, +1.458, +1.508, +1.533, +1.583, +1.645, +1.692, +1.729, +1.752, +1.791, +1.816, +1.858, +1.888, +1.932, +1.979, +2.016, +2.094, +2.177, +2.252, +2.291, +2.324, +2.361, +2.422, +2.477, +2.553, +2.638, +2.690, +2.754, +2.812, +2.872, +2.978, +3.026, +3.086, +3.249, +3.390, +3.538, +3.709, +3.927, +4.166, +4.539, +4.846, +5.378, +5.738, +5.808, +5.809, +5.809, +5.809, +5.809, +5.809}, +1.022, +1.021, 1.530},
	{"DC6-5x8Bytes-101",786432, 1024, 0, { -3.727, -3.727, -3.727, -3.727, -3.727, -3.724, -3.602, -3.284, -2.843, -2.362, -2.192, -1.926, -1.786, -1.592, -1.389, -1.268, -1.185, -1.081, -0.977, -0.892, -0.825, -0.759, -0.680, -0.621, -0.519, -0.435, -0.397, -0.351, -0.296, -0.239, -0.172, -0.125, -0.080, +0.008, +0.035, +0.069, +0.108, +0.151, +0.188, +0.237, +0.278, +0.314, +0.337, +0.376, +0.420, +0.461, +0.502, +0.546, +0.564, +0.596, +0.622, +0.656, +0.684, +0.735, +0.790, +0.828, +0.879, +0.913, +0.951, +0.984, +1.064, +1.089, +1.138, +1.178, +1.208, +1.242, +1.275, +1.315, +1.363, +1.400, +1.430, +1.479, +1.504, +1.520, +1.568, +1.610, +1.660, +1.704, +1.734, +1.778, +1.865, +1.932, +1.957, +2.021, +2.078, +2.149, +2.194, +2.244, +2.305, +2.375, +2.415, +2.480, +2.534, +2.616, +2.667, +2.723, +2.809, +2.882, +2.995, +3.037, +3.089, +3.169, +3.350, +3.512, +3.752, +4.103, +4.264, +4.683, +5.166, +5.607, +5.796, +5.849, +5.850, +5.850, +5.850, +5.850, +5.850}, +0.987, +0.951, 1.541},
	{"DC6-5x8Bytes-101",917504, 1024, 0, { -3.708, -3.708, -3.708, -3.708, -3.708, -3.707, -3.700, -3.548, -2.972, -2.489, -2.005, -1.795, -1.632, -1.513, -1.391, -1.288, -1.201, -1.057, -0.953, -0.867, -0.813, -0.701, -0.630, -0.544, -0.493, -0.433, -0.359, -0.280, -0.240, -0.173, -0.129, -0.081, -0.034, +0.036, +0.090, +0.136, +0.180, +0.219, +0.249, +0.289, +0.342, +0.385, +0.415, +0.451, +0.481, +0.507, +0.551, +0.598, +0.627, +0.659, +0.685, +0.717, +0.751, +0.782, +0.835, +0.864, +0.915, +0.939, +0.967, +1.008, +1.045, +1.078, +1.117, +1.132, +1.175, +1.213, +1.244, +1.283, +1.324, +1.378, +1.421, +1.450, +1.491, +1.534, +1.580, +1.634, +1.683, +1.756, +1.787, +1.828, +1.866, +1.909, +1.932, +2.006, +2.060, +2.102, +2.153, +2.211, +2.268, +2.345, +2.395, +2.456, +2.488, +2.530, +2.597, +2.693, +2.793, +2.854, +2.949, +3.032, +3.142, +3.283, +3.404, +3.502, +3.691, +3.961, +4.255, +4.777, +5.314, +5.768, +6.152, +6.191, +6.191, +6.191, +6.191, +6.191, +6.191}, +1.005, +0.967, 1.524},
	{"DC6-5x8Bytes-101",1048576, 1024, 0, { -3.362, -3.362, -3.362, -3.362, -3.362, -3.360, -3.293, -3.161, -2.926, -2.737, -2.378, -2.126, -1.764, -1.546, -1.439, -1.343, -1.190, -1.101, -0.991, -0.851, -0.775, -0.743, -0.684, -0.574, -0.532, -0.488, -0.421, -0.366, -0.322, -0.283, -0.230, -0.171, -0.082, -0.032, +0.036, +0.064, +0.090, +0.139, +0.167, +0.199, +0.231, +0.274, +0.328, +0.359, +0.396, +0.464, +0.519, +0.555, +0.598, +0.632, +0.692, +0.728, +0.769, +0.819, +0.869, +0.888, +0.916, +0.964, +1.005, +1.062, +1.100, +1.139, +1.177, +1.211, +1.231, +1.258, +1.303, +1.344, +1.399, +1.435, +1.457, +1.494, +1.542, +1.587, +1.613, +1.664, +1.713, +1.740, +1.759, +1.784, +1.835, +1.886, +1.916, +1.978, +2.056, +2.108, +2.157, +2.194, +2.251, +2.307, +2.354, +2.428, +2.489, +2.538, +2.607, +2.714, +2.803, +2.870, +2.976, +3.136, +3.305, +3.386, +3.507, +3.645, +3.805, +3.994, +4.406, +4.791, +5.240, +5.736, +5.973, +6.112, +6.115, +6.115, +6.115, +6.115, +6.115}, +0.991, +1.005, 1.572},
	{"DC6-5x8Bytes-101",1310720, 1024, 0, { -3.545, -3.545, -3.545, -3.545, -3.545, -3.544, -3.497, -3.437, -3.087, -2.589, -2.201, -1.956, -1.756, -1.612, -1.442, -1.262, -1.149, -1.053, -0.983, -0.897, -0.780, -0.689, -0.600, -0.517, -0.458, -0.361, -0.281, -0.253, -0.198, -0.162, -0.100, -0.078, -0.033, +0.011, +0.058, +0.095, +0.120, +0.138, +0.169, +0.236, +0.290, +0.331, +0.366, +0.409, +0.431, +0.464, +0.516, +0.599, +0.622, +0.655, +0.691, +0.732, +0.760, +0.820, +0.874, +0.909, +0.958, +0.980, +1.027, +1.066, +1.104, +1.153, +1.197, +1.228, +1.255, +1.298, +1.351, +1.396, +1.438, +1.455, +1.482, +1.521, +1.560, +1.593, +1.634, +1.695, +1.756, +1.817, +1.870, +1.908, +1.953, +2.006, +2.051, +2.078, +2.139, +2.208, +2.265, +2.345, +2.392, +2.449, +2.527, +2.574, +2.630, +2.682, +2.772, +2.842, +2.921, +2.975, +3.056, +3.181, +3.296, +3.356, +3.452, +3.620, +3.742, +3.899, +4.171, +4.678, +5.119, +5.672, +5.837, +5.996, +6.000, +6.000, +6.000, +6.000, +6.000}, +1.041, +1.027, 1.563},
	{"DC6-5x8Bytes-101",1572864, 1024, 0, { -3.349, -3.349, -3.349, -3.349, -3.349, -3.349, -3.326, -3.293, -3.165, -2.317, -1.887, -1.789, -1.604, -1.425, -1.253, -1.179, -1.092, -1.047, -0.956, -0.878, -0.810, -0.732, -0.638, -0.538, -0.471, -0.429, -0.333, -0.285, -0.263, -0.223, -0.166, -0.126, -0.086, -0.031, +0.026, +0.095, +0.129, +0.174, +0.221, +0.267, +0.311, +0.357, +0.406, +0.451, +0.507, +0.564, +0.623, +0.658, +0.689, +0.740, +0.767, +0.796, +0.822, +0.890, +0.947, +1.004, +1.040, +1.086, +1.137, +1.174, +1.192, +1.276, +1.312, +1.347, +1.382, +1.411, +1.459, +1.487, +1.511, +1.544, +1.582, +1.617, +1.664, +1.695, +1.714, +1.749, +1.784, +1.812, +1.859, +1.899, +1.954, +1.996, +2.045, +2.091, +2.121, +2.171, +2.219, +2.286, +2.341, +2.402, +2.479, +2.540, +2.594, +2.661, +2.750, +2.817, +2.911, +2.983, +3.026, +3.130, +3.202, +3.298, +3.405, +3.502, +3.639, +3.762, +4.086, +4.453, +4.990, +5.593, +6.209, +6.374, +6.378, +6.378, +6.378, +6.378, +6.378}, +1.066, +1.137, 1.523},
	{"DC6-5x8Bytes-101",1835008, 1024, 0, { -4.322, -4.322, -4.322, -4.322, -4.322, -4.320, -4.205, -3.814, -3.122, -2.735, -2.112, -1.915, -1.639, -1.422, -1.298, -1.182, -1.094, -0.991, -0.858, -0.830, -0.759, -0.676, -0.620, -0.545, -0.496, -0.439, -0.382, -0.318, -0.280, -0.230, -0.156, -0.045, +0.015, +0.057, +0.102, +0.135, +0.203, +0.254, +0.292, +0.334, +0.375, +0.410, +0.446, +0.462, +0.500, +0.523, +0.594, +0.648, +0.681, +0.713, +0.749, +0.776, +0.815, +0.864, +0.897, +0.926, +0.964, +1.017, +1.039, +1.075, +1.128, +1.177, +1.228, +1.275, +1.322, +1.360, +1.375, +1.413, +1.427, +1.469, +1.497, +1.540, +1.580, +1.616, +1.653, +1.699, +1.760, +1.804, +1.823, +1.853, +1.890, +1.919, +1.989, +2.058, +2.092, +2.120, +2.201, +2.238, +2.289, +2.348, +2.418, +2.468, +2.519, +2.575, +2.620, +2.670, +2.782, +2.863, +2.970, +3.046, +3.210, +3.263, +3.441, +3.554, +3.680, +3.825, +4.190, +4.624, +5.095, +6.116, +6.199, +6.249, +6.250, +6.250, +6.250, +6.250, +6.250}, +1.039, +1.039, 1.531},
	{"DC6-5x8Bytes-101",2097152, 1024, 0, { -3.998, -3.998, -3.998, -3.998, -3.998, -3.995, -3.851, -3.659, -3.174, -2.686, -2.166, -1.893, -1.635, -1.495, -1.398, -1.219, -1.102, -0.951, -0.870, -0.792, -0.712, -0.642, -0.571, -0.492, -0.408, -0.344, -0.294, -0.240, -0.197, -0.127, -0.098, -0.061, +0.004, +0.034, +0.118, +0.157, +0.190, +0.247, +0.311, +0.344, +0.376, +0.420, +0.465, +0.500, +0.534, +0.579, +0.625, +0.658, +0.724, +0.762, +0.786, +0.808, +0.825, +0.856, +0.891, +0.940, +0.981, +1.021, +1.076, +1.109, +1.145, +1.192, +1.219, +1.252, +1.286, +1.332, +1.387, +1.434, +1.466, +1.518, +1.560, +1.598, +1.641, +1.675, +1.722, +1.748, +1.779, +1.826, +1.873, +1.911, +1.949, +1.984, +2.055, +2.089, +2.131, +2.162, +2.209, +2.271, +2.328, +2.402, +2.471, +2.563, +2.640, +2.700, +2.786, +2.812, +2.918, +2.963, +3.050, +3.116, +3.181, +3.267, +3.331, +3.435, +3.662, +3.874, +4.045, +4.560, +5.143, +5.674, +6.165, +6.464, +6.471, +6.471, +6.471, +6.471, +6.471}, +1.064, +1.076, 1.532},
	{"DC6-5x8Bytes-101",2621440, 1024, 0, { -4.568, -4.568, -4.568, -4.568, -4.568, -4.557, -4.085, -3.486, -3.045, -2.694, -2.321, -1.884, -1.671, -1.498, -1.374, -1.286, -1.179, -1.118, -1.013, -0.910, -0.830, -0.694, -0.620, -0.551, -0.499, -0.444, -0.390, -0.292, -0.237, -0.160, -0.112, -0.035, +0.032, +0.081, +0.132, +0.176, +0.229, +0.292, +0.355, +0.401, +0.440, +0.472, +0.503, +0.555, +0.601, +0.632, +0.670, +0.697, +0.722, +0.754, +0.776, +0.806, +0.858, +0.884, +0.939, +0.969, +1.023, +1.060, +1.087, +1.148, +1.185, +1.222, +1.258, +1.291, +1.319, +1.353, +1.391, +1.426, +1.462, +1.501, +1.552, +1.578, +1.616, +1.651, +1.693, +1.739, +1.801, +1.830, +1.864, +1.903, +1.957, +1.992, +2.020, +2.066, +2.131, +2.163, +2.232, +2.269, +2.308, +2.354, +2.391, +2.430, +2.490, +2.559, +2.707, +2.738, +2.813, +2.911, +3.005, +3.079, +3.156, +3.283, +3.410, +3.488, +3.593, +3.697, +3.978, +4.341, +4.833, +5.217, +5.271, +5.297, +5.298, +5.298, +5.298, +5.298, +5.298}, +1.044, +1.087, 1.518},
	{"DC6-5x8Bytes-101",3145728, 1024, 0, { -4.283, -4.283, -4.283, -4.283, -4.283, -4.282, -4.243, -3.821, -3.179, -2.896, -2.571, -2.014, -1.781, -1.691, -1.538, -1.329, -1.177, -1.039, -0.927, -0.800, -0.700, -0.619, -0.526, -0.424, -0.381, -0.324, -0.275, -0.223, -0.182, -0.139, -0.119, -0.047, +0.020, +0.075, +0.136, +0.208, +0.232, +0.301, +0.329, +0.359, +0.433, +0.470, +0.499, +0.540, +0.584, +0.611, +0.653, +0.679, +0.716, +0.757, +0.819, +0.852, +0.905, +0.956, +1.004, +1.028, +1.095, +1.153, +1.182, +1.207, +1.236, +1.263, +1.306, +1.339, +1.379, +1.405, +1.428, +1.458, +1.495, +1.527, +1.577, +1.610, +1.654, +1.681, +1.716, +1.765, +1.819, +1.873, +1.921, +1.981, +2.029, +2.053, +2.087, +2.120, +2.178, +2.219, +2.261, +2.312, +2.365, +2.415, +2.462, +2.537, +2.596, +2.668, +2.741, +2.835, +2.917, +2.979, +3.076, +3.141, +3.260, +3.331, +3.420, +3.491, +3.671, +3.931, +4.185, +4.493, +4.701, +5.099, +5.521, +5.805, +5.811, +5.811, +5.811, +5.811, +5.811}, +1.079, +1.182, 1.558},
	{"DC6-5x8Bytes-101",3670016, 1024, 0, { -3.704, -3.704, -3.704, -3.704, -3.704, -3.703, -3.630, -3.465, -3.164, -2.809, -2.512, -1.955, -1.696, -1.520, -1.383, -1.235, -1.140, -1.042, -0.902, -0.784, -0.681, -0.601, -0.550, -0.487, -0.423, -0.354, -0.281, -0.249, -0.202, -0.133, -0.069, -0.001, +0.039, +0.113, +0.155, +0.197, +0.243, +0.296, +0.348, +0.389, +0.414, +0.478, +0.543, +0.590, +0.628, +0.655, +0.684, +0.724, +0.770, +0.811, +0.864, +0.913, +0.937, +0.950, +0.979, +1.025, +1.053, +1.091, +1.135, +1.148, +1.188, +1.233, +1.292, +1.337, +1.377, +1.420, +1.469, +1.509, +1.552, +1.589, +1.637, +1.665, +1.693, +1.734, +1.774, +1.812, +1.835, +1.891, +1.945, +1.998, +2.025, +2.070, +2.113, +2.152, +2.208, +2.254, +2.295, +2.334, +2.364, +2.430, +2.489, +2.539, +2.612, +2.711, +2.800, +2.914, +2.982, +3.090, +3.193, +3.259, +3.324, +3.457, +3.601, +3.691, +3.820, +3.987, +4.277, +4.746, +5.020, +5.471, +5.669, +5.796, +5.799, +5.799, +5.799, +5.799, +5.799}, +1.118, +1.135, 1.576},

	{"FPF/16(14)",    24576, 270336, 0, { -5.720, -5.632, -5.274, -5.039, -4.882, -4.540, -4.261, -3.952, -3.548, -3.216, -2.829, -2.595, -2.410, -2.260, -2.136, -2.025, -1.928, -1.838, -1.757, -1.678, -1.605, -1.537, -1.471, -1.411, -1.352, -1.298, -1.243, -1.191, -1.139, -1.090, -1.042, -0.994, -0.948, -0.903, -0.858, -0.815, -0.773, -0.731, -0.690, -0.650, -0.611, -0.572, -0.534, -0.495, -0.458, -0.421, -0.383, -0.346, -0.309, -0.271, -0.236, -0.200, -0.163, -0.128, -0.093, -0.057, -0.021, +0.014, +0.050, +0.086, +0.121, +0.156, +0.192, +0.228, +0.264, +0.301, +0.337, +0.373, +0.410, +0.448, +0.486, +0.523, +0.561, +0.599, +0.637, +0.677, +0.717, +0.757, +0.796, +0.837, +0.879, +0.921, +0.964, +1.009, +1.054, +1.099, +1.146, +1.195, +1.244, +1.294, +1.347, +1.401, +1.457, +1.515, +1.578, +1.644, +1.713, +1.786, +1.867, +1.948, +2.042, +2.143, +2.257, +2.388, +2.538, +2.726, +2.973, +3.369, +3.709, +4.141, +4.447, +4.769, +5.112, +5.437, +5.697, +6.010, +6.289},  +0.055,  +0.050,   1.413},
	{"FPF/16(14)",   131072, 270336, 8, { -6.206, -5.904, -5.724, -5.277, -4.960, -4.627, -4.354, -4.043, -3.610, -3.260, -2.887, -2.643, -2.462, -2.313, -2.188, -2.076, -1.975, -1.888, -1.806, -1.727, -1.654, -1.583, -1.519, -1.461, -1.403, -1.346, -1.290, -1.238, -1.186, -1.136, -1.088, -1.041, -0.994, -0.948, -0.904, -0.860, -0.818, -0.777, -0.737, -0.696, -0.657, -0.616, -0.578, -0.540, -0.502, -0.465, -0.428, -0.391, -0.354, -0.316, -0.280, -0.243, -0.208, -0.171, -0.136, -0.100, -0.064, -0.030, +0.004, +0.041, +0.077, +0.113, +0.149, +0.186, +0.223, +0.258, +0.295, +0.331, +0.369, +0.406, +0.442, +0.480, +0.517, +0.555, +0.593, +0.632, +0.671, +0.712, +0.753, +0.795, +0.837, +0.879, +0.922, +0.967, +1.012, +1.058, +1.107, +1.155, +1.207, +1.256, +1.310, +1.365, +1.421, +1.481, +1.544, +1.609, +1.680, +1.752, +1.830, +1.910, +2.002, +2.104, +2.222, +2.354, +2.504, +2.688, +2.937, +3.336, +3.692, +4.122, +4.416, +4.726, +5.091, +5.392, +5.495, +5.753, +6.294},  +0.011,  +0.004,   1.419},
	{"FPF/16(13)",    16384, 270336, 1, { -6.118, -5.664, -5.476, -5.119, -4.788, -4.485, -4.249, -3.967, -3.580, -3.233, -2.854, -2.616, -2.433, -2.292, -2.162, -2.053, -1.956, -1.866, -1.783, -1.706, -1.635, -1.567, -1.502, -1.442, -1.383, -1.327, -1.272, -1.219, -1.168, -1.119, -1.071, -1.025, -0.980, -0.934, -0.892, -0.849, -0.807, -0.765, -0.725, -0.686, -0.646, -0.606, -0.567, -0.527, -0.490, -0.452, -0.413, -0.375, -0.337, -0.301, -0.265, -0.229, -0.193, -0.158, -0.122, -0.087, -0.050, -0.015, +0.019, +0.055, +0.090, +0.125, +0.161, +0.196, +0.231, +0.268, +0.305, +0.342, +0.377, +0.415, +0.452, +0.490, +0.527, +0.565, +0.603, +0.642, +0.681, +0.722, +0.762, +0.804, +0.845, +0.888, +0.931, +0.976, +1.020, +1.067, +1.114, +1.163, +1.213, +1.266, +1.319, +1.372, +1.430, +1.490, +1.553, +1.621, +1.691, +1.765, +1.845, +1.928, +2.019, +2.120, +2.238, +2.367, +2.518, +2.704, +2.955, +3.353, +3.710, +4.159, +4.473, +4.749, +5.108, +5.346, +5.510, +5.955, +6.248},  +0.025,  +0.019,   1.415},
	{"FPF/16(12)",     8192, 270336, 0, { -5.656, -5.457, -5.183, -5.036, -4.837, -4.489, -4.253, -3.965, -3.564, -3.236, -2.858, -2.617, -2.439, -2.287, -2.166, -2.060, -1.965, -1.876, -1.794, -1.719, -1.643, -1.576, -1.511, -1.447, -1.389, -1.332, -1.278, -1.226, -1.175, -1.125, -1.078, -1.032, -0.986, -0.941, -0.898, -0.856, -0.814, -0.772, -0.733, -0.693, -0.654, -0.615, -0.576, -0.538, -0.501, -0.464, -0.426, -0.389, -0.351, -0.315, -0.278, -0.242, -0.206, -0.171, -0.135, -0.099, -0.063, -0.028, +0.008, +0.042, +0.078, +0.115, +0.151, +0.188, +0.224, +0.260, +0.296, +0.331, +0.368, +0.405, +0.443, +0.479, +0.518, +0.556, +0.594, +0.633, +0.673, +0.712, +0.753, +0.794, +0.835, +0.878, +0.921, +0.966, +1.013, +1.060, +1.108, +1.155, +1.205, +1.258, +1.313, +1.368, +1.426, +1.485, +1.548, +1.612, +1.682, +1.756, +1.834, +1.919, +2.009, +2.110, +2.222, +2.356, +2.509, +2.698, +2.944, +3.343, +3.721, +4.176, +4.507, +4.845, +5.238, +5.537, +5.828, +6.122, +6.576},  +0.017,  +0.008,   1.414},
	{"FPF/16(11)",     3584, 270336, 2, { -5.677, -5.557, -5.165, -5.024, -4.857, -4.520, -4.263, -3.977, -3.544, -3.199, -2.835, -2.604, -2.427, -2.279, -2.156, -2.047, -1.950, -1.865, -1.784, -1.707, -1.636, -1.568, -1.505, -1.444, -1.385, -1.329, -1.275, -1.224, -1.174, -1.125, -1.077, -1.030, -0.986, -0.942, -0.899, -0.857, -0.815, -0.774, -0.734, -0.693, -0.653, -0.614, -0.576, -0.539, -0.502, -0.463, -0.426, -0.391, -0.354, -0.318, -0.282, -0.246, -0.210, -0.175, -0.139, -0.104, -0.067, -0.033, +0.003, +0.039, +0.074, +0.110, +0.146, +0.181, +0.216, +0.252, +0.287, +0.324, +0.360, +0.398, +0.437, +0.474, +0.512, +0.552, +0.591, +0.630, +0.671, +0.711, +0.752, +0.794, +0.836, +0.879, +0.921, +0.965, +1.011, +1.057, +1.104, +1.154, +1.205, +1.256, +1.312, +1.368, +1.424, +1.486, +1.549, +1.618, +1.688, +1.762, +1.841, +1.928, +2.021, +2.122, +2.235, +2.369, +2.521, +2.716, +2.967, +3.364, +3.726, +4.180, +4.513, +4.807, +5.228, +5.460, +5.679, +6.147, +6.179},  +0.019,  +0.003,   1.413},
	{"FPF/16(10)",     1280, 270336, 0, { -5.522, -5.323, -5.090, -4.930, -4.708, -4.431, -4.166, -3.884, -3.511, -3.184, -2.827, -2.592, -2.418, -2.274, -2.156, -2.046, -1.950, -1.863, -1.780, -1.706, -1.635, -1.568, -1.504, -1.444, -1.385, -1.330, -1.277, -1.226, -1.176, -1.126, -1.079, -1.034, -0.988, -0.944, -0.900, -0.859, -0.818, -0.777, -0.736, -0.697, -0.658, -0.620, -0.582, -0.544, -0.506, -0.469, -0.432, -0.396, -0.358, -0.323, -0.286, -0.250, -0.213, -0.177, -0.142, -0.106, -0.069, -0.034, +0.002, +0.037, +0.072, +0.105, +0.142, +0.178, +0.213, +0.249, +0.287, +0.323, +0.358, +0.396, +0.433, +0.471, +0.510, +0.549, +0.588, +0.627, +0.666, +0.706, +0.747, +0.789, +0.833, +0.876, +0.921, +0.967, +1.013, +1.060, +1.108, +1.157, +1.207, +1.259, +1.313, +1.371, +1.431, +1.491, +1.555, +1.622, +1.692, +1.768, +1.849, +1.935, +2.031, +2.134, +2.250, +2.381, +2.538, +2.736, +2.995, +3.415, +3.798, +4.285, +4.597, +4.877, +5.229, +5.529, +5.872, +6.149, +6.693},  +0.021,  +0.002,   1.417},
	{"FPF/16(9)",       512, 270336, 2, { -5.387, -5.327, -5.165, -4.854, -4.595, -4.308, -4.081, -3.836, -3.465, -3.142, -2.800, -2.575, -2.404, -2.263, -2.144, -2.040, -1.946, -1.861, -1.781, -1.710, -1.640, -1.574, -1.513, -1.452, -1.395, -1.339, -1.285, -1.234, -1.183, -1.134, -1.087, -1.041, -0.996, -0.953, -0.910, -0.867, -0.825, -0.785, -0.745, -0.706, -0.666, -0.628, -0.591, -0.553, -0.515, -0.478, -0.441, -0.405, -0.369, -0.332, -0.296, -0.261, -0.225, -0.189, -0.153, -0.117, -0.081, -0.046, -0.013, +0.022, +0.057, +0.092, +0.128, +0.164, +0.201, +0.238, +0.275, +0.311, +0.349, +0.386, +0.422, +0.460, +0.498, +0.537, +0.575, +0.613, +0.653, +0.694, +0.734, +0.776, +0.817, +0.862, +0.906, +0.951, +0.997, +1.044, +1.093, +1.143, +1.194, +1.248, +1.304, +1.363, +1.422, +1.484, +1.551, +1.618, +1.688, +1.764, +1.847, +1.934, +2.031, +2.138, +2.257, +2.396, +2.555, +2.756, +3.019, +3.439, +3.821, +4.301, +4.604, +4.914, +5.305, +5.656, +5.992, +6.164, +6.298},  +0.016,  -0.013,   1.416},
	{"FPF/16(8)",       224, 270336, 0, { -5.132, -5.018, -4.831, -4.650, -4.438, -4.166, -3.957, -3.718, -3.373, -3.084, -2.762, -2.551, -2.388, -2.255, -2.138, -2.035, -1.942, -1.856, -1.775, -1.705, -1.638, -1.571, -1.509, -1.449, -1.393, -1.340, -1.287, -1.236, -1.188, -1.141, -1.096, -1.052, -1.009, -0.967, -0.925, -0.883, -0.843, -0.800, -0.760, -0.718, -0.678, -0.639, -0.602, -0.564, -0.528, -0.492, -0.455, -0.418, -0.381, -0.346, -0.310, -0.275, -0.239, -0.202, -0.167, -0.132, -0.097, -0.062, -0.025, +0.012, +0.047, +0.083, +0.118, +0.154, +0.189, +0.226, +0.264, +0.299, +0.335, +0.372, +0.411, +0.449, +0.487, +0.526, +0.565, +0.604, +0.645, +0.687, +0.729, +0.772, +0.815, +0.858, +0.901, +0.948, +0.996, +1.044, +1.094, +1.145, +1.197, +1.253, +1.307, +1.366, +1.427, +1.488, +1.554, +1.623, +1.695, +1.773, +1.856, +1.944, +2.045, +2.150, +2.270, +2.408, +2.574, +2.775, +3.052, +3.506, +3.904, +4.424, +4.771, +5.085, +5.411, +5.805, +6.137, +6.444, +6.591},  +0.015,  -0.025,   1.418},
	{"FPF/16(7)",        80, 270336, 0, { -4.980, -4.900, -4.713, -4.482, -4.303, -4.076, -3.871, -3.639, -3.305, -3.022, -2.702, -2.491, -2.337, -2.209, -2.102, -2.003, -1.917, -1.833, -1.759, -1.690, -1.625, -1.561, -1.502, -1.445, -1.391, -1.339, -1.287, -1.238, -1.191, -1.144, -1.099, -1.056, -1.012, -0.971, -0.929, -0.888, -0.848, -0.810, -0.771, -0.733, -0.697, -0.658, -0.622, -0.584, -0.547, -0.510, -0.474, -0.438, -0.403, -0.368, -0.332, -0.298, -0.262, -0.226, -0.190, -0.155, -0.120, -0.084, -0.049, -0.013, +0.023, +0.058, +0.093, +0.129, +0.165, +0.202, +0.239, +0.274, +0.311, +0.349, +0.388, +0.425, +0.465, +0.503, +0.543, +0.583, +0.624, +0.665, +0.706, +0.750, +0.792, +0.837, +0.882, +0.930, +0.975, +1.025, +1.075, +1.127, +1.181, +1.236, +1.294, +1.353, +1.414, +1.477, +1.545, +1.617, +1.689, +1.769, +1.855, +1.950, +2.053, +2.165, +2.296, +2.439, +2.610, +2.828, +3.115, +3.585, +4.026, +4.526, +4.894, +5.267, +5.822, +6.098, +6.469, +6.842, +7.123},  +0.012,  -0.049,   1.416},
	{"FPF/16(6)",        32, 270336, 0, { -4.785, -4.496, -4.338, -4.210, -4.076, -3.839, -3.652, -3.468, -3.168, -2.917, -2.625, -2.432, -2.285, -2.166, -2.061, -1.972, -1.890, -1.814, -1.741, -1.675, -1.612, -1.552, -1.494, -1.440, -1.390, -1.340, -1.292, -1.243, -1.199, -1.155, -1.111, -1.067, -1.026, -0.983, -0.943, -0.904, -0.865, -0.826, -0.787, -0.750, -0.712, -0.676, -0.640, -0.603, -0.568, -0.531, -0.495, -0.459, -0.423, -0.388, -0.354, -0.318, -0.283, -0.249, -0.215, -0.180, -0.146, -0.110, -0.075, -0.040, -0.003, +0.032, +0.067, +0.103, +0.139, +0.175, +0.213, +0.250, +0.288, +0.325, +0.364, +0.403, +0.442, +0.479, +0.520, +0.560, +0.599, +0.642, +0.686, +0.729, +0.774, +0.820, +0.866, +0.915, +0.962, +1.012, +1.063, +1.114, +1.169, +1.226, +1.282, +1.343, +1.406, +1.475, +1.548, +1.624, +1.702, +1.785, +1.874, +1.973, +2.077, +2.198, +2.329, +2.483, +2.663, +2.879, +3.182, +3.681, +4.154, +4.707, +5.128, +5.507, +6.012, +6.381, +6.729, +7.074, +7.228},  +0.011,  -0.075,   1.417},
	{"FPF/16(5)",        14, 270336, 0, { -4.102, -4.044, -3.897, -3.776, -3.663, -3.517, -3.364, -3.210, -2.975, -2.752, -2.501, -2.338, -2.211, -2.103, -2.007, -1.922, -1.846, -1.777, -1.711, -1.649, -1.592, -1.537, -1.486, -1.436, -1.387, -1.341, -1.295, -1.249, -1.205, -1.163, -1.121, -1.080, -1.041, -1.001, -0.962, -0.924, -0.886, -0.850, -0.812, -0.776, -0.740, -0.705, -0.670, -0.634, -0.598, -0.561, -0.527, -0.491, -0.457, -0.422, -0.388, -0.354, -0.318, -0.284, -0.249, -0.214, -0.180, -0.145, -0.110, -0.074, -0.041, -0.006, +0.030, +0.065, +0.102, +0.136, +0.172, +0.209, +0.246, +0.284, +0.323, +0.363, +0.402, +0.442, +0.483, +0.524, +0.565, +0.607, +0.649, +0.694, +0.740, +0.786, +0.833, +0.881, +0.930, +0.981, +1.034, +1.090, +1.147, +1.207, +1.268, +1.330, +1.397, +1.467, +1.540, +1.618, +1.700, +1.787, +1.885, +1.988, +2.100, +2.225, +2.363, +2.528, +2.726, +2.960, +3.297, +3.835, +4.352, +4.984, +5.478, +5.969, +6.552, +6.852, +7.185, +7.765, +8.062},  +0.008,  -0.110,   1.417},
	{"FPF/16(4)",         5, 270336, 0, { -3.413, -3.400, -3.341, -3.282, -3.196, -3.071, -2.967, -2.862, -2.680, -2.516, -2.322, -2.189, -2.080, -1.992, -1.914, -1.843, -1.778, -1.716, -1.658, -1.605, -1.554, -1.505, -1.459, -1.412, -1.369, -1.326, -1.286, -1.244, -1.203, -1.164, -1.127, -1.089, -1.052, -1.017, -0.982, -0.945, -0.910, -0.875, -0.840, -0.806, -0.771, -0.736, -0.703, -0.670, -0.637, -0.604, -0.571, -0.537, -0.504, -0.470, -0.437, -0.404, -0.370, -0.336, -0.303, -0.269, -0.234, -0.199, -0.165, -0.130, -0.095, -0.059, -0.023, +0.011, +0.047, +0.084, +0.120, +0.158, +0.196, +0.234, +0.274, +0.313, +0.353, +0.395, +0.436, +0.478, +0.522, +0.566, +0.610, +0.656, +0.703, +0.751, +0.798, +0.848, +0.901, +0.955, +1.010, +1.066, +1.124, +1.186, +1.249, +1.316, +1.384, +1.459, +1.535, +1.620, +1.707, +1.800, +1.902, +2.014, +2.134, +2.269, +2.424, +2.600, +2.813, +3.082, +3.454, +4.047, +4.617, +5.365, +5.899, +6.525, +7.321, +7.757, +8.354, +8.645, +8.994},  +0.009,  -0.165,   1.419},
	{"FPF/16(3)",         1, 270336,15461,{-2.601,-2.587, -2.559, -2.532, -2.501, -2.461, -2.417, -2.362, -2.266, -2.174, -2.051, -1.963, -1.888, -1.824, -1.766, -1.711, -1.662, -1.614, -1.570, -1.529, -1.487, -1.446, -1.408, -1.370, -1.333, -1.297, -1.261, -1.227, -1.193, -1.159, -1.126, -1.093, -1.061, -1.029, -0.996, -0.965, -0.934, -0.901, -0.870, -0.839, -0.807, -0.776, -0.746, -0.714, -0.682, -0.652, -0.620, -0.589, -0.558, -0.526, -0.494, -0.462, -0.430, -0.398, -0.364, -0.332, -0.299, -0.264, -0.231, -0.197, -0.163, -0.128, -0.093, -0.057, -0.021, +0.014, +0.051, +0.088, +0.126, +0.165, +0.204, +0.242, +0.282, +0.323, +0.365, +0.408, +0.451, +0.495, +0.542, +0.590, +0.640, +0.689, +0.740, +0.793, +0.848, +0.903, +0.964, +1.025, +1.087, +1.153, +1.220, +1.290, +1.364, +1.443, +1.529, +1.617, +1.713, +1.815, +1.925, +2.045, +2.177, +2.332, +2.502, +2.706, +2.938, +3.244, +3.663, +4.383, +5.065, +5.998, +6.687, +7.360, +8.362, +8.885, +9.311, +9.959,+10.609},  +0.017,  -0.231,   1.424},
	{"FPF/16(3)",         2, 270336,1314,{-2.587, -2.585, -2.553, -2.529, -2.504, -2.458, -2.424, -2.369, -2.274, -2.176, -2.051, -1.961, -1.886, -1.824, -1.765, -1.714, -1.663, -1.616, -1.570, -1.529, -1.487, -1.448, -1.409, -1.372, -1.335, -1.299, -1.265, -1.231, -1.197, -1.164, -1.131, -1.098, -1.066, -1.034, -1.002, -0.969, -0.938, -0.907, -0.876, -0.845, -0.813, -0.782, -0.750, -0.720, -0.689, -0.657, -0.627, -0.596, -0.565, -0.534, -0.502, -0.470, -0.438, -0.406, -0.374, -0.341, -0.308, -0.276, -0.243, -0.210, -0.176, -0.141, -0.106, -0.070, -0.033, +0.003, +0.039, +0.075, +0.114, +0.153, +0.192, +0.232, +0.272, +0.313, +0.354, +0.397, +0.440, +0.485, +0.530, +0.577, +0.625, +0.676, +0.726, +0.779, +0.833, +0.888, +0.946, +1.006, +1.069, +1.134, +1.202, +1.271, +1.345, +1.423, +1.508, +1.598, +1.694, +1.796, +1.903, +2.022, +2.158, +2.307, +2.483, +2.678, +2.913, +3.221, +3.638, +4.339, +5.027, +5.940, +6.597, +7.257, +7.977, +8.441, +9.119,+10.316,+11.728},  +0.006,  -0.243,   1.416},

	{"FPF-14+6/16:cross",        2, 270336,42900,{-1.412,-1.411, -1.407, -1.404, -1.400, -1.392, -1.381, -1.368, -1.341, -1.307, -1.261, -1.226, -1.193, -1.165, -1.136, -1.111, -1.086, -1.062, -1.038, -1.015, -0.993, -0.972, -0.950, -0.930, -0.909, -0.890, -0.870, -0.850, -0.830, -0.810, -0.790, -0.772, -0.752, -0.733, -0.714, -0.694, -0.675, -0.656, -0.637, -0.618, -0.599, -0.579, -0.559, -0.539, -0.520, -0.500, -0.480, -0.459, -0.439, -0.419, -0.398, -0.377, -0.355, -0.334, -0.313, -0.291, -0.269, -0.247, -0.224, -0.201, -0.178, -0.154, -0.131, -0.107, -0.082, -0.057, -0.032, -0.007, +0.019, +0.046, +0.074, +0.100, +0.128, +0.156, +0.187, +0.217, +0.248, +0.281, +0.313, +0.348, +0.383, +0.420, +0.456, +0.494, +0.532, +0.575, +0.617, +0.661, +0.708, +0.756, +0.807, +0.860, +0.920, +0.977, +1.041, +1.110, +1.185, +1.262, +1.348, +1.440, +1.542, +1.656, +1.791, +1.947, +2.139, +2.379, +2.715, +3.295, +3.846, +4.540, +5.066, +5.630, +6.388, +6.823, +7.384, +8.072, +8.494},  +0.003,  -0.224,   1.002},
	{"FPF-14+6/16:cross",        3, 270336,1408,{-1.574, -1.571, -1.564, -1.557, -1.547, -1.534, -1.516, -1.495, -1.452, -1.407, -1.345, -1.297, -1.256, -1.219, -1.186, -1.156, -1.127, -1.100, -1.073, -1.046, -1.021, -0.997, -0.973, -0.950, -0.928, -0.905, -0.883, -0.862, -0.841, -0.819, -0.798, -0.776, -0.755, -0.734, -0.714, -0.693, -0.672, -0.652, -0.631, -0.611, -0.591, -0.570, -0.549, -0.528, -0.508, -0.487, -0.465, -0.445, -0.423, -0.402, -0.380, -0.358, -0.337, -0.314, -0.292, -0.271, -0.249, -0.226, -0.202, -0.179, -0.155, -0.133, -0.109, -0.085, -0.060, -0.035, -0.008, +0.017, +0.044, +0.071, +0.099, +0.127, +0.155, +0.185, +0.214, +0.245, +0.276, +0.308, +0.341, +0.376, +0.411, +0.445, +0.481, +0.518, +0.557, +0.596, +0.636, +0.681, +0.727, +0.774, +0.821, +0.873, +0.928, +0.985, +1.047, +1.111, +1.183, +1.260, +1.343, +1.433, +1.533, +1.643, +1.772, +1.919, +2.102, +2.329, +2.644, +3.199, +3.707, +4.386, +4.867, +5.304, +6.017, +6.389, +6.949, +7.415, +7.804},  +0.001,  -0.202,   0.999},
	{"FPF-14+6/16:cross",        4, 270336,643,{ -1.569, -1.563, -1.560, -1.556, -1.548, -1.533, -1.516, -1.495, -1.453, -1.408, -1.344, -1.296, -1.255, -1.219, -1.186, -1.155, -1.124, -1.096, -1.069, -1.044, -1.019, -0.995, -0.972, -0.949, -0.926, -0.903, -0.882, -0.860, -0.838, -0.817, -0.796, -0.775, -0.754, -0.733, -0.713, -0.692, -0.672, -0.651, -0.631, -0.611, -0.590, -0.569, -0.547, -0.526, -0.506, -0.484, -0.463, -0.441, -0.420, -0.400, -0.378, -0.356, -0.335, -0.314, -0.291, -0.268, -0.246, -0.224, -0.201, -0.178, -0.154, -0.131, -0.107, -0.082, -0.057, -0.031, -0.006, +0.020, +0.047, +0.075, +0.101, +0.129, +0.157, +0.186, +0.216, +0.247, +0.278, +0.310, +0.340, +0.374, +0.408, +0.443, +0.479, +0.518, +0.557, +0.598, +0.641, +0.683, +0.728, +0.776, +0.824, +0.875, +0.931, +0.989, +1.048, +1.112, +1.181, +1.257, +1.339, +1.431, +1.531, +1.640, +1.766, +1.912, +2.091, +2.321, +2.645, +3.180, +3.705, +4.361, +4.867, +5.328, +5.927, +6.347, +6.954, +7.462, +7.996},  +0.002,  -0.201,   0.998},
	{"FPF-14+6/16:cross",        5, 270336,380,{ -1.570, -1.569, -1.561, -1.555, -1.548, -1.530, -1.516, -1.493, -1.452, -1.406, -1.343, -1.296, -1.255, -1.219, -1.185, -1.154, -1.125, -1.098, -1.071, -1.046, -1.020, -0.996, -0.972, -0.950, -0.927, -0.904, -0.882, -0.860, -0.838, -0.818, -0.797, -0.776, -0.755, -0.734, -0.713, -0.692, -0.672, -0.651, -0.630, -0.610, -0.590, -0.569, -0.548, -0.528, -0.507, -0.486, -0.465, -0.444, -0.423, -0.402, -0.382, -0.360, -0.338, -0.315, -0.293, -0.271, -0.249, -0.226, -0.202, -0.179, -0.156, -0.132, -0.108, -0.083, -0.058, -0.033, -0.008, +0.018, +0.044, +0.071, +0.098, +0.126, +0.155, +0.184, +0.214, +0.243, +0.274, +0.306, +0.341, +0.375, +0.410, +0.445, +0.482, +0.520, +0.560, +0.600, +0.643, +0.687, +0.732, +0.779, +0.829, +0.879, +0.934, +0.993, +1.056, +1.120, +1.190, +1.263, +1.342, +1.430, +1.533, +1.645, +1.774, +1.923, +2.098, +2.329, +2.644, +3.175, +3.692, +4.336, +4.788, +5.301, +5.872, +6.259, +6.817, +7.397, +7.890},  +0.002,  -0.202,   0.998},
	{"FPF-14+6/16:cross",        6, 270336,21, { -1.710, -1.703, -1.691, -1.679, -1.669, -1.645, -1.623, -1.592, -1.539, -1.484, -1.405, -1.348, -1.300, -1.260, -1.223, -1.188, -1.156, -1.125, -1.095, -1.067, -1.040, -1.013, -0.987, -0.962, -0.938, -0.913, -0.890, -0.867, -0.844, -0.821, -0.799, -0.777, -0.754, -0.732, -0.711, -0.689, -0.668, -0.647, -0.625, -0.604, -0.583, -0.562, -0.540, -0.519, -0.498, -0.476, -0.455, -0.434, -0.412, -0.390, -0.368, -0.346, -0.324, -0.302, -0.279, -0.256, -0.233, -0.209, -0.187, -0.163, -0.139, -0.115, -0.090, -0.066, -0.040, -0.015, +0.010, +0.037, +0.063, +0.091, +0.118, +0.147, +0.176, +0.206, +0.236, +0.266, +0.299, +0.330, +0.363, +0.396, +0.430, +0.464, +0.499, +0.535, +0.575, +0.615, +0.657, +0.701, +0.745, +0.791, +0.841, +0.890, +0.943, +1.000, +1.062, +1.127, +1.195, +1.269, +1.351, +1.437, +1.535, +1.646, +1.765, +1.907, +2.082, +2.302, +2.610, +3.114, +3.592, +4.248, +4.706, +5.067, +5.617, +6.009, +6.385, +6.860, +7.427},  +0.003,  -0.187,   1.000},
	{"FPF-14+6/16:cross",        7, 270336,11, { -1.707, -1.707, -1.695, -1.683, -1.670, -1.647, -1.623, -1.593, -1.538, -1.480, -1.406, -1.351, -1.304, -1.262, -1.225, -1.189, -1.157, -1.126, -1.097, -1.069, -1.041, -1.015, -0.989, -0.964, -0.939, -0.915, -0.891, -0.868, -0.845, -0.822, -0.799, -0.777, -0.755, -0.733, -0.711, -0.689, -0.668, -0.647, -0.626, -0.604, -0.583, -0.561, -0.539, -0.518, -0.496, -0.474, -0.452, -0.431, -0.409, -0.388, -0.367, -0.345, -0.322, -0.299, -0.277, -0.254, -0.232, -0.208, -0.185, -0.161, -0.137, -0.113, -0.088, -0.063, -0.039, -0.013, +0.013, +0.040, +0.065, +0.093, +0.120, +0.148, +0.177, +0.205, +0.234, +0.265, +0.295, +0.327, +0.359, +0.391, +0.425, +0.460, +0.496, +0.534, +0.574, +0.614, +0.656, +0.697, +0.741, +0.788, +0.836, +0.890, +0.946, +1.004, +1.064, +1.129, +1.196, +1.270, +1.349, +1.439, +1.534, +1.646, +1.765, +1.912, +2.087, +2.310, +2.614, +3.113, +3.618, +4.231, +4.698, +5.155, +5.703, +6.163, +6.674, +7.262, +7.586},  +0.003,  -0.185,   1.001},
	{"FPF-14+6/16:cross",        8, 270336, 7, { -1.709, -1.706, -1.695, -1.687, -1.672, -1.650, -1.622, -1.590, -1.537, -1.481, -1.405, -1.351, -1.303, -1.260, -1.223, -1.188, -1.156, -1.125, -1.096, -1.067, -1.039, -1.012, -0.986, -0.962, -0.937, -0.914, -0.890, -0.867, -0.844, -0.822, -0.800, -0.777, -0.755, -0.733, -0.711, -0.689, -0.667, -0.646, -0.625, -0.603, -0.581, -0.560, -0.539, -0.517, -0.496, -0.474, -0.452, -0.430, -0.409, -0.387, -0.365, -0.343, -0.321, -0.298, -0.277, -0.254, -0.231, -0.207, -0.184, -0.160, -0.137, -0.113, -0.088, -0.063, -0.038, -0.014, +0.012, +0.038, +0.065, +0.092, +0.119, +0.147, +0.175, +0.205, +0.234, +0.266, +0.296, +0.328, +0.360, +0.393, +0.426, +0.462, +0.499, +0.536, +0.574, +0.613, +0.656, +0.699, +0.742, +0.790, +0.842, +0.891, +0.945, +1.002, +1.061, +1.125, +1.194, +1.267, +1.348, +1.436, +1.532, +1.645, +1.766, +1.909, +2.079, +2.304, +2.608, +3.119, +3.611, +4.254, +4.740, +5.199, +5.939, +6.240, +6.619, +7.404, +7.856},  +0.003,  -0.184,   1.001},
	{"FPF-14+6/16:cross",       10, 270336, 1, { -1.710, -1.708, -1.696, -1.682, -1.672, -1.645, -1.621, -1.590, -1.536, -1.479, -1.407, -1.351, -1.304, -1.263, -1.224, -1.190, -1.157, -1.127, -1.096, -1.068, -1.041, -1.014, -0.988, -0.963, -0.938, -0.915, -0.891, -0.868, -0.845, -0.822, -0.800, -0.778, -0.756, -0.734, -0.711, -0.690, -0.669, -0.647, -0.626, -0.605, -0.583, -0.562, -0.541, -0.520, -0.497, -0.475, -0.454, -0.433, -0.411, -0.390, -0.368, -0.346, -0.324, -0.302, -0.279, -0.255, -0.233, -0.210, -0.187, -0.164, -0.140, -0.115, -0.090, -0.065, -0.039, -0.014, +0.011, +0.038, +0.064, +0.091, +0.117, +0.144, +0.172, +0.202, +0.231, +0.262, +0.292, +0.324, +0.357, +0.390, +0.425, +0.461, +0.498, +0.535, +0.575, +0.615, +0.656, +0.698, +0.742, +0.787, +0.834, +0.886, +0.940, +0.996, +1.056, +1.121, +1.192, +1.269, +1.349, +1.437, +1.534, +1.644, +1.769, +1.914, +2.087, +2.307, +2.616, +3.121, +3.641, +4.291, +4.774, +5.197, +5.837, +6.266, +6.573, +7.417, +7.900},  +0.002,  -0.187,   1.002},
	{"FPF-14+6/16:cross",       12, 270336, 0, { -1.841, -1.829, -1.812, -1.792, -1.775, -1.739, -1.709, -1.668, -1.601, -1.536, -1.452, -1.389, -1.336, -1.291, -1.249, -1.212, -1.176, -1.143, -1.112, -1.082, -1.054, -1.026, -0.998, -0.972, -0.946, -0.920, -0.894, -0.870, -0.846, -0.822, -0.797, -0.775, -0.752, -0.729, -0.706, -0.684, -0.662, -0.640, -0.618, -0.596, -0.574, -0.553, -0.532, -0.510, -0.488, -0.466, -0.445, -0.422, -0.400, -0.378, -0.356, -0.333, -0.310, -0.288, -0.266, -0.243, -0.220, -0.197, -0.173, -0.149, -0.126, -0.101, -0.076, -0.052, -0.027, -0.001, +0.024, +0.051, +0.078, +0.105, +0.133, +0.162, +0.191, +0.220, +0.251, +0.280, +0.311, +0.343, +0.375, +0.407, +0.441, +0.476, +0.512, +0.550, +0.588, +0.628, +0.669, +0.712, +0.756, +0.802, +0.850, +0.899, +0.952, +1.009, +1.068, +1.131, +1.200, +1.275, +1.351, +1.438, +1.532, +1.641, +1.758, +1.899, +2.067, +2.282, +2.564, +3.057, +3.543, +4.162, +4.654, +5.066, +5.651, +6.048, +6.535, +7.067, +7.301},  +0.004,  -0.173,   1.001},
	{"FPF-14+6/16:cross",       14, 270336, 1, { -1.830, -1.814, -1.800, -1.789, -1.768, -1.735, -1.707, -1.669, -1.603, -1.540, -1.449, -1.387, -1.333, -1.289, -1.249, -1.211, -1.176, -1.143, -1.112, -1.082, -1.053, -1.024, -0.997, -0.970, -0.945, -0.920, -0.895, -0.871, -0.847, -0.824, -0.801, -0.778, -0.755, -0.731, -0.709, -0.687, -0.665, -0.643, -0.621, -0.599, -0.577, -0.554, -0.532, -0.510, -0.488, -0.466, -0.444, -0.422, -0.400, -0.377, -0.355, -0.333, -0.310, -0.288, -0.265, -0.243, -0.220, -0.197, -0.173, -0.149, -0.125, -0.101, -0.076, -0.052, -0.026, +0.000, +0.026, +0.051, +0.078, +0.105, +0.133, +0.161, +0.189, +0.217, +0.247, +0.276, +0.307, +0.339, +0.372, +0.405, +0.440, +0.477, +0.512, +0.551, +0.589, +0.628, +0.669, +0.711, +0.756, +0.802, +0.850, +0.900, +0.952, +1.007, +1.065, +1.128, +1.197, +1.269, +1.346, +1.430, +1.526, +1.632, +1.751, +1.894, +2.069, +2.291, +2.591, +3.084, +3.575, +4.215, +4.653, +5.017, +5.484, +5.843, +6.257, +6.605, +7.097},  +0.004,  -0.173,   1.002},
	{"FPF-14+6/16:cross",       16, 270336, 2, { -1.829, -1.824, -1.805, -1.791, -1.777, -1.743, -1.712, -1.674, -1.602, -1.537, -1.447, -1.383, -1.332, -1.287, -1.246, -1.209, -1.174, -1.142, -1.110, -1.080, -1.051, -1.024, -0.996, -0.969, -0.944, -0.918, -0.894, -0.870, -0.845, -0.822, -0.799, -0.776, -0.754, -0.732, -0.709, -0.686, -0.664, -0.642, -0.620, -0.598, -0.576, -0.554, -0.532, -0.510, -0.489, -0.467, -0.445, -0.423, -0.401, -0.378, -0.356, -0.334, -0.312, -0.289, -0.266, -0.242, -0.220, -0.196, -0.172, -0.148, -0.124, -0.100, -0.075, -0.051, -0.026, +0.000, +0.026, +0.052, +0.079, +0.107, +0.134, +0.162, +0.191, +0.220, +0.249, +0.279, +0.310, +0.342, +0.373, +0.406, +0.441, +0.475, +0.511, +0.548, +0.586, +0.624, +0.666, +0.708, +0.753, +0.800, +0.846, +0.897, +0.950, +1.005, +1.063, +1.126, +1.195, +1.266, +1.347, +1.434, +1.531, +1.642, +1.762, +1.906, +2.076, +2.291, +2.587, +3.088, +3.553, +4.169, +4.623, +5.050, +5.520, +5.957, +6.290, +6.645, +6.934},  +0.004,  -0.172,   1.002},
	{"FPF-14+6/16:cross",       20, 270336, 0, { -1.832, -1.822, -1.801, -1.787, -1.769, -1.738, -1.709, -1.671, -1.603, -1.538, -1.451, -1.388, -1.335, -1.291, -1.249, -1.211, -1.176, -1.142, -1.111, -1.081, -1.052, -1.024, -0.997, -0.969, -0.944, -0.919, -0.894, -0.870, -0.846, -0.823, -0.800, -0.776, -0.753, -0.731, -0.708, -0.686, -0.664, -0.641, -0.619, -0.598, -0.576, -0.555, -0.533, -0.511, -0.488, -0.467, -0.445, -0.423, -0.402, -0.380, -0.358, -0.336, -0.313, -0.290, -0.268, -0.245, -0.221, -0.197, -0.173, -0.150, -0.126, -0.101, -0.078, -0.052, -0.027, -0.000, +0.026, +0.052, +0.079, +0.106, +0.134, +0.161, +0.191, +0.220, +0.250, +0.280, +0.311, +0.342, +0.374, +0.407, +0.442, +0.477, +0.512, +0.549, +0.587, +0.626, +0.665, +0.707, +0.752, +0.797, +0.846, +0.896, +0.951, +1.005, +1.066, +1.130, +1.194, +1.267, +1.345, +1.431, +1.527, +1.630, +1.757, +1.899, +2.071, +2.287, +2.583, +3.072, +3.576, +4.142, +4.576, +4.990, +5.488, +5.991, +6.453, +7.080, +7.537},  +0.003,  -0.173,   1.001},
	{"FPF-14+6/16:cross",       24, 270336, 0, { -1.950, -1.922, -1.906, -1.889, -1.866, -1.821, -1.785, -1.742, -1.661, -1.584, -1.489, -1.419, -1.362, -1.312, -1.269, -1.228, -1.191, -1.155, -1.122, -1.091, -1.061, -1.032, -1.006, -0.977, -0.951, -0.925, -0.901, -0.875, -0.850, -0.826, -0.801, -0.777, -0.754, -0.730, -0.707, -0.683, -0.661, -0.638, -0.616, -0.594, -0.572, -0.548, -0.526, -0.504, -0.482, -0.459, -0.437, -0.415, -0.393, -0.370, -0.347, -0.324, -0.302, -0.279, -0.256, -0.233, -0.210, -0.187, -0.162, -0.138, -0.114, -0.089, -0.065, -0.039, -0.015, +0.010, +0.036, +0.063, +0.090, +0.116, +0.144, +0.172, +0.202, +0.231, +0.259, +0.289, +0.320, +0.351, +0.384, +0.418, +0.450, +0.485, +0.522, +0.559, +0.597, +0.636, +0.680, +0.720, +0.764, +0.809, +0.856, +0.907, +0.957, +1.013, +1.069, +1.134, +1.201, +1.272, +1.347, +1.433, +1.522, +1.627, +1.747, +1.886, +2.055, +2.267, +2.553, +3.033, +3.500, +4.109, +4.573, +5.056, +5.697, +6.201, +6.594, +7.036, +8.286},  +0.004,  -0.162,   1.003},
	{"FPF-14+6/16:cross",       28, 270336, 0, { -1.925, -1.915, -1.895, -1.885, -1.860, -1.824, -1.784, -1.738, -1.662, -1.584, -1.488, -1.417, -1.361, -1.311, -1.268, -1.228, -1.192, -1.156, -1.125, -1.093, -1.064, -1.035, -1.007, -0.979, -0.953, -0.926, -0.900, -0.876, -0.850, -0.826, -0.801, -0.777, -0.753, -0.730, -0.707, -0.684, -0.661, -0.639, -0.615, -0.593, -0.570, -0.548, -0.526, -0.503, -0.481, -0.459, -0.437, -0.415, -0.393, -0.369, -0.346, -0.323, -0.300, -0.278, -0.254, -0.231, -0.207, -0.183, -0.159, -0.134, -0.111, -0.086, -0.062, -0.037, -0.012, +0.013, +0.039, +0.065, +0.092, +0.119, +0.147, +0.174, +0.202, +0.231, +0.261, +0.291, +0.323, +0.354, +0.385, +0.419, +0.451, +0.486, +0.522, +0.559, +0.597, +0.636, +0.678, +0.720, +0.764, +0.808, +0.856, +0.905, +0.956, +1.010, +1.067, +1.129, +1.194, +1.265, +1.338, +1.423, +1.515, +1.621, +1.741, +1.876, +2.048, +2.261, +2.555, +3.030, +3.506, +4.085, +4.571, +4.965, +5.510, +5.909, +6.401, +7.061, +7.811},  +0.003,  -0.159,   1.001},
	{"FPF-14+6/16:cross",       32, 270336, 0, { -1.941, -1.924, -1.899, -1.880, -1.859, -1.819, -1.785, -1.739, -1.660, -1.585, -1.486, -1.417, -1.360, -1.313, -1.269, -1.228, -1.192, -1.158, -1.126, -1.095, -1.066, -1.036, -1.007, -0.979, -0.951, -0.925, -0.899, -0.874, -0.849, -0.825, -0.800, -0.778, -0.754, -0.730, -0.707, -0.684, -0.662, -0.639, -0.617, -0.594, -0.571, -0.548, -0.526, -0.504, -0.481, -0.458, -0.436, -0.413, -0.390, -0.368, -0.345, -0.322, -0.300, -0.276, -0.253, -0.230, -0.207, -0.182, -0.159, -0.135, -0.111, -0.087, -0.061, -0.037, -0.012, +0.013, +0.039, +0.065, +0.091, +0.118, +0.146, +0.174, +0.203, +0.231, +0.261, +0.291, +0.323, +0.354, +0.387, +0.420, +0.453, +0.488, +0.523, +0.560, +0.599, +0.638, +0.678, +0.720, +0.763, +0.809, +0.857, +0.906, +0.959, +1.012, +1.068, +1.130, +1.196, +1.266, +1.340, +1.424, +1.514, +1.617, +1.733, +1.872, +2.036, +2.250, +2.535, +3.022, +3.492, +4.107, +4.543, +4.931, +5.486, +5.842, +6.280, +6.746, +6.908},  +0.003,  -0.159,   0.999},
	{"FPF-14+6/16:cross",       40, 270336, 0, { -1.943, -1.924, -1.913, -1.882, -1.856, -1.822, -1.786, -1.743, -1.665, -1.584, -1.493, -1.424, -1.369, -1.319, -1.275, -1.235, -1.196, -1.161, -1.127, -1.095, -1.064, -1.035, -1.006, -0.978, -0.952, -0.925, -0.900, -0.875, -0.850, -0.826, -0.801, -0.777, -0.753, -0.729, -0.705, -0.682, -0.658, -0.636, -0.613, -0.590, -0.567, -0.546, -0.524, -0.502, -0.479, -0.457, -0.434, -0.412, -0.389, -0.367, -0.344, -0.321, -0.298, -0.275, -0.251, -0.228, -0.205, -0.180, -0.157, -0.134, -0.109, -0.085, -0.061, -0.036, -0.011, +0.014, +0.040, +0.067, +0.093, +0.121, +0.148, +0.177, +0.205, +0.233, +0.262, +0.292, +0.322, +0.353, +0.385, +0.418, +0.452, +0.486, +0.522, +0.558, +0.597, +0.636, +0.676, +0.719, +0.762, +0.806, +0.853, +0.901, +0.956, +1.009, +1.067, +1.129, +1.194, +1.263, +1.338, +1.422, +1.516, +1.618, +1.735, +1.871, +2.039, +2.251, +2.542, +3.029, +3.494, +4.125, +4.565, +5.002, +5.546, +5.970, +6.376, +6.662, +6.910},  +0.003,  -0.157,   1.000},
	{"FPF-14+6/16:cross",       48, 270336, 0, { -2.052, -2.016, -1.989, -1.956, -1.931, -1.885, -1.846, -1.794, -1.711, -1.629, -1.526, -1.451, -1.392, -1.340, -1.293, -1.249, -1.211, -1.175, -1.139, -1.106, -1.074, -1.043, -1.014, -0.986, -0.959, -0.933, -0.906, -0.879, -0.854, -0.829, -0.803, -0.778, -0.753, -0.729, -0.706, -0.682, -0.659, -0.635, -0.612, -0.589, -0.567, -0.544, -0.521, -0.499, -0.476, -0.454, -0.431, -0.407, -0.384, -0.361, -0.337, -0.314, -0.292, -0.268, -0.245, -0.222, -0.199, -0.176, -0.152, -0.128, -0.105, -0.080, -0.056, -0.031, -0.006, +0.019, +0.045, +0.071, +0.099, +0.126, +0.154, +0.183, +0.211, +0.240, +0.269, +0.298, +0.330, +0.360, +0.393, +0.426, +0.459, +0.494, +0.529, +0.565, +0.603, +0.643, +0.684, +0.725, +0.768, +0.812, +0.859, +0.907, +0.958, +1.013, +1.069, +1.130, +1.196, +1.264, +1.342, +1.423, +1.514, +1.614, +1.728, +1.865, +2.024, +2.231, +2.521, +2.980, +3.438, +4.046, +4.469, +4.889, +5.348, +5.636, +5.910, +6.816, +7.138},  +0.001,  -0.152,   1.000},
	{"FPF-14+6/16:cross",       56, 270336, 0, { -2.039, -2.022, -2.002, -1.976, -1.941, -1.892, -1.852, -1.802, -1.715, -1.627, -1.522, -1.449, -1.389, -1.337, -1.290, -1.248, -1.208, -1.172, -1.137, -1.106, -1.073, -1.043, -1.014, -0.985, -0.956, -0.930, -0.904, -0.878, -0.853, -0.827, -0.802, -0.778, -0.754, -0.730, -0.707, -0.682, -0.659, -0.636, -0.612, -0.589, -0.566, -0.544, -0.521, -0.499, -0.476, -0.454, -0.431, -0.409, -0.387, -0.364, -0.341, -0.318, -0.295, -0.272, -0.249, -0.225, -0.201, -0.177, -0.154, -0.129, -0.105, -0.080, -0.055, -0.031, -0.006, +0.020, +0.045, +0.072, +0.099, +0.126, +0.154, +0.182, +0.210, +0.238, +0.267, +0.297, +0.327, +0.359, +0.392, +0.425, +0.459, +0.493, +0.528, +0.564, +0.602, +0.640, +0.680, +0.724, +0.767, +0.811, +0.856, +0.907, +0.960, +1.015, +1.073, +1.132, +1.197, +1.268, +1.344, +1.426, +1.517, +1.620, +1.733, +1.872, +2.032, +2.231, +2.515, +2.985, +3.421, +3.991, +4.378, +4.755, +5.344, +5.730, +6.200, +6.790, +6.934},  +0.001,  -0.154,   0.999},
	{"FPF-14+6/16:cross",       64, 270336, 0, { -2.037, -2.021, -2.002, -1.981, -1.943, -1.895, -1.851, -1.796, -1.711, -1.628, -1.524, -1.448, -1.388, -1.334, -1.287, -1.245, -1.206, -1.170, -1.136, -1.104, -1.072, -1.042, -1.013, -0.985, -0.958, -0.931, -0.905, -0.879, -0.853, -0.828, -0.803, -0.779, -0.755, -0.731, -0.707, -0.685, -0.661, -0.637, -0.614, -0.591, -0.568, -0.545, -0.522, -0.499, -0.477, -0.454, -0.433, -0.410, -0.387, -0.365, -0.341, -0.318, -0.296, -0.273, -0.249, -0.226, -0.202, -0.178, -0.155, -0.130, -0.106, -0.081, -0.056, -0.032, -0.006, +0.021, +0.046, +0.072, +0.099, +0.126, +0.154, +0.182, +0.210, +0.239, +0.269, +0.299, +0.330, +0.361, +0.392, +0.424, +0.457, +0.492, +0.528, +0.565, +0.603, +0.642, +0.681, +0.722, +0.765, +0.810, +0.857, +0.907, +0.958, +1.013, +1.068, +1.129, +1.195, +1.266, +1.341, +1.424, +1.511, +1.613, +1.727, +1.861, +2.019, +2.227, +2.510, +2.971, +3.418, +3.957, +4.368, +4.727, +5.273, +5.658, +6.129, +6.551, +6.867},  +0.000,  -0.155,   0.997},
	{"FPF-14+6/16:cross",       80, 270336, 0, { -2.045, -2.032, -1.996, -1.976, -1.941, -1.894, -1.851, -1.800, -1.714, -1.631, -1.525, -1.450, -1.389, -1.336, -1.290, -1.248, -1.209, -1.172, -1.137, -1.104, -1.072, -1.042, -1.013, -0.984, -0.957, -0.930, -0.903, -0.877, -0.851, -0.827, -0.803, -0.778, -0.754, -0.731, -0.706, -0.683, -0.660, -0.637, -0.614, -0.590, -0.567, -0.545, -0.522, -0.499, -0.476, -0.454, -0.430, -0.408, -0.385, -0.362, -0.340, -0.317, -0.294, -0.271, -0.247, -0.224, -0.200, -0.177, -0.153, -0.129, -0.106, -0.081, -0.056, -0.032, -0.006, +0.018, +0.044, +0.070, +0.097, +0.123, +0.150, +0.178, +0.207, +0.236, +0.265, +0.295, +0.325, +0.357, +0.389, +0.423, +0.456, +0.491, +0.527, +0.563, +0.601, +0.640, +0.680, +0.721, +0.764, +0.808, +0.856, +0.904, +0.955, +1.008, +1.067, +1.128, +1.191, +1.261, +1.336, +1.420, +1.510, +1.608, +1.725, +1.858, +2.021, +2.218, +2.506, +2.962, +3.395, +3.971, +4.382, +4.767, +5.343, +5.682, +6.090, +6.538, +7.573},  -0.001,  -0.153,   0.996},
	{"FPF-14+6/16:cross",       96, 270336, 0, { -2.116, -2.091, -2.072, -2.040, -2.014, -1.955, -1.909, -1.849, -1.753, -1.662, -1.549, -1.469, -1.406, -1.352, -1.303, -1.259, -1.219, -1.182, -1.147, -1.112, -1.081, -1.049, -1.019, -0.989, -0.961, -0.934, -0.906, -0.880, -0.855, -0.829, -0.803, -0.778, -0.753, -0.729, -0.704, -0.680, -0.657, -0.633, -0.610, -0.587, -0.565, -0.541, -0.519, -0.496, -0.473, -0.450, -0.428, -0.404, -0.380, -0.357, -0.334, -0.309, -0.286, -0.262, -0.238, -0.214, -0.190, -0.167, -0.142, -0.118, -0.094, -0.070, -0.045, -0.020, +0.005, +0.030, +0.056, +0.082, +0.109, +0.134, +0.162, +0.191, +0.219, +0.247, +0.278, +0.308, +0.339, +0.370, +0.401, +0.433, +0.466, +0.501, +0.536, +0.571, +0.609, +0.649, +0.687, +0.729, +0.773, +0.817, +0.863, +0.911, +0.962, +1.014, +1.071, +1.133, +1.196, +1.265, +1.337, +1.420, +1.507, +1.604, +1.718, +1.850, +2.013, +2.218, +2.484, +2.949, +3.383, +3.939, +4.314, +4.722, +5.220, +5.523, +5.943, +6.477, +6.668},  +0.001,  -0.142,   0.998},
	{"FPF-14+6/16:cross",      112, 270336, 0, { -2.106, -2.086, -2.053, -2.033, -2.008, -1.955, -1.908, -1.852, -1.753, -1.667, -1.553, -1.472, -1.410, -1.356, -1.306, -1.262, -1.221, -1.183, -1.146, -1.112, -1.080, -1.049, -1.018, -0.989, -0.960, -0.932, -0.905, -0.879, -0.853, -0.827, -0.802, -0.776, -0.752, -0.728, -0.704, -0.680, -0.656, -0.632, -0.609, -0.586, -0.562, -0.540, -0.517, -0.494, -0.471, -0.448, -0.425, -0.401, -0.379, -0.356, -0.333, -0.310, -0.287, -0.264, -0.241, -0.217, -0.193, -0.170, -0.146, -0.122, -0.098, -0.073, -0.048, -0.022, +0.003, +0.030, +0.056, +0.083, +0.109, +0.135, +0.162, +0.191, +0.219, +0.247, +0.277, +0.308, +0.338, +0.370, +0.402, +0.434, +0.468, +0.502, +0.537, +0.573, +0.611, +0.649, +0.688, +0.729, +0.772, +0.816, +0.861, +0.909, +0.960, +1.014, +1.068, +1.128, +1.192, +1.259, +1.334, +1.413, +1.502, +1.602, +1.713, +1.846, +2.007, +2.201, +2.482, +2.938, +3.396, +3.966, +4.401, +4.781, +5.218, +5.517, +5.867, +6.535, +6.753},  +0.000,  -0.146,   0.998},
	{"FPF-14+6/16:cross",      128, 270336, 2, { -2.114, -2.110, -2.075, -2.053, -2.018, -1.958, -1.907, -1.849, -1.754, -1.662, -1.550, -1.471, -1.408, -1.355, -1.305, -1.263, -1.221, -1.183, -1.148, -1.115, -1.082, -1.050, -1.020, -0.991, -0.962, -0.934, -0.908, -0.881, -0.855, -0.829, -0.804, -0.779, -0.754, -0.730, -0.706, -0.682, -0.658, -0.635, -0.612, -0.589, -0.565, -0.541, -0.518, -0.495, -0.473, -0.450, -0.426, -0.404, -0.382, -0.358, -0.335, -0.312, -0.288, -0.265, -0.241, -0.218, -0.194, -0.171, -0.147, -0.123, -0.099, -0.075, -0.049, -0.025, +0.001, +0.027, +0.053, +0.079, +0.105, +0.132, +0.160, +0.187, +0.215, +0.244, +0.273, +0.302, +0.332, +0.363, +0.395, +0.428, +0.461, +0.497, +0.533, +0.568, +0.605, +0.644, +0.683, +0.725, +0.768, +0.813, +0.860, +0.909, +0.960, +1.014, +1.069, +1.128, +1.193, +1.264, +1.338, +1.417, +1.508, +1.607, +1.720, +1.851, +2.010, +2.204, +2.478, +2.924, +3.376, +3.946, +4.372, +4.725, +5.261, +5.557, +6.054, +6.525, +7.054},  -0.002,  -0.147,   0.997},
	{"FPF-14+6/16:cross",      160, 270336, 2, { -2.085, -2.070, -2.054, -2.030, -1.995, -1.950, -1.901, -1.844, -1.755, -1.666, -1.550, -1.472, -1.408, -1.352, -1.303, -1.260, -1.220, -1.182, -1.146, -1.112, -1.079, -1.048, -1.017, -0.989, -0.960, -0.932, -0.906, -0.879, -0.853, -0.828, -0.802, -0.777, -0.753, -0.729, -0.705, -0.681, -0.658, -0.634, -0.610, -0.587, -0.563, -0.540, -0.517, -0.495, -0.472, -0.448, -0.426, -0.402, -0.380, -0.357, -0.334, -0.311, -0.287, -0.264, -0.242, -0.218, -0.195, -0.171, -0.148, -0.123, -0.100, -0.076, -0.051, -0.026, -0.001, +0.024, +0.051, +0.077, +0.103, +0.129, +0.157, +0.185, +0.213, +0.242, +0.271, +0.301, +0.331, +0.362, +0.394, +0.427, +0.462, +0.495, +0.530, +0.566, +0.603, +0.641, +0.681, +0.723, +0.766, +0.811, +0.857, +0.905, +0.956, +1.008, +1.063, +1.123, +1.187, +1.257, +1.331, +1.411, +1.502, +1.601, +1.713, +1.845, +2.006, +2.210, +2.479, +2.925, +3.376, +3.951, +4.338, +4.718, +5.263, +5.625, +5.986, +6.380, +6.625},  -0.002,  -0.148,   0.995},
	{"FPF-14+6/16:cross",      192, 270336, 3, { -2.216, -2.186, -2.162, -2.122, -2.078, -2.015, -1.963, -1.900, -1.797, -1.694, -1.573, -1.488, -1.425, -1.367, -1.318, -1.273, -1.231, -1.192, -1.154, -1.118, -1.085, -1.053, -1.022, -0.993, -0.963, -0.935, -0.907, -0.880, -0.853, -0.827, -0.802, -0.777, -0.752, -0.727, -0.703, -0.678, -0.654, -0.631, -0.606, -0.582, -0.559, -0.536, -0.513, -0.490, -0.467, -0.444, -0.420, -0.396, -0.373, -0.349, -0.326, -0.302, -0.279, -0.256, -0.233, -0.209, -0.184, -0.160, -0.137, -0.112, -0.089, -0.064, -0.039, -0.014, +0.010, +0.037, +0.063, +0.089, +0.115, +0.142, +0.170, +0.197, +0.224, +0.252, +0.282, +0.311, +0.341, +0.372, +0.403, +0.436, +0.470, +0.504, +0.540, +0.575, +0.612, +0.651, +0.693, +0.733, +0.776, +0.820, +0.866, +0.913, +0.962, +1.017, +1.072, +1.132, +1.196, +1.262, +1.335, +1.417, +1.501, +1.600, +1.714, +1.842, +1.998, +2.195, +2.460, +2.906, +3.345, +3.877, +4.247, +4.656, +5.224, +5.511, +5.945, +6.474, +6.663},  +0.000,  -0.137,   0.997},
	{"FPF-14+6/16:cross",      224, 270336, 1, { -2.179, -2.157, -2.138, -2.110, -2.074, -2.016, -1.960, -1.900, -1.793, -1.696, -1.576, -1.491, -1.424, -1.369, -1.319, -1.272, -1.231, -1.192, -1.156, -1.122, -1.088, -1.056, -1.025, -0.995, -0.966, -0.937, -0.909, -0.881, -0.855, -0.828, -0.802, -0.777, -0.752, -0.727, -0.702, -0.678, -0.654, -0.629, -0.607, -0.583, -0.560, -0.536, -0.513, -0.490, -0.466, -0.443, -0.420, -0.397, -0.373, -0.350, -0.327, -0.303, -0.280, -0.256, -0.233, -0.209, -0.185, -0.161, -0.136, -0.112, -0.088, -0.063, -0.038, -0.014, +0.011, +0.036, +0.062, +0.089, +0.115, +0.143, +0.170, +0.197, +0.225, +0.254, +0.282, +0.311, +0.342, +0.373, +0.404, +0.437, +0.471, +0.504, +0.539, +0.575, +0.611, +0.650, +0.689, +0.730, +0.773, +0.818, +0.864, +0.912, +0.961, +1.013, +1.070, +1.129, +1.193, +1.263, +1.338, +1.421, +1.510, +1.604, +1.717, +1.849, +2.003, +2.198, +2.466, +2.920, +3.351, +3.879, +4.303, +4.731, +5.150, +5.575, +5.815, +6.142, +6.458},  +0.001,  -0.136,   0.998},
	{"FPF-14+6/16:cross",      256, 270336, 3, { -2.179, -2.156, -2.122, -2.098, -2.071, -2.016, -1.957, -1.888, -1.791, -1.695, -1.575, -1.493, -1.428, -1.371, -1.321, -1.275, -1.233, -1.194, -1.156, -1.122, -1.088, -1.057, -1.025, -0.995, -0.967, -0.937, -0.910, -0.883, -0.857, -0.830, -0.804, -0.779, -0.754, -0.729, -0.704, -0.679, -0.654, -0.630, -0.607, -0.583, -0.560, -0.537, -0.515, -0.491, -0.469, -0.446, -0.422, -0.399, -0.375, -0.352, -0.328, -0.305, -0.281, -0.258, -0.235, -0.211, -0.188, -0.164, -0.139, -0.115, -0.090, -0.066, -0.041, -0.015, +0.010, +0.036, +0.062, +0.087, +0.113, +0.140, +0.168, +0.196, +0.225, +0.253, +0.283, +0.312, +0.342, +0.373, +0.404, +0.436, +0.470, +0.504, +0.539, +0.574, +0.611, +0.650, +0.688, +0.730, +0.771, +0.816, +0.862, +0.908, +0.957, +1.010, +1.065, +1.124, +1.190, +1.258, +1.332, +1.411, +1.502, +1.597, +1.707, +1.838, +2.000, +2.198, +2.472, +2.915, +3.348, +3.903, +4.291, +4.696, +5.260, +5.682, +5.865, +6.551, +7.131},  -0.001,  -0.139,   0.998},
	{"FPF-14+6/16:cross",      320, 270336, 1, { -2.177, -2.142, -2.121, -2.097, -2.068, -2.012, -1.958, -1.892, -1.791, -1.695, -1.577, -1.492, -1.426, -1.368, -1.318, -1.272, -1.231, -1.192, -1.155, -1.121, -1.087, -1.055, -1.025, -0.995, -0.965, -0.937, -0.909, -0.883, -0.856, -0.831, -0.805, -0.779, -0.755, -0.730, -0.706, -0.681, -0.656, -0.632, -0.609, -0.585, -0.561, -0.537, -0.514, -0.490, -0.467, -0.444, -0.422, -0.399, -0.375, -0.353, -0.330, -0.306, -0.283, -0.259, -0.236, -0.212, -0.187, -0.164, -0.140, -0.116, -0.091, -0.066, -0.042, -0.016, +0.010, +0.035, +0.061, +0.087, +0.114, +0.140, +0.169, +0.196, +0.225, +0.253, +0.283, +0.312, +0.342, +0.373, +0.405, +0.438, +0.471, +0.505, +0.540, +0.576, +0.613, +0.651, +0.691, +0.731, +0.773, +0.817, +0.863, +0.912, +0.962, +1.016, +1.071, +1.131, +1.195, +1.263, +1.338, +1.416, +1.502, +1.600, +1.710, +1.840, +1.997, +2.196, +2.466, +2.894, +3.325, +3.851, +4.241, +4.564, +5.178, +5.542, +6.011, +6.353, +6.787},  -0.001,  -0.140,   0.996},
	{"FPF-14+6/16:cross",      384, 270336, 2, { -2.250, -2.226, -2.184, -2.151, -2.109, -2.054, -2.005, -1.934, -1.825, -1.724, -1.596, -1.511, -1.441, -1.383, -1.330, -1.284, -1.240, -1.199, -1.162, -1.125, -1.090, -1.058, -1.027, -0.996, -0.965, -0.936, -0.908, -0.881, -0.853, -0.827, -0.800, -0.774, -0.748, -0.723, -0.699, -0.674, -0.649, -0.626, -0.602, -0.579, -0.555, -0.532, -0.508, -0.485, -0.462, -0.439, -0.415, -0.392, -0.369, -0.346, -0.322, -0.300, -0.277, -0.253, -0.229, -0.205, -0.181, -0.157, -0.133, -0.108, -0.084, -0.059, -0.035, -0.010, +0.016, +0.041, +0.067, +0.094, +0.121, +0.148, +0.175, +0.203, +0.231, +0.260, +0.289, +0.319, +0.349, +0.380, +0.413, +0.445, +0.480, +0.514, +0.549, +0.585, +0.622, +0.660, +0.698, +0.738, +0.780, +0.824, +0.869, +0.916, +0.964, +1.017, +1.073, +1.132, +1.195, +1.264, +1.337, +1.418, +1.504, +1.602, +1.715, +1.844, +2.001, +2.190, +2.459, +2.884, +3.302, +3.811, +4.230, +4.618, +5.173, +5.530, +5.766, +6.394, +7.201},  +0.001,  -0.133,   0.999},
	{"FPF-14+6/16:cross",      448, 270336, 0, { -2.256, -2.240, -2.209, -2.179, -2.129, -2.066, -2.005, -1.936, -1.826, -1.722, -1.597, -1.509, -1.439, -1.380, -1.328, -1.281, -1.238, -1.198, -1.161, -1.124, -1.090, -1.058, -1.026, -0.994, -0.965, -0.936, -0.908, -0.880, -0.852, -0.826, -0.800, -0.775, -0.749, -0.724, -0.699, -0.675, -0.651, -0.628, -0.604, -0.580, -0.557, -0.534, -0.510, -0.487, -0.463, -0.439, -0.416, -0.393, -0.369, -0.346, -0.323, -0.300, -0.276, -0.252, -0.227, -0.203, -0.179, -0.156, -0.131, -0.107, -0.082, -0.057, -0.033, -0.007, +0.017, +0.043, +0.069, +0.095, +0.121, +0.148, +0.175, +0.203, +0.231, +0.260, +0.289, +0.319, +0.350, +0.381, +0.413, +0.445, +0.478, +0.512, +0.546, +0.582, +0.617, +0.656, +0.695, +0.736, +0.778, +0.821, +0.868, +0.916, +0.966, +1.018, +1.076, +1.134, +1.198, +1.268, +1.338, +1.422, +1.510, +1.607, +1.715, +1.845, +2.002, +2.189, +2.459, +2.897, +3.317, +3.812, +4.176, +4.557, +5.193, +5.707, +6.208, +6.572, +6.692},  +0.002,  -0.131,   0.999},
	{"FPF-14+6/16:cross",      512, 270336, 1, { -2.266, -2.243, -2.200, -2.161, -2.121, -2.062, -2.009, -1.935, -1.823, -1.724, -1.596, -1.511, -1.440, -1.383, -1.329, -1.283, -1.240, -1.200, -1.162, -1.126, -1.091, -1.058, -1.027, -0.996, -0.966, -0.937, -0.909, -0.880, -0.853, -0.825, -0.799, -0.774, -0.748, -0.723, -0.699, -0.675, -0.650, -0.626, -0.602, -0.578, -0.555, -0.531, -0.508, -0.484, -0.461, -0.438, -0.414, -0.392, -0.369, -0.345, -0.322, -0.298, -0.275, -0.253, -0.230, -0.206, -0.182, -0.158, -0.134, -0.109, -0.084, -0.059, -0.035, -0.010, +0.015, +0.040, +0.066, +0.093, +0.119, +0.145, +0.172, +0.200, +0.228, +0.256, +0.286, +0.316, +0.346, +0.377, +0.409, +0.442, +0.474, +0.508, +0.543, +0.580, +0.619, +0.658, +0.698, +0.739, +0.783, +0.828, +0.875, +0.922, +0.973, +1.025, +1.080, +1.139, +1.203, +1.270, +1.344, +1.421, +1.511, +1.610, +1.716, +1.844, +1.996, +2.197, +2.456, +2.897, +3.304, +3.833, +4.219, +4.579, +4.979, +5.337, +5.656, +6.193, +6.858},  +0.002,  -0.134,   0.999},
	{"FPF-14+6/16:cross",      640, 270336, 2, { -2.247, -2.208, -2.174, -2.145, -2.110, -2.049, -1.996, -1.929, -1.825, -1.724, -1.601, -1.515, -1.445, -1.383, -1.331, -1.284, -1.241, -1.201, -1.162, -1.126, -1.092, -1.059, -1.027, -0.996, -0.967, -0.938, -0.910, -0.882, -0.855, -0.828, -0.802, -0.776, -0.751, -0.726, -0.701, -0.677, -0.653, -0.629, -0.604, -0.580, -0.556, -0.533, -0.510, -0.486, -0.462, -0.439, -0.416, -0.392, -0.368, -0.346, -0.322, -0.299, -0.275, -0.252, -0.228, -0.204, -0.181, -0.157, -0.133, -0.109, -0.084, -0.060, -0.035, -0.010, +0.016, +0.041, +0.068, +0.094, +0.121, +0.148, +0.177, +0.204, +0.232, +0.261, +0.290, +0.320, +0.350, +0.381, +0.412, +0.445, +0.479, +0.513, +0.548, +0.583, +0.620, +0.658, +0.697, +0.737, +0.780, +0.826, +0.872, +0.919, +0.967, +1.018, +1.074, +1.135, +1.197, +1.265, +1.338, +1.420, +1.506, +1.605, +1.717, +1.842, +1.996, +2.196, +2.450, +2.885, +3.301, +3.841, +4.205, +4.550, +5.026, +5.369, +5.809, +6.508, +6.937},  +0.001,  -0.133,   0.999},
	{"FPF-14+6/16:cross",      768, 270336, 2, { -2.319, -2.297, -2.261, -2.213, -2.184, -2.111, -2.040, -1.964, -1.852, -1.745, -1.614, -1.525, -1.453, -1.392, -1.339, -1.292, -1.248, -1.206, -1.167, -1.130, -1.095, -1.061, -1.028, -0.997, -0.967, -0.939, -0.910, -0.882, -0.854, -0.827, -0.800, -0.774, -0.749, -0.724, -0.700, -0.675, -0.650, -0.626, -0.602, -0.578, -0.554, -0.530, -0.506, -0.482, -0.458, -0.435, -0.412, -0.388, -0.364, -0.341, -0.318, -0.294, -0.271, -0.247, -0.223, -0.199, -0.174, -0.150, -0.125, -0.101, -0.077, -0.052, -0.027, -0.002, +0.024, +0.049, +0.075, +0.101, +0.128, +0.155, +0.182, +0.210, +0.238, +0.267, +0.297, +0.327, +0.357, +0.388, +0.420, +0.454, +0.486, +0.521, +0.556, +0.592, +0.628, +0.666, +0.705, +0.746, +0.788, +0.833, +0.877, +0.925, +0.974, +1.025, +1.081, +1.137, +1.198, +1.266, +1.344, +1.422, +1.508, +1.603, +1.716, +1.842, +1.995, +2.195, +2.463, +2.893, +3.312, +3.814, +4.183, +4.550, +5.047, +5.400, +5.889, +6.402, +6.520},  +0.003,  -0.125,   1.002},
	{"FPF-14+6/16:cross",      896, 270336, 4, { -2.317, -2.277, -2.240, -2.205, -2.164, -2.092, -2.031, -1.962, -1.845, -1.739, -1.612, -1.525, -1.453, -1.392, -1.339, -1.291, -1.249, -1.206, -1.167, -1.130, -1.095, -1.062, -1.030, -0.998, -0.968, -0.939, -0.911, -0.882, -0.854, -0.827, -0.800, -0.774, -0.748, -0.723, -0.698, -0.673, -0.648, -0.624, -0.600, -0.577, -0.552, -0.529, -0.505, -0.482, -0.459, -0.436, -0.412, -0.389, -0.365, -0.341, -0.317, -0.293, -0.270, -0.246, -0.221, -0.197, -0.173, -0.150, -0.126, -0.101, -0.077, -0.052, -0.028, -0.002, +0.023, +0.050, +0.075, +0.102, +0.128, +0.156, +0.184, +0.212, +0.240, +0.269, +0.297, +0.328, +0.358, +0.390, +0.422, +0.455, +0.488, +0.523, +0.558, +0.593, +0.629, +0.666, +0.706, +0.746, +0.787, +0.831, +0.877, +0.924, +0.973, +1.024, +1.080, +1.140, +1.203, +1.269, +1.342, +1.421, +1.508, +1.608, +1.719, +1.846, +1.997, +2.190, +2.459, +2.902, +3.305, +3.844, +4.245, +4.613, +5.003, +5.326, +5.903, +6.277, +6.801},  +0.004,  -0.126,   1.002},
	{"FPF-14+6/16:cross",     1024, 270336, 4, { -2.295, -2.276, -2.236, -2.203, -2.157, -2.088, -2.024, -1.961, -1.851, -1.746, -1.614, -1.524, -1.453, -1.396, -1.342, -1.293, -1.249, -1.209, -1.170, -1.132, -1.097, -1.064, -1.033, -1.002, -0.971, -0.941, -0.911, -0.883, -0.856, -0.829, -0.801, -0.775, -0.750, -0.725, -0.699, -0.674, -0.649, -0.625, -0.601, -0.577, -0.552, -0.529, -0.505, -0.482, -0.458, -0.435, -0.412, -0.388, -0.364, -0.340, -0.317, -0.293, -0.270, -0.246, -0.222, -0.199, -0.175, -0.150, -0.126, -0.102, -0.077, -0.053, -0.028, -0.003, +0.021, +0.047, +0.072, +0.099, +0.125, +0.153, +0.181, +0.208, +0.238, +0.266, +0.295, +0.324, +0.355, +0.387, +0.419, +0.451, +0.484, +0.518, +0.552, +0.588, +0.625, +0.663, +0.705, +0.745, +0.789, +0.833, +0.879, +0.926, +0.976, +1.028, +1.082, +1.140, +1.203, +1.271, +1.344, +1.425, +1.511, +1.608, +1.720, +1.848, +2.004, +2.198, +2.462, +2.898, +3.316, +3.836, +4.233, +4.659, +5.059, +5.487, +5.892, +6.243, +6.635},  +0.003,  -0.126,   1.004},
	{"FPF-14+6/16:cross",     1280, 270336, 4, { -2.306, -2.279, -2.256, -2.224, -2.177, -2.111, -2.037, -1.965, -1.853, -1.744, -1.612, -1.524, -1.454, -1.394, -1.341, -1.292, -1.248, -1.207, -1.169, -1.133, -1.098, -1.064, -1.032, -1.000, -0.970, -0.942, -0.912, -0.884, -0.856, -0.829, -0.803, -0.777, -0.751, -0.725, -0.700, -0.675, -0.650, -0.625, -0.601, -0.577, -0.553, -0.530, -0.506, -0.481, -0.458, -0.434, -0.410, -0.387, -0.363, -0.340, -0.317, -0.293, -0.269, -0.246, -0.222, -0.198, -0.174, -0.150, -0.125, -0.100, -0.077, -0.052, -0.027, -0.002, +0.023, +0.048, +0.074, +0.101, +0.126, +0.154, +0.182, +0.210, +0.237, +0.265, +0.295, +0.325, +0.354, +0.385, +0.416, +0.449, +0.481, +0.515, +0.549, +0.584, +0.622, +0.661, +0.700, +0.741, +0.782, +0.827, +0.873, +0.919, +0.970, +1.021, +1.077, +1.135, +1.196, +1.263, +1.336, +1.415, +1.503, +1.597, +1.707, +1.838, +1.993, +2.187, +2.452, +2.890, +3.320, +3.884, +4.307, +4.718, +5.173, +5.480, +6.010, +6.781, +7.364},  +0.002,  -0.125,   1.002},
	{"FPF-14+6/16:cross",     1536, 270336, 6, { -2.408, -2.354, -2.297, -2.261, -2.211, -2.133, -2.080, -2.004, -1.883, -1.766, -1.632, -1.539, -1.466, -1.404, -1.351, -1.303, -1.256, -1.214, -1.174, -1.138, -1.102, -1.068, -1.034, -1.001, -0.971, -0.940, -0.911, -0.883, -0.855, -0.828, -0.800, -0.772, -0.746, -0.721, -0.695, -0.671, -0.646, -0.621, -0.597, -0.573, -0.548, -0.525, -0.502, -0.479, -0.455, -0.432, -0.409, -0.386, -0.362, -0.338, -0.315, -0.291, -0.267, -0.243, -0.219, -0.195, -0.172, -0.148, -0.124, -0.100, -0.074, -0.049, -0.024, +0.001, +0.026, +0.052, +0.078, +0.105, +0.132, +0.158, +0.186, +0.214, +0.244, +0.273, +0.301, +0.331, +0.362, +0.394, +0.426, +0.458, +0.491, +0.525, +0.559, +0.594, +0.630, +0.668, +0.707, +0.748, +0.790, +0.834, +0.878, +0.927, +0.976, +1.028, +1.084, +1.141, +1.204, +1.268, +1.342, +1.422, +1.505, +1.604, +1.715, +1.843, +2.002, +2.193, +2.451, +2.887, +3.299, +3.837, +4.255, +4.638, +5.167, +5.636, +6.084, +6.455, +6.539},  +0.004,  -0.124,   1.005},
	{"FPF-14+6/16:cross",     1792, 270336, 7, { -2.353, -2.329, -2.292, -2.250, -2.203, -2.131, -2.070, -2.002, -1.875, -1.766, -1.631, -1.539, -1.465, -1.403, -1.349, -1.298, -1.253, -1.211, -1.172, -1.135, -1.098, -1.064, -1.033, -1.002, -0.971, -0.942, -0.913, -0.885, -0.858, -0.831, -0.804, -0.777, -0.751, -0.726, -0.700, -0.674, -0.650, -0.625, -0.600, -0.576, -0.553, -0.528, -0.504, -0.480, -0.456, -0.433, -0.409, -0.386, -0.362, -0.338, -0.314, -0.291, -0.267, -0.244, -0.220, -0.196, -0.172, -0.148, -0.123, -0.099, -0.074, -0.049, -0.024, +0.001, +0.027, +0.053, +0.079, +0.105, +0.132, +0.159, +0.187, +0.214, +0.242, +0.271, +0.300, +0.330, +0.360, +0.391, +0.423, +0.454, +0.487, +0.520, +0.555, +0.590, +0.627, +0.666, +0.704, +0.745, +0.788, +0.832, +0.878, +0.925, +0.974, +1.026, +1.082, +1.140, +1.201, +1.270, +1.344, +1.422, +1.511, +1.611, +1.723, +1.850, +2.001, +2.187, +2.446, +2.892, +3.306, +3.831, +4.232, +4.673, +5.114, +5.495, +5.864, +6.368, +7.408},  +0.003,  -0.123,   1.005},
	{"FPF-14+6/16:cross",     2048, 270336, 6, { -2.324, -2.304, -2.276, -2.239, -2.192, -2.131, -2.066, -1.992, -1.877, -1.765, -1.629, -1.538, -1.465, -1.404, -1.349, -1.299, -1.253, -1.210, -1.172, -1.133, -1.099, -1.065, -1.033, -1.001, -0.971, -0.941, -0.912, -0.883, -0.856, -0.828, -0.801, -0.775, -0.748, -0.723, -0.698, -0.673, -0.648, -0.624, -0.599, -0.576, -0.552, -0.527, -0.503, -0.480, -0.456, -0.432, -0.408, -0.384, -0.361, -0.338, -0.315, -0.292, -0.268, -0.244, -0.220, -0.196, -0.171, -0.147, -0.123, -0.099, -0.075, -0.051, -0.026, -0.000, +0.026, +0.051, +0.077, +0.104, +0.131, +0.159, +0.187, +0.215, +0.244, +0.273, +0.303, +0.333, +0.363, +0.394, +0.425, +0.457, +0.490, +0.524, +0.559, +0.594, +0.631, +0.668, +0.707, +0.747, +0.790, +0.834, +0.880, +0.927, +0.977, +1.030, +1.085, +1.143, +1.206, +1.275, +1.345, +1.420, +1.504, +1.601, +1.707, +1.840, +1.993, +2.192, +2.453, +2.885, +3.308, +3.859, +4.248, +4.652, +5.157, +5.451, +5.695, +6.153, +6.573},  +0.004,  -0.123,   1.004},
	{"FPF-14+6/16:cross",     2560, 270336,18, { -2.402, -2.383, -2.322, -2.266, -2.212, -2.133, -2.070, -1.998, -1.874, -1.763, -1.630, -1.540, -1.467, -1.404, -1.350, -1.299, -1.255, -1.211, -1.173, -1.136, -1.101, -1.067, -1.034, -1.004, -0.973, -0.943, -0.914, -0.886, -0.859, -0.832, -0.805, -0.779, -0.753, -0.727, -0.701, -0.676, -0.651, -0.627, -0.603, -0.578, -0.554, -0.530, -0.507, -0.483, -0.460, -0.436, -0.413, -0.389, -0.365, -0.343, -0.319, -0.295, -0.272, -0.248, -0.224, -0.200, -0.176, -0.151, -0.127, -0.103, -0.078, -0.053, -0.027, -0.002, +0.023, +0.049, +0.075, +0.101, +0.128, +0.156, +0.183, +0.210, +0.236, +0.265, +0.295, +0.325, +0.355, +0.387, +0.419, +0.451, +0.484, +0.518, +0.552, +0.589, +0.624, +0.663, +0.701, +0.741, +0.782, +0.827, +0.873, +0.923, +0.973, +1.026, +1.082, +1.139, +1.201, +1.267, +1.341, +1.420, +1.506, +1.600, +1.708, +1.834, +1.985, +2.175, +2.445, +2.879, +3.297, +3.784, +4.180, +4.505, +5.056, +5.336, +5.854, +6.584, +7.265},  -0.000,  -0.127,   1.002},
	{"FPF-14+6/16:cross",     3072, 270336,13, { -2.442, -2.371, -2.351, -2.298, -2.238, -2.170, -2.097, -2.021, -1.896, -1.784, -1.651, -1.555, -1.476, -1.415, -1.359, -1.309, -1.263, -1.219, -1.179, -1.142, -1.107, -1.072, -1.039, -1.007, -0.976, -0.947, -0.916, -0.887, -0.860, -0.832, -0.806, -0.778, -0.752, -0.726, -0.700, -0.674, -0.649, -0.624, -0.600, -0.575, -0.551, -0.526, -0.502, -0.478, -0.454, -0.431, -0.407, -0.383, -0.359, -0.335, -0.312, -0.288, -0.265, -0.241, -0.216, -0.192, -0.168, -0.143, -0.118, -0.093, -0.069, -0.044, -0.019, +0.006, +0.032, +0.058, +0.084, +0.110, +0.136, +0.163, +0.190, +0.218, +0.247, +0.275, +0.304, +0.334, +0.364, +0.394, +0.426, +0.458, +0.490, +0.525, +0.558, +0.594, +0.630, +0.666, +0.706, +0.745, +0.786, +0.828, +0.873, +0.919, +0.970, +1.022, +1.077, +1.134, +1.197, +1.262, +1.332, +1.410, +1.499, +1.596, +1.708, +1.831, +1.982, +2.167, +2.430, +2.860, +3.265, +3.788, +4.150, +4.559, +5.025, +5.385, +5.596, +6.046, +6.427},  +0.001,  -0.118,   1.002},
	{"FPF-14+6/16:cross",     3584, 270336,13, { -2.396, -2.361, -2.318, -2.266, -2.230, -2.169, -2.103, -2.018, -1.898, -1.784, -1.646, -1.551, -1.476, -1.412, -1.357, -1.307, -1.261, -1.219, -1.179, -1.141, -1.106, -1.071, -1.037, -1.005, -0.974, -0.943, -0.914, -0.886, -0.857, -0.829, -0.802, -0.776, -0.750, -0.723, -0.698, -0.673, -0.648, -0.623, -0.599, -0.575, -0.550, -0.525, -0.501, -0.477, -0.453, -0.429, -0.405, -0.382, -0.358, -0.334, -0.310, -0.286, -0.262, -0.238, -0.215, -0.191, -0.166, -0.142, -0.118, -0.094, -0.069, -0.044, -0.019, +0.005, +0.031, +0.057, +0.082, +0.108, +0.135, +0.161, +0.187, +0.215, +0.243, +0.271, +0.300, +0.330, +0.360, +0.391, +0.423, +0.454, +0.486, +0.519, +0.554, +0.590, +0.626, +0.664, +0.703, +0.742, +0.786, +0.828, +0.872, +0.920, +0.971, +1.022, +1.079, +1.135, +1.200, +1.266, +1.337, +1.415, +1.500, +1.594, +1.702, +1.829, +1.979, +2.167, +2.424, +2.849, +3.246, +3.728, +4.129, +4.469, +4.884, +5.244, +5.812, +6.224, +6.439},  +0.000,  -0.118,   1.000},
	{"FPF-14+6/16:cross",     4096, 270336,18, { -2.426, -2.379, -2.347, -2.307, -2.258, -2.171, -2.111, -2.028, -1.903, -1.790, -1.646, -1.552, -1.480, -1.417, -1.359, -1.309, -1.262, -1.219, -1.180, -1.141, -1.105, -1.069, -1.037, -1.005, -0.974, -0.943, -0.913, -0.885, -0.856, -0.828, -0.801, -0.774, -0.748, -0.723, -0.696, -0.671, -0.646, -0.621, -0.597, -0.573, -0.549, -0.526, -0.501, -0.477, -0.454, -0.429, -0.405, -0.381, -0.357, -0.334, -0.310, -0.287, -0.263, -0.240, -0.215, -0.192, -0.167, -0.143, -0.118, -0.094, -0.068, -0.043, -0.019, +0.006, +0.032, +0.057, +0.084, +0.110, +0.136, +0.163, +0.190, +0.219, +0.247, +0.276, +0.306, +0.336, +0.365, +0.396, +0.427, +0.459, +0.492, +0.525, +0.560, +0.595, +0.632, +0.668, +0.708, +0.747, +0.788, +0.830, +0.877, +0.925, +0.974, +1.026, +1.080, +1.140, +1.201, +1.267, +1.336, +1.414, +1.499, +1.594, +1.702, +1.825, +1.977, +2.166, +2.420, +2.841, +3.239, +3.702, +4.099, +4.455, +5.012, +5.306, +5.602, +6.492, +6.534},  +0.001,  -0.118,   1.000},
	{"FPF-14+6/16:cross",     5120, 270336,30, { -2.407, -2.381, -2.345, -2.304, -2.254, -2.176, -2.109, -2.025, -1.897, -1.783, -1.647, -1.555, -1.479, -1.417, -1.361, -1.310, -1.264, -1.221, -1.182, -1.145, -1.109, -1.075, -1.042, -1.009, -0.980, -0.949, -0.920, -0.891, -0.862, -0.835, -0.807, -0.779, -0.751, -0.725, -0.700, -0.674, -0.648, -0.623, -0.600, -0.575, -0.550, -0.525, -0.501, -0.476, -0.452, -0.429, -0.405, -0.381, -0.358, -0.334, -0.311, -0.287, -0.264, -0.240, -0.216, -0.193, -0.169, -0.145, -0.121, -0.096, -0.071, -0.046, -0.021, +0.004, +0.029, +0.054, +0.079, +0.106, +0.133, +0.160, +0.187, +0.215, +0.244, +0.272, +0.301, +0.330, +0.360, +0.391, +0.422, +0.454, +0.485, +0.519, +0.554, +0.589, +0.625, +0.661, +0.702, +0.743, +0.784, +0.826, +0.873, +0.919, +0.971, +1.024, +1.077, +1.135, +1.198, +1.263, +1.335, +1.414, +1.502, +1.598, +1.706, +1.827, +1.979, +2.167, +2.416, +2.835, +3.239, +3.744, +4.131, +4.481, +4.977, +5.309, +5.701, +6.256, +6.877},  -0.001,  -0.121,   1.000},
	{"FPF-14+6/16:cross",     6144, 270336,25, { -2.458, -2.436, -2.378, -2.335, -2.278, -2.210, -2.137, -2.052, -1.920, -1.801, -1.659, -1.563, -1.487, -1.419, -1.363, -1.313, -1.266, -1.223, -1.182, -1.143, -1.106, -1.071, -1.037, -1.005, -0.974, -0.943, -0.913, -0.884, -0.856, -0.828, -0.801, -0.774, -0.748, -0.722, -0.696, -0.670, -0.645, -0.620, -0.595, -0.571, -0.547, -0.523, -0.499, -0.475, -0.452, -0.428, -0.404, -0.380, -0.356, -0.332, -0.308, -0.283, -0.260, -0.236, -0.212, -0.188, -0.163, -0.139, -0.115, -0.090, -0.066, -0.041, -0.016, +0.009, +0.035, +0.061, +0.087, +0.113, +0.140, +0.167, +0.195, +0.222, +0.250, +0.277, +0.306, +0.336, +0.366, +0.396, +0.427, +0.459, +0.493, +0.525, +0.561, +0.596, +0.632, +0.670, +0.708, +0.750, +0.790, +0.834, +0.879, +0.926, +0.976, +1.027, +1.079, +1.137, +1.196, +1.261, +1.333, +1.410, +1.494, +1.586, +1.691, +1.818, +1.969, +2.157, +2.404, +2.826, +3.236, +3.777, +4.138, +4.472, +4.888, +5.206, +5.533, +5.918, +6.057},  +0.001,  -0.115,   1.000},
	{"FPF-14+6/16:cross",     7168, 270336,25, { -2.462, -2.442, -2.373, -2.343, -2.299, -2.207, -2.138, -2.050, -1.918, -1.800, -1.660, -1.565, -1.487, -1.422, -1.365, -1.314, -1.268, -1.224, -1.184, -1.146, -1.110, -1.075, -1.039, -1.007, -0.975, -0.945, -0.916, -0.888, -0.859, -0.831, -0.804, -0.778, -0.751, -0.724, -0.697, -0.672, -0.647, -0.622, -0.597, -0.572, -0.548, -0.523, -0.500, -0.476, -0.452, -0.428, -0.404, -0.380, -0.356, -0.333, -0.310, -0.286, -0.261, -0.238, -0.213, -0.189, -0.165, -0.139, -0.115, -0.091, -0.067, -0.042, -0.016, +0.010, +0.035, +0.060, +0.087, +0.113, +0.140, +0.167, +0.194, +0.222, +0.250, +0.277, +0.306, +0.336, +0.366, +0.398, +0.429, +0.460, +0.493, +0.526, +0.560, +0.595, +0.631, +0.667, +0.706, +0.744, +0.785, +0.827, +0.873, +0.919, +0.968, +1.020, +1.074, +1.134, +1.195, +1.262, +1.333, +1.412, +1.495, +1.588, +1.695, +1.819, +1.962, +2.144, +2.398, +2.814, +3.211, +3.735, +4.102, +4.418, +4.829, +5.175, +5.530, +6.059, +6.209},  -0.001,  -0.115,   0.999},
	{"FPF-14+6/16:cross",     8192, 270336,30, { -2.486, -2.419, -2.370, -2.342, -2.269, -2.194, -2.130, -2.049, -1.921, -1.797, -1.655, -1.563, -1.485, -1.421, -1.365, -1.314, -1.268, -1.223, -1.182, -1.145, -1.108, -1.073, -1.039, -1.006, -0.976, -0.945, -0.916, -0.887, -0.858, -0.830, -0.803, -0.775, -0.749, -0.723, -0.697, -0.671, -0.646, -0.621, -0.596, -0.572, -0.547, -0.523, -0.499, -0.475, -0.451, -0.426, -0.402, -0.378, -0.354, -0.330, -0.307, -0.283, -0.260, -0.236, -0.212, -0.189, -0.165, -0.140, -0.116, -0.091, -0.066, -0.041, -0.016, +0.010, +0.035, +0.061, +0.087, +0.113, +0.140, +0.166, +0.193, +0.222, +0.250, +0.279, +0.308, +0.337, +0.367, +0.397, +0.429, +0.461, +0.495, +0.528, +0.562, +0.598, +0.634, +0.671, +0.710, +0.749, +0.789, +0.833, +0.877, +0.924, +0.972, +1.023, +1.076, +1.132, +1.193, +1.258, +1.329, +1.405, +1.489, +1.582, +1.686, +1.811, +1.960, +2.148, +2.403, +2.823, +3.221, +3.712, +4.059, +4.413, +4.905, +5.242, +5.530, +5.735, +5.958},  -0.000,  -0.116,   0.998},
	{"FPF-14+6/16:cross",    10240, 270336,55, { -2.453, -2.433, -2.389, -2.349, -2.291, -2.194, -2.124, -2.046, -1.921, -1.798, -1.653, -1.557, -1.480, -1.416, -1.359, -1.311, -1.263, -1.221, -1.180, -1.143, -1.108, -1.073, -1.039, -1.007, -0.975, -0.944, -0.914, -0.885, -0.857, -0.830, -0.802, -0.775, -0.748, -0.722, -0.697, -0.672, -0.647, -0.622, -0.596, -0.571, -0.547, -0.523, -0.499, -0.475, -0.451, -0.427, -0.403, -0.380, -0.356, -0.333, -0.309, -0.285, -0.262, -0.238, -0.213, -0.189, -0.165, -0.141, -0.116, -0.091, -0.066, -0.042, -0.017, +0.009, +0.034, +0.059, +0.085, +0.113, +0.139, +0.167, +0.194, +0.222, +0.250, +0.278, +0.307, +0.336, +0.366, +0.396, +0.427, +0.459, +0.491, +0.525, +0.560, +0.594, +0.632, +0.668, +0.707, +0.747, +0.788, +0.830, +0.874, +0.920, +0.969, +1.020, +1.075, +1.134, +1.197, +1.260, +1.329, +1.405, +1.490, +1.584, +1.691, +1.815, +1.962, +2.149, +2.410, +2.823, +3.217, +3.729, +4.149, +4.559, +4.981, +5.429, +5.796, +6.218, +6.543},  -0.000,  -0.116,   0.999},
	{"FPF-14+6/16:cross",    12288, 270336,56, { -2.524, -2.516, -2.435, -2.394, -2.314, -2.229, -2.148, -2.070, -1.936, -1.815, -1.670, -1.571, -1.494, -1.428, -1.369, -1.317, -1.271, -1.225, -1.184, -1.146, -1.109, -1.073, -1.040, -1.007, -0.976, -0.944, -0.914, -0.886, -0.857, -0.828, -0.800, -0.773, -0.746, -0.719, -0.693, -0.668, -0.643, -0.617, -0.593, -0.568, -0.544, -0.519, -0.495, -0.471, -0.448, -0.424, -0.399, -0.375, -0.352, -0.329, -0.305, -0.281, -0.258, -0.233, -0.209, -0.185, -0.161, -0.138, -0.113, -0.089, -0.064, -0.039, -0.015, +0.010, +0.035, +0.060, +0.086, +0.112, +0.138, +0.166, +0.193, +0.221, +0.250, +0.279, +0.308, +0.337, +0.367, +0.398, +0.429, +0.461, +0.493, +0.527, +0.562, +0.597, +0.633, +0.669, +0.707, +0.748, +0.789, +0.831, +0.875, +0.921, +0.969, +1.020, +1.074, +1.131, +1.193, +1.259, +1.331, +1.405, +1.492, +1.586, +1.692, +1.815, +1.962, +2.152, +2.403, +2.827, +3.230, +3.759, +4.160, +4.524, +4.979, +5.335, +5.725, +6.126, +6.444},  +0.000,  -0.113,   1.000},
	{"FPF-14+6/16:cross",    14336, 270336,48, { -2.545, -2.474, -2.429, -2.378, -2.319, -2.230, -2.163, -2.073, -1.936, -1.814, -1.670, -1.575, -1.497, -1.432, -1.374, -1.322, -1.273, -1.229, -1.187, -1.148, -1.110, -1.074, -1.039, -1.006, -0.975, -0.944, -0.913, -0.883, -0.855, -0.827, -0.800, -0.772, -0.745, -0.719, -0.693, -0.667, -0.641, -0.617, -0.592, -0.567, -0.543, -0.518, -0.494, -0.470, -0.446, -0.422, -0.399, -0.375, -0.352, -0.329, -0.305, -0.282, -0.258, -0.233, -0.210, -0.186, -0.162, -0.138, -0.113, -0.088, -0.063, -0.038, -0.013, +0.012, +0.037, +0.063, +0.089, +0.114, +0.140, +0.167, +0.193, +0.221, +0.250, +0.279, +0.308, +0.338, +0.367, +0.398, +0.428, +0.459, +0.491, +0.525, +0.561, +0.596, +0.632, +0.669, +0.710, +0.750, +0.792, +0.835, +0.880, +0.926, +0.974, +1.026, +1.080, +1.139, +1.200, +1.267, +1.337, +1.412, +1.499, +1.591, +1.698, +1.821, +1.967, +2.148, +2.401, +2.818, +3.227, +3.751, +4.161, +4.586, +5.035, +5.378, +5.793, +6.169, +6.310},  +0.001,  -0.113,   1.002},
	{"FPF-14+6/16:cross",    16384, 270336,55, { -2.502, -2.469, -2.407, -2.358, -2.309, -2.231, -2.157, -2.073, -1.945, -1.823, -1.673, -1.572, -1.495, -1.429, -1.372, -1.320, -1.272, -1.227, -1.186, -1.146, -1.110, -1.074, -1.040, -1.007, -0.975, -0.944, -0.915, -0.885, -0.857, -0.828, -0.802, -0.774, -0.747, -0.721, -0.694, -0.669, -0.644, -0.618, -0.594, -0.570, -0.544, -0.519, -0.496, -0.472, -0.449, -0.425, -0.401, -0.376, -0.353, -0.329, -0.305, -0.281, -0.258, -0.234, -0.210, -0.186, -0.162, -0.138, -0.114, -0.089, -0.066, -0.042, -0.017, +0.008, +0.033, +0.059, +0.085, +0.112, +0.139, +0.166, +0.194, +0.222, +0.249, +0.277, +0.306, +0.335, +0.365, +0.396, +0.428, +0.461, +0.494, +0.528, +0.562, +0.597, +0.633, +0.671, +0.709, +0.748, +0.791, +0.834, +0.879, +0.925, +0.973, +1.024, +1.077, +1.133, +1.196, +1.262, +1.331, +1.407, +1.490, +1.586, +1.693, +1.816, +1.965, +2.151, +2.414, +2.838, +3.252, +3.759, +4.152, +4.505, +5.022, +5.348, +5.719, +6.080, +7.039},  +0.000,  -0.114,   1.002},
	{"FPF-14+6/16:cross",    24576, 270336,126,{ -2.575, -2.535, -2.491, -2.428, -2.355, -2.275, -2.187, -2.100, -1.951, -1.831, -1.683, -1.580, -1.502, -1.438, -1.378, -1.324, -1.275, -1.231, -1.190, -1.152, -1.116, -1.080, -1.045, -1.011, -0.979, -0.948, -0.917, -0.886, -0.857, -0.828, -0.799, -0.772, -0.746, -0.719, -0.693, -0.666, -0.641, -0.615, -0.590, -0.566, -0.541, -0.517, -0.492, -0.467, -0.443, -0.419, -0.395, -0.371, -0.347, -0.323, -0.300, -0.276, -0.252, -0.229, -0.205, -0.181, -0.157, -0.133, -0.109, -0.084, -0.059, -0.035, -0.011, +0.014, +0.039, +0.064, +0.091, +0.118, +0.144, +0.171, +0.198, +0.225, +0.253, +0.282, +0.311, +0.341, +0.371, +0.402, +0.434, +0.467, +0.499, +0.533, +0.568, +0.603, +0.639, +0.675, +0.713, +0.752, +0.794, +0.837, +0.881, +0.926, +0.975, +1.027, +1.079, +1.136, +1.195, +1.259, +1.329, +1.404, +1.489, +1.584, +1.689, +1.816, +1.959, +2.144, +2.398, +2.804, +3.208, +3.721, +4.069, +4.435, +4.904, +5.246, +5.547, +6.043, +6.278},  +0.001,  -0.109,   1.001},
	{"FPF-14+6/16:cross",    32768, 270336,217,{ -2.495, -2.469, -2.435, -2.396, -2.349, -2.245, -2.170, -2.088, -1.959, -1.834, -1.684, -1.583, -1.504, -1.437, -1.378, -1.324, -1.276, -1.232, -1.190, -1.151, -1.113, -1.077, -1.044, -1.009, -0.978, -0.946, -0.916, -0.886, -0.857, -0.828, -0.801, -0.774, -0.745, -0.718, -0.692, -0.666, -0.640, -0.614, -0.589, -0.565, -0.540, -0.517, -0.493, -0.470, -0.446, -0.422, -0.398, -0.374, -0.350, -0.326, -0.303, -0.278, -0.255, -0.231, -0.207, -0.182, -0.159, -0.134, -0.110, -0.086, -0.061, -0.037, -0.012, +0.013, +0.038, +0.063, +0.089, +0.115, +0.142, +0.169, +0.195, +0.223, +0.251, +0.280, +0.309, +0.338, +0.368, +0.400, +0.430, +0.461, +0.494, +0.528, +0.561, +0.596, +0.632, +0.669, +0.708, +0.748, +0.789, +0.830, +0.874, +0.920, +0.968, +1.018, +1.074, +1.130, +1.189, +1.253, +1.324, +1.400, +1.484, +1.577, +1.686, +1.810, +1.953, +2.141, +2.398, +2.813, +3.208, +3.714, +4.087, +4.425, +4.878, +5.156, +5.368, +5.687, +5.981},  -0.001,  -0.110,   0.999},
	{"FPF-14+6/16:cross",    49152, 270336,195,{ -2.609, -2.520, -2.487, -2.436, -2.374, -2.279, -2.202, -2.116, -1.977, -1.849, -1.693, -1.589, -1.507, -1.438, -1.380, -1.327, -1.279, -1.233, -1.191, -1.152, -1.115, -1.078, -1.044, -1.011, -0.978, -0.947, -0.916, -0.887, -0.858, -0.829, -0.800, -0.773, -0.745, -0.718, -0.692, -0.667, -0.641, -0.616, -0.591, -0.567, -0.542, -0.517, -0.493, -0.468, -0.444, -0.420, -0.396, -0.371, -0.348, -0.324, -0.299, -0.274, -0.250, -0.226, -0.201, -0.177, -0.153, -0.128, -0.104, -0.079, -0.055, -0.030, -0.005, +0.021, +0.046, +0.073, +0.098, +0.124, +0.151, +0.179, +0.205, +0.233, +0.262, +0.290, +0.319, +0.348, +0.377, +0.407, +0.438, +0.470, +0.503, +0.536, +0.571, +0.606, +0.641, +0.678, +0.718, +0.758, +0.798, +0.840, +0.883, +0.929, +0.977, +1.027, +1.080, +1.137, +1.197, +1.261, +1.331, +1.406, +1.487, +1.574, +1.684, +1.804, +1.956, +2.133, +2.379, +2.784, +3.164, +3.669, +4.007, +4.357, +4.759, +5.039, +5.467, +5.872, +6.134},  +0.001,  -0.104,   0.999},
	{"FPF-14+6/16:cross",    65536, 270336,397,{ -2.589, -2.565, -2.517, -2.436, -2.377, -2.282, -2.202, -2.111, -1.976, -1.847, -1.694, -1.593, -1.510, -1.442, -1.383, -1.330, -1.280, -1.234, -1.193, -1.154, -1.115, -1.079, -1.044, -1.011, -0.977, -0.946, -0.915, -0.885, -0.855, -0.826, -0.798, -0.772, -0.744, -0.718, -0.691, -0.664, -0.638, -0.614, -0.588, -0.564, -0.539, -0.514, -0.489, -0.465, -0.441, -0.418, -0.394, -0.370, -0.346, -0.322, -0.298, -0.274, -0.250, -0.227, -0.203, -0.178, -0.154, -0.130, -0.106, -0.082, -0.058, -0.034, -0.009, +0.017, +0.043, +0.069, +0.094, +0.121, +0.148, +0.175, +0.202, +0.230, +0.259, +0.287, +0.316, +0.345, +0.376, +0.406, +0.437, +0.469, +0.502, +0.536, +0.569, +0.604, +0.639, +0.677, +0.716, +0.756, +0.797, +0.840, +0.885, +0.929, +0.979, +1.030, +1.083, +1.140, +1.201, +1.265, +1.336, +1.410, +1.491, +1.584, +1.687, +1.808, +1.951, +2.134, +2.372, +2.765, +3.132, +3.584, +3.963, +4.314, +4.719, +5.090, +5.506, +5.807, +6.191},  +0.001,  -0.106,   0.998},
	{"FPF-14+6/16:cross",    98304, 270336,439,{ -2.672, -2.644, -2.529, -2.470, -2.405, -2.310, -2.229, -2.133, -1.985, -1.853, -1.700, -1.596, -1.513, -1.445, -1.385, -1.332, -1.282, -1.235, -1.191, -1.151, -1.113, -1.077, -1.042, -1.008, -0.976, -0.945, -0.915, -0.885, -0.856, -0.828, -0.800, -0.772, -0.745, -0.717, -0.690, -0.665, -0.640, -0.615, -0.589, -0.563, -0.539, -0.515, -0.491, -0.467, -0.442, -0.418, -0.394, -0.370, -0.346, -0.321, -0.297, -0.273, -0.249, -0.225, -0.201, -0.177, -0.152, -0.127, -0.103, -0.079, -0.054, -0.029, -0.004, +0.021, +0.046, +0.073, +0.099, +0.125, +0.152, +0.178, +0.206, +0.234, +0.261, +0.289, +0.319, +0.348, +0.379, +0.410, +0.441, +0.473, +0.506, +0.539, +0.573, +0.609, +0.645, +0.682, +0.720, +0.760, +0.800, +0.844, +0.887, +0.932, +0.981, +1.032, +1.084, +1.141, +1.200, +1.263, +1.332, +1.406, +1.489, +1.580, +1.686, +1.802, +1.942, +2.124, +2.367, +2.771, +3.151, +3.632, +4.007, +4.340, +4.788, +5.162, +5.720, +6.333, +6.619},  +0.002,  -0.103,   0.999},
	{"FPF-14+6/16:cross",   131072, 270336,815,{ -2.608, -2.589, -2.544, -2.463, -2.402, -2.301, -2.217, -2.128, -1.986, -1.856, -1.704, -1.600, -1.520, -1.450, -1.390, -1.338, -1.287, -1.241, -1.198, -1.156, -1.119, -1.082, -1.047, -1.013, -0.981, -0.949, -0.918, -0.888, -0.859, -0.830, -0.801, -0.773, -0.747, -0.720, -0.694, -0.667, -0.642, -0.616, -0.591, -0.566, -0.541, -0.516, -0.492, -0.469, -0.445, -0.421, -0.397, -0.373, -0.350, -0.325, -0.300, -0.276, -0.252, -0.228, -0.204, -0.180, -0.156, -0.130, -0.106, -0.081, -0.056, -0.031, -0.006, +0.020, +0.046, +0.072, +0.098, +0.125, +0.151, +0.177, +0.204, +0.232, +0.260, +0.288, +0.317, +0.346, +0.376, +0.405, +0.438, +0.469, +0.501, +0.535, +0.569, +0.604, +0.641, +0.678, +0.716, +0.755, +0.797, +0.842, +0.886, +0.933, +0.981, +1.031, +1.084, +1.140, +1.203, +1.266, +1.335, +1.411, +1.493, +1.586, +1.690, +1.813, +1.957, +2.136, +2.385, +2.788, +3.170, +3.643, +3.984, +4.282, +4.778, +5.111, +5.615, +6.156, +6.615},  +0.000,  -0.106,   1.002},

	{"FPF-14+6/16:overall",        1, 270336, 75, {-18.461,-18.044,-17.436,-16.458,-15.712,-14.383,-13.416,-12.518,-11.238,-10.156, -8.957, -8.181, -7.627, -7.158, -6.768, -6.414, -6.087, -5.804, -5.540, -5.304, -5.083, -4.873, -4.676, -4.490, -4.304, -4.121, -3.955, -3.790, -3.628, -3.466, -3.313, -3.161, -3.018, -2.879, -2.739, -2.604, -2.475, -2.348, -2.219, -2.097, -1.975, -1.854, -1.729, -1.609, -1.495, -1.379, -1.263, -1.147, -1.032, -0.916, -0.805, -0.695, -0.587, -0.479, -0.371, -0.261, -0.151, -0.041, +0.070, +0.179, +0.291, +0.402, +0.513, +0.623, +0.733, +0.843, +0.954, +1.066, +1.176, +1.289, +1.406, +1.516, +1.628, +1.743, +1.860, +1.978, +2.099, +2.221, +2.345, +2.474, +2.603, +2.733, +2.868, +3.002, +3.138, +3.276, +3.425, +3.573, +3.722, +3.879, +4.041, +4.211, +4.389, +4.567, +4.759, +4.957, +5.164, +5.385, +5.617, +5.879, +6.171, +6.475, +6.821, +7.218, +7.664, +8.232, +8.977,+10.161,+11.275,+12.568,+13.441,+14.316,+15.626,+16.517,+17.413,+18.205,+18.725},  +0.053,  +0.070,   4.364},
	{"FPF-14+6/16:overall",        2, 270336, 0, {-16.212,-15.129,-14.529,-13.992,-13.504,-12.298,-11.525,-10.715, -9.513, -8.560, -7.577, -6.912, -6.422, -6.028, -5.692, -5.397, -5.130, -4.886, -4.665, -4.463, -4.266, -4.092, -3.919, -3.759, -3.601, -3.454, -3.307, -3.172, -3.038, -2.906, -2.782, -2.658, -2.533, -2.415, -2.301, -2.185, -2.075, -1.964, -1.855, -1.747, -1.643, -1.541, -1.442, -1.342, -1.245, -1.147, -1.051, -0.951, -0.856, -0.762, -0.669, -0.579, -0.487, -0.393, -0.298, -0.204, -0.111, -0.020, +0.073, +0.164, +0.257, +0.350, +0.444, +0.536, +0.627, +0.718, +0.810, +0.902, +0.994, +1.088, +1.184, +1.281, +1.376, +1.474, +1.573, +1.673, +1.772, +1.876, +1.979, +2.085, +2.190, +2.298, +2.411, +2.521, +2.640, +2.759, +2.883, +3.007, +3.135, +3.265, +3.401, +3.542, +3.684, +3.830, +3.991, +4.157, +4.337, +4.520, +4.712, +4.930, +5.164, +5.415, +5.702, +6.025, +6.409, +6.857, +7.466, +8.434, +9.296,+10.395,+11.122,+11.783,+12.674,+13.140,+13.959,+14.824,+14.965},  +0.042,  +0.073,   3.662},
	{"FPF-14+6/16:overall",        3, 270336, 0, {-12.199,-11.850,-10.841,-10.552,-10.149, -9.325, -8.634, -8.043, -7.173, -6.442, -5.666, -5.175, -4.813, -4.519, -4.265, -4.040, -3.850, -3.672, -3.505, -3.353, -3.206, -3.071, -2.945, -2.820, -2.707, -2.594, -2.488, -2.383, -2.285, -2.187, -2.094, -2.001, -1.911, -1.821, -1.737, -1.651, -1.568, -1.487, -1.409, -1.330, -1.249, -1.171, -1.092, -1.017, -0.945, -0.871, -0.799, -0.727, -0.655, -0.583, -0.512, -0.441, -0.372, -0.299, -0.229, -0.157, -0.089, -0.018, +0.051, +0.121, +0.188, +0.253, +0.322, +0.390, +0.461, +0.529, +0.600, +0.669, +0.740, +0.812, +0.883, +0.955, +1.030, +1.105, +1.180, +1.252, +1.328, +1.408, +1.488, +1.568, +1.648, +1.730, +1.812, +1.898, +1.986, +2.077, +2.167, +2.263, +2.358, +2.457, +2.560, +2.666, +2.779, +2.893, +3.011, +3.139, +3.271, +3.412, +3.565, +3.727, +3.904, +4.097, +4.314, +4.563, +4.859, +5.219, +5.690, +6.454, +7.149, +7.977, +8.604, +9.153, +9.938,+10.310,+10.775,+11.216,+11.578},  +0.036,  +0.051,   2.763},
	{"FPF-14+6/16:overall",        4, 270336, 0, {-13.138,-12.263,-11.753,-11.242,-10.532, -9.945, -9.313, -8.638, -7.717, -6.900, -6.056, -5.532, -5.157, -4.830, -4.562, -4.323, -4.117, -3.928, -3.752, -3.585, -3.433, -3.286, -3.151, -3.021, -2.896, -2.776, -2.662, -2.549, -2.438, -2.336, -2.232, -2.132, -2.033, -1.941, -1.850, -1.759, -1.672, -1.583, -1.498, -1.414, -1.329, -1.245, -1.165, -1.086, -1.007, -0.929, -0.853, -0.776, -0.699, -0.624, -0.548, -0.475, -0.401, -0.324, -0.251, -0.178, -0.107, -0.032, +0.039, +0.116, +0.187, +0.264, +0.336, +0.410, +0.482, +0.558, +0.634, +0.710, +0.787, +0.863, +0.941, +1.019, +1.096, +1.175, +1.256, +1.337, +1.418, +1.503, +1.588, +1.673, +1.758, +1.845, +1.934, +2.026, +2.118, +2.214, +2.314, +2.415, +2.518, +2.623, +2.734, +2.848, +2.966, +3.090, +3.220, +3.359, +3.498, +3.646, +3.800, +3.979, +4.164, +4.369, +4.606, +4.867, +5.181, +5.560, +6.068, +6.871, +7.584, +8.496, +9.148, +9.822,+10.536,+11.187,+11.928,+12.567,+13.231},  +0.035,  +0.039,   2.952},
	{"FPF-14+6/16:overall",        5, 270336, 0, {-10.247, -9.516, -8.959, -8.610, -8.192, -7.555, -7.061, -6.572, -5.910, -5.340, -4.727, -4.321, -4.020, -3.769, -3.558, -3.373, -3.213, -3.069, -2.926, -2.799, -2.678, -2.565, -2.458, -2.355, -2.259, -2.168, -2.078, -1.995, -1.910, -1.830, -1.751, -1.674, -1.600, -1.525, -1.455, -1.384, -1.313, -1.244, -1.177, -1.111, -1.046, -0.981, -0.917, -0.857, -0.795, -0.734, -0.671, -0.611, -0.549, -0.489, -0.433, -0.375, -0.320, -0.264, -0.206, -0.148, -0.090, -0.031, +0.028, +0.085, +0.144, +0.202, +0.259, +0.317, +0.376, +0.435, +0.496, +0.555, +0.615, +0.676, +0.736, +0.796, +0.856, +0.918, +0.979, +1.044, +1.107, +1.172, +1.237, +1.303, +1.371, +1.438, +1.509, +1.581, +1.654, +1.728, +1.805, +1.886, +1.967, +2.053, +2.139, +2.234, +2.328, +2.425, +2.528, +2.634, +2.749, +2.871, +2.999, +3.142, +3.290, +3.457, +3.644, +3.857, +4.111, +4.412, +4.829, +5.491, +6.089, +6.868, +7.388, +7.843, +8.554, +8.904, +9.461,+10.045,+10.511},  +0.034,  +0.028,   2.317},
	{"FPF-14+6/16:overall",        6, 270336, 0, { -9.729, -9.082, -8.557, -8.308, -7.838, -7.256, -6.801, -6.320, -5.643, -5.101, -4.491, -4.107, -3.834, -3.601, -3.405, -3.227, -3.066, -2.927, -2.798, -2.673, -2.557, -2.451, -2.350, -2.255, -2.161, -2.074, -1.987, -1.905, -1.823, -1.746, -1.669, -1.596, -1.524, -1.455, -1.389, -1.320, -1.256, -1.191, -1.127, -1.065, -1.003, -0.941, -0.882, -0.822, -0.762, -0.704, -0.646, -0.587, -0.530, -0.474, -0.418, -0.360, -0.305, -0.249, -0.193, -0.136, -0.080, -0.026, +0.030, +0.086, +0.142, +0.199, +0.254, +0.310, +0.367, +0.422, +0.478, +0.536, +0.593, +0.649, +0.708, +0.766, +0.826, +0.887, +0.948, +1.008, +1.069, +1.133, +1.194, +1.258, +1.324, +1.388, +1.457, +1.526, +1.598, +1.672, +1.747, +1.825, +1.902, +1.979, +2.067, +2.153, +2.244, +2.337, +2.438, +2.540, +2.649, +2.761, +2.884, +3.018, +3.161, +3.320, +3.499, +3.710, +3.953, +4.242, +4.657, +5.292, +5.860, +6.549, +7.102, +7.567, +8.215, +8.741, +8.999, +9.504, +9.889},  +0.041,  +0.030,   2.222},
	{"FPF-14+6/16:overall",        7, 270336, 0, {-10.258, -9.716, -9.240, -8.761, -8.348, -7.664, -7.188, -6.712, -5.950, -5.355, -4.725, -4.331, -4.024, -3.785, -3.571, -3.389, -3.225, -3.073, -2.933, -2.804, -2.688, -2.575, -2.473, -2.373, -2.279, -2.186, -2.096, -2.010, -1.924, -1.843, -1.764, -1.688, -1.610, -1.537, -1.465, -1.395, -1.327, -1.258, -1.189, -1.121, -1.057, -0.991, -0.927, -0.864, -0.802, -0.740, -0.680, -0.618, -0.556, -0.495, -0.436, -0.375, -0.315, -0.256, -0.199, -0.141, -0.083, -0.025, +0.032, +0.090, +0.149, +0.209, +0.267, +0.326, +0.384, +0.441, +0.499, +0.557, +0.615, +0.676, +0.737, +0.799, +0.860, +0.920, +0.980, +1.044, +1.108, +1.174, +1.240, +1.306, +1.375, +1.445, +1.517, +1.592, +1.667, +1.742, +1.818, +1.897, +1.979, +2.064, +2.153, +2.245, +2.342, +2.438, +2.542, +2.649, +2.759, +2.880, +3.009, +3.151, +3.306, +3.473, +3.658, +3.874, +4.123, +4.435, +4.854, +5.522, +6.143, +6.856, +7.345, +7.834, +8.313, +8.779, +9.152, +9.543, +9.754},  +0.034,  +0.032,   2.328},
	{"FPF-14+6/16:overall",        8, 270336, 0, { -9.721, -9.599, -9.201, -8.824, -8.413, -7.766, -7.333, -6.836, -6.078, -5.499, -4.864, -4.437, -4.130, -3.879, -3.673, -3.482, -3.310, -3.154, -3.014, -2.883, -2.761, -2.648, -2.538, -2.436, -2.337, -2.242, -2.150, -2.061, -1.972, -1.891, -1.809, -1.729, -1.649, -1.573, -1.499, -1.423, -1.353, -1.284, -1.216, -1.149, -1.083, -1.017, -0.951, -0.885, -0.821, -0.756, -0.693, -0.632, -0.570, -0.511, -0.452, -0.392, -0.333, -0.271, -0.212, -0.151, -0.092, -0.031, +0.026, +0.087, +0.145, +0.205, +0.265, +0.324, +0.382, +0.443, +0.504, +0.565, +0.625, +0.687, +0.750, +0.814, +0.877, +0.942, +1.006, +1.072, +1.138, +1.204, +1.273, +1.340, +1.412, +1.483, +1.556, +1.630, +1.705, +1.781, +1.860, +1.941, +2.025, +2.115, +2.205, +2.293, +2.389, +2.492, +2.595, +2.709, +2.821, +2.942, +3.074, +3.218, +3.372, +3.542, +3.739, +3.961, +4.218, +4.538, +4.956, +5.630, +6.257, +6.996, +7.537, +8.015, +8.568, +9.028, +9.455, +9.837,+10.042},  +0.031,  +0.026,   2.383},
	{"FPF-14+6/16:overall",       10, 270336, 0, { -8.764, -8.499, -7.522, -7.161, -6.850, -6.369, -6.037, -5.612, -5.059, -4.560, -4.035, -3.699, -3.448, -3.239, -3.062, -2.907, -2.768, -2.638, -2.520, -2.415, -2.312, -2.216, -2.124, -2.036, -1.950, -1.871, -1.796, -1.723, -1.652, -1.584, -1.519, -1.452, -1.390, -1.327, -1.266, -1.206, -1.145, -1.086, -1.028, -0.974, -0.918, -0.863, -0.808, -0.754, -0.703, -0.649, -0.597, -0.545, -0.493, -0.444, -0.394, -0.343, -0.292, -0.243, -0.191, -0.141, -0.090, -0.040, +0.010, +0.062, +0.111, +0.159, +0.209, +0.257, +0.306, +0.355, +0.407, +0.461, +0.513, +0.564, +0.616, +0.671, +0.725, +0.779, +0.833, +0.888, +0.946, +1.002, +1.059, +1.117, +1.177, +1.237, +1.298, +1.362, +1.428, +1.496, +1.562, +1.634, +1.705, +1.779, +1.854, +1.931, +2.016, +2.104, +2.195, +2.289, +2.391, +2.496, +2.607, +2.731, +2.862, +3.007, +3.171, +3.359, +3.586, +3.866, +4.226, +4.798, +5.330, +5.968, +6.416, +6.934, +7.453, +7.940, +8.382, +9.059, +9.356},  +0.030,  +0.010,   2.005},
	{"FPF-14+6/16:overall",       12, 270336, 0, { -8.195, -7.715, -7.475, -7.171, -6.753, -6.319, -5.945, -5.598, -5.031, -4.543, -4.011, -3.668, -3.416, -3.215, -3.044, -2.886, -2.749, -2.625, -2.510, -2.400, -2.298, -2.203, -2.114, -2.024, -1.943, -1.862, -1.786, -1.713, -1.644, -1.577, -1.511, -1.445, -1.379, -1.317, -1.253, -1.195, -1.135, -1.077, -1.020, -0.964, -0.909, -0.854, -0.800, -0.747, -0.694, -0.640, -0.589, -0.538, -0.485, -0.435, -0.387, -0.334, -0.284, -0.234, -0.183, -0.132, -0.081, -0.031, +0.019, +0.070, +0.119, +0.169, +0.220, +0.269, +0.319, +0.369, +0.419, +0.470, +0.521, +0.573, +0.623, +0.676, +0.728, +0.783, +0.837, +0.892, +0.947, +1.003, +1.059, +1.117, +1.175, +1.236, +1.298, +1.361, +1.425, +1.489, +1.556, +1.626, +1.696, +1.770, +1.850, +1.928, +2.007, +2.092, +2.179, +2.271, +2.371, +2.474, +2.587, +2.709, +2.838, +2.983, +3.147, +3.332, +3.556, +3.825, +4.192, +4.752, +5.262, +5.930, +6.383, +6.868, +7.424, +7.766, +8.175, +8.649, +8.937},  +0.032,  +0.019,   1.991},
	{"FPF-14+6/16:overall",       14, 270336, 0, { -8.686, -8.313, -7.847, -7.556, -7.119, -6.605, -6.199, -5.801, -5.247, -4.743, -4.180, -3.833, -3.569, -3.356, -3.178, -3.019, -2.875, -2.741, -2.622, -2.508, -2.406, -2.302, -2.208, -2.117, -2.031, -1.948, -1.867, -1.791, -1.719, -1.646, -1.576, -1.507, -1.441, -1.374, -1.311, -1.248, -1.188, -1.126, -1.066, -1.010, -0.952, -0.895, -0.839, -0.783, -0.729, -0.674, -0.619, -0.566, -0.512, -0.458, -0.403, -0.350, -0.298, -0.246, -0.194, -0.143, -0.090, -0.038, +0.012, +0.064, +0.115, +0.166, +0.218, +0.270, +0.322, +0.374, +0.430, +0.484, +0.537, +0.590, +0.645, +0.698, +0.754, +0.809, +0.866, +0.924, +0.980, +1.038, +1.098, +1.158, +1.218, +1.279, +1.345, +1.409, +1.474, +1.541, +1.609, +1.682, +1.757, +1.831, +1.911, +1.995, +2.081, +2.168, +2.260, +2.356, +2.457, +2.567, +2.683, +2.813, +2.948, +3.098, +3.273, +3.464, +3.686, +3.968, +4.345, +4.925, +5.448, +6.095, +6.555, +6.944, +7.519, +7.937, +8.368, +8.981,+10.057},  +0.025,  +0.012,   2.071},
	{"FPF-14+6/16:overall",       16, 270336, 0, { -7.911, -7.664, -7.443, -7.115, -6.858, -6.312, -5.928, -5.539, -4.999, -4.511, -3.988, -3.654, -3.403, -3.193, -3.017, -2.863, -2.724, -2.599, -2.481, -2.374, -2.278, -2.184, -2.097, -2.012, -1.930, -1.852, -1.777, -1.703, -1.632, -1.565, -1.497, -1.433, -1.370, -1.308, -1.247, -1.186, -1.127, -1.069, -1.011, -0.957, -0.901, -0.848, -0.793, -0.740, -0.688, -0.635, -0.583, -0.532, -0.481, -0.430, -0.380, -0.330, -0.283, -0.234, -0.184, -0.133, -0.084, -0.033, +0.014, +0.063, +0.112, +0.162, +0.211, +0.261, +0.311, +0.361, +0.412, +0.461, +0.513, +0.565, +0.617, +0.669, +0.721, +0.774, +0.827, +0.881, +0.934, +0.992, +1.050, +1.107, +1.167, +1.227, +1.288, +1.351, +1.413, +1.480, +1.545, +1.613, +1.683, +1.757, +1.835, +1.915, +1.996, +2.083, +2.169, +2.263, +2.362, +2.469, +2.580, +2.701, +2.830, +2.978, +3.137, +3.321, +3.539, +3.806, +4.150, +4.698, +5.226, +5.832, +6.282, +6.730, +7.199, +7.644, +8.032, +8.612, +8.943},  +0.032,  +0.014,   1.977},
	{"FPF-14+6/16:overall",       20, 270336, 0, { -7.174, -6.947, -6.642, -6.325, -6.046, -5.605, -5.257, -4.919, -4.409, -3.978, -3.518, -3.231, -3.018, -2.837, -2.683, -2.547, -2.425, -2.316, -2.214, -2.122, -2.037, -1.955, -1.873, -1.796, -1.724, -1.655, -1.590, -1.526, -1.462, -1.402, -1.343, -1.286, -1.232, -1.178, -1.122, -1.068, -1.017, -0.965, -0.913, -0.862, -0.814, -0.765, -0.717, -0.671, -0.625, -0.578, -0.534, -0.490, -0.445, -0.400, -0.355, -0.311, -0.266, -0.221, -0.178, -0.133, -0.089, -0.044, +0.001, +0.045, +0.091, +0.135, +0.180, +0.223, +0.267, +0.313, +0.358, +0.404, +0.451, +0.496, +0.542, +0.589, +0.635, +0.683, +0.732, +0.781, +0.831, +0.881, +0.932, +0.984, +1.037, +1.089, +1.144, +1.201, +1.257, +1.316, +1.378, +1.441, +1.505, +1.571, +1.641, +1.712, +1.783, +1.860, +1.941, +2.024, +2.113, +2.205, +2.308, +2.420, +2.542, +2.676, +2.824, +2.990, +3.188, +3.429, +3.759, +4.260, +4.717, +5.361, +5.782, +6.207, +6.715, +7.105, +7.307, +7.706, +7.834},  +0.029,  +0.001,   1.769},
	{"FPF-14+6/16:overall",       24, 270336, 0, { -7.111, -7.038, -6.764, -6.429, -6.035, -5.644, -5.301, -4.938, -4.450, -4.031, -3.571, -3.277, -3.055, -2.875, -2.721, -2.586, -2.463, -2.352, -2.252, -2.156, -2.065, -1.981, -1.901, -1.822, -1.749, -1.681, -1.611, -1.545, -1.481, -1.419, -1.360, -1.302, -1.245, -1.188, -1.132, -1.079, -1.026, -0.974, -0.923, -0.873, -0.822, -0.773, -0.725, -0.676, -0.627, -0.582, -0.534, -0.487, -0.442, -0.398, -0.352, -0.308, -0.263, -0.218, -0.173, -0.129, -0.085, -0.042, +0.004, +0.048, +0.094, +0.140, +0.185, +0.228, +0.273, +0.320, +0.365, +0.411, +0.455, +0.502, +0.550, +0.599, +0.646, +0.694, +0.744, +0.793, +0.843, +0.895, +0.945, +0.998, +1.051, +1.106, +1.160, +1.215, +1.274, +1.333, +1.396, +1.460, +1.524, +1.590, +1.659, +1.730, +1.803, +1.882, +1.963, +2.051, +2.138, +2.235, +2.338, +2.448, +2.568, +2.701, +2.849, +3.008, +3.211, +3.461, +3.774, +4.301, +4.773, +5.366, +5.846, +6.284, +6.780, +7.123, +7.429, +7.779, +7.851},  +0.029,  +0.004,   1.789},
	{"FPF-14+6/16:overall",       28, 270336, 0, { -7.304, -7.231, -6.724, -6.499, -6.170, -5.760, -5.445, -5.096, -4.586, -4.154, -3.691, -3.393, -3.160, -2.972, -2.813, -2.670, -2.541, -2.425, -2.318, -2.218, -2.124, -2.036, -1.954, -1.877, -1.803, -1.730, -1.660, -1.593, -1.527, -1.463, -1.402, -1.340, -1.281, -1.223, -1.167, -1.110, -1.058, -1.006, -0.953, -0.901, -0.848, -0.798, -0.749, -0.701, -0.652, -0.603, -0.555, -0.507, -0.459, -0.413, -0.367, -0.319, -0.272, -0.224, -0.178, -0.132, -0.087, -0.042, +0.005, +0.051, +0.099, +0.145, +0.190, +0.236, +0.283, +0.329, +0.375, +0.423, +0.470, +0.518, +0.565, +0.614, +0.664, +0.714, +0.764, +0.815, +0.866, +0.920, +0.973, +1.027, +1.081, +1.136, +1.194, +1.251, +1.311, +1.375, +1.438, +1.501, +1.566, +1.633, +1.703, +1.776, +1.850, +1.930, +2.013, +2.100, +2.192, +2.287, +2.394, +2.506, +2.631, +2.769, +2.915, +3.092, +3.293, +3.550, +3.884, +4.420, +4.912, +5.516, +5.979, +6.343, +6.835, +7.199, +7.639, +8.252, +8.660},  +0.026,  +0.005,   1.841},
	{"FPF-14+6/16:overall",       32, 270336, 0, { -7.222, -7.186, -6.789, -6.553, -6.141, -5.743, -5.366, -5.077, -4.545, -4.120, -3.634, -3.335, -3.108, -2.918, -2.757, -2.616, -2.493, -2.379, -2.273, -2.175, -2.083, -1.998, -1.919, -1.842, -1.770, -1.699, -1.631, -1.564, -1.498, -1.436, -1.376, -1.317, -1.258, -1.200, -1.146, -1.090, -1.038, -0.985, -0.932, -0.881, -0.833, -0.782, -0.733, -0.684, -0.636, -0.588, -0.541, -0.495, -0.446, -0.400, -0.353, -0.306, -0.260, -0.213, -0.168, -0.124, -0.078, -0.033, +0.013, +0.058, +0.103, +0.149, +0.195, +0.240, +0.285, +0.333, +0.380, +0.428, +0.475, +0.521, +0.568, +0.616, +0.664, +0.714, +0.764, +0.816, +0.866, +0.917, +0.970, +1.024, +1.079, +1.131, +1.187, +1.243, +1.303, +1.364, +1.426, +1.490, +1.556, +1.624, +1.694, +1.766, +1.839, +1.918, +1.998, +2.085, +2.172, +2.270, +2.371, +2.482, +2.603, +2.733, +2.878, +3.043, +3.246, +3.486, +3.814, +4.334, +4.828, +5.430, +5.858, +6.263, +6.864, +7.342, +7.618, +7.793, +7.951},  +0.033,  +0.013,   1.815},
	{"FPF-14+6/16:overall",       48, 270336, 0, { -6.217, -6.059, -5.940, -5.756, -5.504, -5.118, -4.786, -4.466, -4.037, -3.666, -3.231, -2.968, -2.763, -2.597, -2.455, -2.334, -2.225, -2.126, -2.035, -1.951, -1.871, -1.797, -1.723, -1.654, -1.587, -1.522, -1.459, -1.399, -1.341, -1.284, -1.231, -1.178, -1.127, -1.076, -1.027, -0.978, -0.930, -0.885, -0.838, -0.795, -0.748, -0.704, -0.660, -0.616, -0.575, -0.533, -0.490, -0.447, -0.404, -0.361, -0.319, -0.277, -0.235, -0.195, -0.154, -0.113, -0.073, -0.034, +0.008, +0.049, +0.091, +0.132, +0.174, +0.215, +0.257, +0.298, +0.339, +0.382, +0.423, +0.466, +0.508, +0.553, +0.598, +0.642, +0.687, +0.733, +0.779, +0.826, +0.874, +0.921, +0.971, +1.022, +1.074, +1.125, +1.178, +1.233, +1.287, +1.344, +1.403, +1.463, +1.526, +1.590, +1.657, +1.726, +1.799, +1.879, +1.962, +2.046, +2.139, +2.238, +2.347, +2.469, +2.603, +2.752, +2.937, +3.160, +3.474, +3.964, +4.411, +4.962, +5.349, +5.710, +6.230, +6.552, +6.859, +7.291, +7.396},  +0.036,  +0.008,   1.632},
	{"FPF-14+6/16:overall",       56, 270336, 0, { -6.493, -6.379, -6.060, -5.858, -5.558, -5.198, -4.924, -4.601, -4.129, -3.742, -3.300, -3.030, -2.824, -2.656, -2.516, -2.389, -2.278, -2.175, -2.081, -1.991, -1.909, -1.831, -1.757, -1.687, -1.618, -1.552, -1.491, -1.433, -1.373, -1.316, -1.259, -1.204, -1.149, -1.099, -1.049, -0.999, -0.951, -0.902, -0.854, -0.808, -0.762, -0.717, -0.671, -0.626, -0.582, -0.538, -0.494, -0.451, -0.408, -0.366, -0.323, -0.281, -0.240, -0.199, -0.157, -0.115, -0.074, -0.031, +0.010, +0.051, +0.092, +0.134, +0.175, +0.216, +0.258, +0.298, +0.342, +0.385, +0.429, +0.472, +0.518, +0.560, +0.606, +0.651, +0.695, +0.743, +0.788, +0.838, +0.886, +0.934, +0.984, +1.034, +1.086, +1.139, +1.193, +1.249, +1.304, +1.363, +1.423, +1.485, +1.552, +1.617, +1.686, +1.758, +1.834, +1.913, +1.998, +2.086, +2.183, +2.285, +2.398, +2.520, +2.656, +2.813, +2.996, +3.232, +3.528, +4.001, +4.450, +5.028, +5.423, +5.788, +6.291, +6.521, +6.724, +7.025, +7.144},  +0.034,  +0.010,   1.663},
	{"FPF-14+6/16:overall",       64, 270336, 0, { -6.865, -6.571, -6.034, -5.880, -5.613, -5.209, -4.945, -4.631, -4.151, -3.765, -3.320, -3.052, -2.839, -2.666, -2.523, -2.399, -2.283, -2.178, -2.082, -1.992, -1.913, -1.834, -1.758, -1.686, -1.619, -1.552, -1.490, -1.429, -1.371, -1.314, -1.260, -1.206, -1.155, -1.102, -1.052, -1.002, -0.952, -0.903, -0.855, -0.808, -0.759, -0.714, -0.668, -0.623, -0.578, -0.534, -0.490, -0.446, -0.403, -0.362, -0.318, -0.276, -0.236, -0.195, -0.155, -0.113, -0.071, -0.030, +0.013, +0.055, +0.096, +0.138, +0.179, +0.221, +0.264, +0.307, +0.350, +0.393, +0.437, +0.482, +0.526, +0.571, +0.616, +0.660, +0.705, +0.751, +0.799, +0.847, +0.895, +0.943, +0.994, +1.044, +1.097, +1.148, +1.201, +1.258, +1.314, +1.372, +1.432, +1.493, +1.556, +1.624, +1.693, +1.762, +1.838, +1.913, +1.996, +2.086, +2.178, +2.282, +2.394, +2.519, +2.656, +2.812, +3.002, +3.233, +3.550, +4.035, +4.499, +5.081, +5.445, +5.795, +6.222, +6.605, +6.945, +7.547, +8.196},  +0.036,  +0.013,   1.669},
	{"FPF-14+6/16:overall",       96, 270336, 0, { -5.884, -5.788, -5.535, -5.362, -5.141, -4.776, -4.503, -4.210, -3.776, -3.407, -3.018, -2.768, -2.582, -2.432, -2.299, -2.183, -2.081, -1.986, -1.898, -1.818, -1.742, -1.669, -1.600, -1.536, -1.473, -1.414, -1.356, -1.298, -1.243, -1.191, -1.140, -1.091, -1.042, -0.993, -0.945, -0.899, -0.854, -0.809, -0.766, -0.722, -0.679, -0.637, -0.596, -0.556, -0.516, -0.475, -0.435, -0.395, -0.357, -0.317, -0.278, -0.239, -0.201, -0.162, -0.124, -0.085, -0.046, -0.007, +0.031, +0.068, +0.106, +0.144, +0.182, +0.221, +0.260, +0.299, +0.340, +0.378, +0.417, +0.457, +0.498, +0.539, +0.580, +0.621, +0.663, +0.707, +0.750, +0.793, +0.838, +0.883, +0.929, +0.976, +1.024, +1.074, +1.124, +1.177, +1.228, +1.282, +1.338, +1.393, +1.450, +1.512, +1.576, +1.643, +1.713, +1.787, +1.867, +1.950, +2.035, +2.131, +2.233, +2.345, +2.471, +2.624, +2.797, +3.010, +3.292, +3.738, +4.165, +4.681, +5.050, +5.377, +5.798, +6.043, +6.326, +6.591, +6.785},  +0.054,  +0.031,   1.535},
	{"FPF-14+6/16:overall",      128, 270336, 0, { -6.323, -5.976, -5.624, -5.525, -5.264, -4.914, -4.657, -4.314, -3.860, -3.493, -3.095, -2.838, -2.646, -2.488, -2.361, -2.239, -2.134, -2.034, -1.943, -1.860, -1.780, -1.705, -1.636, -1.572, -1.508, -1.445, -1.387, -1.331, -1.274, -1.219, -1.167, -1.115, -1.065, -1.017, -0.968, -0.923, -0.877, -0.832, -0.787, -0.743, -0.700, -0.657, -0.615, -0.574, -0.533, -0.493, -0.451, -0.411, -0.372, -0.332, -0.294, -0.254, -0.215, -0.175, -0.136, -0.097, -0.059, -0.020, +0.018, +0.058, +0.096, +0.134, +0.176, +0.216, +0.256, +0.295, +0.335, +0.375, +0.415, +0.456, +0.498, +0.539, +0.579, +0.623, +0.667, +0.711, +0.757, +0.803, +0.848, +0.893, +0.940, +0.988, +1.036, +1.085, +1.135, +1.186, +1.239, +1.292, +1.347, +1.407, +1.468, +1.530, +1.593, +1.660, +1.733, +1.808, +1.886, +1.970, +2.058, +2.155, +2.259, +2.373, +2.498, +2.651, +2.821, +3.036, +3.325, +3.783, +4.236, +4.738, +5.082, +5.452, +5.942, +6.224, +6.607, +6.846, +7.050},  +0.044,  +0.018,   1.563},
	{"FPF-14+6/16:overall",      192, 270336, 0, { -6.149, -5.855, -5.568, -5.303, -4.964, -4.676, -4.410, -4.092, -3.690, -3.347, -2.961, -2.715, -2.530, -2.377, -2.246, -2.133, -2.030, -1.935, -1.852, -1.771, -1.697, -1.628, -1.561, -1.498, -1.436, -1.378, -1.320, -1.267, -1.215, -1.163, -1.111, -1.062, -1.014, -0.968, -0.922, -0.877, -0.833, -0.789, -0.746, -0.704, -0.663, -0.622, -0.581, -0.541, -0.500, -0.460, -0.422, -0.383, -0.346, -0.306, -0.269, -0.231, -0.194, -0.157, -0.120, -0.082, -0.045, -0.006, +0.032, +0.067, +0.105, +0.143, +0.181, +0.220, +0.259, +0.297, +0.335, +0.373, +0.412, +0.450, +0.490, +0.531, +0.572, +0.611, +0.652, +0.694, +0.737, +0.780, +0.824, +0.866, +0.908, +0.954, +1.002, +1.049, +1.099, +1.147, +1.196, +1.249, +1.304, +1.360, +1.419, +1.479, +1.541, +1.606, +1.673, +1.746, +1.821, +1.904, +1.987, +2.081, +2.182, +2.294, +2.416, +2.560, +2.724, +2.928, +3.208, +3.645, +4.057, +4.554, +4.893, +5.179, +5.605, +5.923, +6.318, +6.798, +6.959},  +0.053,  +0.032,   1.500},
	{"FPF-14+6/16:overall",      256, 270336, 0, { -6.371, -6.099, -5.692, -5.386, -5.138, -4.744, -4.441, -4.158, -3.721, -3.353, -2.970, -2.719, -2.536, -2.384, -2.252, -2.135, -2.032, -1.937, -1.854, -1.772, -1.697, -1.625, -1.556, -1.494, -1.435, -1.375, -1.318, -1.262, -1.207, -1.154, -1.104, -1.056, -1.007, -0.958, -0.911, -0.866, -0.822, -0.779, -0.737, -0.694, -0.653, -0.612, -0.572, -0.531, -0.492, -0.452, -0.413, -0.374, -0.336, -0.296, -0.257, -0.219, -0.180, -0.143, -0.106, -0.069, -0.032, +0.005, +0.042, +0.080, +0.116, +0.153, +0.190, +0.227, +0.266, +0.304, +0.343, +0.382, +0.420, +0.459, +0.499, +0.539, +0.578, +0.618, +0.659, +0.700, +0.742, +0.785, +0.828, +0.870, +0.914, +0.959, +1.003, +1.051, +1.100, +1.150, +1.200, +1.252, +1.306, +1.361, +1.417, +1.477, +1.538, +1.601, +1.670, +1.742, +1.817, +1.899, +1.985, +2.077, +2.175, +2.289, +2.412, +2.553, +2.715, +2.917, +3.183, +3.632, +4.043, +4.530, +4.908, +5.299, +5.663, +5.851, +6.046, +6.356, +6.487},  +0.057,  +0.042,   1.499},
	{"FPF-14+6/16:overall",      384, 270336, 0, { -5.955, -5.764, -5.391, -5.183, -4.966, -4.627, -4.364, -4.067, -3.653, -3.294, -2.921, -2.672, -2.483, -2.329, -2.206, -2.095, -1.991, -1.900, -1.816, -1.737, -1.664, -1.594, -1.528, -1.464, -1.404, -1.349, -1.293, -1.240, -1.187, -1.136, -1.086, -1.039, -0.990, -0.945, -0.900, -0.856, -0.812, -0.769, -0.726, -0.684, -0.643, -0.604, -0.564, -0.524, -0.485, -0.446, -0.407, -0.369, -0.331, -0.294, -0.257, -0.220, -0.184, -0.146, -0.109, -0.072, -0.035, +0.002, +0.038, +0.074, +0.111, +0.148, +0.184, +0.222, +0.260, +0.298, +0.334, +0.372, +0.410, +0.447, +0.485, +0.525, +0.563, +0.602, +0.643, +0.684, +0.724, +0.766, +0.809, +0.852, +0.896, +0.940, +0.985, +1.031, +1.078, +1.125, +1.175, +1.225, +1.279, +1.333, +1.390, +1.448, +1.509, +1.573, +1.638, +1.708, +1.781, +1.858, +1.940, +2.027, +2.130, +2.237, +2.357, +2.494, +2.653, +2.852, +3.113, +3.553, +3.945, +4.413, +4.778, +5.054, +5.488, +5.684, +5.868, +6.286, +6.573},  +0.053,  +0.038,   1.468},
	{"FPF-14+6/16:overall",      512, 270336, 0, { -6.163, -6.038, -5.645, -5.305, -4.986, -4.686, -4.401, -4.111, -3.670, -3.302, -2.918, -2.669, -2.483, -2.332, -2.206, -2.099, -2.000, -1.906, -1.822, -1.744, -1.667, -1.597, -1.532, -1.468, -1.408, -1.351, -1.295, -1.240, -1.186, -1.135, -1.086, -1.038, -0.992, -0.945, -0.900, -0.859, -0.814, -0.771, -0.730, -0.689, -0.647, -0.607, -0.569, -0.528, -0.489, -0.451, -0.412, -0.374, -0.336, -0.298, -0.260, -0.223, -0.186, -0.149, -0.111, -0.074, -0.038, -0.002, +0.036, +0.072, +0.108, +0.145, +0.182, +0.220, +0.258, +0.296, +0.334, +0.371, +0.409, +0.447, +0.486, +0.526, +0.566, +0.606, +0.648, +0.687, +0.728, +0.771, +0.815, +0.858, +0.901, +0.945, +0.990, +1.037, +1.083, +1.132, +1.181, +1.232, +1.286, +1.341, +1.396, +1.455, +1.514, +1.577, +1.644, +1.715, +1.788, +1.867, +1.951, +2.041, +2.139, +2.250, +2.367, +2.504, +2.664, +2.862, +3.129, +3.544, +3.930, +4.416, +4.786, +5.096, +5.466, +5.635, +5.782, +6.118, +6.138},  +0.053,  +0.036,   1.472},
	{"FPF-14+6/16:overall",      768, 270336, 0, { -6.155, -5.972, -5.483, -5.190, -4.943, -4.518, -4.249, -3.975, -3.572, -3.229, -2.866, -2.628, -2.442, -2.286, -2.160, -2.050, -1.951, -1.860, -1.778, -1.702, -1.629, -1.562, -1.497, -1.434, -1.375, -1.318, -1.265, -1.212, -1.160, -1.112, -1.064, -1.015, -0.971, -0.924, -0.880, -0.836, -0.793, -0.751, -0.710, -0.669, -0.630, -0.590, -0.550, -0.510, -0.473, -0.434, -0.398, -0.361, -0.323, -0.286, -0.249, -0.212, -0.177, -0.140, -0.104, -0.069, -0.032, +0.003, +0.039, +0.075, +0.112, +0.148, +0.185, +0.221, +0.258, +0.295, +0.332, +0.369, +0.407, +0.445, +0.482, +0.518, +0.557, +0.595, +0.635, +0.676, +0.717, +0.759, +0.801, +0.845, +0.888, +0.931, +0.976, +1.022, +1.069, +1.118, +1.166, +1.216, +1.267, +1.320, +1.375, +1.434, +1.494, +1.556, +1.620, +1.688, +1.760, +1.837, +1.919, +2.006, +2.102, +2.207, +2.321, +2.458, +2.612, +2.806, +3.063, +3.467, +3.848, +4.296, +4.645, +4.934, +5.275, +5.573, +5.781, +6.142, +6.282},  +0.057,  +0.039,   1.442},
	{"FPF-14+6/16:overall",     1024, 270336, 0, { -5.936, -5.810, -5.540, -5.258, -4.984, -4.671, -4.333, -4.031, -3.602, -3.252, -2.878, -2.640, -2.459, -2.309, -2.179, -2.071, -1.970, -1.880, -1.798, -1.720, -1.646, -1.578, -1.514, -1.452, -1.391, -1.335, -1.277, -1.224, -1.172, -1.121, -1.072, -1.023, -0.977, -0.931, -0.886, -0.843, -0.799, -0.756, -0.716, -0.676, -0.636, -0.599, -0.558, -0.520, -0.481, -0.442, -0.404, -0.367, -0.330, -0.292, -0.256, -0.218, -0.181, -0.144, -0.107, -0.070, -0.035, +0.001, +0.039, +0.075, +0.111, +0.147, +0.183, +0.219, +0.256, +0.293, +0.330, +0.367, +0.403, +0.441, +0.479, +0.517, +0.556, +0.595, +0.635, +0.677, +0.717, +0.761, +0.803, +0.844, +0.890, +0.933, +0.978, +1.023, +1.070, +1.119, +1.166, +1.218, +1.271, +1.325, +1.379, +1.439, +1.499, +1.561, +1.625, +1.692, +1.762, +1.838, +1.921, +2.012, +2.106, +2.205, +2.321, +2.453, +2.617, +2.816, +3.080, +3.495, +3.872, +4.342, +4.665, +4.964, +5.325, +5.598, +6.076, +6.398, +6.599},  +0.052,  +0.039,   1.450},
	{"FPF-14+6/16:overall",     1536, 270336, 0, { -5.743, -5.540, -5.289, -5.100, -4.849, -4.515, -4.267, -3.984, -3.555, -3.212, -2.833, -2.589, -2.413, -2.265, -2.141, -2.031, -1.934, -1.846, -1.762, -1.683, -1.609, -1.541, -1.477, -1.415, -1.356, -1.300, -1.245, -1.194, -1.140, -1.092, -1.044, -0.996, -0.948, -0.904, -0.860, -0.817, -0.776, -0.733, -0.692, -0.652, -0.612, -0.572, -0.533, -0.494, -0.455, -0.417, -0.380, -0.343, -0.306, -0.270, -0.234, -0.197, -0.160, -0.124, -0.088, -0.052, -0.016, +0.020, +0.057, +0.092, +0.128, +0.163, +0.199, +0.236, +0.273, +0.309, +0.345, +0.381, +0.418, +0.456, +0.493, +0.531, +0.569, +0.607, +0.647, +0.686, +0.726, +0.768, +0.808, +0.849, +0.891, +0.933, +0.977, +1.022, +1.067, +1.116, +1.165, +1.214, +1.266, +1.318, +1.372, +1.429, +1.486, +1.547, +1.610, +1.677, +1.748, +1.822, +1.905, +1.993, +2.085, +2.191, +2.306, +2.437, +2.588, +2.779, +3.030, +3.427, +3.814, +4.240, +4.542, +4.844, +5.275, +5.496, +5.769, +5.912, +5.985},  +0.065,  +0.057,   1.429},
	{"FPF-14+6/16:overall",     2048, 270336, 0, { -5.794, -5.463, -5.275, -5.097, -4.839, -4.532, -4.295, -4.014, -3.602, -3.248, -2.865, -2.613, -2.425, -2.280, -2.155, -2.045, -1.944, -1.852, -1.770, -1.694, -1.621, -1.555, -1.491, -1.431, -1.373, -1.315, -1.259, -1.205, -1.153, -1.103, -1.052, -1.006, -0.960, -0.915, -0.870, -0.827, -0.784, -0.742, -0.701, -0.659, -0.619, -0.580, -0.541, -0.502, -0.464, -0.427, -0.390, -0.352, -0.315, -0.278, -0.242, -0.206, -0.169, -0.133, -0.098, -0.062, -0.026, +0.010, +0.046, +0.082, +0.119, +0.154, +0.191, +0.227, +0.265, +0.302, +0.339, +0.377, +0.414, +0.451, +0.488, +0.528, +0.566, +0.604, +0.643, +0.682, +0.723, +0.762, +0.802, +0.843, +0.884, +0.927, +0.971, +1.017, +1.063, +1.111, +1.160, +1.209, +1.260, +1.313, +1.366, +1.422, +1.481, +1.544, +1.608, +1.675, +1.746, +1.821, +1.901, +1.987, +2.083, +2.185, +2.306, +2.437, +2.593, +2.783, +3.030, +3.437, +3.796, +4.245, +4.587, +4.890, +5.175, +5.363, +5.673, +5.881, +6.084},  +0.057,  +0.046,   1.434},
	{"FPF-14+6/16:overall",     3072, 270336, 0, { -5.759, -5.429, -5.252, -5.108, -4.913, -4.602, -4.306, -3.985, -3.579, -3.222, -2.844, -2.607, -2.420, -2.269, -2.139, -2.026, -1.928, -1.837, -1.754, -1.677, -1.604, -1.535, -1.472, -1.410, -1.351, -1.294, -1.241, -1.188, -1.136, -1.085, -1.037, -0.990, -0.944, -0.898, -0.854, -0.811, -0.769, -0.728, -0.686, -0.644, -0.604, -0.564, -0.526, -0.488, -0.450, -0.411, -0.374, -0.338, -0.299, -0.263, -0.228, -0.193, -0.156, -0.120, -0.084, -0.046, -0.011, +0.025, +0.062, +0.097, +0.133, +0.167, +0.203, +0.239, +0.275, +0.311, +0.346, +0.385, +0.422, +0.461, +0.498, +0.535, +0.573, +0.611, +0.650, +0.688, +0.727, +0.767, +0.807, +0.850, +0.892, +0.935, +0.979, +1.023, +1.070, +1.116, +1.165, +1.214, +1.264, +1.316, +1.371, +1.426, +1.486, +1.548, +1.610, +1.677, +1.747, +1.823, +1.902, +1.990, +2.086, +2.193, +2.306, +2.435, +2.591, +2.781, +3.021, +3.422, +3.782, +4.230, +4.536, +4.898, +5.261, +5.503, +5.783, +6.245, +6.322},  +0.068,  +0.062,   1.428},
	{"FPF-14+6/16:overall",     4096, 270336, 0, { -5.939, -5.782, -5.411, -5.172, -4.884, -4.597, -4.316, -3.992, -3.560, -3.223, -2.833, -2.592, -2.406, -2.261, -2.131, -2.021, -1.924, -1.832, -1.749, -1.673, -1.602, -1.533, -1.467, -1.403, -1.344, -1.287, -1.233, -1.181, -1.130, -1.080, -1.032, -0.985, -0.939, -0.894, -0.850, -0.807, -0.765, -0.723, -0.681, -0.640, -0.599, -0.559, -0.520, -0.481, -0.443, -0.405, -0.368, -0.331, -0.293, -0.256, -0.219, -0.182, -0.145, -0.110, -0.075, -0.039, -0.003, +0.033, +0.069, +0.106, +0.141, +0.177, +0.212, +0.249, +0.285, +0.321, +0.357, +0.393, +0.431, +0.469, +0.506, +0.544, +0.583, +0.622, +0.661, +0.700, +0.740, +0.780, +0.820, +0.861, +0.903, +0.947, +0.989, +1.033, +1.079, +1.127, +1.175, +1.224, +1.274, +1.327, +1.379, +1.433, +1.491, +1.550, +1.611, +1.676, +1.745, +1.819, +1.901, +1.985, +2.078, +2.180, +2.299, +2.421, +2.576, +2.765, +3.012, +3.415, +3.788, +4.230, +4.546, +4.854, +5.224, +5.415, +5.574, +5.967, +6.290},  +0.073,  +0.069,   1.426},
	{"FPF-14+6/16:overall",     6144, 270336, 0, { -5.850, -5.729, -5.454, -5.187, -4.970, -4.626, -4.321, -4.011, -3.554, -3.202, -2.826, -2.587, -2.403, -2.254, -2.131, -2.021, -1.921, -1.829, -1.747, -1.668, -1.596, -1.528, -1.464, -1.401, -1.341, -1.284, -1.230, -1.178, -1.127, -1.076, -1.028, -0.981, -0.935, -0.889, -0.845, -0.802, -0.761, -0.721, -0.679, -0.639, -0.599, -0.559, -0.520, -0.481, -0.443, -0.406, -0.370, -0.332, -0.295, -0.260, -0.224, -0.188, -0.153, -0.116, -0.081, -0.045, -0.008, +0.028, +0.064, +0.099, +0.135, +0.171, +0.206, +0.243, +0.280, +0.317, +0.353, +0.389, +0.425, +0.462, +0.500, +0.539, +0.577, +0.616, +0.654, +0.692, +0.732, +0.772, +0.812, +0.853, +0.895, +0.940, +0.985, +1.029, +1.074, +1.120, +1.167, +1.216, +1.266, +1.318, +1.373, +1.429, +1.487, +1.549, +1.612, +1.678, +1.748, +1.822, +1.903, +1.987, +2.079, +2.185, +2.301, +2.429, +2.577, +2.767, +3.021, +3.405, +3.768, +4.187, +4.491, +4.785, +5.119, +5.294, +5.501, +6.024, +6.087},  +0.072,  +0.064,   1.423},
	{"FPF-14+6/16:overall",     8192, 270336, 0, { -5.944, -5.789, -5.381, -5.193, -4.894, -4.601, -4.340, -4.025, -3.588, -3.215, -2.829, -2.581, -2.401, -2.252, -2.132, -2.024, -1.923, -1.833, -1.746, -1.667, -1.595, -1.527, -1.462, -1.400, -1.340, -1.285, -1.229, -1.177, -1.124, -1.075, -1.027, -0.981, -0.936, -0.891, -0.848, -0.804, -0.763, -0.720, -0.680, -0.640, -0.600, -0.559, -0.519, -0.481, -0.444, -0.408, -0.369, -0.334, -0.298, -0.262, -0.225, -0.189, -0.153, -0.117, -0.082, -0.046, -0.010, +0.027, +0.062, +0.098, +0.135, +0.172, +0.207, +0.244, +0.280, +0.317, +0.354, +0.391, +0.429, +0.466, +0.504, +0.541, +0.579, +0.617, +0.655, +0.694, +0.734, +0.772, +0.813, +0.855, +0.895, +0.937, +0.980, +1.025, +1.071, +1.118, +1.166, +1.214, +1.265, +1.316, +1.370, +1.426, +1.482, +1.542, +1.605, +1.671, +1.740, +1.813, +1.894, +1.977, +2.071, +2.171, +2.287, +2.415, +2.567, +2.746, +2.995, +3.396, +3.765, +4.205, +4.491, +4.749, +5.082, +5.317, +5.493, +5.838, +6.389},  +0.070,  +0.062,   1.421},
	{"FPF-14+6/16:overall",    12288, 270336, 0, { -6.047, -5.729, -5.464, -5.150, -4.818, -4.484, -4.230, -3.967, -3.569, -3.199, -2.821, -2.580, -2.396, -2.255, -2.126, -2.017, -1.917, -1.827, -1.742, -1.663, -1.592, -1.522, -1.456, -1.393, -1.334, -1.278, -1.223, -1.170, -1.119, -1.069, -1.020, -0.975, -0.929, -0.883, -0.838, -0.795, -0.753, -0.710, -0.670, -0.630, -0.590, -0.550, -0.511, -0.473, -0.435, -0.397, -0.361, -0.324, -0.288, -0.252, -0.215, -0.179, -0.143, -0.107, -0.072, -0.035, +0.001, +0.036, +0.070, +0.106, +0.142, +0.178, +0.213, +0.251, +0.287, +0.323, +0.359, +0.395, +0.432, +0.469, +0.506, +0.542, +0.579, +0.617, +0.656, +0.695, +0.733, +0.772, +0.814, +0.856, +0.899, +0.941, +0.983, +1.028, +1.074, +1.120, +1.169, +1.218, +1.268, +1.318, +1.371, +1.427, +1.483, +1.543, +1.606, +1.672, +1.739, +1.813, +1.893, +1.976, +2.068, +2.168, +2.280, +2.412, +2.562, +2.750, +2.995, +3.382, +3.754, +4.191, +4.486, +4.769, +5.138, +5.364, +5.575, +6.211, +6.448},  +0.075,  +0.070,   1.417},
	{"FPF-14+6/16:overall",    16384, 270336, 0, { -5.760, -5.669, -5.484, -5.161, -4.898, -4.535, -4.246, -3.966, -3.562, -3.206, -2.827, -2.584, -2.405, -2.261, -2.132, -2.015, -1.917, -1.827, -1.744, -1.669, -1.596, -1.527, -1.464, -1.403, -1.343, -1.286, -1.232, -1.180, -1.130, -1.078, -1.030, -0.982, -0.935, -0.890, -0.848, -0.804, -0.761, -0.720, -0.679, -0.638, -0.598, -0.559, -0.520, -0.480, -0.442, -0.405, -0.368, -0.332, -0.294, -0.257, -0.223, -0.187, -0.152, -0.116, -0.081, -0.045, -0.009, +0.026, +0.061, +0.097, +0.134, +0.170, +0.206, +0.241, +0.278, +0.314, +0.350, +0.385, +0.421, +0.458, +0.495, +0.533, +0.572, +0.611, +0.650, +0.688, +0.729, +0.771, +0.811, +0.853, +0.895, +0.936, +0.979, +1.025, +1.069, +1.116, +1.165, +1.214, +1.265, +1.317, +1.371, +1.427, +1.484, +1.544, +1.608, +1.676, +1.743, +1.815, +1.894, +1.977, +2.069, +2.170, +2.284, +2.416, +2.568, +2.763, +3.017, +3.412, +3.781, +4.205, +4.517, +4.809, +5.250, +5.523, +5.724, +6.009, +6.465},  +0.070,  +0.061,   1.421},
	{ "FPF:all2",  1, 16777216, 0, { -0.447, -0.447, -0.447, -0.447, -0.447, -0.447, -0.447, -0.447, -0.447, -0.447, -0.447, -0.447, -0.447, -0.447, -0.446, -0.446, -0.446, -0.445, -0.445, -0.444, -0.444, -0.443, -0.442, -0.441, -0.440, -0.439, -0.438, -0.437, -0.436, -0.435, -0.433, -0.432, -0.430, -0.429, -0.427, -0.425, -0.423, -0.421, -0.419, -0.416, -0.414, -0.411, -0.409, -0.406, -0.403, -0.399, -0.396, -0.393, -0.389, -0.385, -0.381, -0.377, -0.372, -0.367, -0.362, -0.357, -0.352, -0.346, -0.340, -0.334, -0.327, -0.320, -0.312, -0.305, -0.297, -0.288, -0.279, -0.270, -0.260, -0.249, -0.238, -0.226, -0.214, -0.201, -0.187, -0.172, -0.157, -0.141, -0.123, -0.105, -0.085, -0.064, -0.042, -0.018, +0.008, +0.035, +0.065, +0.097, +0.132, +0.169, +0.210, +0.254, +0.303, +0.357, +0.417, +0.483, +0.558, +0.642, +0.739, +0.850, +0.980, +1.134, +1.323, +1.559, +1.869, +2.301, +2.976, +4.296, +5.833, +8.195,+10.224,+12.525,+15.830,+18.722,+21.779,+26.035,+29.369 }, -0.3399, +0.0000, 1.0013 },
	{ "FPF:all2",  2, 16777216, 0, { -0.632, -0.632, -0.632, -0.632, -0.632, -0.632, -0.632, -0.632, -0.631, -0.630, -0.628, -0.625, -0.623, -0.620, -0.617, -0.614, -0.610, -0.607, -0.604, -0.600, -0.597, -0.593, -0.589, -0.585, -0.581, -0.577, -0.572, -0.568, -0.563, -0.559, -0.554, -0.549, -0.544, -0.538, -0.533, -0.527, -0.522, -0.516, -0.510, -0.503, -0.497, -0.491, -0.484, -0.477, -0.470, -0.462, -0.455, -0.447, -0.439, -0.431, -0.422, -0.413, -0.404, -0.395, -0.385, -0.375, -0.365, -0.355, -0.344, -0.332, -0.321, -0.309, -0.296, -0.283, -0.270, -0.256, -0.242, -0.227, -0.211, -0.195, -0.179, -0.161, -0.143, -0.125, -0.105, -0.085, -0.063, -0.041, -0.017, +0.007, +0.033, +0.060, +0.089, +0.119, +0.151, +0.185, +0.221, +0.260, +0.301, +0.344, +0.391, +0.442, +0.497, +0.556, +0.621, +0.693, +0.772, +0.860, +0.958, +1.071, +1.200, +1.352, +1.534, +1.758, +2.046, +2.439, +3.033, +4.165, +5.437, +7.344, +8.951,+10.730,+13.255,+15.328,+17.530,+20.642,+23.322 }, -0.3437, -0.0001, 1.0004 },
	{ "FPF:all2",  3, 16777216, 0, { -0.775, -0.774, -0.774, -0.774, -0.774, -0.773, -0.772, -0.771, -0.768, -0.763, -0.755, -0.748, -0.741, -0.734, -0.727, -0.721, -0.714, -0.707, -0.700, -0.694, -0.687, -0.680, -0.673, -0.666, -0.659, -0.652, -0.645, -0.637, -0.630, -0.622, -0.615, -0.607, -0.599, -0.591, -0.583, -0.575, -0.566, -0.558, -0.549, -0.540, -0.531, -0.522, -0.512, -0.502, -0.493, -0.483, -0.472, -0.462, -0.451, -0.440, -0.429, -0.418, -0.406, -0.394, -0.382, -0.369, -0.356, -0.343, -0.329, -0.315, -0.301, -0.286, -0.271, -0.256, -0.240, -0.223, -0.206, -0.188, -0.170, -0.152, -0.132, -0.112, -0.091, -0.070, -0.048, -0.025, -0.001, +0.024, +0.050, +0.078, +0.106, +0.136, +0.167, +0.200, +0.234, +0.270, +0.309, +0.349, +0.392, +0.438, +0.487, +0.539, +0.596, +0.656, +0.722, +0.795, +0.874, +0.962, +1.060, +1.170, +1.296, +1.443, +1.617, +1.831, +2.101, +2.467, +3.013, +4.035, +5.164, +6.811, +8.205, +9.702,+11.904,+13.695,+15.637,+18.422,+20.395 }, -0.3293, -0.0002, 0.9998 },
	{ "FPF:all2",  4, 16777216, 0, { -0.894, -0.893, -0.893, -0.892, -0.891, -0.889, -0.887, -0.883, -0.876, -0.866, -0.851, -0.839, -0.827, -0.816, -0.806, -0.796, -0.786, -0.776, -0.767, -0.757, -0.748, -0.738, -0.729, -0.719, -0.710, -0.700, -0.691, -0.681, -0.671, -0.662, -0.652, -0.642, -0.632, -0.622, -0.612, -0.601, -0.591, -0.580, -0.569, -0.559, -0.548, -0.536, -0.525, -0.514, -0.502, -0.490, -0.478, -0.466, -0.453, -0.440, -0.427, -0.414, -0.401, -0.387, -0.373, -0.358, -0.344, -0.329, -0.313, -0.298, -0.282, -0.265, -0.249, -0.231, -0.214, -0.195, -0.177, -0.158, -0.138, -0.117, -0.096, -0.075, -0.052, -0.029, -0.006, +0.019, +0.045, +0.071, +0.099, +0.127, +0.157, +0.188, +0.221, +0.255, +0.290, +0.327, +0.367, +0.408, +0.452, +0.499, +0.548, +0.601, +0.658, +0.719, +0.785, +0.857, +0.936, +1.022, +1.119, +1.227, +1.350, +1.492, +1.661, +1.866, +2.124, +2.469, +2.982, +3.928, +4.964, +6.477, +7.720, +9.100,+10.991,+12.595,+14.271,+16.523,+18.748 }, -0.3134, +0.0003, 1.0006 },
	{ "FPF:all2",  5, 16777216, 0, { -0.998, -0.997, -0.996, -0.994, -0.992, -0.988, -0.983, -0.977, -0.964, -0.950, -0.928, -0.910, -0.894, -0.880, -0.866, -0.853, -0.840, -0.828, -0.815, -0.803, -0.792, -0.780, -0.769, -0.757, -0.746, -0.734, -0.723, -0.711, -0.700, -0.688, -0.677, -0.665, -0.654, -0.642, -0.630, -0.618, -0.606, -0.594, -0.582, -0.570, -0.557, -0.545, -0.532, -0.519, -0.506, -0.492, -0.479, -0.465, -0.451, -0.437, -0.423, -0.409, -0.394, -0.379, -0.363, -0.348, -0.332, -0.316, -0.299, -0.282, -0.265, -0.248, -0.230, -0.211, -0.193, -0.173, -0.154, -0.133, -0.112, -0.091, -0.069, -0.046, -0.023, +0.001, +0.026, +0.051, +0.078, +0.105, +0.134, +0.163, +0.194, +0.226, +0.259, +0.294, +0.330, +0.368, +0.408, +0.450, +0.494, +0.541, +0.591, +0.644, +0.701, +0.761, +0.827, +0.898, +0.976, +1.062, +1.156, +1.262, +1.383, +1.521, +1.685, +1.883, +2.132, +2.461, +2.947, +3.832, +4.796, +6.196, +7.346, +8.599,+10.349,+11.848,+13.444,+15.532,+17.240 }, -0.2993, -0.0001, 0.9996 },
	{ "FPF:all2",  6, 16777216, 0, { -1.090, -1.089, -1.086, -1.084, -1.080, -1.073, -1.066, -1.057, -1.039, -1.019, -0.990, -0.968, -0.948, -0.930, -0.913, -0.897, -0.882, -0.868, -0.853, -0.839, -0.826, -0.812, -0.799, -0.786, -0.772, -0.759, -0.746, -0.734, -0.721, -0.708, -0.695, -0.682, -0.669, -0.656, -0.643, -0.630, -0.616, -0.603, -0.590, -0.576, -0.563, -0.549, -0.535, -0.521, -0.507, -0.493, -0.478, -0.463, -0.449, -0.433, -0.418, -0.403, -0.387, -0.371, -0.355, -0.338, -0.321, -0.304, -0.287, -0.269, -0.251, -0.233, -0.214, -0.195, -0.175, -0.155, -0.134, -0.113, -0.092, -0.070, -0.047, -0.023, +0.000, +0.025, +0.050, +0.077, +0.104, +0.132, +0.161, +0.191, +0.222, +0.255, +0.288, +0.324, +0.360, +0.399, +0.439, +0.481, +0.526, +0.573, +0.623, +0.676, +0.733, +0.793, +0.858, +0.929, +1.006, +1.090, +1.184, +1.288, +1.406, +1.542, +1.700, +1.892, +2.132, +2.449, +2.915, +3.760, +4.674, +5.984, +7.066, +8.223, +9.849,+11.218,+12.644,+14.660,+16.200 }, -0.2870, -0.0003, 0.9994 },
	{ "FPF:all2",  7, 16777216, 0, { -1.174, -1.172, -1.167, -1.163, -1.158, -1.148, -1.139, -1.126, -1.103, -1.078, -1.043, -1.016, -0.993, -0.972, -0.952, -0.934, -0.917, -0.900, -0.884, -0.868, -0.853, -0.838, -0.823, -0.808, -0.794, -0.779, -0.765, -0.751, -0.737, -0.723, -0.708, -0.694, -0.680, -0.666, -0.652, -0.638, -0.624, -0.609, -0.595, -0.581, -0.566, -0.551, -0.537, -0.522, -0.506, -0.491, -0.476, -0.461, -0.445, -0.429, -0.413, -0.397, -0.380, -0.363, -0.346, -0.329, -0.311, -0.294, -0.276, -0.257, -0.238, -0.219, -0.200, -0.180, -0.160, -0.139, -0.118, -0.096, -0.074, -0.051, -0.027, -0.003, +0.021, +0.046, +0.073, +0.099, +0.127, +0.155, +0.185, +0.215, +0.247, +0.280, +0.314, +0.349, +0.386, +0.425, +0.465, +0.508, +0.552, +0.599, +0.649, +0.702, +0.758, +0.818, +0.883, +0.953, +1.029, +1.112, +1.203, +1.306, +1.422, +1.555, +1.710, +1.897, +2.131, +2.440, +2.889, +3.701, +4.577, +5.820, +6.836, +7.924, +9.466,+10.772,+12.065,+14.095,+15.490 }, -0.2756, +0.0001, 1.0001 },
	{ "FPF:all2",  8, 16777216, 0, { -1.249, -1.246, -1.240, -1.235, -1.227, -1.215, -1.203, -1.187, -1.159, -1.129, -1.088, -1.057, -1.030, -1.007, -0.985, -0.964, -0.945, -0.927, -0.909, -0.892, -0.875, -0.858, -0.842, -0.826, -0.811, -0.795, -0.780, -0.764, -0.749, -0.734, -0.719, -0.704, -0.689, -0.674, -0.659, -0.644, -0.629, -0.614, -0.599, -0.583, -0.568, -0.553, -0.537, -0.522, -0.506, -0.490, -0.474, -0.458, -0.441, -0.425, -0.408, -0.391, -0.374, -0.357, -0.339, -0.321, -0.303, -0.285, -0.266, -0.247, -0.228, -0.208, -0.188, -0.168, -0.147, -0.126, -0.104, -0.082, -0.059, -0.036, -0.012, +0.012, +0.037, +0.063, +0.089, +0.116, +0.144, +0.173, +0.203, +0.234, +0.266, +0.299, +0.333, +0.369, +0.406, +0.445, +0.485, +0.528, +0.572, +0.619, +0.669, +0.722, +0.778, +0.837, +0.901, +0.970, +1.046, +1.128, +1.219, +1.320, +1.434, +1.564, +1.717, +1.900, +2.127, +2.426, +2.863, +3.647, +4.484, +5.671, +6.649, +7.677, +9.140,+10.318,+11.590,+13.260,+14.667 }, -0.2660, -0.0002, 0.9999 },
	{ "FPF:all2",  9, 16777216, 0, { -1.318, -1.313, -1.306, -1.299, -1.291, -1.275, -1.260, -1.241, -1.208, -1.173, -1.127, -1.092, -1.062, -1.036, -1.012, -0.990, -0.969, -0.949, -0.930, -0.911, -0.893, -0.876, -0.858, -0.841, -0.825, -0.808, -0.792, -0.775, -0.759, -0.743, -0.727, -0.712, -0.696, -0.680, -0.664, -0.649, -0.633, -0.617, -0.601, -0.585, -0.569, -0.553, -0.537, -0.521, -0.504, -0.488, -0.471, -0.454, -0.437, -0.420, -0.403, -0.386, -0.368, -0.350, -0.332, -0.314, -0.295, -0.276, -0.257, -0.237, -0.218, -0.198, -0.177, -0.156, -0.135, -0.113, -0.091, -0.069, -0.046, -0.022, +0.002, +0.027, +0.052, +0.078, +0.105, +0.132, +0.160, +0.189, +0.219, +0.251, +0.283, +0.316, +0.350, +0.386, +0.423, +0.462, +0.503, +0.545, +0.590, +0.637, +0.686, +0.739, +0.794, +0.854, +0.918, +0.986, +1.061, +1.142, +1.232, +1.331, +1.443, +1.571, +1.721, +1.900, +2.122, +2.414, +2.839, +3.598, +4.409, +5.556, +6.479, +7.445, +8.833, +9.956,+11.211,+12.917,+14.340 }, -0.2570, -0.0000, 0.9998 },
	{ "FPF:all2", 10, 16777216, 0, { -1.382, -1.376, -1.367, -1.358, -1.347, -1.329, -1.311, -1.290, -1.251, -1.213, -1.161, -1.123, -1.090, -1.062, -1.037, -1.013, -0.990, -0.969, -0.948, -0.928, -0.909, -0.890, -0.872, -0.854, -0.836, -0.819, -0.802, -0.785, -0.768, -0.751, -0.734, -0.718, -0.701, -0.685, -0.668, -0.652, -0.635, -0.619, -0.603, -0.586, -0.570, -0.553, -0.536, -0.519, -0.503, -0.485, -0.468, -0.451, -0.434, -0.416, -0.398, -0.380, -0.362, -0.344, -0.325, -0.307, -0.288, -0.268, -0.249, -0.229, -0.209, -0.188, -0.167, -0.146, -0.125, -0.103, -0.080, -0.057, -0.034, -0.010, +0.014, +0.039, +0.065, +0.091, +0.118, +0.146, +0.174, +0.204, +0.234, +0.265, +0.297, +0.331, +0.365, +0.401, +0.439, +0.478, +0.518, +0.561, +0.605, +0.652, +0.701, +0.754, +0.809, +0.868, +0.932, +1.000, +1.074, +1.154, +1.243, +1.341, +1.452, +1.579, +1.726, +1.902, +2.120, +2.407, +2.821, +3.560, +4.344, +5.440, +6.335, +7.291, +8.620, +9.685,+10.880,+12.501,+13.691 }, -0.2487, +0.0005, 1.0005 },
	{ "FPF:all2", 11, 16777216, 0, { -1.441, -1.434, -1.422, -1.412, -1.399, -1.378, -1.358, -1.334, -1.291, -1.248, -1.192, -1.150, -1.116, -1.085, -1.058, -1.032, -1.008, -0.986, -0.964, -0.943, -0.923, -0.903, -0.884, -0.865, -0.847, -0.828, -0.811, -0.793, -0.775, -0.758, -0.741, -0.723, -0.706, -0.689, -0.672, -0.655, -0.638, -0.621, -0.604, -0.587, -0.570, -0.553, -0.536, -0.519, -0.501, -0.484, -0.466, -0.449, -0.431, -0.413, -0.395, -0.376, -0.358, -0.339, -0.320, -0.301, -0.281, -0.262, -0.242, -0.222, -0.201, -0.180, -0.159, -0.138, -0.116, -0.094, -0.071, -0.048, -0.024, -0.000, +0.025, +0.050, +0.076, +0.103, +0.130, +0.158, +0.186, +0.216, +0.246, +0.277, +0.310, +0.343, +0.378, +0.414, +0.451, +0.490, +0.530, +0.573, +0.618, +0.664, +0.714, +0.766, +0.821, +0.880, +0.943, +1.010, +1.084, +1.163, +1.251, +1.348, +1.458, +1.583, +1.728, +1.901, +2.115, +2.395, +2.800, +3.519, +4.279, +5.353, +6.222, +7.145, +8.448, +9.551,+10.673,+12.202,+13.513 }, -0.2419, +0.0002, 1.0007 },
	{ "FPF:all2", 12, 16777216, 0, { -1.495, -1.487, -1.475, -1.462, -1.448, -1.424, -1.402, -1.374, -1.327, -1.280, -1.219, -1.175, -1.138, -1.106, -1.077, -1.050, -1.025, -1.001, -0.978, -0.956, -0.935, -0.915, -0.895, -0.875, -0.856, -0.837, -0.818, -0.800, -0.782, -0.763, -0.746, -0.728, -0.710, -0.693, -0.675, -0.657, -0.640, -0.623, -0.605, -0.588, -0.570, -0.553, -0.535, -0.517, -0.500, -0.482, -0.464, -0.446, -0.427, -0.409, -0.391, -0.372, -0.353, -0.334, -0.315, -0.295, -0.276, -0.256, -0.235, -0.215, -0.194, -0.173, -0.151, -0.130, -0.108, -0.085, -0.062, -0.039, -0.015, +0.009, +0.034, +0.060, +0.086, +0.112, +0.140, +0.168, +0.197, +0.226, +0.257, +0.288, +0.320, +0.354, +0.389, +0.425, +0.462, +0.501, +0.541, +0.584, +0.628, +0.675, +0.724, +0.776, +0.830, +0.889, +0.951, +1.019, +1.091, +1.171, +1.257, +1.354, +1.462, +1.585, +1.728, +1.898, +2.109, +2.384, +2.782, +3.486, +4.223, +5.257, +6.100, +6.971, +8.216, +9.199,+10.275,+11.783,+12.924 }, -0.2354, -0.0000, 1.0001 },
	{ "FPF:all2", 13, 16777216, 0, { -1.548, -1.538, -1.523, -1.508, -1.493, -1.467, -1.442, -1.411, -1.360, -1.309, -1.244, -1.197, -1.158, -1.124, -1.094, -1.065, -1.039, -1.014, -0.990, -0.968, -0.946, -0.924, -0.903, -0.883, -0.863, -0.844, -0.824, -0.805, -0.787, -0.768, -0.750, -0.731, -0.713, -0.695, -0.677, -0.659, -0.641, -0.623, -0.605, -0.588, -0.570, -0.552, -0.534, -0.516, -0.498, -0.479, -0.461, -0.443, -0.424, -0.405, -0.387, -0.368, -0.348, -0.329, -0.309, -0.290, -0.270, -0.249, -0.229, -0.208, -0.187, -0.166, -0.144, -0.122, -0.100, -0.077, -0.054, -0.030, -0.006, +0.019, +0.044, +0.069, +0.095, +0.122, +0.150, +0.178, +0.207, +0.236, +0.267, +0.298, +0.331, +0.364, +0.399, +0.435, +0.473, +0.511, +0.552, +0.594, +0.638, +0.685, +0.733, +0.785, +0.840, +0.898, +0.960, +1.027, +1.099, +1.178, +1.264, +1.359, +1.466, +1.588, +1.729, +1.898, +2.104, +2.375, +2.764, +3.452, +4.176, +5.188, +5.997, +6.866, +8.069, +9.000,+10.023,+11.520,+12.727 }, -0.2289, +0.0003, 1.0003 },
	{ "FPF:all2", 14, 16777216, 0, { -1.594, -1.585, -1.567, -1.552, -1.534, -1.504, -1.477, -1.444, -1.389, -1.336, -1.267, -1.217, -1.176, -1.141, -1.109, -1.079, -1.052, -1.026, -1.002, -0.978, -0.955, -0.933, -0.912, -0.891, -0.870, -0.850, -0.830, -0.811, -0.791, -0.772, -0.753, -0.734, -0.716, -0.697, -0.679, -0.661, -0.642, -0.624, -0.606, -0.587, -0.569, -0.551, -0.533, -0.514, -0.496, -0.477, -0.459, -0.440, -0.421, -0.402, -0.383, -0.364, -0.344, -0.325, -0.305, -0.285, -0.265, -0.244, -0.223, -0.203, -0.181, -0.160, -0.138, -0.116, -0.093, -0.070, -0.047, -0.023, +0.001, +0.026, +0.051, +0.077, +0.103, +0.130, +0.158, +0.186, +0.215, +0.245, +0.275, +0.307, +0.339, +0.373, +0.408, +0.444, +0.481, +0.520, +0.560, +0.602, +0.647, +0.693, +0.742, +0.793, +0.848, +0.906, +0.968, +1.034, +1.106, +1.183, +1.269, +1.363, +1.468, +1.588, +1.728, +1.893, +2.098, +2.363, +2.745, +3.419, +4.123, +5.109, +5.898, +6.708, +7.877, +8.772, +9.739,+11.058,+12.145 }, -0.2235, -0.0001, 0.9993 },
	{ "FPF:all2", 15, 16777216, 0, { -1.641, -1.628, -1.609, -1.592, -1.572, -1.540, -1.511, -1.476, -1.417, -1.360, -1.287, -1.235, -1.192, -1.156, -1.122, -1.092, -1.063, -1.037, -1.011, -0.987, -0.963, -0.941, -0.918, -0.897, -0.876, -0.855, -0.835, -0.815, -0.795, -0.776, -0.756, -0.737, -0.718, -0.699, -0.680, -0.662, -0.643, -0.624, -0.606, -0.587, -0.569, -0.550, -0.531, -0.513, -0.494, -0.475, -0.456, -0.437, -0.418, -0.399, -0.380, -0.360, -0.340, -0.321, -0.301, -0.280, -0.260, -0.239, -0.218, -0.197, -0.176, -0.154, -0.132, -0.110, -0.087, -0.064, -0.040, -0.016, +0.008, +0.033, +0.058, +0.084, +0.110, +0.137, +0.165, +0.194, +0.223, +0.252, +0.283, +0.315, +0.347, +0.381, +0.416, +0.452, +0.489, +0.528, +0.568, +0.610, +0.654, +0.701, +0.749, +0.801, +0.855, +0.913, +0.974, +1.040, +1.112, +1.189, +1.274, +1.368, +1.473, +1.592, +1.729, +1.894, +2.096, +2.359, +2.735, +3.399, +4.086, +5.046, +5.821, +6.630, +7.791, +8.714, +9.684,+11.068,+12.261 }, -0.2183, +0.0004, 1.0003 },
	{ "FPF:all2", 16, 16777216, 0, { -1.683, -1.670, -1.650, -1.631, -1.610, -1.574, -1.542, -1.504, -1.442, -1.382, -1.306, -1.252, -1.208, -1.169, -1.135, -1.103, -1.074, -1.046, -1.020, -0.995, -0.971, -0.948, -0.925, -0.903, -0.882, -0.860, -0.840, -0.819, -0.799, -0.779, -0.759, -0.740, -0.720, -0.701, -0.682, -0.663, -0.644, -0.625, -0.606, -0.587, -0.568, -0.549, -0.530, -0.512, -0.493, -0.473, -0.454, -0.435, -0.416, -0.396, -0.377, -0.357, -0.337, -0.317, -0.297, -0.276, -0.256, -0.235, -0.214, -0.192, -0.171, -0.149, -0.126, -0.104, -0.081, -0.058, -0.034, -0.010, +0.014, +0.039, +0.065, +0.091, +0.117, +0.145, +0.172, +0.201, +0.230, +0.260, +0.291, +0.323, +0.355, +0.389, +0.423, +0.459, +0.497, +0.536, +0.576, +0.618, +0.662, +0.708, +0.757, +0.808, +0.862, +0.919, +0.981, +1.046, +1.117, +1.194, +1.278, +1.372, +1.476, +1.594, +1.731, +1.893, +2.092, +2.352, +2.723, +3.373, +4.047, +4.985, +5.731, +6.515, +7.644, +8.543, +9.464,+10.820,+11.856 }, -0.2136, +0.0005, 1.0004 },
	{ "FPF:all2", 17, 16777216, 0, { -1.723, -1.706, -1.684, -1.665, -1.642, -1.606, -1.573, -1.532, -1.467, -1.404, -1.325, -1.268, -1.222, -1.183, -1.147, -1.115, -1.084, -1.056, -1.029, -1.003, -0.978, -0.954, -0.931, -0.909, -0.886, -0.865, -0.844, -0.823, -0.802, -0.782, -0.762, -0.742, -0.722, -0.703, -0.683, -0.664, -0.645, -0.625, -0.606, -0.587, -0.568, -0.549, -0.530, -0.510, -0.491, -0.472, -0.452, -0.433, -0.413, -0.394, -0.374, -0.354, -0.334, -0.314, -0.293, -0.273, -0.252, -0.231, -0.209, -0.188, -0.166, -0.144, -0.122, -0.099, -0.076, -0.053, -0.029, -0.005, +0.020, +0.045, +0.070, +0.097, +0.123, +0.151, +0.179, +0.207, +0.236, +0.266, +0.297, +0.329, +0.361, +0.395, +0.430, +0.466, +0.503, +0.542, +0.582, +0.624, +0.668, +0.714, +0.763, +0.814, +0.867, +0.925, +0.985, +1.051, +1.121, +1.198, +1.281, +1.374, +1.476, +1.593, +1.728, +1.889, +2.086, +2.341, +2.707, +3.346, +4.011, +4.936, +5.669, +6.445, +7.544, +8.425, +9.399,+10.713,+11.789 }, -0.2095, +0.0000, 1.0002 },
	{ "FPF:all2", 18, 16777216, 0, { -1.759, -1.746, -1.721, -1.699, -1.674, -1.636, -1.600, -1.557, -1.488, -1.423, -1.341, -1.282, -1.235, -1.194, -1.158, -1.124, -1.093, -1.064, -1.036, -1.010, -0.985, -0.960, -0.937, -0.914, -0.891, -0.869, -0.847, -0.826, -0.805, -0.784, -0.764, -0.744, -0.724, -0.704, -0.684, -0.664, -0.645, -0.625, -0.606, -0.586, -0.567, -0.548, -0.528, -0.509, -0.489, -0.470, -0.450, -0.431, -0.411, -0.391, -0.371, -0.351, -0.330, -0.310, -0.289, -0.269, -0.248, -0.226, -0.205, -0.183, -0.161, -0.139, -0.117, -0.094, -0.071, -0.047, -0.023, +0.001, +0.026, +0.051, +0.077, +0.103, +0.129, +0.157, +0.185, +0.213, +0.243, +0.273, +0.304, +0.335, +0.368, +0.402, +0.436, +0.473, +0.510, +0.549, +0.589, +0.631, +0.675, +0.721, +0.769, +0.819, +0.873, +0.930, +0.990, +1.055, +1.125, +1.201, +1.284, +1.376, +1.478, +1.594, +1.729, +1.887, +2.083, +2.336, +2.697, +3.328, +3.983, +4.885, +5.610, +6.357, +7.423, +8.272, +9.187,+10.400,+11.380 }, -0.2049, +0.0004, 1.0004 },
	{ "FPF:all2", 19, 16777216, 0, { -1.796, -1.779, -1.753, -1.730, -1.703, -1.662, -1.625, -1.581, -1.509, -1.441, -1.356, -1.296, -1.247, -1.205, -1.167, -1.133, -1.102, -1.072, -1.044, -1.017, -0.991, -0.966, -0.942, -0.918, -0.895, -0.873, -0.851, -0.829, -0.808, -0.787, -0.766, -0.746, -0.725, -0.705, -0.685, -0.665, -0.645, -0.626, -0.606, -0.586, -0.566, -0.547, -0.527, -0.507, -0.488, -0.468, -0.448, -0.428, -0.408, -0.388, -0.368, -0.348, -0.328, -0.307, -0.286, -0.265, -0.244, -0.223, -0.201, -0.179, -0.157, -0.135, -0.112, -0.089, -0.066, -0.042, -0.018, +0.006, +0.031, +0.056, +0.082, +0.108, +0.135, +0.162, +0.190, +0.219, +0.248, +0.278, +0.309, +0.341, +0.374, +0.407, +0.442, +0.478, +0.516, +0.554, +0.595, +0.637, +0.680, +0.726, +0.774, +0.824, +0.878, +0.934, +0.994, +1.059, +1.129, +1.204, +1.286, +1.377, +1.479, +1.594, +1.728, +1.885, +2.078, +2.329, +2.684, +3.306, +3.947, +4.836, +5.540, +6.276, +7.296, +8.106, +8.986,+10.104,+11.023 }, -0.2012, +0.0002, 1.0000 },
	{ "FPF:all2", 20, 16777216, 0, { -1.830, -1.812, -1.785, -1.761, -1.733, -1.690, -1.651, -1.604, -1.529, -1.458, -1.370, -1.309, -1.258, -1.215, -1.177, -1.142, -1.109, -1.079, -1.050, -1.023, -0.996, -0.971, -0.946, -0.922, -0.899, -0.876, -0.854, -0.832, -0.810, -0.789, -0.768, -0.747, -0.726, -0.706, -0.685, -0.665, -0.645, -0.625, -0.605, -0.585, -0.565, -0.545, -0.526, -0.506, -0.486, -0.466, -0.446, -0.426, -0.406, -0.386, -0.365, -0.345, -0.324, -0.304, -0.283, -0.262, -0.240, -0.219, -0.197, -0.175, -0.153, -0.131, -0.108, -0.085, -0.062, -0.038, -0.014, +0.010, +0.035, +0.060, +0.086, +0.112, +0.139, +0.167, +0.195, +0.224, +0.253, +0.283, +0.314, +0.346, +0.378, +0.412, +0.447, +0.483, +0.520, +0.558, +0.598, +0.640, +0.684, +0.730, +0.777, +0.828, +0.881, +0.937, +0.997, +1.062, +1.131, +1.206, +1.288, +1.379, +1.480, +1.593, +1.725, +1.881, +2.072, +2.321, +2.673, +3.288, +3.922, +4.793, +5.483, +6.208, +7.215, +7.989, +8.846, +9.985,+10.868 }, -0.1974, -0.0000, 0.9997 },
	{ "FPF:all2", 21, 16777216, 0, { -1.861, -1.841, -1.813, -1.787, -1.758, -1.713, -1.672, -1.625, -1.547, -1.474, -1.384, -1.320, -1.268, -1.224, -1.185, -1.150, -1.116, -1.085, -1.056, -1.028, -1.001, -0.975, -0.950, -0.926, -0.902, -0.879, -0.856, -0.834, -0.812, -0.790, -0.769, -0.748, -0.727, -0.707, -0.686, -0.665, -0.645, -0.625, -0.605, -0.585, -0.565, -0.545, -0.525, -0.505, -0.485, -0.465, -0.444, -0.424, -0.404, -0.384, -0.363, -0.343, -0.322, -0.301, -0.280, -0.259, -0.237, -0.216, -0.194, -0.172, -0.150, -0.127, -0.104, -0.081, -0.058, -0.034, -0.010, +0.014, +0.039, +0.065, +0.090, +0.117, +0.144, +0.171, +0.199, +0.228, +0.258, +0.288, +0.319, +0.350, +0.383, +0.417, +0.451, +0.487, +0.525, +0.563, +0.603, +0.645, +0.689, +0.734, +0.782, +0.832, +0.885, +0.941, +1.001, +1.065, +1.134, +1.209, +1.290, +1.380, +1.480, +1.594, +1.724, +1.879, +2.069, +2.314, +2.662, +3.269, +3.893, +4.759, +5.444, +6.154, +7.147, +7.951, +8.769, +9.998,+10.793 }, -0.1941, -0.0000, 0.9999 },
	{ "FPF:all2", 22, 16777216, 0, { -1.894, -1.875, -1.844, -1.818, -1.787, -1.738, -1.695, -1.645, -1.565, -1.490, -1.397, -1.331, -1.279, -1.233, -1.194, -1.157, -1.124, -1.092, -1.062, -1.033, -1.006, -0.980, -0.955, -0.930, -0.906, -0.882, -0.859, -0.837, -0.814, -0.792, -0.771, -0.750, -0.728, -0.707, -0.686, -0.666, -0.645, -0.625, -0.605, -0.584, -0.564, -0.544, -0.524, -0.504, -0.483, -0.463, -0.443, -0.423, -0.402, -0.382, -0.361, -0.340, -0.319, -0.299, -0.277, -0.256, -0.235, -0.213, -0.191, -0.169, -0.147, -0.124, -0.101, -0.078, -0.054, -0.030, -0.006, +0.018, +0.043, +0.069, +0.095, +0.121, +0.148, +0.176, +0.204, +0.232, +0.262, +0.292, +0.323, +0.355, +0.387, +0.421, +0.456, +0.492, +0.529, +0.567, +0.607, +0.649, +0.692, +0.738, +0.786, +0.836, +0.889, +0.945, +1.004, +1.069, +1.137, +1.211, +1.292, +1.382, +1.481, +1.594, +1.724, +1.878, +2.065, +2.307, +2.653, +3.253, +3.865, +4.716, +5.391, +6.079, +7.052, +7.838, +8.634, +9.813,+10.778 }, -0.1912, -0.0002, 0.9999 },
	{ "FPF:all2", 23, 16777216, 0, { -1.926, -1.904, -1.870, -1.842, -1.810, -1.761, -1.716, -1.664, -1.581, -1.503, -1.408, -1.341, -1.288, -1.242, -1.201, -1.164, -1.130, -1.098, -1.067, -1.039, -1.011, -0.984, -0.958, -0.933, -0.909, -0.885, -0.862, -0.839, -0.817, -0.794, -0.773, -0.751, -0.730, -0.708, -0.687, -0.667, -0.646, -0.625, -0.605, -0.584, -0.564, -0.543, -0.523, -0.503, -0.482, -0.462, -0.441, -0.421, -0.400, -0.380, -0.359, -0.338, -0.317, -0.296, -0.275, -0.254, -0.232, -0.210, -0.188, -0.166, -0.143, -0.121, -0.098, -0.075, -0.051, -0.027, -0.003, +0.022, +0.047, +0.072, +0.099, +0.125, +0.152, +0.180, +0.208, +0.237, +0.266, +0.296, +0.327, +0.359, +0.392, +0.426, +0.460, +0.496, +0.534, +0.572, +0.612, +0.654, +0.697, +0.742, +0.790, +0.839, +0.892, +0.948, +1.007, +1.071, +1.139, +1.213, +1.294, +1.383, +1.482, +1.594, +1.723, +1.875, +2.061, +2.302, +2.641, +3.234, +3.841, +4.672, +5.331, +6.003, +6.963, +7.754, +8.578, +9.752,+10.668 }, -0.1882, -0.0004, 0.9997 },
	{ "FPF:all2", 24, 16777216, 0, { -1.953, -1.927, -1.895, -1.865, -1.833, -1.782, -1.737, -1.683, -1.597, -1.517, -1.420, -1.352, -1.297, -1.250, -1.208, -1.171, -1.136, -1.103, -1.072, -1.043, -1.015, -0.988, -0.962, -0.936, -0.912, -0.888, -0.864, -0.841, -0.818, -0.796, -0.774, -0.752, -0.730, -0.709, -0.688, -0.667, -0.646, -0.625, -0.604, -0.584, -0.563, -0.543, -0.522, -0.502, -0.481, -0.461, -0.440, -0.419, -0.399, -0.378, -0.357, -0.336, -0.315, -0.294, -0.272, -0.251, -0.229, -0.207, -0.185, -0.163, -0.140, -0.118, -0.095, -0.071, -0.047, -0.023, +0.001, +0.026, +0.051, +0.076, +0.102, +0.129, +0.156, +0.184, +0.212, +0.241, +0.270, +0.301, +0.331, +0.363, +0.396, +0.430, +0.464, +0.500, +0.538, +0.576, +0.616, +0.657, +0.701, +0.746, +0.793, +0.843, +0.896, +0.951, +1.011, +1.074, +1.142, +1.215, +1.295, +1.384, +1.483, +1.595, +1.723, +1.874, +2.060, +2.300, +2.639, +3.221, +3.824, +4.646, +5.300, +5.976, +6.905, +7.664, +8.463, +9.610,+10.413 }, -0.1852, -0.0002, 1.0003 },
	{ "FPF:all2", 25, 16777216, 0, { -1.982, -1.956, -1.920, -1.889, -1.856, -1.802, -1.755, -1.700, -1.612, -1.530, -1.430, -1.361, -1.305, -1.257, -1.215, -1.176, -1.141, -1.108, -1.077, -1.047, -1.018, -0.991, -0.965, -0.939, -0.914, -0.890, -0.866, -0.842, -0.819, -0.797, -0.774, -0.753, -0.731, -0.709, -0.688, -0.667, -0.646, -0.625, -0.604, -0.583, -0.562, -0.542, -0.521, -0.500, -0.480, -0.459, -0.438, -0.417, -0.397, -0.376, -0.355, -0.334, -0.313, -0.291, -0.270, -0.248, -0.226, -0.204, -0.182, -0.160, -0.137, -0.114, -0.091, -0.068, -0.044, -0.020, +0.005, +0.029, +0.055, +0.080, +0.107, +0.133, +0.160, +0.188, +0.216, +0.245, +0.274, +0.304, +0.335, +0.367, +0.400, +0.433, +0.468, +0.504, +0.541, +0.579, +0.619, +0.661, +0.704, +0.749, +0.796, +0.846, +0.898, +0.954, +1.013, +1.076, +1.143, +1.216, +1.296, +1.384, +1.482, +1.592, +1.720, +1.870, +2.053, +2.289, +2.625, +3.204, +3.798, +4.610, +5.253, +5.911, +6.855, +7.647, +8.447, +9.479,+10.367 }, -0.1822, -0.0004, 0.9995 },
	{ "FPF:all2", 26, 16777216, 0, { -2.006, -1.980, -1.942, -1.911, -1.875, -1.821, -1.772, -1.716, -1.626, -1.543, -1.440, -1.369, -1.312, -1.264, -1.221, -1.182, -1.146, -1.113, -1.081, -1.051, -1.022, -0.994, -0.968, -0.942, -0.916, -0.892, -0.867, -0.844, -0.821, -0.798, -0.775, -0.753, -0.731, -0.710, -0.688, -0.667, -0.645, -0.624, -0.603, -0.582, -0.562, -0.541, -0.520, -0.499, -0.478, -0.458, -0.437, -0.416, -0.395, -0.374, -0.353, -0.332, -0.311, -0.289, -0.268, -0.246, -0.224, -0.202, -0.180, -0.157, -0.134, -0.112, -0.088, -0.065, -0.041, -0.017, +0.008, +0.033, +0.058, +0.083, +0.110, +0.136, +0.163, +0.191, +0.219, +0.248, +0.277, +0.307, +0.338, +0.370, +0.403, +0.437, +0.472, +0.507, +0.544, +0.583, +0.623, +0.664, +0.707, +0.752, +0.799, +0.849, +0.901, +0.957, +1.016, +1.079, +1.146, +1.219, +1.299, +1.387, +1.484, +1.594, +1.721, +1.870, +2.052, +2.287, +2.620, +3.194, +3.779, +4.575, +5.210, +5.854, +6.765, +7.492, +8.268, +9.241,+10.045 }, -0.1795, -0.0002, 0.9998 },
	{ "FPF:all2", 27, 16777216, 0, { -2.030, -2.005, -1.966, -1.933, -1.896, -1.840, -1.790, -1.732, -1.640, -1.554, -1.450, -1.378, -1.320, -1.271, -1.227, -1.188, -1.152, -1.118, -1.085, -1.055, -1.026, -0.998, -0.971, -0.944, -0.919, -0.894, -0.870, -0.846, -0.823, -0.799, -0.777, -0.754, -0.732, -0.710, -0.689, -0.667, -0.646, -0.624, -0.603, -0.582, -0.561, -0.540, -0.519, -0.498, -0.477, -0.456, -0.435, -0.415, -0.394, -0.372, -0.351, -0.330, -0.309, -0.287, -0.265, -0.244, -0.222, -0.199, -0.177, -0.155, -0.132, -0.109, -0.085, -0.062, -0.038, -0.014, +0.011, +0.036, +0.061, +0.087, +0.113, +0.140, +0.167, +0.194, +0.223, +0.252, +0.281, +0.311, +0.342, +0.374, +0.407, +0.440, +0.475, +0.511, +0.548, +0.586, +0.626, +0.667, +0.710, +0.755, +0.802, +0.852, +0.904, +0.959, +1.018, +1.080, +1.148, +1.220, +1.300, +1.387, +1.484, +1.594, +1.720, +1.868, +2.049, +2.283, +2.612, +3.180, +3.758, +4.548, +5.164, +5.815, +6.715, +7.429, +8.174, +9.192, +9.970 }, -0.1771, -0.0003, 0.9999 },
	{ "FPF:all2", 28, 16777216, 0, { -2.058, -2.029, -1.989, -1.955, -1.916, -1.859, -1.807, -1.747, -1.653, -1.566, -1.460, -1.386, -1.328, -1.277, -1.233, -1.193, -1.156, -1.122, -1.089, -1.058, -1.029, -1.001, -0.973, -0.947, -0.921, -0.896, -0.871, -0.847, -0.824, -0.800, -0.778, -0.755, -0.733, -0.711, -0.689, -0.667, -0.646, -0.624, -0.603, -0.582, -0.560, -0.539, -0.518, -0.497, -0.476, -0.455, -0.434, -0.413, -0.392, -0.370, -0.349, -0.328, -0.306, -0.285, -0.263, -0.241, -0.219, -0.197, -0.174, -0.152, -0.129, -0.106, -0.082, -0.059, -0.035, -0.010, +0.014, +0.039, +0.064, +0.090, +0.116, +0.143, +0.170, +0.198, +0.226, +0.255, +0.284, +0.315, +0.346, +0.378, +0.410, +0.444, +0.479, +0.514, +0.551, +0.590, +0.629, +0.671, +0.714, +0.758, +0.805, +0.855, +0.907, +0.962, +1.021, +1.083, +1.150, +1.222, +1.301, +1.388, +1.484, +1.593, +1.719, +1.866, +2.046, +2.278, +2.606, +3.169, +3.740, +4.522, +5.134, +5.766, +6.638, +7.344, +8.074, +9.025, +9.823 }, -0.1744, -0.0001, 1.0000 },
	{ "FPF:all2", 29, 16777216, 0, { -2.077, -2.049, -2.009, -1.974, -1.937, -1.876, -1.823, -1.762, -1.665, -1.576, -1.468, -1.393, -1.334, -1.283, -1.238, -1.198, -1.161, -1.126, -1.093, -1.062, -1.032, -1.003, -0.976, -0.949, -0.923, -0.898, -0.873, -0.849, -0.825, -0.801, -0.778, -0.755, -0.733, -0.711, -0.689, -0.667, -0.645, -0.624, -0.602, -0.581, -0.559, -0.538, -0.517, -0.496, -0.475, -0.454, -0.433, -0.411, -0.390, -0.369, -0.347, -0.326, -0.304, -0.283, -0.261, -0.239, -0.217, -0.194, -0.172, -0.149, -0.126, -0.103, -0.080, -0.056, -0.032, -0.008, +0.017, +0.042, +0.067, +0.093, +0.119, +0.146, +0.173, +0.201, +0.229, +0.258, +0.288, +0.318, +0.349, +0.381, +0.413, +0.447, +0.482, +0.517, +0.554, +0.592, +0.632, +0.673, +0.716, +0.761, +0.808, +0.857, +0.909, +0.964, +1.022, +1.084, +1.151, +1.224, +1.303, +1.389, +1.486, +1.594, +1.719, +1.866, +2.045, +2.275, +2.600, +3.157, +3.723, +4.499, +5.110, +5.740, +6.620, +7.302, +8.048, +9.089, +9.844 }, -0.1718, +0.0001, 1.0003 },
	{ "FPF:all2", 30, 16777216, 0, { -2.101, -2.073, -2.030, -1.993, -1.953, -1.892, -1.838, -1.776, -1.677, -1.586, -1.476, -1.400, -1.340, -1.289, -1.244, -1.203, -1.165, -1.130, -1.096, -1.065, -1.035, -1.006, -0.978, -0.951, -0.925, -0.899, -0.874, -0.850, -0.826, -0.802, -0.779, -0.756, -0.734, -0.711, -0.689, -0.667, -0.645, -0.623, -0.602, -0.580, -0.559, -0.538, -0.516, -0.495, -0.474, -0.453, -0.431, -0.410, -0.389, -0.367, -0.346, -0.324, -0.303, -0.281, -0.259, -0.237, -0.215, -0.193, -0.170, -0.147, -0.124, -0.101, -0.078, -0.054, -0.030, -0.006, +0.019, +0.044, +0.070, +0.095, +0.122, +0.148, +0.176, +0.203, +0.232, +0.261, +0.290, +0.321, +0.352, +0.383, +0.416, +0.450, +0.484, +0.520, +0.557, +0.595, +0.634, +0.676, +0.718, +0.763, +0.810, +0.859, +0.911, +0.966, +1.024, +1.086, +1.153, +1.225, +1.303, +1.389, +1.485, +1.593, +1.716, +1.862, +2.039, +2.269, +2.590, +3.144, +3.710, +4.475, +5.073, +5.697, +6.552, +7.273, +7.998, +9.016, +9.679 }, -0.1700, -0.0002, 0.9999 },
	{ "FPF:all2", 31, 16777216, 0, { -2.116, -2.087, -2.048, -2.011, -1.969, -1.908, -1.852, -1.789, -1.688, -1.595, -1.484, -1.408, -1.346, -1.295, -1.249, -1.207, -1.169, -1.134, -1.100, -1.068, -1.038, -1.009, -0.981, -0.953, -0.927, -0.901, -0.876, -0.851, -0.827, -0.803, -0.780, -0.757, -0.734, -0.711, -0.689, -0.667, -0.645, -0.623, -0.602, -0.580, -0.558, -0.537, -0.516, -0.494, -0.473, -0.452, -0.430, -0.409, -0.387, -0.366, -0.345, -0.323, -0.301, -0.279, -0.257, -0.235, -0.213, -0.190, -0.168, -0.145, -0.122, -0.099, -0.075, -0.051, -0.027, -0.003, +0.022, +0.047, +0.072, +0.098, +0.124, +0.151, +0.178, +0.206, +0.235, +0.264, +0.293, +0.323, +0.354, +0.386, +0.419, +0.453, +0.487, +0.523, +0.559, +0.598, +0.637, +0.678, +0.721, +0.765, +0.812, +0.861, +0.913, +0.967, +1.025, +1.087, +1.154, +1.226, +1.304, +1.389, +1.485, +1.592, +1.715, +1.860, +2.036, +2.263, +2.583, +3.131, +3.691, +4.449, +5.046, +5.665, +6.510, +7.191, +7.904, +8.974, +9.752 }, -0.1679, -0.0004, 0.9999 },
	{ "FPF:all2", 32, 16777216, 0, { -2.144, -2.112, -2.066, -2.030, -1.988, -1.922, -1.865, -1.801, -1.699, -1.605, -1.492, -1.414, -1.352, -1.299, -1.253, -1.211, -1.173, -1.137, -1.103, -1.071, -1.040, -1.011, -0.982, -0.955, -0.928, -0.902, -0.877, -0.852, -0.828, -0.804, -0.780, -0.757, -0.734, -0.711, -0.689, -0.667, -0.645, -0.623, -0.601, -0.579, -0.557, -0.536, -0.514, -0.493, -0.472, -0.450, -0.429, -0.407, -0.386, -0.364, -0.343, -0.321, -0.299, -0.277, -0.255, -0.233, -0.211, -0.188, -0.165, -0.142, -0.119, -0.096, -0.072, -0.049, -0.024, -0.000, +0.025, +0.050, +0.075, +0.101, +0.127, +0.154, +0.182, +0.209, +0.238, +0.267, +0.296, +0.326, +0.357, +0.389, +0.422, +0.456, +0.490, +0.526, +0.563, +0.601, +0.640, +0.681, +0.724, +0.769, +0.815, +0.864, +0.916, +0.970, +1.028, +1.090, +1.156, +1.228, +1.305, +1.391, +1.485, +1.592, +1.715, +1.860, +2.036, +2.261, +2.579, +3.125, +3.681, +4.436, +5.012, +5.613, +6.443, +7.092, +7.854, +8.710, +9.453 }, -0.1654, +0.0002, 1.0003 },
	{ "FPF:all2", 33, 16777216, 0, { -2.161, -2.131, -2.085, -2.048, -2.004, -1.938, -1.880, -1.814, -1.710, -1.614, -1.499, -1.421, -1.358, -1.304, -1.258, -1.215, -1.176, -1.140, -1.106, -1.073, -1.042, -1.013, -0.984, -0.957, -0.930, -0.903, -0.878, -0.853, -0.829, -0.804, -0.781, -0.757, -0.734, -0.711, -0.689, -0.666, -0.644, -0.622, -0.600, -0.578, -0.557, -0.535, -0.514, -0.492, -0.470, -0.449, -0.427, -0.406, -0.384, -0.363, -0.341, -0.319, -0.297, -0.275, -0.253, -0.231, -0.209, -0.186, -0.163, -0.140, -0.117, -0.094, -0.070, -0.046, -0.022, +0.003, +0.027, +0.052, +0.078, +0.104, +0.130, +0.157, +0.184, +0.212, +0.240, +0.270, +0.299, +0.329, +0.360, +0.392, +0.425, +0.458, +0.493, +0.528, +0.565, +0.603, +0.643, +0.684, +0.726, +0.771, +0.817, +0.866, +0.917, +0.972, +1.029, +1.091, +1.157, +1.228, +1.306, +1.390, +1.485, +1.591, +1.713, +1.857, +2.032, +2.256, +2.572, +3.114, +3.664, +4.407, +4.980, +5.567, +6.398, +7.039, +7.695, +8.669, +9.502 }, -0.1632, +0.0001, 0.9998 },
	{ "FPF:all2", 34, 16777216, 0, { -2.183, -2.148, -2.103, -2.064, -2.020, -1.952, -1.893, -1.825, -1.719, -1.622, -1.506, -1.426, -1.363, -1.309, -1.262, -1.219, -1.180, -1.143, -1.109, -1.076, -1.045, -1.015, -0.986, -0.959, -0.931, -0.905, -0.879, -0.854, -0.830, -0.805, -0.782, -0.758, -0.735, -0.712, -0.689, -0.667, -0.644, -0.622, -0.600, -0.578, -0.556, -0.535, -0.513, -0.491, -0.470, -0.448, -0.427, -0.405, -0.383, -0.362, -0.340, -0.318, -0.296, -0.274, -0.252, -0.230, -0.207, -0.184, -0.162, -0.139, -0.115, -0.092, -0.068, -0.044, -0.020, +0.004, +0.029, +0.055, +0.080, +0.106, +0.133, +0.159, +0.187, +0.214, +0.243, +0.272, +0.301, +0.331, +0.363, +0.394, +0.427, +0.461, +0.495, +0.531, +0.568, +0.606, +0.645, +0.686, +0.729, +0.773, +0.820, +0.868, +0.920, +0.974, +1.032, +1.093, +1.159, +1.230, +1.307, +1.392, +1.486, +1.592, +1.714, +1.857, +2.031, +2.255, +2.569, +3.106, +3.649, +4.385, +4.963, +5.553, +6.373, +7.014, +7.669, +8.672, +9.426 }, -0.1616, +0.0002, 1.0005 },
	{ "FPF:all2", 35, 16777216, 0, { -2.197, -2.165, -2.119, -2.079, -2.034, -1.965, -1.906, -1.837, -1.729, -1.631, -1.513, -1.433, -1.369, -1.314, -1.266, -1.223, -1.183, -1.146, -1.111, -1.079, -1.047, -1.017, -0.988, -0.960, -0.933, -0.906, -0.880, -0.855, -0.830, -0.806, -0.782, -0.758, -0.735, -0.712, -0.689, -0.666, -0.644, -0.622, -0.600, -0.578, -0.556, -0.534, -0.512, -0.491, -0.469, -0.447, -0.425, -0.404, -0.382, -0.360, -0.338, -0.316, -0.294, -0.272, -0.250, -0.228, -0.205, -0.183, -0.160, -0.137, -0.113, -0.090, -0.066, -0.042, -0.018, +0.006, +0.031, +0.057, +0.082, +0.108, +0.135, +0.161, +0.189, +0.217, +0.245, +0.274, +0.304, +0.334, +0.365, +0.397, +0.430, +0.463, +0.498, +0.533, +0.570, +0.608, +0.647, +0.688, +0.731, +0.775, +0.822, +0.870, +0.921, +0.976, +1.033, +1.094, +1.160, +1.231, +1.308, +1.392, +1.486, +1.591, +1.712, +1.854, +2.027, +2.250, +2.560, +3.093, +3.632, +4.359, +4.925, +5.513, +6.330, +6.970, +7.629, +8.487, +9.217 }, -0.1597, +0.0001, 1.0000 },
	{ "FPF:all2", 36, 16777216, 0, { -2.220, -2.188, -2.140, -2.098, -2.050, -1.980, -1.918, -1.847, -1.738, -1.639, -1.519, -1.437, -1.373, -1.318, -1.270, -1.226, -1.186, -1.149, -1.114, -1.081, -1.049, -1.019, -0.990, -0.962, -0.934, -0.908, -0.882, -0.856, -0.831, -0.806, -0.782, -0.759, -0.735, -0.712, -0.689, -0.667, -0.644, -0.622, -0.599, -0.577, -0.555, -0.533, -0.512, -0.490, -0.468, -0.446, -0.424, -0.403, -0.381, -0.359, -0.337, -0.315, -0.293, -0.271, -0.249, -0.226, -0.204, -0.181, -0.158, -0.135, -0.112, -0.088, -0.064, -0.040, -0.016, +0.008, +0.033, +0.059, +0.084, +0.110, +0.137, +0.163, +0.191, +0.219, +0.247, +0.276, +0.306, +0.336, +0.367, +0.399, +0.431, +0.465, +0.499, +0.535, +0.571, +0.610, +0.649, +0.690, +0.732, +0.776, +0.822, +0.871, +0.922, +0.976, +1.033, +1.094, +1.160, +1.230, +1.307, +1.391, +1.484, +1.590, +1.710, +1.851, +2.023, +2.244, +2.554, +3.086, +3.621, +4.342, +4.905, +5.496, +6.292, +6.949, +7.639, +8.508, +9.215 }, -0.1581, -0.0002, 0.9998 },
	{ "FPF:all2", 37, 16777216, 0, { -2.237, -2.205, -2.153, -2.110, -2.063, -1.991, -1.929, -1.857, -1.747, -1.646, -1.525, -1.443, -1.378, -1.322, -1.274, -1.230, -1.189, -1.152, -1.117, -1.083, -1.052, -1.021, -0.992, -0.963, -0.936, -0.909, -0.883, -0.857, -0.832, -0.807, -0.783, -0.759, -0.735, -0.712, -0.689, -0.666, -0.644, -0.621, -0.599, -0.577, -0.555, -0.533, -0.511, -0.489, -0.467, -0.445, -0.423, -0.402, -0.380, -0.358, -0.336, -0.314, -0.292, -0.269, -0.247, -0.225, -0.202, -0.179, -0.156, -0.133, -0.110, -0.086, -0.063, -0.038, -0.014, +0.011, +0.035, +0.061, +0.086, +0.112, +0.139, +0.166, +0.193, +0.221, +0.249, +0.278, +0.308, +0.338, +0.369, +0.401, +0.433, +0.467, +0.501, +0.537, +0.573, +0.611, +0.650, +0.691, +0.733, +0.778, +0.824, +0.872, +0.923, +0.977, +1.035, +1.096, +1.161, +1.231, +1.308, +1.392, +1.485, +1.590, +1.710, +1.851, +2.023, +2.241, +2.550, +3.076, +3.603, +4.319, +4.877, +5.446, +6.264, +6.911, +7.539, +8.496, +9.272 }, -0.1564, -0.0002, 0.9998 },
	{ "FPF:all2", 38, 16777216, 0, { -2.254, -2.219, -2.168, -2.123, -2.075, -2.003, -1.940, -1.869, -1.756, -1.654, -1.532, -1.449, -1.383, -1.327, -1.277, -1.233, -1.192, -1.155, -1.119, -1.085, -1.053, -1.023, -0.993, -0.964, -0.937, -0.910, -0.883, -0.857, -0.832, -0.807, -0.783, -0.759, -0.735, -0.712, -0.689, -0.666, -0.643, -0.621, -0.598, -0.576, -0.554, -0.532, -0.510, -0.488, -0.466, -0.444, -0.422, -0.400, -0.379, -0.357, -0.335, -0.312, -0.290, -0.268, -0.246, -0.223, -0.201, -0.178, -0.155, -0.132, -0.108, -0.085, -0.061, -0.037, -0.013, +0.012, +0.037, +0.062, +0.088, +0.114, +0.141, +0.168, +0.195, +0.223, +0.251, +0.280, +0.310, +0.340, +0.371, +0.403, +0.435, +0.469, +0.503, +0.539, +0.576, +0.613, +0.652, +0.693, +0.736, +0.780, +0.826, +0.874, +0.925, +0.979, +1.036, +1.097, +1.161, +1.232, +1.308, +1.392, +1.485, +1.589, +1.709, +1.849, +2.020, +2.239, +2.545, +3.070, +3.596, +4.304, +4.860, +5.419, +6.204, +6.803, +7.452, +8.333, +9.092 }, -0.1549, -0.0001, 0.9999 },
	{ "FPF:all2", 39, 16777216, 0, { -2.274, -2.238, -2.186, -2.140, -2.090, -2.015, -1.950, -1.877, -1.764, -1.661, -1.538, -1.453, -1.387, -1.331, -1.281, -1.236, -1.195, -1.157, -1.121, -1.088, -1.055, -1.025, -0.995, -0.966, -0.938, -0.911, -0.884, -0.859, -0.833, -0.808, -0.784, -0.760, -0.736, -0.712, -0.689, -0.666, -0.643, -0.621, -0.598, -0.576, -0.553, -0.531, -0.509, -0.487, -0.465, -0.443, -0.421, -0.399, -0.377, -0.355, -0.333, -0.311, -0.289, -0.267, -0.244, -0.221, -0.199, -0.176, -0.153, -0.130, -0.107, -0.083, -0.059, -0.035, -0.011, +0.014, +0.039, +0.064, +0.090, +0.116, +0.143, +0.170, +0.197, +0.225, +0.254, +0.283, +0.312, +0.342, +0.373, +0.405, +0.437, +0.471, +0.505, +0.541, +0.577, +0.615, +0.655, +0.695, +0.737, +0.782, +0.828, +0.876, +0.927, +0.981, +1.038, +1.099, +1.163, +1.233, +1.310, +1.393, +1.485, +1.589, +1.709, +1.849, +2.019, +2.236, +2.542, +3.060, +3.581, +4.283, +4.833, +5.396, +6.154, +6.759, +7.383, +8.279, +9.032 }, -0.1530, -0.0000, 1.0000 },
	{ "FPF:all2", 40, 16777216, 0, { -2.286, -2.249, -2.200, -2.154, -2.105, -2.028, -1.963, -1.889, -1.773, -1.668, -1.544, -1.458, -1.391, -1.335, -1.285, -1.240, -1.199, -1.160, -1.124, -1.090, -1.058, -1.026, -0.996, -0.967, -0.939, -0.912, -0.885, -0.859, -0.834, -0.809, -0.784, -0.760, -0.736, -0.712, -0.689, -0.666, -0.643, -0.620, -0.598, -0.575, -0.553, -0.531, -0.509, -0.487, -0.465, -0.443, -0.421, -0.398, -0.376, -0.354, -0.332, -0.310, -0.287, -0.265, -0.243, -0.220, -0.197, -0.174, -0.151, -0.128, -0.105, -0.081, -0.057, -0.033, -0.009, +0.016, +0.041, +0.067, +0.092, +0.118, +0.145, +0.172, +0.199, +0.227, +0.255, +0.284, +0.314, +0.344, +0.375, +0.407, +0.439, +0.473, +0.507, +0.543, +0.579, +0.617, +0.656, +0.697, +0.739, +0.783, +0.829, +0.877, +0.928, +0.982, +1.039, +1.099, +1.164, +1.234, +1.310, +1.392, +1.485, +1.588, +1.708, +1.847, +2.016, +2.232, +2.535, +3.052, +3.572, +4.270, +4.815, +5.362, +6.143, +6.751, +7.369, +8.280, +8.959 }, -0.1514, -0.0001, 1.0000 },
	{ "FPF:all2", 41, 16777216, 0, { -2.301, -2.266, -2.209, -2.164, -2.116, -2.039, -1.973, -1.898, -1.781, -1.675, -1.549, -1.464, -1.396, -1.338, -1.288, -1.243, -1.201, -1.162, -1.126, -1.092, -1.059, -1.028, -0.998, -0.968, -0.940, -0.913, -0.886, -0.860, -0.834, -0.809, -0.784, -0.760, -0.736, -0.712, -0.689, -0.666, -0.643, -0.620, -0.597, -0.575, -0.552, -0.530, -0.508, -0.486, -0.463, -0.441, -0.419, -0.397, -0.375, -0.353, -0.331, -0.308, -0.286, -0.264, -0.241, -0.219, -0.196, -0.173, -0.150, -0.127, -0.103, -0.080, -0.056, -0.031, -0.007, +0.018, +0.043, +0.068, +0.094, +0.120, +0.147, +0.174, +0.201, +0.229, +0.257, +0.286, +0.316, +0.346, +0.377, +0.409, +0.442, +0.475, +0.509, +0.545, +0.581, +0.619, +0.658, +0.699, +0.741, +0.785, +0.831, +0.879, +0.930, +0.984, +1.040, +1.101, +1.165, +1.235, +1.311, +1.394, +1.486, +1.589, +1.708, +1.846, +2.015, +2.231, +2.531, +3.045, +3.559, +4.246, +4.777, +5.332, +6.061, +6.651, +7.296, +8.148, +8.863 }, -0.1498, +0.0001, 1.0000 },
	{ "FPF:all2", 42, 16777216, 0, { -2.320, -2.286, -2.228, -2.180, -2.129, -2.050, -1.982, -1.907, -1.789, -1.682, -1.555, -1.468, -1.400, -1.342, -1.291, -1.245, -1.203, -1.165, -1.128, -1.094, -1.061, -1.029, -0.999, -0.970, -0.941, -0.914, -0.887, -0.861, -0.835, -0.810, -0.785, -0.761, -0.736, -0.713, -0.689, -0.666, -0.643, -0.620, -0.597, -0.575, -0.552, -0.530, -0.508, -0.485, -0.463, -0.441, -0.419, -0.397, -0.375, -0.353, -0.330, -0.308, -0.286, -0.263, -0.240, -0.218, -0.195, -0.172, -0.149, -0.125, -0.102, -0.078, -0.054, -0.030, -0.006, +0.019, +0.044, +0.070, +0.095, +0.122, +0.148, +0.175, +0.202, +0.230, +0.259, +0.288, +0.317, +0.348, +0.379, +0.411, +0.443, +0.476, +0.511, +0.546, +0.583, +0.621, +0.660, +0.700, +0.742, +0.786, +0.832, +0.880, +0.931, +0.985, +1.041, +1.101, +1.166, +1.235, +1.311, +1.393, +1.485, +1.588, +1.706, +1.844, +2.012, +2.226, +2.528, +3.038, +3.551, +4.245, +4.778, +5.320, +6.048, +6.648, +7.245, +8.132, +8.802 }, -0.1489, -0.0001, 1.0002 },
	{ "FPF:all2", 43, 16777216, 0, { -2.328, -2.293, -2.236, -2.191, -2.139, -2.060, -1.992, -1.916, -1.796, -1.687, -1.559, -1.472, -1.403, -1.345, -1.294, -1.248, -1.206, -1.167, -1.130, -1.096, -1.063, -1.031, -1.000, -0.971, -0.942, -0.915, -0.888, -0.861, -0.835, -0.810, -0.785, -0.760, -0.736, -0.712, -0.689, -0.665, -0.642, -0.619, -0.597, -0.574, -0.552, -0.529, -0.507, -0.485, -0.462, -0.440, -0.418, -0.396, -0.373, -0.351, -0.329, -0.307, -0.284, -0.262, -0.239, -0.216, -0.194, -0.171, -0.147, -0.124, -0.100, -0.077, -0.053, -0.029, -0.004, +0.021, +0.046, +0.071, +0.097, +0.123, +0.150, +0.177, +0.204, +0.232, +0.261, +0.290, +0.319, +0.350, +0.381, +0.412, +0.445, +0.478, +0.512, +0.548, +0.585, +0.622, +0.661, +0.702, +0.744, +0.788, +0.833, +0.881, +0.932, +0.985, +1.041, +1.102, +1.166, +1.235, +1.311, +1.393, +1.485, +1.587, +1.704, +1.842, +2.009, +2.223, +2.520, +3.029, +3.540, +4.224, +4.750, +5.292, +6.055, +6.634, +7.232, +8.110, +8.847 }, -0.1474, -0.0002, 0.9998 },
	{ "FPF:all2", 44, 16777216, 0, { -2.346, -2.308, -2.251, -2.204, -2.152, -2.070, -2.001, -1.923, -1.802, -1.694, -1.565, -1.477, -1.407, -1.348, -1.297, -1.251, -1.208, -1.169, -1.132, -1.097, -1.064, -1.032, -1.002, -0.972, -0.943, -0.916, -0.889, -0.862, -0.836, -0.810, -0.785, -0.761, -0.737, -0.713, -0.689, -0.665, -0.642, -0.619, -0.596, -0.573, -0.551, -0.528, -0.506, -0.484, -0.461, -0.439, -0.417, -0.395, -0.372, -0.350, -0.328, -0.305, -0.283, -0.260, -0.238, -0.215, -0.192, -0.169, -0.146, -0.122, -0.099, -0.075, -0.051, -0.027, -0.002, +0.023, +0.048, +0.073, +0.099, +0.125, +0.152, +0.179, +0.206, +0.234, +0.263, +0.292, +0.321, +0.352, +0.383, +0.414, +0.447, +0.480, +0.514, +0.550, +0.586, +0.624, +0.663, +0.703, +0.745, +0.789, +0.835, +0.883, +0.934, +0.987, +1.043, +1.103, +1.167, +1.236, +1.311, +1.394, +1.485, +1.587, +1.704, +1.842, +2.008, +2.221, +2.518, +3.021, +3.529, +4.196, +4.722, +5.260, +5.994, +6.570, +7.169, +8.068, +8.755 }, -0.1458, -0.0000, 0.9999 },
	{ "FPF:all2", 45, 16777216, 0, { -2.365, -2.325, -2.267, -2.217, -2.162, -2.081, -2.010, -1.931, -1.809, -1.700, -1.569, -1.480, -1.410, -1.351, -1.300, -1.253, -1.210, -1.171, -1.134, -1.099, -1.065, -1.033, -1.002, -0.973, -0.944, -0.916, -0.889, -0.862, -0.836, -0.811, -0.785, -0.761, -0.736, -0.712, -0.689, -0.665, -0.642, -0.619, -0.596, -0.573, -0.550, -0.528, -0.505, -0.483, -0.461, -0.438, -0.416, -0.394, -0.372, -0.349, -0.327, -0.304, -0.282, -0.259, -0.237, -0.214, -0.191, -0.168, -0.145, -0.121, -0.097, -0.074, -0.050, -0.025, -0.001, +0.024, +0.049, +0.074, +0.100, +0.127, +0.153, +0.180, +0.208, +0.236, +0.264, +0.293, +0.323, +0.353, +0.384, +0.416, +0.448, +0.482, +0.516, +0.551, +0.588, +0.625, +0.664, +0.705, +0.747, +0.791, +0.837, +0.885, +0.935, +0.988, +1.044, +1.104, +1.168, +1.238, +1.312, +1.394, +1.485, +1.587, +1.704, +1.841, +2.008, +2.219, +2.514, +3.018, +3.520, +4.189, +4.712, +5.252, +5.971, +6.555, +7.147, +7.985, +8.693 }, -0.1445, +0.0002, 1.0001 },
	{ "FPF:all2", 46, 16777216, 0, { -2.378, -2.336, -2.276, -2.229, -2.175, -2.092, -2.021, -1.940, -1.817, -1.705, -1.573, -1.484, -1.414, -1.354, -1.303, -1.256, -1.213, -1.173, -1.136, -1.100, -1.067, -1.035, -1.004, -0.974, -0.945, -0.917, -0.889, -0.863, -0.836, -0.811, -0.786, -0.761, -0.737, -0.712, -0.689, -0.665, -0.641, -0.618, -0.595, -0.572, -0.550, -0.527, -0.505, -0.482, -0.460, -0.437, -0.415, -0.393, -0.370, -0.348, -0.326, -0.303, -0.280, -0.258, -0.235, -0.212, -0.189, -0.166, -0.143, -0.119, -0.096, -0.072, -0.048, -0.024, +0.001, +0.026, +0.051, +0.077, +0.102, +0.129, +0.155, +0.182, +0.210, +0.238, +0.266, +0.295, +0.325, +0.355, +0.386, +0.418, +0.450, +0.484, +0.518, +0.553, +0.590, +0.628, +0.666, +0.707, +0.749, +0.792, +0.838, +0.886, +0.936, +0.989, +1.045, +1.105, +1.169, +1.237, +1.312, +1.394, +1.484, +1.586, +1.703, +1.839, +2.004, +2.215, +2.509, +3.007, +3.508, +4.185, +4.700, +5.228, +5.955, +6.518, +7.066, +7.854, +8.567 }, -0.1429, +0.0002, 0.9999 },
	{ "FPF:all2", 47, 16777216, 0, { -2.393, -2.352, -2.290, -2.237, -2.184, -2.100, -2.028, -1.948, -1.823, -1.711, -1.578, -1.488, -1.417, -1.357, -1.305, -1.257, -1.214, -1.174, -1.137, -1.101, -1.067, -1.035, -1.004, -0.974, -0.945, -0.917, -0.890, -0.863, -0.836, -0.811, -0.785, -0.760, -0.736, -0.712, -0.688, -0.664, -0.641, -0.617, -0.594, -0.571, -0.549, -0.526, -0.503, -0.481, -0.458, -0.436, -0.413, -0.391, -0.369, -0.346, -0.324, -0.301, -0.279, -0.256, -0.233, -0.211, -0.188, -0.165, -0.141, -0.118, -0.094, -0.070, -0.046, -0.022, +0.003, +0.028, +0.053, +0.078, +0.104, +0.131, +0.157, +0.184, +0.212, +0.239, +0.268, +0.297, +0.327, +0.357, +0.388, +0.419, +0.452, +0.485, +0.520, +0.555, +0.592, +0.629, +0.668, +0.708, +0.750, +0.793, +0.839, +0.887, +0.937, +0.990, +1.046, +1.106, +1.170, +1.239, +1.313, +1.395, +1.485, +1.587, +1.703, +1.839, +2.004, +2.214, +2.508, +3.005, +3.503, +4.167, +4.684, +5.202, +5.921, +6.489, +7.065, +7.848, +8.466 }, -0.1412, +0.0008, 1.0001 },
	{ "FPF:all2", 48, 16777216, 0, { -2.401, -2.360, -2.298, -2.249, -2.194, -2.109, -2.036, -1.955, -1.829, -1.716, -1.582, -1.492, -1.420, -1.361, -1.308, -1.261, -1.218, -1.177, -1.140, -1.104, -1.070, -1.037, -1.006, -0.976, -0.947, -0.919, -0.891, -0.864, -0.838, -0.812, -0.786, -0.762, -0.737, -0.713, -0.688, -0.665, -0.641, -0.618, -0.595, -0.572, -0.549, -0.526, -0.504, -0.481, -0.458, -0.436, -0.414, -0.391, -0.369, -0.346, -0.324, -0.301, -0.279, -0.256, -0.233, -0.210, -0.187, -0.164, -0.141, -0.117, -0.093, -0.070, -0.045, -0.021, +0.004, +0.029, +0.054, +0.079, +0.105, +0.131, +0.158, +0.185, +0.212, +0.240, +0.269, +0.298, +0.327, +0.358, +0.388, +0.420, +0.453, +0.486, +0.520, +0.555, +0.592, +0.629, +0.668, +0.709, +0.750, +0.794, +0.839, +0.887, +0.937, +0.990, +1.046, +1.105, +1.169, +1.238, +1.312, +1.394, +1.484, +1.585, +1.701, +1.836, +2.001, +2.209, +2.501, +2.996, +3.491, +4.154, +4.660, +5.185, +5.886, +6.436, +6.993, +7.741, +8.357 }, -0.1406, -0.0001, 0.9998 },
	{ "FPF:all2", 49, 16777216, 0, { -2.408, -2.372, -2.311, -2.258, -2.200, -2.117, -2.046, -1.963, -1.835, -1.722, -1.587, -1.496, -1.424, -1.364, -1.310, -1.263, -1.219, -1.179, -1.141, -1.105, -1.071, -1.039, -1.007, -0.977, -0.948, -0.919, -0.892, -0.864, -0.838, -0.812, -0.787, -0.761, -0.737, -0.712, -0.688, -0.664, -0.641, -0.617, -0.594, -0.571, -0.548, -0.525, -0.503, -0.480, -0.458, -0.435, -0.413, -0.390, -0.368, -0.345, -0.323, -0.300, -0.277, -0.255, -0.232, -0.209, -0.186, -0.163, -0.139, -0.116, -0.092, -0.068, -0.044, -0.020, +0.005, +0.030, +0.055, +0.080, +0.106, +0.132, +0.159, +0.186, +0.214, +0.242, +0.270, +0.299, +0.329, +0.359, +0.390, +0.422, +0.454, +0.487, +0.521, +0.557, +0.593, +0.631, +0.670, +0.710, +0.752, +0.796, +0.841, +0.889, +0.939, +0.991, +1.047, +1.107, +1.170, +1.239, +1.313, +1.394, +1.484, +1.585, +1.700, +1.835, +1.999, +2.208, +2.500, +2.994, +3.486, +4.144, +4.655, +5.175, +5.865, +6.401, +6.953, +7.640, +8.232 }, -0.1395, +0.0001, 1.0002 },
	{ "FPF:all2", 50, 16777216, 0, { -2.432, -2.392, -2.325, -2.270, -2.214, -2.129, -2.055, -1.970, -1.842, -1.727, -1.591, -1.499, -1.427, -1.366, -1.313, -1.265, -1.221, -1.181, -1.142, -1.106, -1.072, -1.040, -1.008, -0.978, -0.948, -0.920, -0.892, -0.865, -0.839, -0.813, -0.787, -0.762, -0.737, -0.713, -0.689, -0.665, -0.641, -0.618, -0.594, -0.571, -0.548, -0.525, -0.503, -0.480, -0.457, -0.435, -0.412, -0.390, -0.367, -0.344, -0.322, -0.299, -0.276, -0.253, -0.231, -0.208, -0.184, -0.161, -0.138, -0.115, -0.091, -0.067, -0.043, -0.018, +0.006, +0.031, +0.056, +0.082, +0.108, +0.134, +0.161, +0.188, +0.215, +0.243, +0.272, +0.301, +0.330, +0.360, +0.391, +0.423, +0.455, +0.488, +0.523, +0.558, +0.594, +0.632, +0.671, +0.711, +0.752, +0.796, +0.842, +0.889, +0.939, +0.992, +1.048, +1.107, +1.171, +1.239, +1.313, +1.394, +1.484, +1.584, +1.700, +1.835, +1.998, +2.207, +2.497, +2.988, +3.480, +4.137, +4.645, +5.161, +5.863, +6.400, +6.971, +7.834, +8.489 }, -0.1380, +0.0001, 1.0004 },

	{"CoupGap:SxO",   256, 32768, 0, { -4.370, -4.357, -4.266, -4.148, -4.077, -3.862, -3.562, -3.322, -2.964, -2.688, -2.384, -2.179, -2.013, -1.885, -1.780, -1.691, -1.618, -1.543, -1.465, -1.400, -1.337, -1.278, -1.220, -1.164, -1.114, -1.062, -1.017, -0.973, -0.923, -0.878, -0.840, -0.798, -0.757, -0.716, -0.677, -0.642, -0.605, -0.566, -0.533, -0.497, -0.460, -0.422, -0.390, -0.359, -0.324, -0.290, -0.259, -0.225, -0.194, -0.161, -0.128, -0.093, -0.060, -0.031, -0.000, +0.031, +0.064, +0.095, +0.126, +0.162, +0.197, +0.227, +0.260, +0.293, +0.326, +0.358, +0.392, +0.427, +0.460, +0.493, +0.528, +0.560, +0.596, +0.631, +0.665, +0.701, +0.739, +0.779, +0.814, +0.854, +0.895, +0.935, +0.978, +1.021, +1.064, +1.105, +1.151, +1.194, +1.242, +1.291, +1.340, +1.393, +1.449, +1.503, +1.563, +1.625, +1.689, +1.767, +1.837, +1.918, +2.002, +2.098, +2.209, +2.336, +2.493, +2.679, +2.921, +3.323, +3.666, +4.094, +4.406, +4.771, +4.987, +5.382, +5.884, +6.012, +6.023},  +0.166,  +0.126,   1.289},
	{"CoupGap:SxO",   320, 32768, 0, { -4.271, -4.247, -4.109, -4.036, -3.908, -3.686, -3.545, -3.305, -2.943, -2.682, -2.374, -2.153, -2.015, -1.873, -1.764, -1.668, -1.592, -1.514, -1.436, -1.368, -1.304, -1.240, -1.186, -1.131, -1.079, -1.024, -0.974, -0.928, -0.886, -0.836, -0.792, -0.752, -0.708, -0.668, -0.624, -0.582, -0.543, -0.508, -0.465, -0.428, -0.388, -0.352, -0.315, -0.282, -0.242, -0.206, -0.171, -0.136, -0.101, -0.063, -0.031, +0.003, +0.035, +0.066, +0.097, +0.128, +0.160, +0.192, +0.224, +0.258, +0.289, +0.325, +0.358, +0.393, +0.426, +0.462, +0.494, +0.534, +0.570, +0.611, +0.648, +0.685, +0.717, +0.751, +0.788, +0.824, +0.861, +0.899, +0.938, +0.978, +1.019, +1.057, +1.093, +1.140, +1.184, +1.230, +1.276, +1.324, +1.375, +1.423, +1.472, +1.530, +1.581, +1.638, +1.697, +1.756, +1.828, +1.894, +1.972, +2.064, +2.157, +2.264, +2.387, +2.519, +2.678, +2.849, +3.141, +3.513, +3.876, +4.351, +4.669, +4.924, +5.241, +5.562, +5.759, +5.944, +5.973},  +0.260,  +0.224,   1.335},
	{"CoupGap:SxO",   384, 32768, 0, { -4.892, -4.815, -4.389, -4.300, -4.130, -3.969, -3.637, -3.352, -3.032, -2.741, -2.418, -2.215, -2.061, -1.933, -1.818, -1.705, -1.615, -1.538, -1.471, -1.401, -1.333, -1.272, -1.219, -1.163, -1.107, -1.054, -0.999, -0.946, -0.902, -0.854, -0.809, -0.768, -0.728, -0.689, -0.649, -0.606, -0.561, -0.523, -0.488, -0.447, -0.412, -0.376, -0.339, -0.301, -0.265, -0.229, -0.193, -0.154, -0.121, -0.087, -0.052, -0.018, +0.017, +0.050, +0.089, +0.124, +0.156, +0.188, +0.219, +0.255, +0.286, +0.317, +0.352, +0.386, +0.421, +0.455, +0.491, +0.527, +0.565, +0.599, +0.635, +0.672, +0.711, +0.749, +0.787, +0.822, +0.862, +0.906, +0.943, +0.979, +1.023, +1.067, +1.110, +1.151, +1.201, +1.244, +1.289, +1.336, +1.387, +1.441, +1.491, +1.551, +1.608, +1.668, +1.729, +1.797, +1.872, +1.946, +2.026, +2.115, +2.213, +2.323, +2.443, +2.580, +2.735, +2.907, +3.158, +3.598, +3.962, +4.385, +4.685, +4.951, +5.244, +5.651, +6.018, +6.157, +6.173},  +0.255,  +0.219,   1.363},
	{"CoupGap:SxO",   448, 32768, 0, { -4.764, -4.747, -4.635, -4.460, -4.262, -3.989, -3.704, -3.483, -3.132, -2.797, -2.458, -2.256, -2.109, -1.991, -1.879, -1.782, -1.699, -1.608, -1.535, -1.470, -1.407, -1.338, -1.276, -1.215, -1.156, -1.103, -1.049, -1.000, -0.956, -0.908, -0.865, -0.820, -0.779, -0.739, -0.698, -0.654, -0.613, -0.574, -0.532, -0.494, -0.456, -0.419, -0.381, -0.340, -0.306, -0.274, -0.238, -0.207, -0.169, -0.136, -0.099, -0.069, -0.033, +0.000, +0.038, +0.073, +0.110, +0.143, +0.176, +0.212, +0.247, +0.282, +0.315, +0.351, +0.389, +0.426, +0.458, +0.492, +0.530, +0.564, +0.603, +0.640, +0.676, +0.715, +0.752, +0.792, +0.833, +0.873, +0.912, +0.950, +0.991, +1.030, +1.078, +1.120, +1.164, +1.209, +1.251, +1.301, +1.347, +1.401, +1.455, +1.513, +1.573, +1.636, +1.704, +1.773, +1.843, +1.922, +2.003, +2.091, +2.196, +2.292, +2.411, +2.539, +2.709, +2.909, +3.183, +3.571, +3.956, +4.385, +4.792, +5.128, +5.431, +5.528, +5.864, +6.075, +6.103},  +0.214,  +0.176,   1.376},
	{"CoupGap:SxO",   512, 32768, 0, { -4.624, -4.612, -4.535, -4.483, -4.393, -4.088, -3.800, -3.510, -3.162, -2.853, -2.530, -2.326, -2.180, -2.045, -1.940, -1.840, -1.754, -1.672, -1.599, -1.531, -1.459, -1.396, -1.331, -1.269, -1.213, -1.152, -1.102, -1.050, -0.994, -0.947, -0.901, -0.859, -0.820, -0.779, -0.736, -0.701, -0.661, -0.619, -0.582, -0.549, -0.512, -0.472, -0.437, -0.403, -0.366, -0.333, -0.296, -0.264, -0.229, -0.190, -0.156, -0.118, -0.083, -0.047, -0.016, +0.019, +0.056, +0.092, +0.130, +0.165, +0.201, +0.236, +0.268, +0.303, +0.338, +0.375, +0.410, +0.445, +0.481, +0.518, +0.551, +0.586, +0.624, +0.660, +0.696, +0.734, +0.773, +0.814, +0.858, +0.904, +0.949, +0.993, +1.037, +1.083, +1.123, +1.169, +1.220, +1.270, +1.320, +1.373, +1.429, +1.487, +1.546, +1.604, +1.670, +1.738, +1.809, +1.884, +1.961, +2.041, +2.145, +2.246, +2.369, +2.511, +2.685, +2.897, +3.145, +3.570, +3.973, +4.321, +4.648, +4.925, +5.566, +5.833, +6.390, +6.586, +6.618},  +0.166,  +0.130,   1.385},
	{"CoupGap:SxO",   640, 32768, 0, { -5.140, -5.118, -4.994, -4.926, -4.390, -4.128, -3.889, -3.584, -3.256, -2.972, -2.634, -2.423, -2.257, -2.128, -2.013, -1.917, -1.833, -1.751, -1.668, -1.600, -1.536, -1.467, -1.414, -1.359, -1.299, -1.251, -1.198, -1.149, -1.099, -1.049, -1.004, -0.963, -0.920, -0.880, -0.842, -0.800, -0.759, -0.718, -0.678, -0.638, -0.600, -0.561, -0.523, -0.486, -0.452, -0.416, -0.380, -0.347, -0.313, -0.277, -0.241, -0.205, -0.169, -0.133, -0.096, -0.062, -0.030, +0.009, +0.046, +0.079, +0.115, +0.153, +0.187, +0.221, +0.257, +0.292, +0.329, +0.364, +0.398, +0.437, +0.475, +0.512, +0.551, +0.589, +0.627, +0.667, +0.710, +0.751, +0.791, +0.834, +0.876, +0.918, +0.966, +1.013, +1.060, +1.106, +1.155, +1.206, +1.261, +1.316, +1.369, +1.424, +1.480, +1.544, +1.609, +1.679, +1.743, +1.824, +1.906, +1.990, +2.085, +2.196, +2.318, +2.456, +2.628, +2.817, +3.086, +3.503, +3.896, +4.508, +4.808, +5.200, +5.598, +5.838, +6.021, +6.175, +6.203},  +0.088,  +0.046,   1.397},
	{"CoupGap:SxO",   768, 32768, 0, { -5.220, -5.140, -4.701, -4.512, -4.379, -4.065, -3.873, -3.669, -3.307, -3.022, -2.681, -2.473, -2.313, -2.192, -2.080, -1.975, -1.887, -1.810, -1.738, -1.669, -1.604, -1.537, -1.475, -1.418, -1.362, -1.307, -1.256, -1.204, -1.156, -1.108, -1.061, -1.019, -0.975, -0.934, -0.889, -0.846, -0.806, -0.766, -0.728, -0.690, -0.651, -0.618, -0.584, -0.550, -0.512, -0.477, -0.443, -0.405, -0.370, -0.334, -0.297, -0.259, -0.224, -0.188, -0.154, -0.116, -0.082, -0.045, -0.013, +0.025, +0.060, +0.097, +0.135, +0.169, +0.201, +0.238, +0.274, +0.310, +0.344, +0.384, +0.421, +0.456, +0.496, +0.537, +0.570, +0.614, +0.656, +0.697, +0.735, +0.775, +0.818, +0.864, +0.909, +0.955, +0.999, +1.051, +1.098, +1.146, +1.200, +1.253, +1.311, +1.368, +1.427, +1.487, +1.551, +1.617, +1.691, +1.766, +1.856, +1.953, +2.053, +2.159, +2.283, +2.411, +2.570, +2.787, +3.072, +3.460, +3.910, +4.330, +4.667, +5.005, +5.640, +6.012, +6.113, +6.126, +6.127},  +0.034,  -0.013,   1.400},
	{"CoupGap:SxO",   896, 32768, 0, { -5.088, -5.087, -5.060, -4.545, -4.375, -4.138, -3.903, -3.704, -3.364, -3.072, -2.728, -2.520, -2.350, -2.213, -2.095, -2.003, -1.908, -1.826, -1.756, -1.685, -1.617, -1.557, -1.497, -1.440, -1.388, -1.336, -1.283, -1.230, -1.184, -1.139, -1.091, -1.047, -1.005, -0.966, -0.923, -0.883, -0.840, -0.799, -0.763, -0.726, -0.687, -0.651, -0.616, -0.581, -0.541, -0.506, -0.469, -0.437, -0.397, -0.360, -0.324, -0.286, -0.254, -0.218, -0.184, -0.153, -0.115, -0.079, -0.042, -0.008, +0.030, +0.066, +0.100, +0.132, +0.169, +0.204, +0.240, +0.277, +0.313, +0.350, +0.388, +0.425, +0.465, +0.500, +0.540, +0.580, +0.619, +0.659, +0.701, +0.741, +0.781, +0.825, +0.871, +0.916, +0.959, +1.002, +1.054, +1.104, +1.159, +1.207, +1.266, +1.322, +1.379, +1.443, +1.512, +1.580, +1.659, +1.735, +1.823, +1.908, +2.013, +2.113, +2.253, +2.409, +2.571, +2.777, +3.069, +3.489, +3.864, +4.372, +4.760, +5.240, +5.619, +6.116, +6.508, +6.875, +6.936},  +0.003,  -0.042,   1.402},
	{"CoupGap:SxO",  1024, 32768, 0, { -5.162, -5.096, -4.710, -4.544, -4.470, -4.273, -3.967, -3.725, -3.339, -3.060, -2.755, -2.529, -2.374, -2.239, -2.122, -2.014, -1.927, -1.848, -1.771, -1.702, -1.638, -1.576, -1.519, -1.457, -1.403, -1.350, -1.299, -1.248, -1.199, -1.152, -1.108, -1.069, -1.028, -0.986, -0.948, -0.914, -0.871, -0.829, -0.791, -0.753, -0.716, -0.678, -0.639, -0.601, -0.569, -0.531, -0.498, -0.463, -0.425, -0.391, -0.354, -0.318, -0.280, -0.247, -0.210, -0.175, -0.140, -0.105, -0.071, -0.036, +0.000, +0.036, +0.073, +0.110, +0.146, +0.184, +0.224, +0.259, +0.296, +0.334, +0.371, +0.407, +0.444, +0.487, +0.523, +0.558, +0.599, +0.640, +0.685, +0.728, +0.771, +0.814, +0.860, +0.910, +0.958, +1.004, +1.056, +1.100, +1.156, +1.214, +1.268, +1.327, +1.390, +1.456, +1.525, +1.592, +1.658, +1.740, +1.814, +1.896, +1.994, +2.105, +2.239, +2.374, +2.534, +2.740, +2.999, +3.405, +3.814, +4.282, +4.580, +4.959, +5.535, +5.704, +5.789, +7.108, +7.351},  -0.016,  -0.071,   1.402},
	{"CoupGap:SxO",  1536, 32768, 0, { -5.063, -5.047, -4.954, -4.726, -4.515, -4.293, -3.974, -3.707, -3.367, -3.122, -2.778, -2.573, -2.422, -2.290, -2.175, -2.080, -1.988, -1.903, -1.827, -1.752, -1.691, -1.627, -1.573, -1.515, -1.463, -1.409, -1.354, -1.306, -1.258, -1.212, -1.162, -1.119, -1.073, -1.028, -0.988, -0.947, -0.901, -0.864, -0.827, -0.785, -0.744, -0.707, -0.670, -0.633, -0.595, -0.561, -0.525, -0.488, -0.449, -0.414, -0.378, -0.343, -0.309, -0.275, -0.238, -0.203, -0.171, -0.139, -0.103, -0.070, -0.031, +0.008, +0.043, +0.079, +0.117, +0.149, +0.183, +0.219, +0.252, +0.289, +0.326, +0.361, +0.401, +0.440, +0.478, +0.515, +0.555, +0.600, +0.637, +0.679, +0.721, +0.759, +0.804, +0.846, +0.894, +0.947, +0.996, +1.050, +1.104, +1.160, +1.216, +1.269, +1.331, +1.393, +1.461, +1.530, +1.601, +1.674, +1.753, +1.844, +1.943, +2.058, +2.169, +2.314, +2.472, +2.679, +2.973, +3.411, +3.815, +4.312, +4.698, +5.198, +5.730, +5.807, +6.057, +6.315, +6.359},  -0.060,  -0.103,   1.401},
	{"CoupGap:SxO",  2048, 32768, 0, { -5.241, -5.224, -5.052, -4.438, -4.386, -4.170, -3.979, -3.759, -3.427, -3.121, -2.806, -2.597, -2.431, -2.301, -2.183, -2.092, -2.003, -1.919, -1.839, -1.767, -1.699, -1.641, -1.579, -1.522, -1.472, -1.420, -1.366, -1.321, -1.273, -1.227, -1.179, -1.136, -1.093, -1.050, -1.011, -0.970, -0.928, -0.890, -0.849, -0.808, -0.770, -0.732, -0.693, -0.653, -0.617, -0.581, -0.543, -0.509, -0.475, -0.438, -0.402, -0.368, -0.337, -0.301, -0.268, -0.234, -0.198, -0.164, -0.124, -0.088, -0.055, -0.021, +0.015, +0.053, +0.088, +0.123, +0.157, +0.193, +0.230, +0.268, +0.306, +0.347, +0.381, +0.421, +0.464, +0.504, +0.543, +0.584, +0.622, +0.667, +0.708, +0.754, +0.796, +0.845, +0.893, +0.940, +0.988, +1.033, +1.082, +1.137, +1.195, +1.248, +1.309, +1.371, +1.443, +1.510, +1.590, +1.660, +1.735, +1.827, +1.930, +2.037, +2.159, +2.304, +2.465, +2.663, +2.962, +3.414, +3.782, +4.292, +4.610, +4.947, +5.226, +5.587, +6.281, +6.733, +6.808},  -0.078,  -0.124,   1.401},
	{"CoupGap:SxO",  3072, 32768, 0, { -5.130, -5.119, -5.020, -4.774, -4.571, -4.444, -4.159, -3.838, -3.474, -3.164, -2.837, -2.618, -2.459, -2.327, -2.220, -2.110, -2.018, -1.934, -1.863, -1.795, -1.725, -1.662, -1.600, -1.544, -1.486, -1.435, -1.383, -1.333, -1.281, -1.229, -1.185, -1.142, -1.097, -1.052, -1.008, -0.966, -0.923, -0.884, -0.846, -0.807, -0.770, -0.734, -0.693, -0.654, -0.619, -0.583, -0.548, -0.513, -0.480, -0.450, -0.420, -0.383, -0.346, -0.310, -0.278, -0.244, -0.213, -0.176, -0.139, -0.102, -0.068, -0.035, +0.003, +0.039, +0.074, +0.107, +0.144, +0.182, +0.217, +0.258, +0.294, +0.335, +0.374, +0.410, +0.450, +0.489, +0.528, +0.569, +0.610, +0.651, +0.692, +0.736, +0.778, +0.822, +0.869, +0.920, +0.969, +1.018, +1.067, +1.122, +1.176, +1.233, +1.297, +1.357, +1.417, +1.482, +1.552, +1.636, +1.716, +1.802, +1.913, +2.033, +2.157, +2.284, +2.455, +2.652, +2.913, +3.369, +3.813, +4.244, +4.652, +5.001, +5.464, +5.689, +5.909, +6.010, +6.025},  -0.093,  -0.139,   1.402},
	{"CoupGap:SxO",  4096, 32768, 0, { -4.908, -4.904, -4.882, -4.837, -4.517, -4.227, -4.095, -3.880, -3.509, -3.193, -2.841, -2.623, -2.467, -2.338, -2.223, -2.129, -2.042, -1.948, -1.875, -1.802, -1.727, -1.663, -1.603, -1.545, -1.491, -1.436, -1.386, -1.336, -1.291, -1.243, -1.195, -1.149, -1.104, -1.062, -1.019, -0.982, -0.940, -0.901, -0.863, -0.826, -0.786, -0.750, -0.712, -0.672, -0.636, -0.601, -0.568, -0.531, -0.495, -0.460, -0.426, -0.388, -0.355, -0.320, -0.285, -0.249, -0.213, -0.179, -0.146, -0.108, -0.073, -0.036, +0.001, +0.036, +0.068, +0.106, +0.143, +0.180, +0.215, +0.250, +0.285, +0.321, +0.358, +0.394, +0.434, +0.477, +0.517, +0.559, +0.602, +0.645, +0.692, +0.735, +0.779, +0.827, +0.877, +0.928, +0.972, +1.027, +1.076, +1.128, +1.184, +1.237, +1.290, +1.352, +1.420, +1.494, +1.560, +1.636, +1.722, +1.807, +1.907, +2.018, +2.133, +2.273, +2.443, +2.651, +2.922, +3.370, +3.786, +4.206, +4.651, +5.014, +5.516, +5.841, +6.096, +6.148, +6.152},  -0.100,  -0.146,   1.405},
	{"CoupGap:SxO",  6144, 32768, 0, { -5.445, -5.381, -5.022, -4.801, -4.608, -4.305, -4.110, -3.859, -3.522, -3.205, -2.871, -2.635, -2.464, -2.345, -2.239, -2.147, -2.057, -1.976, -1.896, -1.825, -1.762, -1.700, -1.636, -1.581, -1.527, -1.470, -1.411, -1.360, -1.308, -1.257, -1.211, -1.165, -1.126, -1.083, -1.040, -0.999, -0.958, -0.920, -0.881, -0.842, -0.802, -0.763, -0.724, -0.688, -0.653, -0.615, -0.573, -0.539, -0.502, -0.469, -0.432, -0.398, -0.364, -0.331, -0.295, -0.260, -0.224, -0.189, -0.158, -0.123, -0.082, -0.047, -0.009, +0.026, +0.057, +0.092, +0.126, +0.163, +0.201, +0.236, +0.275, +0.314, +0.350, +0.392, +0.432, +0.472, +0.515, +0.557, +0.602, +0.647, +0.690, +0.734, +0.777, +0.822, +0.871, +0.916, +0.968, +1.021, +1.074, +1.129, +1.189, +1.245, +1.304, +1.374, +1.438, +1.507, +1.572, +1.642, +1.724, +1.818, +1.914, +2.010, +2.131, +2.279, +2.440, +2.642, +2.902, +3.276, +3.667, +4.230, +4.548, +4.778, +5.257, +5.511, +6.499, +6.778, +6.805},  -0.111,  -0.158,   1.409},
	{"CoupGap:SxO",  8192, 32768, 0, { -5.074, -5.028, -4.774, -4.745, -4.450, -4.272, -4.120, -3.894, -3.504, -3.218, -2.890, -2.670, -2.515, -2.386, -2.269, -2.161, -2.067, -1.977, -1.899, -1.829, -1.763, -1.702, -1.640, -1.585, -1.524, -1.466, -1.417, -1.365, -1.316, -1.271, -1.225, -1.179, -1.133, -1.090, -1.046, -1.003, -0.962, -0.924, -0.885, -0.844, -0.807, -0.768, -0.727, -0.691, -0.657, -0.620, -0.582, -0.545, -0.509, -0.472, -0.434, -0.399, -0.363, -0.327, -0.295, -0.263, -0.228, -0.188, -0.154, -0.120, -0.086, -0.052, -0.017, +0.020, +0.056, +0.094, +0.131, +0.165, +0.202, +0.242, +0.283, +0.321, +0.358, +0.399, +0.440, +0.481, +0.520, +0.566, +0.604, +0.649, +0.689, +0.736, +0.782, +0.830, +0.874, +0.922, +0.971, +1.023, +1.065, +1.122, +1.179, +1.233, +1.292, +1.356, +1.420, +1.495, +1.567, +1.648, +1.728, +1.812, +1.916, +2.024, +2.153, +2.276, +2.435, +2.634, +2.902, +3.293, +3.676, +4.200, +4.522, +4.758, +5.203, +5.435, +5.784, +6.279, +6.363},  -0.115,  -0.154,   1.413},
	{"CoupGap:SxO", 12288, 32768, 0, { -5.764, -5.662, -5.072, -4.834, -4.676, -4.305, -4.160, -3.829, -3.462, -3.196, -2.870, -2.668, -2.501, -2.370, -2.258, -2.151, -2.065, -1.973, -1.898, -1.821, -1.754, -1.691, -1.630, -1.574, -1.520, -1.468, -1.421, -1.373, -1.329, -1.282, -1.239, -1.192, -1.150, -1.106, -1.063, -1.021, -0.981, -0.939, -0.901, -0.864, -0.822, -0.780, -0.743, -0.703, -0.663, -0.631, -0.592, -0.555, -0.519, -0.484, -0.448, -0.413, -0.374, -0.338, -0.303, -0.264, -0.229, -0.191, -0.154, -0.117, -0.082, -0.046, -0.014, +0.025, +0.063, +0.101, +0.137, +0.172, +0.211, +0.250, +0.289, +0.327, +0.364, +0.407, +0.445, +0.485, +0.525, +0.564, +0.601, +0.641, +0.679, +0.722, +0.764, +0.807, +0.853, +0.904, +0.955, +1.007, +1.057, +1.115, +1.172, +1.225, +1.284, +1.344, +1.411, +1.481, +1.559, +1.643, +1.720, +1.813, +1.909, +2.023, +2.147, +2.283, +2.442, +2.621, +2.910, +3.315, +3.719, +4.183, +4.533, +4.944, +5.486, +5.803, +6.830, +7.206, +7.246},  -0.117,  -0.154,   1.412},
	{"CoupGap:SxO", 16384, 32768, 0, { -4.987, -4.981, -4.929, -4.771, -4.464, -4.332, -4.150, -3.898, -3.518, -3.213, -2.892, -2.678, -2.512, -2.382, -2.261, -2.164, -2.066, -1.984, -1.907, -1.831, -1.762, -1.697, -1.632, -1.573, -1.517, -1.466, -1.413, -1.366, -1.318, -1.269, -1.222, -1.178, -1.129, -1.087, -1.043, -1.003, -0.961, -0.922, -0.882, -0.842, -0.803, -0.764, -0.724, -0.687, -0.652, -0.618, -0.582, -0.549, -0.514, -0.480, -0.447, -0.411, -0.376, -0.339, -0.306, -0.274, -0.240, -0.205, -0.167, -0.132, -0.097, -0.062, -0.027, +0.012, +0.049, +0.086, +0.124, +0.162, +0.198, +0.235, +0.270, +0.309, +0.353, +0.389, +0.429, +0.467, +0.509, +0.548, +0.586, +0.624, +0.671, +0.717, +0.764, +0.811, +0.854, +0.905, +0.956, +1.006, +1.064, +1.118, +1.173, +1.236, +1.293, +1.362, +1.418, +1.487, +1.568, +1.642, +1.728, +1.816, +1.906, +2.012, +2.125, +2.254, +2.413, +2.607, +2.863, +3.316, +3.722, +4.246, +4.613, +5.072, +5.590, +5.760, +5.867, +6.480, +6.592},  -0.120,  -0.167,   1.410},
	{"CoupGap:SxO", 24576, 32768, 0, { -5.746, -5.636, -5.026, -4.944, -4.811, -4.390, -4.108, -3.870, -3.492, -3.201, -2.894, -2.669, -2.510, -2.380, -2.261, -2.146, -2.054, -1.981, -1.902, -1.829, -1.756, -1.695, -1.630, -1.573, -1.520, -1.460, -1.407, -1.357, -1.308, -1.260, -1.214, -1.167, -1.123, -1.080, -1.038, -0.995, -0.955, -0.918, -0.878, -0.838, -0.800, -0.759, -0.723, -0.688, -0.654, -0.615, -0.579, -0.546, -0.510, -0.468, -0.433, -0.398, -0.362, -0.327, -0.293, -0.258, -0.223, -0.187, -0.151, -0.118, -0.081, -0.043, -0.005, +0.031, +0.066, +0.102, +0.136, +0.172, +0.209, +0.246, +0.287, +0.324, +0.359, +0.398, +0.437, +0.477, +0.519, +0.562, +0.599, +0.642, +0.687, +0.728, +0.771, +0.819, +0.866, +0.912, +0.960, +1.010, +1.066, +1.124, +1.177, +1.234, +1.287, +1.346, +1.414, +1.487, +1.564, +1.642, +1.727, +1.816, +1.916, +2.027, +2.149, +2.292, +2.455, +2.667, +2.911, +3.367, +3.795, +4.250, +4.570, +5.029, +5.344, +5.942, +6.264, +7.432, +7.642},  -0.110,  -0.151,   1.415},
	{"CoupGap:SxO", 32768, 32768, 0, { -5.435, -5.373, -5.033, -4.846, -4.603, -4.307, -4.034, -3.786, -3.445, -3.214, -2.865, -2.664, -2.507, -2.369, -2.254, -2.149, -2.050, -1.973, -1.896, -1.825, -1.755, -1.694, -1.628, -1.568, -1.512, -1.459, -1.409, -1.357, -1.314, -1.264, -1.220, -1.171, -1.130, -1.083, -1.040, -0.999, -0.956, -0.918, -0.876, -0.835, -0.798, -0.760, -0.720, -0.686, -0.651, -0.611, -0.572, -0.534, -0.498, -0.464, -0.427, -0.391, -0.359, -0.322, -0.292, -0.255, -0.221, -0.182, -0.142, -0.108, -0.075, -0.042, -0.007, +0.031, +0.065, +0.101, +0.134, +0.169, +0.204, +0.240, +0.277, +0.312, +0.354, +0.391, +0.433, +0.474, +0.515, +0.552, +0.594, +0.636, +0.681, +0.723, +0.767, +0.817, +0.860, +0.906, +0.957, +1.006, +1.060, +1.117, +1.169, +1.224, +1.287, +1.350, +1.418, +1.488, +1.564, +1.642, +1.715, +1.809, +1.911, +2.022, +2.142, +2.278, +2.441, +2.665, +2.943, +3.356, +3.716, +4.263, +4.573, +5.116, +5.491, +5.913, +6.277, +7.813, +8.095},  -0.110,  -0.142,   1.411},
	{"CoupGap:SxO", 49152, 32768, 0, { -5.445, -5.409, -5.169, -4.745, -4.590, -4.297, -4.075, -3.896, -3.537, -3.235, -2.875, -2.666, -2.490, -2.345, -2.240, -2.133, -2.049, -1.955, -1.883, -1.813, -1.746, -1.682, -1.622, -1.563, -1.512, -1.463, -1.412, -1.365, -1.319, -1.273, -1.228, -1.181, -1.132, -1.088, -1.045, -1.002, -0.960, -0.922, -0.883, -0.841, -0.805, -0.766, -0.727, -0.691, -0.657, -0.621, -0.583, -0.549, -0.511, -0.470, -0.432, -0.395, -0.361, -0.324, -0.291, -0.257, -0.223, -0.188, -0.152, -0.119, -0.083, -0.044, -0.009, +0.023, +0.061, +0.095, +0.130, +0.168, +0.207, +0.246, +0.281, +0.318, +0.352, +0.388, +0.431, +0.469, +0.509, +0.549, +0.589, +0.630, +0.673, +0.719, +0.762, +0.808, +0.855, +0.897, +0.943, +0.994, +1.050, +1.107, +1.161, +1.219, +1.270, +1.335, +1.400, +1.473, +1.547, +1.631, +1.717, +1.801, +1.903, +2.014, +2.123, +2.277, +2.437, +2.655, +2.917, +3.332, +3.693, +4.156, +4.510, +4.662, +4.920, +5.427, +5.561, +5.705, +5.731},  -0.116,  -0.152,   1.405},
	{"CoupGap:SxO", 65536, 32768, 0, { -5.985, -5.880, -5.301, -5.141, -4.641, -4.388, -4.213, -3.958, -3.582, -3.261, -2.892, -2.674, -2.507, -2.362, -2.251, -2.153, -2.050, -1.967, -1.890, -1.822, -1.750, -1.684, -1.625, -1.570, -1.516, -1.463, -1.414, -1.369, -1.318, -1.272, -1.223, -1.177, -1.132, -1.086, -1.048, -1.007, -0.968, -0.928, -0.887, -0.849, -0.812, -0.771, -0.736, -0.698, -0.663, -0.625, -0.588, -0.548, -0.513, -0.478, -0.441, -0.406, -0.372, -0.338, -0.302, -0.263, -0.228, -0.197, -0.163, -0.129, -0.094, -0.059, -0.025, +0.013, +0.047, +0.083, +0.121, +0.158, +0.196, +0.239, +0.278, +0.317, +0.353, +0.392, +0.432, +0.470, +0.509, +0.552, +0.596, +0.636, +0.679, +0.719, +0.765, +0.813, +0.858, +0.907, +0.954, +1.005, +1.053, +1.108, +1.157, +1.207, +1.262, +1.325, +1.396, +1.460, +1.524, +1.601, +1.684, +1.786, +1.883, +1.985, +2.108, +2.248, +2.422, +2.618, +2.886, +3.286, +3.657, +4.173, +4.603, +4.937, +5.200, +5.765, +6.092, +7.036, +7.201},  -0.123,  -0.163,   1.405},

//	{"BRank",    1, 151552, 151547, { -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, -0.684, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +0.449, +1.775, +1.775, +1.775, +1.775, +1.775, +1.775, +1.775, +1.775, +1.775, +1.775, +1.775, +1.775, +1.775, +1.775, +7.004, +7.004, +7.004, +7.004, +7.004, +7.004,+14.726,+14.726},  -0.003,  -0.684,   0.990},
//	{"BRank",    2, 151552, 151539, {},  -0.001,  -0.166,   0.998},
	{"BRank",    3, 151552, 151528, { -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -1.184, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, +0.124, +0.124, +0.124, +0.124, +0.124, +0.124, +0.124, +0.124, +0.124, +0.124, +0.124, +0.124, +0.124, +0.124, +0.235, +0.235, +0.235, +0.235, +0.235, +0.235, +0.235, +0.235, +0.235, +0.235, +0.235, +0.235, +0.235, +0.778, +0.778, +0.889, +0.889, +0.889, +0.889, +0.889, +0.889, +0.889, +0.889, +0.889, +0.889, +0.889, +0.889, +0.889, +1.544, +1.544, +1.544, +1.655, +1.655, +1.655, +2.309, +2.309, +3.909, +4.563, +4.674, +5.328, +6.094, +7.697, +8.366, +8.970, +9.132, +9.776},  +0.001,  +0.124,   1.000},
	{"BRank",    4, 151552, 151513, { -1.368, -1.368, -1.368, -1.368, -1.368, -1.368, -1.368, -1.368, -1.368, -1.368, -1.368, -1.368, -1.368, -1.368, -1.368, -1.368, -1.368, -1.368, -1.368, -1.368, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.235, -0.235, -0.235, -0.235, -0.235, -0.235, -0.235, -0.235, -0.235, -0.235, -0.235, -0.235, -0.235, -0.235, -0.235, -0.235, -0.235, -0.138, -0.138, -0.138, -0.138, -0.138, -0.138, -0.138, -0.138, -0.138, +0.332, +0.332, +0.332, +0.332, +0.332, +0.332, +0.428, +0.428, +0.428, +0.428, +0.428, +0.428, +0.428, +0.428, +0.428, +0.428, +0.428, +0.428, +0.428, +0.428, +0.428, +0.899, +0.995, +0.995, +0.995, +0.995, +0.995, +0.995, +0.995, +1.091, +1.091, +1.091, +1.562, +1.562, +1.658, +1.658, +1.658, +2.224, +2.476, +3.610, +4.176, +4.839, +4.935, +5.502, +6.904, +7.550, +8.133, +8.779, +9.353},  +0.001,  -0.235,   0.999},
	{"BRank",    5, 151552, 151500, { -1.529, -1.529, -1.529, -1.529, -1.529, -1.529, -1.529, -1.529, -1.529, -1.529, -1.529, -1.529, -1.529, -1.529, -1.529, -1.022, -1.022, -1.022, -1.022, -1.022, -1.022, -1.022, -1.022, -1.022, -1.022, -1.022, -1.022, -1.022, -1.022, -1.022, -1.022, -0.516, -0.516, -0.516, -0.516, -0.516, -0.516, -0.516, -0.516, -0.516, -0.516, -0.516, -0.516, -0.516, -0.516, -0.516, -0.516, -0.429, -0.429, -0.429, -0.429, -0.429, -0.429, -0.429, -0.009, -0.009, -0.009, -0.009, -0.009, -0.009, -0.009, -0.009, +0.077, +0.077, +0.077, +0.077, +0.077, +0.077, +0.077, +0.077, +0.077, +0.077, +0.077, +0.077, +0.077, +0.077, +0.077, +0.498, +0.498, +0.584, +0.584, +0.584, +0.584, +0.584, +0.584, +0.584, +0.584, +0.584, +0.584, +0.670, +0.670, +0.670, +1.005, +1.091, +1.091, +1.091, +1.177, +1.177, +1.177, +1.177, +1.177, +1.684, +1.684, +1.684, +1.909, +2.277, +2.783, +3.429, +4.009, +4.529, +5.122, +5.618, +6.450, +6.969, +7.474, +8.054, +8.068},  +0.002,  -0.009,   1.001},
	{"BRank",    6, 151552, 151480, { -1.675, -1.675, -1.675, -1.675, -1.675, -1.675, -1.675, -1.675, -1.675, -1.675, -1.675, -1.675, -1.212, -1.212, -1.212, -1.212, -1.212, -1.212, -1.212, -1.212, -1.212, -1.212, -1.212, -0.750, -0.750, -0.750, -0.750, -0.750, -0.750, -0.750, -0.750, -0.750, -0.750, -0.750, -0.750, -0.750, -0.750, -0.671, -0.671, -0.671, -0.671, -0.671, -0.287, -0.287, -0.287, -0.287, -0.287, -0.287, -0.287, -0.287, -0.287, -0.209, -0.209, -0.209, -0.209, -0.209, -0.209, -0.209, -0.209, -0.209, -0.209, -0.209, -0.209, -0.209, +0.175, +0.175, +0.175, +0.175, +0.254, +0.254, +0.254, +0.254, +0.254, +0.254, +0.254, +0.254, +0.254, +0.254, +0.254, +0.254, +0.333, +0.333, +0.333, +0.717, +0.717, +0.717, +0.717, +0.717, +0.717, +0.795, +0.795, +0.795, +0.795, +0.795, +0.795, +1.179, +1.258, +1.258, +1.258, +1.258, +1.258, +1.464, +1.720, +1.799, +1.926, +2.262, +2.724, +3.314, +3.855, +4.397, +4.859, +5.541, +6.155, +6.545, +7.073, +7.535, +7.738},  +0.001,  -0.209,   1.002},
	{"BRank",    8, 151552, 151442, { -1.934, -1.934, -1.934, -1.934, -1.934, -1.934, -1.934, -1.934, -1.934, -1.934, -1.534, -1.534, -1.534, -1.534, -1.534, -1.133, -1.133, -1.133, -1.133, -1.133, -1.133, -1.133, -1.133, -1.065, -1.065, -0.732, -0.732, -0.732, -0.732, -0.732, -0.732, -0.732, -0.732, -0.732, -0.664, -0.664, -0.664, -0.664, -0.664, -0.664, -0.664, -0.664, -0.332, -0.332, -0.332, -0.332, -0.332, -0.264, -0.264, -0.264, -0.264, -0.264, -0.264, -0.264, -0.264, -0.264, -0.264, -0.264, -0.264, -0.195, -0.195, +0.069, +0.069, +0.137, +0.137, +0.137, +0.137, +0.137, +0.137, +0.137, +0.137, +0.137, +0.205, +0.205, +0.205, +0.205, +0.205, +0.205, +0.538, +0.538, +0.538, +0.538, +0.538, +0.606, +0.606, +0.606, +0.606, +0.606, +0.606, +0.674, +0.938, +0.938, +1.006, +1.006, +1.006, +1.006, +1.074, +1.074, +1.407, +1.407, +1.475, +1.475, +1.585, +1.876, +1.944, +2.276, +2.455, +2.923, +3.392, +4.125, +4.662, +5.173, +5.642, +6.114, +6.507, +7.364, +7.884},  +0.001,  -0.264,   1.001},
	{"BRank",    9, 151552, 151421, { -2.052, -2.052, -2.052, -2.052, -2.052, -2.052, -2.052, -2.052, -2.052, -1.674, -1.674, -1.674, -1.296, -1.296, -1.296, -1.296, -1.296, -1.296, -1.296, -1.232, -0.918, -0.918, -0.918, -0.918, -0.918, -0.918, -0.918, -0.918, -0.854, -0.854, -0.854, -0.854, -0.854, -0.697, -0.541, -0.541, -0.541, -0.541, -0.541, -0.476, -0.476, -0.476, -0.476, -0.476, -0.476, -0.476, -0.476, -0.476, -0.476, -0.412, -0.163, -0.163, -0.163, -0.099, -0.099, -0.099, -0.099, -0.099, -0.099, -0.099, -0.099, -0.099, -0.099, -0.035, -0.035, -0.035, -0.035, -0.035, +0.215, +0.279, +0.279, +0.279, +0.279, +0.279, +0.279, +0.343, +0.343, +0.343, +0.343, +0.343, +0.343, +0.343, +0.593, +0.657, +0.657, +0.721, +0.721, +0.721, +0.721, +0.721, +0.721, +0.785, +0.785, +1.099, +1.099, +1.099, +1.163, +1.163, +1.163, +1.412, +1.541, +1.541, +1.605, +1.854, +1.982, +2.150, +2.464, +2.906, +3.348, +4.103, +4.585, +5.027, +5.589, +5.911, +6.348, +7.183, +7.482},  -0.000,  -0.099,   1.001},
	{"BRank",   10, 151552, 151397, { -2.163, -2.163, -2.163, -2.163, -2.163, -2.163, -2.163, -2.163, -1.804, -1.804, -1.804, -1.446, -1.446, -1.446, -1.446, -1.446, -1.385, -1.087, -1.087, -1.087, -1.087, -1.087, -1.087, -1.027, -1.027, -1.027, -1.027, -0.729, -0.729, -0.729, -0.729, -0.729, -0.668, -0.668, -0.668, -0.668, -0.668, -0.668, -0.668, -0.668, -0.668, -0.371, -0.371, -0.371, -0.371, -0.310, -0.310, -0.310, -0.310, -0.310, -0.310, -0.310, -0.310, -0.310, -0.249, -0.249, -0.249, -0.249, -0.012, +0.048, +0.048, +0.048, +0.048, +0.048, +0.048, +0.048, +0.048, +0.109, +0.109, +0.109, +0.109, +0.109, +0.109, +0.170, +0.407, +0.407, +0.407, +0.407, +0.468, +0.468, +0.468, +0.468, +0.468, +0.468, +0.529, +0.529, +0.765, +0.826, +0.826, +0.826, +0.826, +0.887, +0.887, +0.887, +0.948, +1.184, +1.184, +1.245, +1.245, +1.306, +1.405, +1.604, +1.664, +1.763, +2.023, +2.121, +2.480, +2.899, +3.318, +4.035, +4.490, +4.972, +5.391, +6.050, +6.462, +7.111, +7.411},  -0.000,  -0.012,   1.001},
	{"BRank",   13, 151552, 151333, { -2.466, -2.466, -2.466, -2.466, -2.466, -2.466, -2.151, -2.151, -2.151, -1.837, -1.837, -1.523, -1.523, -1.523, -1.469, -1.208, -1.208, -1.208, -1.208, -1.155, -1.155, -1.155, -1.102, -0.894, -0.894, -0.894, -0.841, -0.841, -0.841, -0.841, -0.841, -0.841, -0.787, -0.787, -0.580, -0.580, -0.527, -0.527, -0.527, -0.527, -0.527, -0.527, -0.527, -0.473, -0.473, -0.473, -0.473, -0.420, -0.266, -0.212, -0.212, -0.212, -0.212, -0.212, -0.159, -0.159, -0.159, -0.159, -0.159, -0.159, -0.159, -0.105, +0.102, +0.102, +0.102, +0.102, +0.155, +0.155, +0.155, +0.155, +0.155, +0.155, +0.209, +0.209, +0.209, +0.416, +0.416, +0.470, +0.470, +0.470, +0.470, +0.523, +0.523, +0.523, +0.523, +0.577, +0.784, +0.784, +0.784, +0.837, +0.837, +0.837, +0.891, +0.944, +1.098, +1.152, +1.152, +1.205, +1.259, +1.413, +1.519, +1.552, +1.606, +1.834, +1.920, +2.201, +2.341, +2.916, +3.284, +3.913, +4.367, +4.797, +5.346, +5.787, +6.552, +6.757, +6.865},  +0.000,  -0.159,   1.002},
	{"BRank",   16, 151552, 151269, { -2.735, -2.735, -2.735, -2.735, -2.506, -2.452, -2.452, -2.169, -2.169, -1.886, -1.837, -1.602, -1.554, -1.554, -1.319, -1.319, -1.271, -1.271, -1.271, -1.223, -1.036, -1.036, -0.987, -0.987, -0.987, -0.987, -0.939, -0.939, -0.752, -0.752, -0.704, -0.704, -0.704, -0.704, -0.704, -0.656, -0.656, -0.656, -0.656, -0.608, -0.469, -0.421, -0.421, -0.421, -0.421, -0.373, -0.373, -0.373, -0.373, -0.373, -0.373, -0.325, -0.186, -0.138, -0.138, -0.138, -0.089, -0.089, -0.089, -0.089, -0.089, -0.041, -0.041, -0.041, -0.041, +0.146, +0.146, +0.194, +0.194, +0.194, +0.194, +0.242, +0.242, +0.242, +0.242, +0.290, +0.368, +0.477, +0.477, +0.477, +0.525, +0.525, +0.525, +0.525, +0.573, +0.603, +0.760, +0.809, +0.809, +0.809, +0.857, +0.857, +0.905, +0.996, +1.092, +1.140, +1.140, +1.188, +1.266, +1.423, +1.471, +1.549, +1.707, +1.803, +1.881, +2.116, +2.399, +2.779, +3.188, +3.725, +4.134, +4.653, +5.032, +5.416, +5.799, +6.291, +6.618},  -0.002,  -0.089,   1.001},
	{"BRank",   18, 151552, 151220, { -2.901, -2.901, -2.634, -2.634, -2.634, -2.634, -2.367, -2.367, -2.100, -2.055, -1.788, -1.566, -1.566, -1.520, -1.475, -1.299, -1.253, -1.253, -1.253, -1.208, -1.032, -1.032, -0.986, -0.986, -0.986, -0.986, -0.941, -0.941, -0.896, -0.765, -0.719, -0.719, -0.719, -0.719, -0.674, -0.674, -0.674, -0.674, -0.628, -0.497, -0.452, -0.452, -0.452, -0.407, -0.407, -0.407, -0.407, -0.407, -0.361, -0.361, -0.361, -0.185, -0.185, -0.140, -0.140, -0.140, -0.140, -0.140, -0.094, -0.094, -0.094, -0.094, -0.049, +0.082, +0.127, +0.127, +0.127, +0.127, +0.173, +0.173, +0.173, +0.173, +0.218, +0.218, +0.349, +0.395, +0.395, +0.440, +0.440, +0.440, +0.485, +0.485, +0.485, +0.559, +0.662, +0.707, +0.707, +0.752, +0.752, +0.780, +0.826, +0.929, +0.974, +1.020, +1.065, +1.065, +1.138, +1.287, +1.332, +1.360, +1.451, +1.599, +1.644, +1.763, +1.940, +2.133, +2.371, +2.832, +3.165, +3.724, +4.110, +4.559, +4.956, +5.231, +5.682, +5.941, +6.448},  -0.002,  -0.094,   1.002},
	{"BRank",   21, 151552, 151138, { -2.887, -2.887, -2.887, -2.639, -2.639, -2.639, -2.392, -2.392, -2.145, -1.897, -1.855, -1.650, -1.608, -1.403, -1.361, -1.361, -1.361, -1.319, -1.156, -1.114, -1.114, -1.114, -1.072, -1.072, -1.029, -0.866, -0.866, -0.866, -0.824, -0.824, -0.824, -0.824, -0.782, -0.661, -0.619, -0.619, -0.577, -0.577, -0.577, -0.577, -0.535, -0.535, -0.535, -0.493, -0.372, -0.330, -0.330, -0.330, -0.330, -0.288, -0.288, -0.288, -0.288, -0.246, -0.220, -0.124, -0.082, -0.082, -0.082, -0.040, -0.040, -0.040, -0.040, +0.002, +0.002, +0.070, +0.165, +0.165, +0.207, +0.207, +0.207, +0.249, +0.249, +0.249, +0.291, +0.359, +0.412, +0.454, +0.454, +0.496, +0.496, +0.496, +0.538, +0.564, +0.659, +0.701, +0.743, +0.743, +0.786, +0.786, +0.853, +0.949, +0.991, +1.033, +1.033, +1.101, +1.196, +1.280, +1.322, +1.348, +1.485, +1.569, +1.637, +1.817, +1.885, +2.106, +2.379, +2.736, +3.163, +3.649, +4.073, +4.428, +4.925, +5.451, +5.742, +6.059, +6.310},  -0.001,  -0.082,   1.002},
	{"BRank",   26, 151552, 151017, { -3.042, -3.042, -3.040, -2.820, -2.820, -2.598, -2.560, -2.376, -2.154, -1.931, -1.856, -1.671, -1.634, -1.449, -1.449, -1.411, -1.265, -1.227, -1.189, -1.189, -1.189, -1.151, -1.005, -0.967, -0.967, -0.967, -0.929, -0.929, -0.891, -0.782, -0.745, -0.745, -0.745, -0.707, -0.707, -0.707, -0.669, -0.560, -0.522, -0.522, -0.485, -0.485, -0.485, -0.485, -0.447, -0.447, -0.338, -0.300, -0.300, -0.262, -0.262, -0.262, -0.225, -0.225, -0.225, -0.187, -0.078, -0.078, -0.040, -0.040, -0.040, -0.002, -0.002, -0.002, +0.035, +0.073, +0.144, +0.182, +0.182, +0.220, +0.220, +0.220, +0.258, +0.258, +0.319, +0.404, +0.442, +0.442, +0.442, +0.480, +0.480, +0.518, +0.579, +0.627, +0.664, +0.702, +0.702, +0.740, +0.778, +0.849, +0.924, +0.924, +0.962, +1.000, +1.061, +1.147, +1.184, +1.222, +1.283, +1.407, +1.468, +1.543, +1.667, +1.742, +1.927, +2.111, +2.333, +2.715, +3.099, +3.533, +3.902, +4.265, +4.720, +5.216, +5.446, +5.778, +6.652},  -0.001,  -0.040,   1.004},
	{"BRank",   32, 151552, 150864, { -3.267, -3.267, -3.067, -2.867, -2.867, -2.667, -2.632, -2.432, -2.232, -2.032, -1.831, -1.665, -1.597, -1.563, -1.431, -1.397, -1.362, -1.230, -1.196, -1.196, -1.162, -1.128, -1.030, -0.996, -0.962, -0.962, -0.928, -0.928, -0.830, -0.796, -0.762, -0.762, -0.762, -0.727, -0.727, -0.629, -0.595, -0.561, -0.561, -0.527, -0.527, -0.527, -0.493, -0.459, -0.395, -0.361, -0.361, -0.327, -0.327, -0.327, -0.293, -0.272, -0.204, -0.161, -0.161, -0.127, -0.127, -0.092, -0.092, -0.071, -0.058, +0.031, +0.040, +0.074, +0.074, +0.108, +0.108, +0.142, +0.142, +0.197, +0.274, +0.274, +0.308, +0.308, +0.342, +0.342, +0.376, +0.440, +0.474, +0.508, +0.530, +0.543, +0.577, +0.598, +0.675, +0.709, +0.743, +0.764, +0.798, +0.832, +0.909, +0.943, +0.977, +1.011, +1.066, +1.143, +1.178, +1.233, +1.322, +1.399, +1.467, +1.578, +1.646, +1.778, +1.902, +2.081, +2.302, +2.694, +3.048, +3.491, +3.862, +4.168, +4.637, +4.832, +5.421, +5.804, +6.745},  +0.000,  -0.092,   1.005},
	{"BRank",   37, 151552, 150735, { -3.412, -3.228, -3.185, -3.021, -2.856, -2.815, -2.638, -2.451, -2.265, -2.047, -1.861, -1.675, -1.643, -1.488, -1.457, -1.425, -1.302, -1.270, -1.270, -1.207, -1.116, -1.084, -1.084, -1.052, -1.001, -0.929, -0.898, -0.898, -0.866, -0.834, -0.803, -0.743, -0.711, -0.680, -0.680, -0.680, -0.648, -0.616, -0.525, -0.525, -0.493, -0.493, -0.462, -0.462, -0.430, -0.379, -0.339, -0.307, -0.307, -0.276, -0.276, -0.256, -0.244, -0.193, -0.153, -0.121, -0.089, -0.089, -0.089, -0.058, -0.038, -0.006, +0.057, +0.065, +0.097, +0.097, +0.129, +0.129, +0.160, +0.212, +0.252, +0.283, +0.303, +0.315, +0.347, +0.366, +0.398, +0.438, +0.470, +0.501, +0.533, +0.533, +0.584, +0.624, +0.688, +0.688, +0.719, +0.751, +0.802, +0.874, +0.906, +0.937, +0.969, +1.029, +1.092, +1.123, +1.175, +1.246, +1.310, +1.373, +1.464, +1.547, +1.642, +1.765, +1.900, +2.055, +2.284, +2.645, +2.998, +3.433, +3.838, +4.138, +4.551, +4.930, +5.440, +5.770, +6.167},  -0.001,  -0.089,   1.004},
	{"BRank",   42, 151552, 150596, { -3.383, -3.367, -3.208, -3.033, -3.003, -2.799, -2.654, -2.479, -2.274, -2.099, -1.895, -1.720, -1.575, -1.545, -1.459, -1.370, -1.340, -1.311, -1.195, -1.195, -1.166, -1.136, -1.020, -1.020, -0.991, -0.961, -0.931, -0.875, -0.846, -0.816, -0.786, -0.786, -0.757, -0.671, -0.641, -0.641, -0.611, -0.611, -0.582, -0.552, -0.496, -0.466, -0.437, -0.437, -0.407, -0.407, -0.377, -0.321, -0.291, -0.262, -0.262, -0.232, -0.232, -0.202, -0.173, -0.117, -0.087, -0.087, -0.057, -0.057, -0.027, +0.002, +0.032, +0.088, +0.088, +0.118, +0.147, +0.147, +0.177, +0.225, +0.263, +0.293, +0.293, +0.322, +0.352, +0.370, +0.408, +0.467, +0.478, +0.497, +0.527, +0.557, +0.586, +0.642, +0.672, +0.702, +0.731, +0.773, +0.817, +0.865, +0.895, +0.925, +0.984, +1.040, +1.081, +1.129, +1.197, +1.256, +1.304, +1.371, +1.461, +1.538, +1.635, +1.732, +1.877, +2.045, +2.267, +2.636, +2.959, +3.399, +3.706, +4.026, +4.471, +4.898, +5.134, +5.572, +5.948},  -0.001,  -0.057,   1.003},
	{"BRank",   53, 151552, 150277, { -3.551, -3.470, -3.264, -3.084, -3.058, -2.876, -2.694, -2.564, -2.279, -2.097, -1.915, -1.760, -1.630, -1.578, -1.448, -1.422, -1.319, -1.293, -1.266, -1.190, -1.137, -1.111, -1.084, -1.008, -0.981, -0.955, -0.928, -0.902, -0.826, -0.799, -0.773, -0.773, -0.746, -0.696, -0.644, -0.644, -0.617, -0.591, -0.564, -0.538, -0.488, -0.461, -0.461, -0.435, -0.409, -0.385, -0.339, -0.306, -0.306, -0.279, -0.253, -0.253, -0.210, -0.177, -0.150, -0.124, -0.124, -0.097, -0.071, -0.044, +0.005, +0.032, +0.032, +0.058, +0.085, +0.111, +0.138, +0.188, +0.204, +0.214, +0.240, +0.267, +0.293, +0.343, +0.370, +0.396, +0.412, +0.439, +0.472, +0.515, +0.542, +0.568, +0.595, +0.628, +0.681, +0.707, +0.734, +0.777, +0.810, +0.863, +0.890, +0.932, +0.985, +1.035, +1.072, +1.114, +1.191, +1.244, +1.297, +1.383, +1.452, +1.539, +1.617, +1.737, +1.866, +2.025, +2.257, +2.604, +2.949, +3.323, +3.624, +3.955, +4.390, +4.632, +4.833, +5.445, +5.717},  -0.002,  -0.071,   1.002},
	{"BRank",   64, 151552, 149964, { -3.579, -3.464, -3.344, -3.165, -3.063, -2.849, -2.707, -2.542, -2.282, -2.117, -1.881, -1.761, -1.644, -1.550, -1.481, -1.384, -1.360, -1.291, -1.243, -1.195, -1.149, -1.101, -1.077, -1.029, -0.983, -0.935, -0.911, -0.887, -0.863, -0.818, -0.794, -0.770, -0.746, -0.700, -0.652, -0.628, -0.604, -0.604, -0.565, -0.534, -0.486, -0.486, -0.462, -0.438, -0.414, -0.369, -0.345, -0.321, -0.296, -0.282, -0.251, -0.227, -0.195, -0.179, -0.155, -0.131, -0.107, -0.068, -0.037, -0.013, +0.002, +0.011, +0.050, +0.074, +0.104, +0.128, +0.153, +0.177, +0.198, +0.225, +0.270, +0.294, +0.309, +0.333, +0.357, +0.388, +0.429, +0.451, +0.475, +0.505, +0.547, +0.577, +0.602, +0.626, +0.665, +0.710, +0.743, +0.776, +0.806, +0.861, +0.900, +0.933, +0.978, +1.026, +1.075, +1.128, +1.192, +1.240, +1.303, +1.373, +1.443, +1.524, +1.617, +1.728, +1.855, +2.012, +2.225, +2.578, +2.894, +3.310, +3.587, +3.847, +4.323, +4.587, +4.899, +5.225, +5.480},  -0.001,  -0.037,   1.001},
	{"BRank",   74, 151552, 149674, { -3.750, -3.587, -3.335, -3.189, -3.072, -2.831, -2.719, -2.545, -2.346, -2.105, -1.906, -1.774, -1.665, -1.555, -1.488, -1.401, -1.357, -1.292, -1.247, -1.202, -1.138, -1.115, -1.071, -1.029, -0.984, -0.961, -0.925, -0.874, -0.852, -0.830, -0.793, -0.762, -0.720, -0.698, -0.676, -0.653, -0.611, -0.566, -0.544, -0.524, -0.508, -0.477, -0.434, -0.412, -0.390, -0.376, -0.353, -0.325, -0.289, -0.266, -0.258, -0.222, -0.199, -0.171, -0.149, -0.126, -0.104, -0.081, -0.045, -0.017, +0.006, +0.028, +0.050, +0.073, +0.109, +0.137, +0.160, +0.182, +0.204, +0.232, +0.269, +0.291, +0.314, +0.336, +0.372, +0.401, +0.423, +0.459, +0.482, +0.513, +0.555, +0.577, +0.613, +0.636, +0.681, +0.709, +0.745, +0.776, +0.818, +0.863, +0.899, +0.944, +0.989, +1.031, +1.076, +1.134, +1.185, +1.244, +1.303, +1.375, +1.449, +1.522, +1.625, +1.721, +1.846, +2.012, +2.211, +2.550, +2.849, +3.273, +3.584, +3.848, +4.298, +4.529, +4.688, +5.156, +5.273},  +0.000,  -0.045,   1.001},
	{"BRank",   85, 151552, 149332, { -3.639, -3.483, -3.271, -3.148, -3.075, -2.903, -2.759, -2.594, -2.348, -2.123, -1.898, -1.755, -1.653, -1.569, -1.488, -1.425, -1.344, -1.302, -1.242, -1.200, -1.159, -1.098, -1.077, -1.036, -0.981, -0.955, -0.921, -0.892, -0.853, -0.811, -0.790, -0.756, -0.727, -0.688, -0.667, -0.646, -0.607, -0.586, -0.552, -0.531, -0.502, -0.468, -0.442, -0.421, -0.400, -0.379, -0.340, -0.319, -0.298, -0.277, -0.244, -0.217, -0.196, -0.175, -0.154, -0.121, -0.094, -0.073, -0.045, -0.019, +0.002, +0.029, +0.052, +0.083, +0.112, +0.133, +0.154, +0.185, +0.214, +0.235, +0.256, +0.290, +0.316, +0.337, +0.371, +0.397, +0.426, +0.460, +0.488, +0.515, +0.544, +0.583, +0.617, +0.646, +0.679, +0.713, +0.748, +0.789, +0.823, +0.871, +0.904, +0.946, +0.994, +1.035, +1.084, +1.137, +1.192, +1.247, +1.309, +1.375, +1.446, +1.527, +1.615, +1.725, +1.848, +1.992, +2.211, +2.538, +2.847, +3.248, +3.499, +3.870, +4.215, +4.490, +4.745, +5.000, +5.410},  -0.000,  -0.045,   1.002},
	{"BRank",  106, 151552, 148718, { -3.591, -3.494, -3.314, -3.205, -3.076, -2.947, -2.800, -2.617, -2.378, -2.158, -1.919, -1.791, -1.681, -1.571, -1.497, -1.425, -1.350, -1.313, -1.240, -1.203, -1.149, -1.112, -1.074, -1.020, -0.983, -0.953, -0.910, -0.873, -0.854, -0.819, -0.781, -0.751, -0.725, -0.695, -0.669, -0.634, -0.615, -0.580, -0.548, -0.524, -0.505, -0.475, -0.449, -0.414, -0.395, -0.365, -0.341, -0.309, -0.285, -0.266, -0.236, -0.212, -0.182, -0.156, -0.138, -0.109, -0.084, -0.065, -0.040, -0.016, +0.010, +0.040, +0.064, +0.083, +0.113, +0.137, +0.169, +0.193, +0.211, +0.242, +0.265, +0.298, +0.321, +0.352, +0.375, +0.408, +0.431, +0.462, +0.492, +0.523, +0.553, +0.583, +0.614, +0.652, +0.682, +0.719, +0.755, +0.792, +0.829, +0.867, +0.909, +0.947, +0.995, +1.038, +1.087, +1.136, +1.185, +1.246, +1.307, +1.375, +1.447, +1.525, +1.611, +1.712, +1.834, +1.990, +2.185, +2.499, +2.805, +3.192, +3.468, +3.724, +4.157, +4.301, +4.581, +5.046, +5.419},  +0.001,  -0.040,   1.001},
	{"BRank",  128, 151552, 147970, { -3.578, -3.510, -3.410, -3.300, -3.131, -2.993, -2.810, -2.627, -2.375, -2.158, -1.941, -1.789, -1.672, -1.589, -1.506, -1.423, -1.372, -1.306, -1.255, -1.206, -1.156, -1.105, -1.071, -1.027, -0.988, -0.954, -0.920, -0.886, -0.854, -0.818, -0.786, -0.754, -0.720, -0.688, -0.654, -0.633, -0.603, -0.571, -0.543, -0.519, -0.492, -0.468, -0.436, -0.419, -0.387, -0.358, -0.336, -0.309, -0.287, -0.258, -0.236, -0.208, -0.187, -0.164, -0.136, -0.119, -0.091, -0.068, -0.039, -0.019, +0.009, +0.036, +0.064, +0.091, +0.116, +0.143, +0.165, +0.192, +0.216, +0.243, +0.267, +0.299, +0.326, +0.350, +0.377, +0.409, +0.437, +0.465, +0.497, +0.527, +0.561, +0.588, +0.622, +0.654, +0.684, +0.722, +0.756, +0.793, +0.829, +0.868, +0.912, +0.951, +0.995, +1.040, +1.085, +1.134, +1.189, +1.245, +1.306, +1.374, +1.447, +1.520, +1.607, +1.707, +1.824, +1.980, +2.188, +2.500, +2.801, +3.170, +3.448, +3.716, +4.043, +4.321, +4.476, +4.945, +5.075},  +0.001,  -0.039,   1.002},
	{"BRank",  149, 151552, 147275, { -3.471, -3.455, -3.393, -3.275, -3.134, -3.002, -2.821, -2.644, -2.402, -2.171, -1.938, -1.798, -1.680, -1.581, -1.504, -1.427, -1.365, -1.312, -1.257, -1.210, -1.162, -1.117, -1.071, -1.025, -0.992, -0.947, -0.915, -0.884, -0.842, -0.813, -0.781, -0.745, -0.716, -0.688, -0.657, -0.631, -0.605, -0.576, -0.544, -0.518, -0.493, -0.467, -0.435, -0.410, -0.388, -0.358, -0.333, -0.311, -0.285, -0.260, -0.234, -0.208, -0.187, -0.161, -0.131, -0.110, -0.084, -0.062, -0.032, -0.007, +0.013, +0.040, +0.060, +0.088, +0.116, +0.137, +0.165, +0.190, +0.214, +0.242, +0.272, +0.293, +0.323, +0.350, +0.380, +0.410, +0.437, +0.467, +0.499, +0.526, +0.556, +0.588, +0.623, +0.654, +0.690, +0.722, +0.758, +0.798, +0.830, +0.872, +0.911, +0.953, +1.000, +1.042, +1.093, +1.140, +1.194, +1.249, +1.310, +1.372, +1.441, +1.521, +1.605, +1.703, +1.822, +1.968, +2.168, +2.478, +2.771, +3.139, +3.405, +3.670, +3.976, +4.226, +4.531, +4.865, +5.229},  +0.001,  -0.032,   1.001},
	{"BRank",  170, 151552, 146572, { -3.669, -3.604, -3.518, -3.395, -3.205, -2.988, -2.829, -2.670, -2.408, -2.178, -1.945, -1.799, -1.683, -1.588, -1.509, -1.437, -1.378, -1.320, -1.263, -1.206, -1.161, -1.117, -1.074, -1.032, -0.991, -0.958, -0.919, -0.886, -0.847, -0.814, -0.784, -0.755, -0.725, -0.696, -0.659, -0.631, -0.601, -0.577, -0.548, -0.518, -0.490, -0.464, -0.437, -0.411, -0.383, -0.355, -0.335, -0.305, -0.281, -0.256, -0.233, -0.209, -0.181, -0.161, -0.133, -0.108, -0.087, -0.059, -0.035, -0.008, +0.013, +0.042, +0.066, +0.090, +0.114, +0.142, +0.168, +0.197, +0.221, +0.249, +0.275, +0.303, +0.327, +0.356, +0.380, +0.410, +0.441, +0.467, +0.501, +0.530, +0.560, +0.593, +0.623, +0.656, +0.689, +0.724, +0.758, +0.793, +0.830, +0.868, +0.907, +0.951, +0.994, +1.039, +1.086, +1.135, +1.189, +1.246, +1.305, +1.368, +1.440, +1.518, +1.599, +1.701, +1.817, +1.965, +2.165, +2.479, +2.749, +3.102, +3.348, +3.557, +3.935, +4.116, +4.397, +4.652, +4.826},  -0.000,  -0.035,   1.001},
	{"BRank",  213, 151552, 145021, { -3.687, -3.610, -3.518, -3.395, -3.263, -3.036, -2.846, -2.677, -2.418, -2.198, -1.964, -1.810, -1.693, -1.594, -1.511, -1.435, -1.369, -1.310, -1.257, -1.209, -1.161, -1.113, -1.072, -1.032, -0.993, -0.954, -0.916, -0.880, -0.850, -0.816, -0.784, -0.751, -0.722, -0.687, -0.661, -0.631, -0.600, -0.570, -0.543, -0.518, -0.491, -0.462, -0.436, -0.411, -0.385, -0.358, -0.332, -0.307, -0.281, -0.255, -0.229, -0.203, -0.176, -0.152, -0.126, -0.102, -0.077, -0.051, -0.026, +0.000, +0.025, +0.051, +0.073, +0.099, +0.126, +0.147, +0.174, +0.199, +0.225, +0.251, +0.278, +0.306, +0.334, +0.362, +0.388, +0.418, +0.445, +0.476, +0.504, +0.532, +0.562, +0.595, +0.626, +0.661, +0.692, +0.725, +0.760, +0.795, +0.833, +0.869, +0.910, +0.950, +0.993, +1.037, +1.087, +1.136, +1.188, +1.242, +1.300, +1.364, +1.431, +1.508, +1.597, +1.690, +1.805, +1.951, +2.148, +2.466, +2.760, +3.122, +3.360, +3.582, +3.832, +4.015, +4.141, +4.302, +4.452},  +0.001,  -0.026,   1.001},
	{"BRank",  256, 151552, 143446, { -3.806, -3.690, -3.621, -3.421, -3.235, -3.020, -2.877, -2.708, -2.448, -2.213, -1.969, -1.822, -1.697, -1.603, -1.523, -1.449, -1.385, -1.325, -1.268, -1.216, -1.166, -1.117, -1.078, -1.033, -0.995, -0.953, -0.917, -0.881, -0.846, -0.811, -0.779, -0.747, -0.715, -0.685, -0.656, -0.628, -0.598, -0.570, -0.541, -0.513, -0.486, -0.457, -0.432, -0.406, -0.381, -0.354, -0.326, -0.302, -0.278, -0.252, -0.227, -0.203, -0.179, -0.153, -0.129, -0.102, -0.078, -0.052, -0.026, +0.000, +0.025, +0.052, +0.076, +0.103, +0.127, +0.154, +0.178, +0.206, +0.230, +0.256, +0.281, +0.308, +0.335, +0.362, +0.391, +0.418, +0.445, +0.475, +0.505, +0.532, +0.564, +0.596, +0.627, +0.659, +0.691, +0.725, +0.758, +0.794, +0.831, +0.868, +0.907, +0.947, +0.991, +1.037, +1.085, +1.135, +1.186, +1.242, +1.304, +1.365, +1.432, +1.506, +1.593, +1.686, +1.802, +1.950, +2.144, +2.443, +2.719, +3.122, +3.368, +3.612, +3.852, +4.002, +4.112, +4.336, +4.475},  +0.000,  -0.026,   1.002},
	{"BRank",  298, 151552, 141894, { -3.730, -3.648, -3.524, -3.380, -3.261, -3.047, -2.893, -2.711, -2.448, -2.226, -1.984, -1.820, -1.699, -1.600, -1.515, -1.443, -1.377, -1.318, -1.262, -1.211, -1.163, -1.119, -1.075, -1.032, -0.991, -0.956, -0.918, -0.883, -0.846, -0.813, -0.780, -0.747, -0.718, -0.685, -0.655, -0.627, -0.598, -0.568, -0.540, -0.510, -0.484, -0.458, -0.433, -0.408, -0.381, -0.355, -0.330, -0.302, -0.277, -0.250, -0.225, -0.200, -0.173, -0.148, -0.123, -0.098, -0.071, -0.047, -0.024, +0.003, +0.028, +0.053, +0.078, +0.103, +0.130, +0.158, +0.180, +0.206, +0.232, +0.257, +0.285, +0.312, +0.338, +0.367, +0.394, +0.422, +0.450, +0.478, +0.508, +0.538, +0.567, +0.597, +0.629, +0.661, +0.693, +0.728, +0.764, +0.797, +0.831, +0.870, +0.910, +0.952, +0.994, +1.040, +1.088, +1.134, +1.184, +1.240, +1.299, +1.367, +1.435, +1.509, +1.595, +1.691, +1.809, +1.950, +2.137, +2.448, +2.713, +3.056, +3.336, +3.575, +3.875, +4.066, +4.230, +4.632, +4.724},  +0.002,  -0.024,   1.002},
	{"BRank",  341, 151552, 140213, { -3.779, -3.717, -3.565, -3.449, -3.310, -3.100, -2.906, -2.732, -2.459, -2.229, -1.984, -1.831, -1.707, -1.609, -1.524, -1.451, -1.382, -1.319, -1.262, -1.213, -1.164, -1.116, -1.073, -1.032, -0.990, -0.953, -0.916, -0.881, -0.844, -0.810, -0.779, -0.745, -0.714, -0.684, -0.654, -0.625, -0.595, -0.568, -0.540, -0.513, -0.484, -0.457, -0.430, -0.403, -0.377, -0.349, -0.326, -0.300, -0.274, -0.248, -0.223, -0.197, -0.172, -0.146, -0.121, -0.096, -0.070, -0.045, -0.021, +0.004, +0.029, +0.054, +0.080, +0.104, +0.128, +0.153, +0.179, +0.207, +0.231, +0.259, +0.285, +0.312, +0.340, +0.367, +0.395, +0.422, +0.450, +0.479, +0.508, +0.538, +0.568, +0.599, +0.630, +0.661, +0.693, +0.726, +0.762, +0.797, +0.834, +0.872, +0.913, +0.952, +0.995, +1.040, +1.084, +1.132, +1.186, +1.240, +1.295, +1.358, +1.429, +1.507, +1.593, +1.687, +1.799, +1.940, +2.126, +2.433, +2.715, +3.079, +3.325, +3.548, +3.797, +4.015, +4.209, +4.480, +4.746},  +0.001,  -0.021,   1.001},
	{"BRank",  512, 151552, 133375, { -3.865, -3.841, -3.704, -3.559, -3.389, -3.136, -2.966, -2.781, -2.479, -2.247, -1.990, -1.828, -1.708, -1.607, -1.518, -1.445, -1.378, -1.316, -1.260, -1.209, -1.159, -1.113, -1.070, -1.028, -0.988, -0.950, -0.911, -0.877, -0.841, -0.807, -0.775, -0.743, -0.711, -0.680, -0.649, -0.619, -0.590, -0.562, -0.534, -0.505, -0.478, -0.452, -0.425, -0.399, -0.372, -0.347, -0.319, -0.294, -0.270, -0.244, -0.219, -0.194, -0.170, -0.144, -0.119, -0.095, -0.071, -0.044, -0.019, +0.005, +0.030, +0.055, +0.079, +0.104, +0.129, +0.154, +0.180, +0.205, +0.231, +0.256, +0.282, +0.309, +0.336, +0.364, +0.392, +0.420, +0.448, +0.477, +0.505, +0.534, +0.564, +0.595, +0.626, +0.658, +0.692, +0.724, +0.759, +0.795, +0.831, +0.867, +0.904, +0.944, +0.984, +1.029, +1.074, +1.123, +1.174, +1.225, +1.288, +1.353, +1.421, +1.495, +1.584, +1.679, +1.793, +1.940, +2.131, +2.421, +2.692, +3.029, +3.305, +3.515, +3.775, +3.944, +4.142, +4.319, +4.845},  +0.000,  -0.019,   0.999},
	{"BRank",  682, 151552, 126574, { -3.855, -3.843, -3.595, -3.506, -3.382, -3.145, -2.943, -2.770, -2.483, -2.257, -2.004, -1.840, -1.710, -1.605, -1.519, -1.448, -1.379, -1.319, -1.263, -1.209, -1.161, -1.114, -1.069, -1.028, -0.988, -0.947, -0.910, -0.875, -0.838, -0.805, -0.773, -0.740, -0.707, -0.676, -0.646, -0.618, -0.588, -0.560, -0.532, -0.504, -0.478, -0.450, -0.423, -0.397, -0.371, -0.344, -0.318, -0.293, -0.267, -0.242, -0.217, -0.192, -0.167, -0.142, -0.118, -0.093, -0.069, -0.043, -0.019, +0.007, +0.031, +0.056, +0.081, +0.105, +0.131, +0.158, +0.183, +0.209, +0.236, +0.262, +0.288, +0.314, +0.342, +0.370, +0.397, +0.425, +0.453, +0.481, +0.510, +0.541, +0.571, +0.601, +0.632, +0.664, +0.695, +0.728, +0.761, +0.795, +0.833, +0.870, +0.909, +0.948, +0.989, +1.034, +1.079, +1.127, +1.177, +1.228, +1.284, +1.345, +1.411, +1.486, +1.571, +1.666, +1.780, +1.918, +2.104, +2.401, +2.673, +2.998, +3.240, +3.456, +3.703, +3.845, +4.076, +4.429, +4.769},  +0.000,  -0.019,   0.996},
	{"BRank", 1024, 151552, 113766, { -3.959, -3.785, -3.634, -3.530, -3.343, -3.146, -3.005, -2.786, -2.487, -2.260, -2.002, -1.843, -1.717, -1.616, -1.534, -1.459, -1.392, -1.330, -1.273, -1.218, -1.167, -1.121, -1.075, -1.033, -0.993, -0.953, -0.916, -0.880, -0.845, -0.808, -0.774, -0.741, -0.709, -0.677, -0.647, -0.619, -0.590, -0.561, -0.531, -0.503, -0.474, -0.448, -0.420, -0.392, -0.366, -0.339, -0.313, -0.288, -0.262, -0.237, -0.213, -0.188, -0.163, -0.139, -0.114, -0.088, -0.063, -0.038, -0.013, +0.012, +0.037, +0.061, +0.086, +0.111, +0.136, +0.162, +0.187, +0.212, +0.238, +0.265, +0.290, +0.318, +0.344, +0.370, +0.398, +0.425, +0.452, +0.480, +0.509, +0.538, +0.569, +0.599, +0.631, +0.663, +0.695, +0.727, +0.761, +0.795, +0.832, +0.867, +0.905, +0.942, +0.986, +1.030, +1.076, +1.122, +1.171, +1.226, +1.284, +1.344, +1.414, +1.489, +1.576, +1.669, +1.785, +1.919, +2.104, +2.398, +2.660, +2.992, +3.219, +3.454, +3.665, +3.882, +4.103, +4.295, +4.483},  -0.000,  -0.013,   0.998},
	{"BRank", 1365, 151552, 102087, { -4.196, -4.037, -3.760, -3.584, -3.336, -3.150, -2.987, -2.784, -2.514, -2.274, -2.019, -1.856, -1.732, -1.625, -1.538, -1.463, -1.397, -1.335, -1.276, -1.223, -1.171, -1.121, -1.078, -1.034, -0.995, -0.955, -0.918, -0.882, -0.846, -0.812, -0.778, -0.745, -0.713, -0.681, -0.651, -0.622, -0.592, -0.564, -0.534, -0.506, -0.478, -0.450, -0.422, -0.395, -0.367, -0.342, -0.315, -0.289, -0.264, -0.238, -0.212, -0.187, -0.163, -0.139, -0.113, -0.088, -0.062, -0.037, -0.012, +0.013, +0.038, +0.063, +0.088, +0.114, +0.139, +0.164, +0.190, +0.215, +0.240, +0.266, +0.293, +0.320, +0.347, +0.374, +0.402, +0.429, +0.458, +0.486, +0.515, +0.544, +0.573, +0.603, +0.634, +0.666, +0.698, +0.731, +0.764, +0.800, +0.836, +0.872, +0.910, +0.948, +0.989, +1.033, +1.078, +1.125, +1.176, +1.230, +1.282, +1.346, +1.410, +1.484, +1.568, +1.664, +1.779, +1.915, +2.102, +2.395, +2.654, +2.989, +3.247, +3.451, +3.672, +3.827, +3.953, +4.182, +4.243},  -0.001,  -0.012,   1.001},

	{ NULL, 0,  0,  0, {0}}
};
PractRand::Tests::RawTestCalibrationData_129 raw_calibration_data_array129[] = {
	{ "mod3_simple(1)",  1, 151552, 150223, { -1.40856, -1.40856, -1.40856, -1.40856, -1.40856, -1.40856, -1.40856, -1.40856, -1.40856, -1.40856, -1.40856, -1.40856, -1.40856, -1.40856, -1.40856, -1.392, -1.375, -1.375, -1.340, -1.340, -1.324, -1.307, -1.307, -1.272, -1.255, -1.255, -1.240, -1.205, -1.205, -1.169, -1.169, -1.140, -1.136, -1.122, -1.122, -1.070, -1.048, -1.032, -1.032, -1.006, -0.982, -0.982, -0.970, -0.900, -0.900, -0.893, -0.860, -0.856, -0.838, -0.795, -0.795, -0.785, -0.703, -0.703, -0.696, -0.672, -0.654, -0.637, -0.573, -0.566, -0.566, -0.510, -0.478, -0.459, -0.456, -0.413, -0.402, -0.316, -0.312, -0.267, -0.241, -0.219, -0.205, -0.187, -0.133, -0.026, -0.025, +0.006, +0.024, +0.076, +0.078, +0.169, +0.172, +0.286, +0.296, +0.323, +0.396, +0.405, +0.505, +0.579, +0.611, +0.655, +0.674, +0.834, +0.895, +0.932, +1.021, +1.058, +1.244, +1.280, +1.328, +1.478, +1.629, +1.700, +1.824, +2.020, +2.166, +2.417, +2.578, +2.823, +3.145, +3.551, +4.111, +5.059, +6.05266, +7.26830, +8.10110, +9.24054, +10.46029, +11.52307, +12.46241, +13.83951, +14.53474, +15.40526, +15.70480, +15.70480, +15.70480, +15.70480, +15.70480 }, -0.456, +0.001, 1.410, 0 },
	{ "mod3_simple(1)",  2, 151552, 149038, { -1.41142, -1.41142, -1.41142, -1.41142, -1.41142, -1.41142, -1.41142, -1.41142, -1.41142, -1.41142, -1.41142, -1.41142, -1.41142, -1.41142, -1.41142, -1.403, -1.378, -1.369, -1.361, -1.336, -1.327, -1.311, -1.295, -1.278, -1.268, -1.244, -1.228, -1.209, -1.202, -1.193, -1.161, -1.144, -1.133, -1.110, -1.100, -1.070, -1.059, -1.044, -1.023, -1.001, -0.990, -0.962, -0.941, -0.929, -0.925, -0.876, -0.864, -0.837, -0.819, -0.802, -0.794, -0.747, -0.733, -0.721, -0.691, -0.658, -0.643, -0.618, -0.580, -0.561, -0.546, -0.530, -0.488, -0.467, -0.449, -0.398, -0.384, -0.360, -0.303, -0.292, -0.263, -0.221, -0.190, -0.137, -0.120, -0.085, -0.033, +0.004, +0.032, +0.078, +0.122, +0.160, +0.205, +0.249, +0.263, +0.353, +0.396, +0.445, +0.491, +0.563, +0.606, +0.666, +0.734, +0.821, +0.875, +0.931, +1.020, +1.107, +1.163, +1.305, +1.364, +1.465, +1.616, +1.704, +1.841, +1.972, +2.165, +2.319, +2.548, +2.848, +3.149, +3.551, +4.131, +5.083, +6.00090, +7.24226, +8.23355, +9.19312, +10.37976, +11.05344, +11.81916, +13.02856, +13.24913, +14.09368, +14.38661, +14.38661, +14.38661, +14.38661, +14.38661 }, -0.449, +0.001, 1.410, 0 },
	{ "mod3_simple(1)",  3, 151552, 148180, { -1.41421, -1.41421, -1.41421, -1.41421, -1.41421, -1.41421, -1.41421, -1.41421, -1.41421, -1.41421, -1.41421, -1.41421, -1.41421, -1.40865, -1.40865, -1.398, -1.375, -1.375, -1.348, -1.342, -1.325, -1.308, -1.298, -1.275, -1.259, -1.242, -1.241, -1.209, -1.198, -1.175, -1.174, -1.143, -1.140, -1.124, -1.096, -1.073, -1.062, -1.042, -1.008, -0.999, -0.988, -0.972, -0.948, -0.911, -0.904, -0.893, -0.871, -0.843, -0.812, -0.797, -0.795, -0.759, -0.726, -0.701, -0.690, -0.672, -0.644, -0.599, -0.588, -0.566, -0.539, -0.511, -0.473, -0.453, -0.448, -0.399, -0.356, -0.333, -0.312, -0.301, -0.241, -0.212, -0.184, -0.150, -0.127, -0.071, -0.044, -0.023, +0.034, +0.088, +0.112, +0.147, +0.206, +0.250, +0.288, +0.328, +0.401, +0.444, +0.493, +0.542, +0.606, +0.659, +0.725, +0.800, +0.864, +0.938, +1.010, +1.080, +1.172, +1.275, +1.372, +1.466, +1.582, +1.720, +1.839, +2.005, +2.181, +2.358, +2.566, +2.817, +3.160, +3.581, +4.161, +5.132, +6.11614, +7.33981, +8.34616, +9.27024, +10.73617, +12.00054, +13.15993, +13.69218, +13.98567, +14.53613, +14.72623, +14.72623, +14.72623, +14.72623, +14.72623 }, -0.448, +0.005, 1.418, 0 },
	{ "mod3_simple(1)",  4, 151552, 146805, { -1.41282, -1.41282, -1.41282, -1.41282, -1.41282, -1.41282, -1.41282, -1.41282, -1.41282, -1.41282, -1.41282, -1.41282, -1.41282, -1.41282, -1.40449, -1.396, -1.388, -1.371, -1.354, -1.342, -1.325, -1.313, -1.288, -1.279, -1.263, -1.241, -1.230, -1.222, -1.195, -1.180, -1.171, -1.142, -1.137, -1.114, -1.097, -1.075, -1.060, -1.043, -1.022, -0.996, -0.990, -0.965, -0.945, -0.927, -0.908, -0.899, -0.855, -0.848, -0.825, -0.810, -0.782, -0.753, -0.742, -0.708, -0.685, -0.657, -0.643, -0.626, -0.593, -0.564, -0.538, -0.524, -0.474, -0.451, -0.437, -0.402, -0.365, -0.343, -0.318, -0.279, -0.234, -0.215, -0.198, -0.138, -0.107, -0.083, -0.053, +0.013, +0.039, +0.063, +0.119, +0.169, +0.188, +0.244, +0.285, +0.333, +0.385, +0.451, +0.485, +0.535, +0.621, +0.654, +0.719, +0.796, +0.864, +0.944, +1.001, +1.099, +1.181, +1.279, +1.357, +1.493, +1.593, +1.721, +1.868, +1.991, +2.156, +2.348, +2.577, +2.828, +3.149, +3.559, +4.147, +5.141, +6.15958, +7.54694, +8.46622, +9.83963, +10.94800, +11.94600, +12.36218, +13.31411, +13.91703, +15.20449, +15.64905, +15.64905, +15.64905, +15.64905, +15.64905 }, -0.437, +0.005, 1.423, 0 },
	{ "mod3_simple(1)",  5, 151552, 146306, { -1.41310, -1.41310, -1.41310, -1.41310, -1.41310, -1.41310, -1.41310, -1.41310, -1.41310, -1.41310, -1.41310, -1.41310, -1.41310, -1.40978, -1.40644, -1.400, -1.383, -1.373, -1.360, -1.340, -1.330, -1.313, -1.300, -1.277, -1.267, -1.250, -1.234, -1.220, -1.197, -1.184, -1.173, -1.148, -1.129, -1.116, -1.099, -1.080, -1.065, -1.041, -1.028, -1.008, -0.982, -0.968, -0.944, -0.929, -0.905, -0.888, -0.870, -0.846, -0.821, -0.800, -0.777, -0.756, -0.731, -0.710, -0.686, -0.664, -0.638, -0.614, -0.589, -0.563, -0.539, -0.512, -0.485, -0.456, -0.433, -0.393, -0.375, -0.335, -0.320, -0.283, -0.256, -0.211, -0.179, -0.147, -0.116, -0.075, -0.038, -0.001, +0.040, +0.068, +0.124, +0.155, +0.204, +0.256, +0.297, +0.346, +0.393, +0.444, +0.505, +0.557, +0.605, +0.675, +0.742, +0.812, +0.869, +0.946, +1.016, +1.107, +1.173, +1.286, +1.358, +1.478, +1.592, +1.695, +1.840, +2.008, +2.172, +2.365, +2.582, +2.817, +3.154, +3.570, +4.155, +5.154, +6.08573, +7.38688, +8.29419, +9.32684, +10.34453, +11.55753, +12.42825, +14.26707, +15.06655, +16.60350, +17.13525, +17.13525, +17.13525, +17.13525, +17.13525 }, -0.433, +0.004, 1.417, 0 },
	{ "mod3_simple(1)",  6, 151552, 145644, { -1.41421, -1.41421, -1.41421, -1.41421, -1.41421, -1.41421, -1.41421, -1.41421, -1.41421, -1.41421, -1.41421, -1.41421, -1.41144, -1.41144, -1.40590, -1.403, -1.381, -1.370, -1.356, -1.339, -1.328, -1.311, -1.295, -1.279, -1.270, -1.246, -1.237, -1.212, -1.203, -1.190, -1.162, -1.155, -1.129, -1.111, -1.105, -1.079, -1.061, -1.046, -1.028, -1.006, -0.994, -0.963, -0.943, -0.936, -0.907, -0.882, -0.868, -0.854, -0.816, -0.809, -0.783, -0.755, -0.734, -0.719, -0.695, -0.658, -0.643, -0.613, -0.582, -0.564, -0.542, -0.509, -0.485, -0.462, -0.418, -0.403, -0.376, -0.338, -0.305, -0.287, -0.245, -0.214, -0.185, -0.153, -0.110, -0.074, -0.039, -0.005, +0.028, +0.072, +0.118, +0.149, +0.205, +0.248, +0.295, +0.342, +0.390, +0.443, +0.487, +0.547, +0.609, +0.684, +0.740, +0.803, +0.871, +0.943, +1.026, +1.106, +1.190, +1.277, +1.382, +1.486, +1.608, +1.712, +1.846, +2.000, +2.162, +2.356, +2.574, +2.841, +3.171, +3.588, +4.149, +5.118, +6.08647, +7.30384, +8.42904, +9.32479, +10.56922, +11.41048, +12.03486, +13.19051, +13.40441, +14.47950, +14.85252, +14.85252, +14.85252, +14.85252, +14.85252 }, -0.418, +0.006, 1.419, 0 },
	{ "mod3_simple(1)",  7, 151552, 144192, { -1.41342, -1.41342, -1.41342, -1.41342, -1.41342, -1.41342, -1.41342, -1.41342, -1.41342, -1.41342, -1.41342, -1.41342, -1.41342, -1.41105, -1.40867, -1.399, -1.385, -1.373, -1.356, -1.342, -1.328, -1.309, -1.295, -1.280, -1.261, -1.248, -1.233, -1.218, -1.200, -1.182, -1.167, -1.147, -1.128, -1.113, -1.094, -1.077, -1.059, -1.041, -1.030, -1.010, -0.981, -0.972, -0.948, -0.930, -0.909, -0.883, -0.866, -0.846, -0.831, -0.804, -0.788, -0.762, -0.735, -0.714, -0.686, -0.660, -0.645, -0.619, -0.593, -0.571, -0.542, -0.511, -0.491, -0.463, -0.428, -0.409, -0.374, -0.349, -0.316, -0.286, -0.250, -0.221, -0.182, -0.154, -0.118, -0.073, -0.044, -0.001, +0.040, +0.075, +0.126, +0.156, +0.195, +0.250, +0.284, +0.351, +0.387, +0.450, +0.494, +0.558, +0.602, +0.675, +0.733, +0.805, +0.870, +0.952, +1.019, +1.101, +1.179, +1.265, +1.375, +1.487, +1.590, +1.717, +1.847, +1.997, +2.166, +2.379, +2.592, +2.873, +3.179, +3.581, +4.134, +5.050, +6.00213, +7.28719, +8.23952, +9.21251, +10.57203, +11.91480, +12.24122, +13.17943, +13.62265, +13.93283, +14.03813, +14.03813, +14.03813, +14.03813, +14.03813 }, -0.428, +0.004, 1.416, 0 },
	{ "mod3_simple(1)",  8, 151552, 142995, { -1.41352, -1.41352, -1.41352, -1.41352, -1.41352, -1.41352, -1.41352, -1.41352, -1.41352, -1.41352, -1.41352, -1.41352, -1.41352, -1.41144, -1.40521, -1.401, -1.384, -1.370, -1.359, -1.343, -1.326, -1.310, -1.297, -1.279, -1.264, -1.245, -1.234, -1.215, -1.201, -1.181, -1.163, -1.152, -1.130, -1.114, -1.095, -1.081, -1.060, -1.045, -1.030, -1.005, -0.989, -0.974, -0.947, -0.929, -0.913, -0.888, -0.869, -0.850, -0.829, -0.808, -0.782, -0.767, -0.741, -0.712, -0.694, -0.672, -0.645, -0.617, -0.598, -0.571, -0.538, -0.518, -0.492, -0.458, -0.435, -0.408, -0.376, -0.344, -0.314, -0.285, -0.251, -0.213, -0.187, -0.154, -0.115, -0.081, -0.046, -0.005, +0.040, +0.074, +0.113, +0.161, +0.202, +0.244, +0.292, +0.338, +0.392, +0.440, +0.493, +0.550, +0.610, +0.664, +0.732, +0.800, +0.864, +0.945, +1.012, +1.102, +1.190, +1.282, +1.377, +1.486, +1.595, +1.738, +1.860, +2.016, +2.182, +2.355, +2.596, +2.828, +3.149, +3.551, +4.108, +5.070, +6.08231, +7.35955, +8.29745, +9.22676, +10.40440, +11.25776, +12.55812, +13.75981, +16.04118, +16.46242, +16.59797, +16.59797, +16.59797, +16.59797, +16.59797 }, -0.435, +0.003, 1.417, 0 },

	{"mod3_simple(2)",        1, 151552,7739, {  -2.80849,  -2.80849,  -2.80849,  -2.80849,  -2.80849,  -2.80849,  -2.80810,  -2.78323,  -2.75798,  -2.75798,  -2.73178,  -2.68213,  -2.65312,  -2.60348,  -2.52583, -2.428, -2.315, -2.223, -2.149, -2.083, -2.023, -1.971, -1.919, -1.871, -1.821, -1.778, -1.735, -1.695, -1.651, -1.613, -1.571, -1.531, -1.496, -1.457, -1.419, -1.384, -1.345, -1.309, -1.273, -1.238, -1.202, -1.168, -1.133, -1.097, -1.063, -1.027, -0.991, -0.957, -0.921, -0.886, -0.852, -0.817, -0.781, -0.745, -0.710, -0.674, -0.639, -0.602, -0.567, -0.529, -0.491, -0.455, -0.417, -0.379, -0.338, -0.299, -0.260, -0.219, -0.177, -0.138, -0.096, -0.053, -0.010, +0.035, +0.078, +0.121, +0.167, +0.215, +0.262, +0.313, +0.364, +0.417, +0.471, +0.525, +0.582, +0.640, +0.698, +0.756, +0.818, +0.879, +0.945, +1.018, +1.092, +1.169, +1.245, +1.325, +1.410, +1.501, +1.601, +1.700, +1.806, +1.921, +2.045, +2.173, +2.318, +2.474, +2.651, +2.841, +3.067, +3.326, +3.646, +4.052, +4.639, +5.594,  +6.56442,  +7.74060,  +8.73349,  +9.60511, +10.82947, +11.98945, +12.80229, +14.37770, +15.03853, +15.93358, +16.24156, +16.24156, +16.24156, +16.24156, +16.24156},  -0.338,  +0.016,   1.728, 0},
	{"mod3_simple(2)",        2, 151552, 976, {  -2.80605,  -2.80605,  -2.80605,  -2.80605,  -2.80605,  -2.80605,  -2.80585,  -2.78683,  -2.78078,  -2.75598,  -2.74290,  -2.69276,  -2.66503,  -2.60661,  -2.52451, -2.438, -2.321, -2.229, -2.152, -2.086, -2.028, -1.973, -1.922, -1.873, -1.827, -1.782, -1.739, -1.698, -1.658, -1.617, -1.578, -1.540, -1.502, -1.465, -1.428, -1.391, -1.355, -1.318, -1.282, -1.246, -1.211, -1.175, -1.139, -1.105, -1.071, -1.037, -1.002, -0.966, -0.932, -0.896, -0.861, -0.825, -0.791, -0.757, -0.722, -0.686, -0.649, -0.611, -0.575, -0.539, -0.502, -0.462, -0.422, -0.384, -0.344, -0.306, -0.266, -0.227, -0.186, -0.144, -0.102, -0.059, -0.017, +0.028, +0.072, +0.118, +0.165, +0.212, +0.259, +0.308, +0.359, +0.413, +0.464, +0.519, +0.573, +0.630, +0.690, +0.752, +0.813, +0.879, +0.942, +1.011, +1.085, +1.157, +1.233, +1.317, +1.400, +1.491, +1.587, +1.691, +1.796, +1.906, +2.026, +2.159, +2.297, +2.454, +2.628, +2.839, +3.069, +3.323, +3.649, +4.047, +4.621, +5.656,  +6.64144,  +7.90618,  +8.77680,  +9.62305, +10.89685, +11.97726, +12.35894, +12.98909, +13.36900, +16.80200, +17.99353, +17.99353, +17.99353, +17.99353, +17.99353},  -0.344,  +0.010,   1.732, 0},
	{"mod3_simple(2)",        3, 151552, 221, {  -2.78688,  -2.78688,  -2.78688,  -2.78688,  -2.78688,  -2.78686,  -2.78678,  -2.78228,  -2.76913,  -2.74519,  -2.72832,  -2.69516,  -2.66079,  -2.61013,  -2.52033, -2.429, -2.314, -2.229, -2.155, -2.088, -2.030, -1.974, -1.924, -1.874, -1.825, -1.780, -1.738, -1.697, -1.658, -1.618, -1.579, -1.541, -1.504, -1.465, -1.429, -1.392, -1.356, -1.319, -1.284, -1.249, -1.215, -1.179, -1.142, -1.107, -1.071, -1.036, -1.001, -0.965, -0.930, -0.896, -0.862, -0.825, -0.791, -0.756, -0.720, -0.682, -0.645, -0.610, -0.573, -0.537, -0.500, -0.462, -0.423, -0.384, -0.345, -0.306, -0.265, -0.225, -0.184, -0.143, -0.103, -0.060, -0.018, +0.026, +0.071, +0.117, +0.163, +0.212, +0.259, +0.306, +0.356, +0.406, +0.456, +0.512, +0.567, +0.624, +0.684, +0.744, +0.807, +0.867, +0.935, +1.004, +1.073, +1.146, +1.227, +1.311, +1.397, +1.484, +1.578, +1.681, +1.787, +1.901, +2.020, +2.151, +2.293, +2.453, +2.624, +2.827, +3.060, +3.322, +3.655, +4.075, +4.674, +5.646,  +6.65904,  +7.89485,  +8.92138,  +9.66967, +10.99187, +12.16694, +12.95535, +13.83092, +14.06563, +16.21295, +16.95797, +16.95797, +16.95797, +16.95797, +16.95797},  -0.345,  +0.009,   1.734, 0},
	{"mod3_simple(2)",        4, 151552,  83, {  -2.80694,  -2.80694,  -2.80694,  -2.80694,  -2.80694,  -2.80214,  -2.78823,  -2.78191,  -2.76889,  -2.75669,  -2.73185,  -2.70065,  -2.66210,  -2.60748,  -2.51620, -2.431, -2.316, -2.227, -2.152, -2.087, -2.030, -1.976, -1.926, -1.877, -1.831, -1.785, -1.742, -1.701, -1.662, -1.621, -1.580, -1.541, -1.503, -1.466, -1.431, -1.394, -1.358, -1.322, -1.286, -1.249, -1.214, -1.178, -1.142, -1.105, -1.071, -1.035, -1.002, -0.967, -0.932, -0.897, -0.861, -0.827, -0.792, -0.758, -0.724, -0.688, -0.653, -0.617, -0.580, -0.544, -0.506, -0.471, -0.433, -0.394, -0.355, -0.316, -0.277, -0.238, -0.198, -0.158, -0.116, -0.074, -0.032, +0.011, +0.056, +0.102, +0.147, +0.195, +0.244, +0.295, +0.344, +0.398, +0.452, +0.504, +0.559, +0.613, +0.673, +0.733, +0.796, +0.863, +0.932, +1.001, +1.074, +1.149, +1.229, +1.312, +1.396, +1.485, +1.582, +1.682, +1.790, +1.911, +2.028, +2.160, +2.297, +2.454, +2.626, +2.831, +3.063, +3.324, +3.655, +4.064, +4.657, +5.644,  +6.66250,  +8.03378,  +9.15803, +10.24765, +11.39100, +12.48834, +13.17705, +13.59496, +14.86488, +15.85228, +16.18839, +16.18839, +16.18839, +16.18839, +16.18839},  -0.355,  +0.006,   1.738, 0},
	{"mod3_simple(2)",        5, 151552,  49, {  -2.78784,  -2.78784,  -2.78784,  -2.78784,  -2.78784,  -2.78528,  -2.77792,  -2.77267,  -2.76260,  -2.74943,  -2.72257,  -2.69341,  -2.65847,  -2.61810,  -2.53252, -2.440, -2.317, -2.232, -2.157, -2.092, -2.032, -1.978, -1.929, -1.881, -1.833, -1.789, -1.747, -1.703, -1.661, -1.622, -1.582, -1.544, -1.505, -1.469, -1.433, -1.396, -1.358, -1.322, -1.286, -1.249, -1.214, -1.177, -1.142, -1.107, -1.073, -1.039, -1.005, -0.970, -0.934, -0.900, -0.867, -0.832, -0.797, -0.762, -0.726, -0.688, -0.652, -0.616, -0.580, -0.542, -0.505, -0.466, -0.427, -0.387, -0.348, -0.311, -0.271, -0.229, -0.190, -0.147, -0.107, -0.064, -0.022, +0.022, +0.065, +0.108, +0.154, +0.199, +0.246, +0.293, +0.343, +0.395, +0.447, +0.500, +0.556, +0.614, +0.675, +0.734, +0.795, +0.860, +0.926, +0.994, +1.064, +1.140, +1.217, +1.298, +1.385, +1.473, +1.568, +1.667, +1.774, +1.890, +2.019, +2.154, +2.297, +2.454, +2.638, +2.843, +3.066, +3.330, +3.658, +4.067, +4.626, +5.612,  +6.58237,  +7.89175,  +8.92774,  +9.84457, +11.38499, +12.31778, +12.82180, +14.57500, +15.32850, +15.75427, +15.90086, +15.90086, +15.90086, +15.90086, +15.90086},  -0.348,  +0.003,   1.732, 0},
	{"mod3_simple(2)",        6, 151552,  20, {  -2.77859,  -2.77859,  -2.77859,  -2.77859,  -2.77859,  -2.77855,  -2.77831,  -2.76595,  -2.75354,  -2.74523,  -2.72053,  -2.68760,  -2.65282,  -2.60836,  -2.51955, -2.437, -2.317, -2.231, -2.155, -2.090, -2.030, -1.976, -1.925, -1.878, -1.830, -1.788, -1.745, -1.703, -1.662, -1.623, -1.584, -1.545, -1.506, -1.469, -1.431, -1.395, -1.360, -1.324, -1.287, -1.252, -1.217, -1.184, -1.147, -1.112, -1.078, -1.043, -1.008, -0.973, -0.938, -0.903, -0.867, -0.829, -0.793, -0.758, -0.724, -0.688, -0.654, -0.617, -0.580, -0.543, -0.506, -0.468, -0.429, -0.391, -0.354, -0.315, -0.277, -0.238, -0.196, -0.155, -0.112, -0.067, -0.026, +0.020, +0.065, +0.111, +0.160, +0.209, +0.257, +0.306, +0.355, +0.408, +0.460, +0.515, +0.570, +0.626, +0.685, +0.745, +0.806, +0.870, +0.936, +1.004, +1.076, +1.151, +1.226, +1.308, +1.394, +1.486, +1.581, +1.680, +1.787, +1.903, +2.028, +2.159, +2.304, +2.458, +2.627, +2.831, +3.071, +3.342, +3.667, +4.079, +4.647, +5.640,  +6.61075,  +7.94745,  +8.87463,  +9.80076, +10.91759, +12.08139, +12.78912, +13.61146, +15.22868, +15.33978, +15.36954, +15.36954, +15.36954, +15.36954, +15.36954},  -0.354,  +0.006,   1.735, 0},
	{"mod3_simple(2)",        7, 151552,  11, {  -2.79593,  -2.79593,  -2.79593,  -2.79593,  -2.79593,  -2.79504,  -2.79225,  -2.77813,  -2.76720,  -2.75687,  -2.74215,  -2.70585,  -2.66815,  -2.62182,  -2.52942, -2.439, -2.321, -2.229, -2.155, -2.090, -2.031, -1.978, -1.927, -1.878, -1.831, -1.785, -1.743, -1.702, -1.661, -1.619, -1.580, -1.543, -1.506, -1.468, -1.432, -1.396, -1.360, -1.323, -1.288, -1.251, -1.215, -1.182, -1.147, -1.113, -1.077, -1.042, -1.007, -0.972, -0.937, -0.903, -0.869, -0.835, -0.800, -0.764, -0.729, -0.693, -0.658, -0.622, -0.586, -0.550, -0.512, -0.474, -0.436, -0.397, -0.358, -0.318, -0.277, -0.237, -0.197, -0.154, -0.112, -0.069, -0.024, +0.020, +0.065, +0.109, +0.156, +0.201, +0.248, +0.294, +0.348, +0.401, +0.453, +0.507, +0.561, +0.619, +0.679, +0.741, +0.804, +0.867, +0.937, +1.007, +1.076, +1.151, +1.230, +1.309, +1.392, +1.482, +1.581, +1.681, +1.784, +1.898, +2.022, +2.156, +2.304, +2.458, +2.633, +2.827, +3.051, +3.327, +3.657, +4.050, +4.603, +5.615,  +6.56835,  +7.84833,  +8.74605,  +9.57019, +11.26311, +11.91949, +12.82262, +13.70483, +14.93354, +15.31451, +15.44084, +15.44084, +15.44084, +15.44084, +15.44084},  -0.358,  +0.003,   1.730, 0},
	{"mod3_simple(2)",        8, 151552,   9, {  -2.79586,  -2.79586,  -2.79586,  -2.79586,  -2.79586,  -2.79265,  -2.78326,  -2.77406,  -2.76455,  -2.75216,  -2.72424,  -2.69011,  -2.64969,  -2.60324,  -2.52213, -2.437, -2.314, -2.227, -2.153, -2.090, -2.030, -1.975, -1.922, -1.875, -1.829, -1.785, -1.741, -1.702, -1.661, -1.621, -1.584, -1.545, -1.507, -1.471, -1.434, -1.399, -1.361, -1.326, -1.290, -1.255, -1.217, -1.182, -1.150, -1.114, -1.080, -1.047, -1.013, -0.978, -0.943, -0.908, -0.872, -0.835, -0.798, -0.763, -0.726, -0.690, -0.655, -0.619, -0.583, -0.546, -0.508, -0.472, -0.433, -0.393, -0.355, -0.316, -0.276, -0.236, -0.195, -0.154, -0.112, -0.068, -0.025, +0.019, +0.063, +0.107, +0.154, +0.202, +0.250, +0.299, +0.348, +0.400, +0.454, +0.511, +0.568, +0.629, +0.688, +0.748, +0.811, +0.873, +0.939, +1.008, +1.078, +1.154, +1.230, +1.311, +1.400, +1.490, +1.586, +1.684, +1.792, +1.906, +2.024, +2.157, +2.300, +2.450, +2.617, +2.808, +3.043, +3.299, +3.636, +4.052, +4.633, +5.638,  +6.58193,  +7.87222,  +8.85322,  +9.85398, +11.06481, +12.34026, +12.95099, +14.20426, +15.38331, +17.16610, +17.78078, +17.78078, +17.78078, +17.78078, +17.78078},  -0.355,  +0.003,   1.732, 0},

	{"mod3_simple(3)",        1, 151552, 130, {  -4.39413,  -4.39413,  -4.39413,  -4.39413,  -4.39413,  -4.37070,  -4.30314,  -4.29639,  -4.21299,  -4.11786,  -4.02681,  -3.88683,  -3.74774,  -3.61243,  -3.39201, -3.195, -2.947, -2.769, -2.636, -2.521, -2.417, -2.327, -2.247, -2.171, -2.098, -2.029, -1.962, -1.898, -1.838, -1.778, -1.722, -1.669, -1.614, -1.559, -1.508, -1.458, -1.409, -1.361, -1.314, -1.269, -1.224, -1.175, -1.131, -1.086, -1.042, -0.999, -0.955, -0.909, -0.865, -0.820, -0.775, -0.734, -0.689, -0.645, -0.600, -0.557, -0.514, -0.470, -0.426, -0.381, -0.336, -0.291, -0.247, -0.202, -0.156, -0.109, -0.062, -0.015, +0.032, +0.078, +0.127, +0.174, +0.222, +0.275, +0.327, +0.379, +0.431, +0.483, +0.537, +0.593, +0.648, +0.706, +0.760, +0.816, +0.876, +0.938, +1.001, +1.062, +1.128, +1.194, +1.263, +1.335, +1.409, +1.484, +1.564, +1.647, +1.730, +1.818, +1.917, +2.020, +2.127, +2.240, +2.364, +2.489, +2.629, +2.781, +2.955, +3.136, +3.359, +3.607, +3.908, +4.293, +4.831, +5.698,  +6.59901,  +7.69332,  +8.52523,  +9.31678, +10.41455, +11.00391, +11.58404, +12.34421, +12.64170, +13.13471, +13.30431, +13.30431, +13.30431, +13.30431, +13.30431},  -0.156,  +0.104,   1.906, 0},
	{"mod3_simple(3)",        2, 151552,   0, {  -4.36900,  -4.36900,  -4.36900,  -4.36900,  -4.36900,  -4.36704,  -4.36089,  -4.31907,  -4.24986,  -4.17142,  -4.06792,  -3.92740,  -3.80932,  -3.65735,  -3.42366, -3.215, -2.969, -2.805, -2.662, -2.549, -2.447, -2.356, -2.274, -2.197, -2.124, -2.057, -1.994, -1.930, -1.872, -1.815, -1.760, -1.704, -1.650, -1.598, -1.548, -1.500, -1.453, -1.404, -1.357, -1.312, -1.267, -1.220, -1.173, -1.131, -1.087, -1.042, -0.995, -0.954, -0.911, -0.867, -0.824, -0.782, -0.739, -0.696, -0.652, -0.609, -0.565, -0.522, -0.477, -0.433, -0.388, -0.344, -0.302, -0.258, -0.213, -0.168, -0.120, -0.074, -0.028, +0.019, +0.065, +0.116, +0.164, +0.212, +0.264, +0.315, +0.367, +0.422, +0.475, +0.531, +0.584, +0.641, +0.699, +0.757, +0.816, +0.874, +0.939, +1.002, +1.066, +1.135, +1.205, +1.276, +1.350, +1.428, +1.509, +1.594, +1.681, +1.772, +1.865, +1.968, +2.078, +2.190, +2.306, +2.434, +2.571, +2.719, +2.888, +3.077, +3.289, +3.536, +3.838, +4.225, +4.739, +5.625,  +6.49147,  +7.57851,  +8.44203,  +9.19328, +10.16281, +10.77041, +11.43661, +12.06165, +12.71556, +14.93032, +15.69750, +15.69750, +15.69750, +15.69750, +15.69750},  -0.213,  +0.053,   1.894, 0},
	{"mod3_simple(3)",        3, 151552,   1, {  -4.37064,  -4.37064,  -4.37064,  -4.37064,  -4.37064,  -4.36090,  -4.33245,  -4.29563,  -4.21902,  -4.10915,  -4.02905,  -3.90859,  -3.78482,  -3.64987,  -3.41994, -3.225, -2.978, -2.811, -2.677, -2.562, -2.459, -2.371, -2.291, -2.214, -2.140, -2.072, -2.009, -1.948, -1.889, -1.831, -1.775, -1.721, -1.666, -1.615, -1.563, -1.514, -1.467, -1.420, -1.374, -1.330, -1.283, -1.238, -1.192, -1.148, -1.103, -1.058, -1.013, -0.970, -0.927, -0.881, -0.837, -0.794, -0.752, -0.708, -0.665, -0.622, -0.579, -0.536, -0.494, -0.449, -0.405, -0.360, -0.316, -0.269, -0.225, -0.180, -0.137, -0.090, -0.044, +0.002, +0.048, +0.098, +0.145, +0.194, +0.243, +0.293, +0.346, +0.397, +0.450, +0.503, +0.557, +0.613, +0.670, +0.729, +0.788, +0.847, +0.909, +0.971, +1.035, +1.102, +1.171, +1.245, +1.318, +1.394, +1.475, +1.558, +1.648, +1.738, +1.833, +1.934, +2.039, +2.157, +2.271, +2.404, +2.546, +2.698, +2.866, +3.055, +3.273, +3.526, +3.833, +4.216, +4.734, +5.647,  +6.49267,  +7.56031,  +8.44654,  +9.28946, +10.27799, +10.92717, +11.34185, +11.94202, +12.88513, +15.71337, +16.69042, +16.69042, +16.69042, +16.69042, +16.69042},  -0.225,  +0.034,   1.892, 0},
	{"mod3_simple(3)",        4, 151552,   0, {  -4.46661,  -4.46661,  -4.46661,  -4.46661,  -4.46661,  -4.43986,  -4.36261,  -4.31439,  -4.23851,  -4.17062,  -4.06319,  -3.91735,  -3.79765,  -3.64989,  -3.43468, -3.221, -2.973, -2.808, -2.672, -2.558, -2.459, -2.368, -2.291, -2.216, -2.145, -2.078, -2.012, -1.951, -1.894, -1.837, -1.781, -1.729, -1.674, -1.623, -1.573, -1.523, -1.476, -1.428, -1.384, -1.337, -1.290, -1.244, -1.198, -1.154, -1.110, -1.068, -1.024, -0.979, -0.933, -0.889, -0.847, -0.804, -0.761, -0.716, -0.673, -0.631, -0.588, -0.544, -0.500, -0.457, -0.413, -0.370, -0.326, -0.282, -0.237, -0.194, -0.149, -0.105, -0.058, -0.012, +0.036, +0.084, +0.133, +0.182, +0.231, +0.281, +0.332, +0.384, +0.437, +0.491, +0.545, +0.602, +0.659, +0.716, +0.773, +0.832, +0.894, +0.955, +1.023, +1.089, +1.158, +1.232, +1.304, +1.381, +1.464, +1.548, +1.634, +1.723, +1.823, +1.924, +2.034, +2.143, +2.264, +2.386, +2.533, +2.690, +2.855, +3.035, +3.252, +3.503, +3.808, +4.182, +4.721, +5.635,  +6.52339,  +7.67462,  +8.57063,  +9.62393, +10.70582, +11.30760, +11.83209, +12.59997, +13.39023, +13.52200, +13.56347, +13.56347, +13.56347, +13.56347, +13.56347},  -0.237,  +0.025,   1.891, 0},
	{"mod3_simple(3)",        5, 151552,   0, {  -4.38111,  -4.38111,  -4.38111,  -4.38111,  -4.38111,  -4.37492,  -4.35692,  -4.34143,  -4.26301,  -4.18848,  -4.11490,  -3.97356,  -3.82523,  -3.66280,  -3.43033, -3.215, -2.976, -2.802, -2.669, -2.553, -2.456, -2.369, -2.289, -2.213, -2.142, -2.075, -2.015, -1.954, -1.897, -1.841, -1.787, -1.732, -1.681, -1.630, -1.578, -1.530, -1.483, -1.433, -1.386, -1.340, -1.295, -1.250, -1.205, -1.160, -1.115, -1.071, -1.027, -0.985, -0.942, -0.897, -0.853, -0.811, -0.767, -0.725, -0.680, -0.638, -0.595, -0.552, -0.510, -0.467, -0.423, -0.379, -0.335, -0.289, -0.243, -0.197, -0.153, -0.108, -0.061, -0.012, +0.035, +0.082, +0.130, +0.179, +0.229, +0.278, +0.331, +0.382, +0.433, +0.485, +0.538, +0.594, +0.653, +0.711, +0.769, +0.829, +0.890, +0.955, +1.019, +1.082, +1.151, +1.224, +1.302, +1.379, +1.456, +1.536, +1.624, +1.715, +1.809, +1.909, +2.017, +2.124, +2.242, +2.370, +2.513, +2.670, +2.843, +3.035, +3.252, +3.498, +3.807, +4.190, +4.723, +5.538,  +6.39041,  +7.64933,  +8.45267,  +9.34799, +10.30905, +11.31390, +11.94763, +12.93918, +13.59434, +13.95188, +14.07273, +14.07273, +14.07273, +14.07273, +14.07273},  -0.243,  +0.018,   1.885, 0},
	{"mod3_simple(3)",        6, 151552,   0, {  -4.54021,  -4.54021,  -4.54021,  -4.54021,  -4.54021,  -4.51167,  -4.42859,  -4.36676,  -4.23597,  -4.14366,  -4.06627,  -3.91897,  -3.79141,  -3.64523,  -3.41940, -3.215, -2.985, -2.814, -2.681, -2.569, -2.470, -2.381, -2.297, -2.218, -2.147, -2.079, -2.013, -1.953, -1.892, -1.837, -1.782, -1.728, -1.676, -1.626, -1.576, -1.526, -1.479, -1.429, -1.384, -1.338, -1.294, -1.247, -1.202, -1.157, -1.113, -1.069, -1.026, -0.983, -0.940, -0.898, -0.855, -0.811, -0.765, -0.720, -0.676, -0.633, -0.590, -0.547, -0.503, -0.460, -0.418, -0.373, -0.329, -0.285, -0.243, -0.199, -0.152, -0.106, -0.060, -0.015, +0.033, +0.079, +0.127, +0.176, +0.224, +0.274, +0.323, +0.374, +0.429, +0.482, +0.536, +0.592, +0.647, +0.704, +0.762, +0.822, +0.885, +0.948, +1.012, +1.080, +1.150, +1.220, +1.289, +1.370, +1.446, +1.532, +1.619, +1.709, +1.803, +1.902, +2.009, +2.122, +2.243, +2.375, +2.522, +2.675, +2.845, +3.033, +3.240, +3.496, +3.806, +4.186, +4.693, +5.599,  +6.42571,  +7.56056,  +8.48594,  +9.30813, +10.42662, +11.28321, +12.09558, +12.27924, +12.66184, +14.16852, +14.68986, +14.68986, +14.68986, +14.68986, +14.68986},  -0.243,  +0.017,   1.884, 0},
	{"mod3_simple(3)",        7, 151552,   0, {  -4.54967,  -4.54967,  -4.54967,  -4.54967,  -4.54967,  -4.48517,  -4.29920,  -4.26292,  -4.17976,  -4.13309,  -4.04816,  -3.90367,  -3.79310,  -3.64173,  -3.42166, -3.223, -2.989, -2.816, -2.683, -2.570, -2.468, -2.383, -2.300, -2.222, -2.153, -2.084, -2.021, -1.961, -1.901, -1.842, -1.788, -1.733, -1.681, -1.630, -1.579, -1.528, -1.479, -1.432, -1.386, -1.341, -1.295, -1.248, -1.205, -1.162, -1.117, -1.074, -1.032, -0.989, -0.946, -0.903, -0.859, -0.816, -0.775, -0.732, -0.688, -0.643, -0.601, -0.559, -0.517, -0.474, -0.430, -0.386, -0.341, -0.295, -0.250, -0.206, -0.161, -0.116, -0.071, -0.026, +0.022, +0.070, +0.117, +0.169, +0.216, +0.267, +0.317, +0.366, +0.416, +0.471, +0.525, +0.583, +0.642, +0.698, +0.756, +0.817, +0.880, +0.944, +1.009, +1.076, +1.144, +1.216, +1.291, +1.365, +1.448, +1.531, +1.618, +1.705, +1.799, +1.896, +2.001, +2.116, +2.236, +2.358, +2.502, +2.655, +2.821, +3.012, +3.218, +3.465, +3.771, +4.172, +4.705, +5.616,  +6.45088,  +7.43827,  +8.24888,  +9.05710, +10.47335, +11.13699, +12.02276, +12.82711, +13.06023, +13.11114, +13.12758, +13.12758, +13.12758, +13.12758, +13.12758},  -0.250,  +0.009,   1.881, 0},
	{"mod3_simple(3)",        8, 151552,   0, {  -4.48307,  -4.48307,  -4.48307,  -4.48307,  -4.48307,  -4.48291,  -4.47976,  -4.30254,  -4.22201,  -4.15238,  -4.07345,  -3.90674,  -3.78635,  -3.65230,  -3.43011, -3.236, -2.992, -2.824, -2.690, -2.574, -2.477, -2.383, -2.299, -2.226, -2.153, -2.087, -2.022, -1.959, -1.898, -1.841, -1.788, -1.736, -1.683, -1.632, -1.582, -1.535, -1.488, -1.440, -1.394, -1.347, -1.300, -1.256, -1.209, -1.167, -1.122, -1.077, -1.032, -0.988, -0.945, -0.904, -0.861, -0.816, -0.770, -0.724, -0.680, -0.637, -0.597, -0.552, -0.510, -0.467, -0.424, -0.381, -0.337, -0.291, -0.247, -0.203, -0.157, -0.113, -0.067, -0.021, +0.024, +0.071, +0.119, +0.168, +0.219, +0.269, +0.318, +0.367, +0.419, +0.475, +0.529, +0.584, +0.639, +0.696, +0.756, +0.818, +0.878, +0.942, +1.007, +1.074, +1.142, +1.212, +1.288, +1.369, +1.447, +1.532, +1.616, +1.702, +1.795, +1.894, +1.998, +2.112, +2.231, +2.361, +2.504, +2.654, +2.832, +3.022, +3.231, +3.477, +3.779, +4.164, +4.695, +5.566,  +6.43960,  +7.62303,  +8.33809,  +9.03208, +10.45459, +11.42715, +12.56919, +13.44862, +13.99047, +14.17902, +14.24184, +14.24184, +14.24184, +14.24184, +14.24184},  -0.247,  +0.010,   1.883, 0},
	{"mod3_simple(3)",       12, 151552,   0, {  -4.52223,  -4.52223,  -4.52223,  -4.52223,  -4.52223,  -4.47146,  -4.32496,  -4.30273,  -4.22333,  -4.15849,  -4.07763,  -3.93629,  -3.81940,  -3.65974,  -3.43807, -3.229, -2.996, -2.822, -2.689, -2.574, -2.479, -2.390, -2.307, -2.233, -2.160, -2.092, -2.029, -1.967, -1.909, -1.853, -1.796, -1.740, -1.688, -1.638, -1.591, -1.540, -1.495, -1.447, -1.401, -1.354, -1.307, -1.262, -1.217, -1.171, -1.126, -1.082, -1.038, -0.995, -0.954, -0.910, -0.867, -0.825, -0.780, -0.738, -0.696, -0.653, -0.608, -0.564, -0.522, -0.479, -0.436, -0.392, -0.347, -0.301, -0.256, -0.211, -0.165, -0.121, -0.076, -0.029, +0.019, +0.067, +0.116, +0.165, +0.215, +0.264, +0.314, +0.366, +0.420, +0.471, +0.525, +0.582, +0.639, +0.697, +0.755, +0.815, +0.874, +0.939, +1.004, +1.070, +1.140, +1.208, +1.281, +1.359, +1.442, +1.522, +1.608, +1.701, +1.797, +1.897, +2.006, +2.112, +2.231, +2.367, +2.508, +2.660, +2.836, +3.017, +3.234, +3.496, +3.798, +4.173, +4.687, +5.565,  +6.39033,  +7.51971,  +8.41664,  +9.29353, +10.28292, +11.51621, +12.01381, +13.16512, +13.55774, +13.69487, +13.74225, +13.74225, +13.74225, +13.74225, +13.74225},  -0.256,  +0.005,   1.885, 0},
	{"mod3_simple(3)",       16, 151552,   0, {  -4.71449,  -4.71449,  -4.71449,  -4.71449,  -4.71449,  -4.64058,  -4.42598,  -4.30356,  -4.23570,  -4.13003,  -4.06877,  -3.93141,  -3.81592,  -3.66383,  -3.43379, -3.232, -2.988, -2.820, -2.693, -2.583, -2.490, -2.398, -2.317, -2.234, -2.159, -2.091, -2.028, -1.965, -1.905, -1.848, -1.795, -1.743, -1.689, -1.639, -1.587, -1.539, -1.490, -1.441, -1.393, -1.347, -1.300, -1.255, -1.210, -1.165, -1.121, -1.079, -1.035, -0.993, -0.949, -0.906, -0.864, -0.821, -0.779, -0.735, -0.692, -0.651, -0.607, -0.564, -0.521, -0.476, -0.433, -0.388, -0.345, -0.300, -0.254, -0.210, -0.164, -0.121, -0.073, -0.027, +0.017, +0.063, +0.108, +0.158, +0.210, +0.261, +0.315, +0.367, +0.418, +0.469, +0.523, +0.578, +0.632, +0.690, +0.748, +0.808, +0.873, +0.935, +0.999, +1.065, +1.136, +1.208, +1.284, +1.360, +1.437, +1.517, +1.604, +1.692, +1.787, +1.886, +1.993, +2.104, +2.225, +2.360, +2.502, +2.653, +2.817, +3.005, +3.218, +3.463, +3.756, +4.146, +4.708, +5.604,  +6.47826,  +7.67316,  +8.51625,  +9.24531, +10.08999, +10.76502, +11.24849, +11.75289, +12.12903, +13.46728, +13.93025, +13.93025, +13.93025, +13.93025, +13.93025},  -0.254,  +0.003,   1.883, 0},
	{"mod3_simple(3)",       32, 151552,   0, {  -4.36654,  -4.36654,  -4.36654,  -4.36654,  -4.36654,  -4.36116,  -4.34519,  -4.30919,  -4.26971,  -4.17228,  -4.06126,  -3.89183,  -3.79659,  -3.66244,  -3.45023, -3.246, -2.995, -2.824, -2.690, -2.575, -2.475, -2.386, -2.304, -2.230, -2.159, -2.093, -2.030, -1.969, -1.910, -1.851, -1.796, -1.740, -1.687, -1.634, -1.584, -1.536, -1.487, -1.442, -1.396, -1.350, -1.306, -1.258, -1.214, -1.170, -1.125, -1.082, -1.036, -0.992, -0.948, -0.905, -0.861, -0.819, -0.775, -0.732, -0.688, -0.646, -0.602, -0.558, -0.515, -0.471, -0.428, -0.384, -0.343, -0.296, -0.251, -0.206, -0.161, -0.118, -0.070, -0.023, +0.023, +0.071, +0.120, +0.168, +0.217, +0.267, +0.318, +0.372, +0.424, +0.475, +0.531, +0.587, +0.644, +0.700, +0.758, +0.816, +0.877, +0.936, +1.000, +1.066, +1.135, +1.208, +1.286, +1.363, +1.442, +1.523, +1.606, +1.699, +1.793, +1.896, +2.000, +2.112, +2.224, +2.354, +2.496, +2.653, +2.820, +3.013, +3.226, +3.474, +3.786, +4.176, +4.703, +5.586,  +6.40336,  +7.52439,  +8.37786,  +9.24580, +10.36638, +10.93809, +11.87479, +12.53526, +12.64113, +13.34277, +13.58615, +13.58615, +13.58615, +13.58615, +13.58615},  -0.251,  +0.006,   1.883, 0},
	{"mod3_simple(3)",       64, 151552,   0, {  -4.48769,  -4.48769,  -4.48769,  -4.48769,  -4.48769,  -4.47188,  -4.42482,  -4.31295,  -4.25419,  -4.15116,  -4.07218,  -3.92576,  -3.80703,  -3.67515,  -3.44539, -3.250, -2.981, -2.818, -2.686, -2.574, -2.473, -2.384, -2.303, -2.227, -2.157, -2.089, -2.023, -1.962, -1.902, -1.845, -1.791, -1.737, -1.684, -1.634, -1.586, -1.536, -1.487, -1.440, -1.393, -1.346, -1.299, -1.255, -1.209, -1.166, -1.121, -1.077, -1.033, -0.990, -0.945, -0.902, -0.859, -0.816, -0.773, -0.730, -0.686, -0.644, -0.602, -0.559, -0.516, -0.474, -0.431, -0.387, -0.344, -0.299, -0.254, -0.211, -0.165, -0.118, -0.070, -0.026, +0.021, +0.066, +0.113, +0.163, +0.214, +0.264, +0.311, +0.363, +0.413, +0.467, +0.521, +0.577, +0.633, +0.690, +0.748, +0.808, +0.871, +0.933, +0.999, +1.067, +1.138, +1.209, +1.281, +1.357, +1.435, +1.517, +1.607, +1.696, +1.794, +1.893, +1.995, +2.108, +2.225, +2.349, +2.492, +2.639, +2.805, +2.998, +3.212, +3.463, +3.765, +4.173, +4.673, +5.569,  +6.44693,  +7.54839,  +8.48106,  +9.17603, +10.20636, +10.88370, +11.67174, +13.18508, +13.62181, +16.10372, +16.96478, +16.96478, +16.96478, +16.96478, +16.96478},  -0.254,  +0.004,   1.879, 0},
	{"mod3_simple(3)",      128, 151552,   0, {  -4.45938,  -4.45938,  -4.45938,  -4.45938,  -4.45938,  -4.45557,  -4.44332,  -4.34848,  -4.23761,  -4.16281,  -4.06130,  -3.90914,  -3.80402,  -3.65413,  -3.43317, -3.234, -2.992, -2.821, -2.687, -2.572, -2.471, -2.379, -2.301, -2.226, -2.159, -2.092, -2.028, -1.966, -1.908, -1.852, -1.798, -1.744, -1.694, -1.642, -1.592, -1.544, -1.495, -1.446, -1.398, -1.350, -1.304, -1.257, -1.211, -1.167, -1.122, -1.076, -1.033, -0.991, -0.949, -0.906, -0.865, -0.823, -0.780, -0.737, -0.696, -0.655, -0.613, -0.568, -0.525, -0.482, -0.439, -0.396, -0.351, -0.305, -0.261, -0.217, -0.173, -0.129, -0.085, -0.039, +0.008, +0.056, +0.106, +0.155, +0.204, +0.254, +0.305, +0.357, +0.408, +0.464, +0.516, +0.569, +0.623, +0.680, +0.739, +0.800, +0.861, +0.927, +0.991, +1.057, +1.125, +1.196, +1.271, +1.348, +1.430, +1.513, +1.603, +1.694, +1.787, +1.884, +1.992, +2.102, +2.224, +2.353, +2.496, +2.655, +2.816, +3.012, +3.223, +3.482, +3.780, +4.150, +4.678, +5.521,  +6.40255,  +7.48676,  +8.33222,  +9.11498, +10.12184, +11.01530, +12.06777, +12.57281, +12.85725, +13.00704, +13.05783, +13.05783, +13.05783, +13.05783, +13.05783},  -0.261,  -0.001,   1.878, 0},

	//{"mod3_simple(4)",        4, 151552,   0, {  -5.72708,  -5.72708,  -5.72708,  -5.72708,  -5.72708,  -5.70781,  -5.64915,  -5.41160,  -5.26185,  -5.16671,  -5.00181,  -4.76213,  -4.58979,  -4.35350,  -4.01403, -3.694, -3.343, -3.110, -2.932, -2.780, -2.651, -2.531, -2.433, -2.334, -2.246, -2.162, -2.082, -2.008, -1.934, -1.864, -1.798, -1.732, -1.668, -1.607, -1.546, -1.489, -1.430, -1.376, -1.322, -1.269, -1.213, -1.161, -1.109, -1.057, -1.007, -0.959, -0.909, -0.859, -0.812, -0.761, -0.714, -0.666, -0.619, -0.571, -0.521, -0.471, -0.424, -0.377, -0.330, -0.280, -0.233, -0.187, -0.139, -0.091, -0.041, +0.007, +0.053, +0.102, +0.151, +0.203, +0.252, +0.304, +0.354, +0.404, +0.455, +0.506, +0.557, +0.611, +0.665, +0.722, +0.778, +0.835, +0.893, +0.953, +1.014, +1.074, +1.139, +1.202, +1.268, +1.332, +1.402, +1.474, +1.547, +1.623, +1.703, +1.784, +1.869, +1.957, +2.053, +2.149, +2.254, +2.361, +2.480, +2.604, +2.739, +2.886, +3.039, +3.222, +3.420, +3.640, +3.907, +4.269, +4.733, +5.528,  +6.27094,  +7.44084,  +8.13113,  +8.91167,  +9.75820, +10.30015, +10.87373, +11.59336, +12.59360, +12.64624, +12.66005, +12.66005, +12.66005, +12.66005, +12.66005},  -0.041,  +0.132,   1.975, 0},
	//{"mod3_simple(4)",        5, 151552,   0, {  -6.15061,  -6.15061,  -6.15061,  -6.15061,  -6.15061,  -6.08479,  -5.89368,  -5.73413,  -5.47912,  -5.30872,  -5.11375,  -4.81308,  -4.59323,  -4.37584,  -4.01424, -3.707, -3.371, -3.137, -2.953, -2.801, -2.673, -2.560, -2.454, -2.359, -2.270, -2.183, -2.103, -2.022, -1.945, -1.878, -1.812, -1.747, -1.686, -1.628, -1.568, -1.511, -1.456, -1.399, -1.342, -1.289, -1.237, -1.183, -1.132, -1.080, -1.028, -0.978, -0.927, -0.879, -0.831, -0.781, -0.733, -0.685, -0.637, -0.591, -0.542, -0.497, -0.449, -0.404, -0.358, -0.313, -0.265, -0.219, -0.169, -0.121, -0.074, -0.025, +0.022, +0.070, +0.119, +0.168, +0.219, +0.268, +0.318, +0.371, +0.421, +0.472, +0.523, +0.576, +0.631, +0.687, +0.744, +0.800, +0.858, +0.917, +0.975, +1.036, +1.101, +1.169, +1.235, +1.305, +1.376, +1.445, +1.514, +1.592, +1.669, +1.751, +1.837, +1.926, +2.014, +2.114, +2.214, +2.322, +2.442, +2.565, +2.696, +2.838, +2.995, +3.174, +3.376, +3.604, +3.871, +4.213, +4.695, +5.469,  +6.16142,  +7.10125,  +7.87655,  +8.63337,  +9.62544, +10.22853, +10.66473, +11.44273, +11.70256, +12.15842, +12.31607, +12.31607, +12.31607, +12.31607, +12.31607},  -0.074,  +0.102,   1.963, 0},
	//{"mod3_simple(4)",        6, 151552,   0, {  -6.11936,  -6.11936,  -6.11936,  -6.11936,  -6.11936,  -6.09610,  -6.02830,  -5.83923,  -5.42435,  -5.23648,  -5.12986,  -4.85287,  -4.63304,  -4.38462,  -4.03038, -3.737, -3.368, -3.145, -2.963, -2.809, -2.681, -2.570, -2.465, -2.367, -2.278, -2.196, -2.120, -2.045, -1.975, -1.903, -1.835, -1.770, -1.706, -1.646, -1.586, -1.529, -1.471, -1.414, -1.360, -1.308, -1.256, -1.203, -1.152, -1.101, -1.049, -0.999, -0.947, -0.897, -0.850, -0.802, -0.753, -0.705, -0.656, -0.609, -0.564, -0.517, -0.470, -0.423, -0.376, -0.330, -0.282, -0.236, -0.189, -0.142, -0.096, -0.047, -0.000, +0.049, +0.097, +0.147, +0.198, +0.250, +0.300, +0.352, +0.403, +0.452, +0.504, +0.557, +0.612, +0.667, +0.724, +0.781, +0.834, +0.893, +0.951, +1.011, +1.075, +1.138, +1.205, +1.272, +1.341, +1.411, +1.484, +1.560, +1.638, +1.722, +1.807, +1.894, +1.984, +2.079, +2.178, +2.289, +2.410, +2.531, +2.658, +2.803, +2.957, +3.131, +3.323, +3.552, +3.841, +4.202, +4.663, +5.435,  +6.17239,  +7.13987,  +7.91567,  +8.58988,  +9.49586, +10.14412, +10.67190, +11.53017, +12.81536, +13.42952, +13.63669, +13.63669, +13.63669, +13.63669, +13.63669},  -0.096,  +0.079,   1.958, 0},
	//{"mod3_simple(4)",        7, 151552,   0, {  -6.04557,  -6.04557,  -6.04557,  -6.04557,  -6.04557,  -6.01758,  -5.93538,  -5.78757,  -5.44437,  -5.28427,  -5.12924,  -4.85337,  -4.63790,  -4.39603,  -4.04836, -3.729, -3.396, -3.171, -2.985, -2.831, -2.701, -2.589, -2.482, -2.384, -2.297, -2.212, -2.131, -2.052, -1.980, -1.912, -1.845, -1.776, -1.714, -1.654, -1.595, -1.539, -1.481, -1.424, -1.370, -1.316, -1.263, -1.213, -1.162, -1.112, -1.062, -1.011, -0.962, -0.914, -0.867, -0.819, -0.771, -0.724, -0.676, -0.628, -0.582, -0.534, -0.487, -0.439, -0.393, -0.346, -0.298, -0.251, -0.204, -0.158, -0.108, -0.060, -0.011, +0.037, +0.084, +0.131, +0.179, +0.228, +0.278, +0.329, +0.379, +0.432, +0.486, +0.538, +0.593, +0.648, +0.705, +0.761, +0.821, +0.877, +0.935, +0.998, +1.062, +1.125, +1.190, +1.253, +1.324, +1.395, +1.470, +1.547, +1.620, +1.704, +1.789, +1.873, +1.967, +2.065, +2.164, +2.275, +2.387, +2.509, +2.637, +2.779, +2.935, +3.108, +3.319, +3.555, +3.832, +4.172, +4.643, +5.435,  +6.16065,  +7.09968,  +7.80158,  +8.41458,  +9.11227,  +9.73448, +10.57985, +13.03833, +13.47150, +13.55401, +13.58108, +13.58108, +13.58108, +13.58108, +13.58108},  -0.108,  +0.064,   1.956, 0},
	//{"mod3_simple(4)",        8, 151552,   0, {  -6.28131,  -6.28131,  -6.28131,  -6.28131,  -6.28131,  -6.17733,  -5.87636,  -5.73654,  -5.47057,  -5.30680,  -5.11393,  -4.84984,  -4.66300,  -4.42014,  -4.05307, -3.749, -3.393, -3.162, -2.985, -2.834, -2.707, -2.589, -2.487, -2.393, -2.304, -2.217, -2.139, -2.066, -1.998, -1.926, -1.862, -1.795, -1.732, -1.672, -1.612, -1.551, -1.495, -1.439, -1.383, -1.326, -1.274, -1.220, -1.167, -1.117, -1.066, -1.016, -0.965, -0.915, -0.867, -0.818, -0.770, -0.722, -0.678, -0.632, -0.586, -0.540, -0.495, -0.449, -0.404, -0.356, -0.309, -0.262, -0.215, -0.169, -0.121, -0.072, -0.027, +0.023, +0.071, +0.119, +0.170, +0.217, +0.268, +0.317, +0.368, +0.420, +0.470, +0.523, +0.579, +0.635, +0.691, +0.749, +0.806, +0.868, +0.928, +0.989, +1.051, +1.118, +1.184, +1.253, +1.323, +1.396, +1.471, +1.546, +1.622, +1.704, +1.790, +1.879, +1.972, +2.067, +2.164, +2.271, +2.388, +2.514, +2.641, +2.784, +2.942, +3.124, +3.323, +3.558, +3.831, +4.172, +4.653, +5.443,  +6.16502,  +7.10904,  +7.77899,  +8.42995,  +9.07433, +10.15066, +10.72599, +12.28084, +13.44345, +15.13669, +15.72006, +15.72006, +15.72006, +15.72006, +15.72006},  -0.121,  +0.058,   1.961, 0},
	//{"mod3_simple(4)",       10, 151552,   0, {  -6.11742,  -6.11742,  -6.11742,  -6.11742,  -6.11742,  -6.08958,  -6.00888,  -5.89505,  -5.56835,  -5.30514,  -5.08134,  -4.83919,  -4.63720,  -4.42058,  -4.07695, -3.761, -3.409, -3.176, -2.995, -2.853, -2.725, -2.615, -2.508, -2.414, -2.322, -2.238, -2.161, -2.084, -2.011, -1.943, -1.876, -1.812, -1.749, -1.686, -1.627, -1.570, -1.513, -1.457, -1.403, -1.348, -1.296, -1.246, -1.192, -1.138, -1.086, -1.038, -0.988, -0.940, -0.892, -0.844, -0.796, -0.749, -0.700, -0.650, -0.603, -0.554, -0.505, -0.459, -0.412, -0.366, -0.320, -0.273, -0.225, -0.177, -0.127, -0.079, -0.030, +0.017, +0.066, +0.116, +0.165, +0.215, +0.264, +0.315, +0.368, +0.420, +0.475, +0.529, +0.583, +0.638, +0.694, +0.750, +0.807, +0.863, +0.919, +0.980, +1.039, +1.102, +1.165, +1.233, +1.299, +1.373, +1.442, +1.517, +1.597, +1.679, +1.764, +1.853, +1.943, +2.039, +2.144, +2.250, +2.365, +2.479, +2.613, +2.758, +2.922, +3.098, +3.300, +3.543, +3.816, +4.146, +4.621, +5.390,  +6.14451,  +7.07662,  +7.80334,  +8.51637,  +9.26534,  +9.81812, +11.01576, +12.03447, +13.33381, +14.85464, +15.37757, +15.37757, +15.37757, +15.37757, +15.37757},  -0.127,  +0.042,   1.959, 0},
	//{"mod3_simple(4)",       12, 151552,   0, {  -5.89177,  -5.89177,  -5.89177,  -5.89177,  -5.89177,  -5.86617,  -5.79184,  -5.73869,  -5.51035,  -5.30675,  -5.14733,  -4.84258,  -4.61659,  -4.40494,  -4.05424, -3.769, -3.420, -3.175, -2.994, -2.847, -2.724, -2.610, -2.506, -2.413, -2.323, -2.239, -2.166, -2.087, -2.018, -1.950, -1.883, -1.818, -1.754, -1.691, -1.633, -1.576, -1.521, -1.465, -1.409, -1.356, -1.304, -1.254, -1.201, -1.152, -1.102, -1.050, -1.001, -0.953, -0.903, -0.856, -0.805, -0.757, -0.709, -0.660, -0.612, -0.567, -0.521, -0.471, -0.424, -0.375, -0.328, -0.279, -0.229, -0.182, -0.135, -0.087, -0.037, +0.011, +0.060, +0.110, +0.159, +0.209, +0.260, +0.310, +0.362, +0.412, +0.464, +0.520, +0.572, +0.624, +0.679, +0.737, +0.793, +0.851, +0.910, +0.972, +1.035, +1.097, +1.164, +1.231, +1.300, +1.372, +1.443, +1.519, +1.599, +1.679, +1.764, +1.852, +1.946, +2.042, +2.142, +2.253, +2.370, +2.490, +2.625, +2.768, +2.926, +3.103, +3.314, +3.540, +3.801, +4.133, +4.611, +5.377,  +6.09055,  +7.00647,  +7.77386,  +8.46447,  +9.40471, +10.40274, +10.90739, +12.18518, +12.24437, +12.29711, +12.31530, +12.31530, +12.31530, +12.31530, +12.31530},  -0.135,  +0.036,   1.959, 0},
	//{"mod3_simple(4)",       14, 151552,   0, {  -5.83568,  -5.83568,  -5.83568,  -5.83568,  -5.83568,  -5.79930,  -5.69429,  -5.64776,  -5.39359,  -5.28873,  -5.15144,  -4.90112,  -4.69486,  -4.46719,  -4.07319, -3.764, -3.416, -3.193, -3.021, -2.871, -2.743, -2.630, -2.522, -2.425, -2.333, -2.249, -2.171, -2.095, -2.019, -1.948, -1.882, -1.819, -1.757, -1.697, -1.637, -1.581, -1.524, -1.470, -1.416, -1.362, -1.310, -1.261, -1.207, -1.158, -1.108, -1.057, -1.008, -0.962, -0.912, -0.864, -0.816, -0.768, -0.721, -0.675, -0.628, -0.582, -0.534, -0.489, -0.441, -0.393, -0.345, -0.298, -0.250, -0.203, -0.155, -0.106, -0.055, -0.006, +0.042, +0.092, +0.140, +0.191, +0.243, +0.292, +0.346, +0.399, +0.455, +0.508, +0.561, +0.617, +0.669, +0.727, +0.782, +0.841, +0.902, +0.965, +1.030, +1.094, +1.158, +1.225, +1.298, +1.368, +1.441, +1.518, +1.593, +1.677, +1.756, +1.846, +1.941, +2.037, +2.140, +2.246, +2.360, +2.472, +2.603, +2.749, +2.911, +3.087, +3.283, +3.512, +3.795, +4.133, +4.594, +5.379,  +6.12817,  +7.05752,  +7.80303,  +8.56783,  +9.50087, +10.35975, +11.29811, +11.92237, +12.02294, +12.69042, +12.92169, +12.92169, +12.92169, +12.92169, +12.92169},  -0.155,  +0.026,   1.960, 0},
	//{"mod3_simple(4)",       16, 151552,   0, {  -5.77454,  -5.77454,  -5.77454,  -5.77454,  -5.77454,  -5.77418,  -5.77284,  -5.74110,  -5.41336,  -5.24306,  -5.05348,  -4.83986,  -4.65692,  -4.43962,  -4.08765, -3.775, -3.430, -3.198, -3.013, -2.860, -2.734, -2.617, -2.511, -2.414, -2.328, -2.247, -2.170, -2.096, -2.024, -1.954, -1.886, -1.821, -1.757, -1.694, -1.634, -1.574, -1.519, -1.465, -1.411, -1.358, -1.304, -1.253, -1.200, -1.150, -1.102, -1.051, -1.002, -0.954, -0.907, -0.858, -0.810, -0.763, -0.716, -0.669, -0.622, -0.573, -0.526, -0.480, -0.434, -0.388, -0.341, -0.294, -0.247, -0.200, -0.153, -0.104, -0.059, -0.009, +0.040, +0.088, +0.137, +0.188, +0.238, +0.289, +0.340, +0.390, +0.442, +0.496, +0.551, +0.609, +0.664, +0.723, +0.780, +0.838, +0.899, +0.960, +1.022, +1.086, +1.152, +1.221, +1.290, +1.361, +1.434, +1.511, +1.586, +1.667, +1.752, +1.841, +1.931, +2.026, +2.132, +2.241, +2.349, +2.471, +2.608, +2.748, +2.903, +3.084, +3.281, +3.505, +3.777, +4.127, +4.591, +5.361,  +6.11941,  +7.08393,  +7.73342,  +8.52069,  +9.40274, +10.00793, +10.40993, +10.81748, +11.04119, +11.12954, +11.15988, +11.15988, +11.15988, +11.15988, +11.15988},  -0.153,  +0.024,   1.955, 0},
	//{"mod3_simple(4)",       24, 151552,   0, {  -5.59297,  -5.59297,  -5.59297,  -5.59297,  -5.59297,  -5.56482,  -5.48349,  -5.43722,  -5.36133,  -5.24000,  -5.04842,  -4.86121,  -4.66453,  -4.41843,  -4.07650, -3.768, -3.429, -3.187, -3.011, -2.860, -2.733, -2.620, -2.517, -2.426, -2.337, -2.251, -2.169, -2.095, -2.023, -1.957, -1.892, -1.828, -1.768, -1.709, -1.649, -1.591, -1.530, -1.477, -1.424, -1.370, -1.316, -1.264, -1.213, -1.161, -1.114, -1.064, -1.015, -0.964, -0.916, -0.868, -0.820, -0.772, -0.725, -0.679, -0.631, -0.582, -0.535, -0.488, -0.440, -0.393, -0.344, -0.297, -0.248, -0.200, -0.155, -0.107, -0.058, -0.012, +0.039, +0.085, +0.133, +0.180, +0.228, +0.277, +0.329, +0.380, +0.432, +0.485, +0.540, +0.593, +0.652, +0.711, +0.768, +0.823, +0.886, +0.945, +1.006, +1.068, +1.136, +1.200, +1.273, +1.343, +1.418, +1.495, +1.577, +1.656, +1.740, +1.828, +1.920, +2.015, +2.119, +2.224, +2.336, +2.459, +2.595, +2.734, +2.900, +3.074, +3.272, +3.506, +3.775, +4.119, +4.578, +5.334,  +6.04897,  +7.06546,  +7.71378,  +8.32272,  +9.34479, +10.02875, +10.56386, +11.13208, +11.72937, +11.77921, +11.79340, +11.79340, +11.79340, +11.79340, +11.79340},  -0.155,  +0.016,   1.951, 0},
	//{"mod3_simple(4)",       32, 151552,   0, {  -6.01366,  -6.01366,  -6.01366,  -6.01366,  -6.01366,  -6.01130,  -6.00260,  -5.86329,  -5.54109,  -5.38427,  -5.12894,  -4.88650,  -4.66520,  -4.41786,  -4.07422, -3.756, -3.423, -3.184, -3.011, -2.861, -2.737, -2.626, -2.525, -2.432, -2.346, -2.263, -2.184, -2.110, -2.036, -1.966, -1.898, -1.834, -1.772, -1.711, -1.651, -1.594, -1.536, -1.480, -1.427, -1.373, -1.320, -1.268, -1.218, -1.168, -1.119, -1.069, -1.019, -0.971, -0.922, -0.872, -0.825, -0.778, -0.732, -0.684, -0.640, -0.593, -0.544, -0.497, -0.450, -0.403, -0.356, -0.308, -0.262, -0.215, -0.166, -0.120, -0.072, -0.023, +0.026, +0.078, +0.127, +0.179, +0.230, +0.281, +0.332, +0.385, +0.439, +0.491, +0.544, +0.600, +0.656, +0.713, +0.771, +0.831, +0.889, +0.951, +1.013, +1.077, +1.143, +1.208, +1.278, +1.347, +1.418, +1.494, +1.570, +1.654, +1.741, +1.826, +1.920, +2.015, +2.121, +2.228, +2.341, +2.463, +2.589, +2.733, +2.889, +3.066, +3.263, +3.496, +3.771, +4.113, +4.578, +5.341,  +6.07869,  +6.98023,  +7.71123,  +8.46823,  +9.34712,  +9.87434, +10.55344, +11.09013, +11.86511, +12.10256, +12.18191, +12.18191, +12.18191, +12.18191, +12.18191},  -0.166,  +0.012,   1.953, 0},
	//{"mod3_simple(4)",       48, 151552,   0, {  -5.83746,  -5.83746,  -5.83746,  -5.83746,  -5.83746,  -5.82789,  -5.79961,  -5.74374,  -5.48681,  -5.35620,  -5.17410,  -4.87968,  -4.70022,  -4.48172,  -4.11303, -3.800, -3.438, -3.210, -3.027, -2.886, -2.758, -2.642, -2.540, -2.445, -2.352, -2.267, -2.188, -2.110, -2.036, -1.967, -1.900, -1.833, -1.769, -1.707, -1.645, -1.587, -1.531, -1.475, -1.422, -1.368, -1.315, -1.264, -1.210, -1.158, -1.111, -1.061, -1.014, -0.964, -0.916, -0.868, -0.820, -0.773, -0.724, -0.678, -0.628, -0.582, -0.534, -0.488, -0.441, -0.394, -0.347, -0.301, -0.254, -0.208, -0.158, -0.110, -0.062, -0.015, +0.034, +0.086, +0.135, +0.183, +0.233, +0.285, +0.337, +0.391, +0.442, +0.493, +0.546, +0.601, +0.655, +0.710, +0.765, +0.822, +0.884, +0.946, +1.009, +1.071, +1.137, +1.203, +1.270, +1.339, +1.409, +1.485, +1.562, +1.642, +1.730, +1.816, +1.907, +2.002, +2.100, +2.211, +2.326, +2.449, +2.574, +2.719, +2.879, +3.048, +3.253, +3.497, +3.766, +4.114, +4.593, +5.366,  +6.12955,  +7.10735,  +7.89013,  +8.41190,  +9.20389, +10.11036, +11.40093, +11.78623, +12.40329, +12.53510, +12.57791, +12.57791, +12.57791, +12.57791, +12.57791},  -0.158,  +0.011,   1.956, 0},
	{"mod3_simple(4)",       64, 151552,   0, {  -5.96652,  -5.96652,  -5.96652,  -5.96652,  -5.96652,  -5.92538,  -5.80610,  -5.75096,  -5.35834,  -5.20942,  -5.10316,  -4.88521,  -4.64794,  -4.43739,  -4.07313, -3.775, -3.427, -3.196, -3.017, -2.873, -2.747, -2.634, -2.527, -2.428, -2.339, -2.258, -2.178, -2.105, -2.032, -1.962, -1.894, -1.830, -1.766, -1.704, -1.644, -1.586, -1.528, -1.472, -1.420, -1.368, -1.316, -1.265, -1.214, -1.165, -1.115, -1.066, -1.018, -0.970, -0.922, -0.873, -0.824, -0.779, -0.731, -0.684, -0.638, -0.589, -0.543, -0.495, -0.449, -0.403, -0.355, -0.308, -0.262, -0.217, -0.170, -0.121, -0.075, -0.026, +0.021, +0.070, +0.119, +0.170, +0.217, +0.266, +0.319, +0.372, +0.428, +0.482, +0.535, +0.588, +0.644, +0.702, +0.757, +0.816, +0.873, +0.934, +0.996, +1.059, +1.124, +1.190, +1.258, +1.329, +1.398, +1.474, +1.553, +1.636, +1.718, +1.807, +1.898, +1.994, +2.095, +2.202, +2.313, +2.432, +2.570, +2.721, +2.877, +3.052, +3.256, +3.495, +3.770, +4.108, +4.579, +5.351,  +6.05548,  +7.08673,  +7.74495,  +8.33940,  +9.21334,  +9.86899, +10.51108, +11.15498, +11.51496, +13.22990, +13.82413, +13.82413, +13.82413, +13.82413, +13.82413},  -0.170,  +0.007,   1.949, 0},
	//{"mod3_simple(4)",       96, 151552,   0, {  -5.99934,  -5.99934,  -5.99934,  -5.99934,  -5.99934,  -5.98282,  -5.93496,  -5.86508,  -5.55705,  -5.27902,  -5.06474,  -4.85101,  -4.62401,  -4.39643,  -4.06531, -3.784, -3.437, -3.209, -3.029, -2.875, -2.747, -2.637, -2.535, -2.441, -2.352, -2.263, -2.183, -2.112, -2.042, -1.975, -1.910, -1.844, -1.780, -1.719, -1.660, -1.600, -1.547, -1.489, -1.435, -1.378, -1.328, -1.275, -1.224, -1.174, -1.123, -1.074, -1.025, -0.977, -0.930, -0.882, -0.835, -0.788, -0.739, -0.691, -0.641, -0.596, -0.548, -0.502, -0.456, -0.409, -0.362, -0.314, -0.268, -0.222, -0.176, -0.128, -0.078, -0.030, +0.019, +0.067, +0.116, +0.166, +0.217, +0.268, +0.319, +0.370, +0.422, +0.476, +0.530, +0.586, +0.642, +0.700, +0.757, +0.818, +0.875, +0.935, +0.995, +1.059, +1.126, +1.195, +1.263, +1.333, +1.406, +1.481, +1.560, +1.645, +1.726, +1.815, +1.903, +2.003, +2.104, +2.210, +2.327, +2.447, +2.581, +2.723, +2.885, +3.054, +3.254, +3.482, +3.752, +4.116, +4.580, +5.334,  +6.08190,  +7.00393,  +7.69266,  +8.40035,  +9.50209, +10.01958, +10.91276, +11.88012, +12.84838, +12.94232, +12.97130, +12.97130, +12.97130, +12.97130, +12.97130},  -0.176,  +0.003,   1.953, 0},
	//{"mod3_simple(4)",      128, 151552,   0, {  -5.90345,  -5.90345,  -5.90345,  -5.90345,  -5.90345,  -5.88815,  -5.84143,  -5.63953,  -5.33535,  -5.20889,  -5.06231,  -4.83798,  -4.65361,  -4.41911,  -4.08642, -3.785, -3.432, -3.207, -3.025, -2.878, -2.745, -2.627, -2.526, -2.433, -2.343, -2.260, -2.183, -2.107, -2.035, -1.968, -1.902, -1.839, -1.776, -1.717, -1.658, -1.599, -1.540, -1.487, -1.434, -1.381, -1.328, -1.276, -1.222, -1.172, -1.122, -1.072, -1.022, -0.972, -0.924, -0.875, -0.830, -0.782, -0.735, -0.687, -0.641, -0.593, -0.547, -0.498, -0.453, -0.407, -0.361, -0.313, -0.266, -0.221, -0.173, -0.126, -0.078, -0.032, +0.015, +0.065, +0.115, +0.166, +0.216, +0.266, +0.321, +0.375, +0.427, +0.480, +0.538, +0.592, +0.645, +0.699, +0.757, +0.815, +0.879, +0.939, +1.000, +1.063, +1.127, +1.193, +1.260, +1.329, +1.403, +1.477, +1.556, +1.639, +1.723, +1.813, +1.902, +1.998, +2.100, +2.208, +2.326, +2.444, +2.578, +2.719, +2.879, +3.050, +3.247, +3.478, +3.752, +4.098, +4.556, +5.326,  +6.06217,  +6.98397,  +7.59339,  +8.30008,  +9.15574,  +9.91557, +10.22843, +11.40177, +12.91695, +13.72078, +13.99286, +13.99286, +13.99286, +13.99286, +13.99286},  -0.173,  +0.003,   1.949, 0},
	//{"mod3_simple(4)",      192, 151552,   0, {  -5.81754,  -5.81754,  -5.81754,  -5.81754,  -5.81754,  -5.79748,  -5.73949,  -5.70699,  -5.48550,  -5.30951,  -5.13155,  -4.87477,  -4.65719,  -4.42193,  -4.06678, -3.758, -3.420, -3.202, -3.027, -2.872, -2.745, -2.635, -2.533, -2.440, -2.350, -2.269, -2.189, -2.116, -2.044, -1.974, -1.910, -1.845, -1.780, -1.716, -1.656, -1.599, -1.542, -1.487, -1.431, -1.376, -1.324, -1.273, -1.223, -1.174, -1.125, -1.076, -1.024, -0.976, -0.927, -0.881, -0.834, -0.788, -0.742, -0.695, -0.649, -0.602, -0.556, -0.509, -0.463, -0.415, -0.369, -0.321, -0.274, -0.224, -0.177, -0.128, -0.081, -0.032, +0.016, +0.065, +0.115, +0.164, +0.216, +0.266, +0.317, +0.367, +0.422, +0.476, +0.528, +0.582, +0.637, +0.694, +0.750, +0.807, +0.867, +0.928, +0.990, +1.053, +1.118, +1.183, +1.253, +1.325, +1.397, +1.472, +1.552, +1.637, +1.722, +1.807, +1.903, +2.000, +2.099, +2.207, +2.320, +2.437, +2.572, +2.715, +2.872, +3.044, +3.239, +3.461, +3.739, +4.077, +4.537, +5.291,  +6.01804,  +6.94181,  +7.60780,  +8.28791,  +9.14041,  +9.93880, +10.45838, +11.24946, +11.72350, +13.60562, +14.25700, +14.25700, +14.25700, +14.25700, +14.25700},  -0.177,  -0.002,   1.945, 0},
	//{"mod3_simple(4)",      256, 151552,   0, {  -5.86833,  -5.86833,  -5.86833,  -5.86833,  -5.86833,  -5.82038,  -5.68139,  -5.55620,  -5.34362,  -5.18038,  -5.08353,  -4.86379,  -4.68530,  -4.43754,  -4.07300, -3.782, -3.434, -3.206, -3.031, -2.886, -2.753, -2.635, -2.533, -2.439, -2.352, -2.270, -2.190, -2.116, -2.042, -1.970, -1.903, -1.839, -1.774, -1.712, -1.650, -1.592, -1.536, -1.478, -1.424, -1.370, -1.316, -1.265, -1.214, -1.165, -1.116, -1.067, -1.019, -0.968, -0.919, -0.870, -0.825, -0.777, -0.730, -0.681, -0.634, -0.589, -0.542, -0.495, -0.450, -0.402, -0.354, -0.310, -0.265, -0.218, -0.171, -0.124, -0.076, -0.029, +0.020, +0.069, +0.117, +0.167, +0.218, +0.269, +0.320, +0.373, +0.425, +0.476, +0.530, +0.587, +0.642, +0.698, +0.754, +0.812, +0.872, +0.932, +0.998, +1.060, +1.124, +1.192, +1.260, +1.331, +1.404, +1.481, +1.558, +1.638, +1.724, +1.807, +1.895, +1.995, +2.099, +2.201, +2.315, +2.435, +2.565, +2.705, +2.868, +3.049, +3.243, +3.485, +3.762, +4.093, +4.537, +5.302,  +6.05511,  +6.94247,  +7.76200,  +8.40445,  +9.37117,  +9.94600, +10.41086, +11.70989, +13.19725, +13.66585, +13.82097, +13.82097, +13.82097, +13.82097, +13.82097},  -0.171,  +0.003,   1.947, 0},
	//{"mod3_simple(4)",      384, 151552,   0, {  -6.32470,  -6.32470,  -6.32470,  -6.32470,  -6.32470,  -6.18849,  -5.79535,  -5.70800,  -5.55676,  -5.32511,  -5.16747,  -4.91336,  -4.69048,  -4.42047,  -4.07151, -3.780, -3.437, -3.214, -3.037, -2.891, -2.755, -2.642, -2.535, -2.437, -2.348, -2.266, -2.186, -2.111, -2.039, -1.971, -1.902, -1.839, -1.775, -1.714, -1.656, -1.601, -1.545, -1.490, -1.436, -1.383, -1.329, -1.277, -1.225, -1.173, -1.122, -1.071, -1.023, -0.975, -0.927, -0.879, -0.832, -0.786, -0.737, -0.690, -0.641, -0.595, -0.548, -0.501, -0.455, -0.409, -0.361, -0.315, -0.267, -0.220, -0.172, -0.125, -0.075, -0.027, +0.023, +0.072, +0.121, +0.170, +0.221, +0.271, +0.324, +0.374, +0.426, +0.479, +0.532, +0.585, +0.641, +0.698, +0.755, +0.811, +0.870, +0.932, +0.994, +1.058, +1.124, +1.190, +1.260, +1.330, +1.404, +1.480, +1.556, +1.638, +1.722, +1.808, +1.901, +1.996, +2.099, +2.207, +2.324, +2.446, +2.580, +2.715, +2.871, +3.041, +3.239, +3.458, +3.736, +4.085, +4.553, +5.339,  +6.08396,  +7.02509,  +7.71487,  +8.34627,  +9.22128, +10.05823, +10.75651, +11.81874, +12.64338, +12.74406, +12.77577, +12.77577, +12.77577, +12.77577, +12.77577},  -0.172,  +0.001,   1.950, 0},
	//{"mod3_simple(4)",      512, 151552,   0, {  -5.77604,  -5.77604,  -5.77604,  -5.77604,  -5.77604,  -5.74886,  -5.66951,  -5.59307,  -5.54215,  -5.39159,  -5.15680,  -4.89426,  -4.66217,  -4.43625,  -4.08628, -3.778, -3.436, -3.209, -3.037, -2.889, -2.762, -2.647, -2.542, -2.447, -2.357, -2.276, -2.198, -2.122, -2.052, -1.980, -1.911, -1.847, -1.783, -1.720, -1.659, -1.600, -1.540, -1.482, -1.430, -1.377, -1.324, -1.270, -1.216, -1.168, -1.118, -1.071, -1.022, -0.974, -0.926, -0.874, -0.826, -0.778, -0.733, -0.687, -0.641, -0.594, -0.548, -0.499, -0.453, -0.406, -0.359, -0.312, -0.265, -0.213, -0.167, -0.121, -0.072, -0.024, +0.025, +0.073, +0.121, +0.169, +0.219, +0.269, +0.320, +0.375, +0.429, +0.484, +0.540, +0.595, +0.651, +0.705, +0.762, +0.819, +0.879, +0.939, +1.000, +1.063, +1.126, +1.192, +1.260, +1.328, +1.405, +1.477, +1.554, +1.636, +1.720, +1.809, +1.904, +2.002, +2.101, +2.207, +2.319, +2.440, +2.575, +2.718, +2.874, +3.045, +3.249, +3.479, +3.749, +4.100, +4.577, +5.358,  +6.07949,  +6.96888,  +7.61104,  +8.39052,  +9.51721, +10.36272, +11.03638, +12.08008, +12.80534, +14.26119, +14.76333, +14.76333, +14.76333, +14.76333, +14.76333},  -0.167,  +0.003,   1.953, 0},
	//{"mod3_simple(4)",      768, 151552,   0, {  -5.53891,  -5.53891,  -5.53891,  -5.53891,  -5.53891,  -5.51660,  -5.45183,  -5.38684,  -5.30737,  -5.18887,  -5.07372,  -4.80142,  -4.61730,  -4.42074,  -4.07585, -3.784, -3.436, -3.210, -3.036, -2.890, -2.762, -2.651, -2.547, -2.454, -2.364, -2.281, -2.204, -2.129, -2.055, -1.989, -1.923, -1.858, -1.793, -1.732, -1.672, -1.615, -1.558, -1.501, -1.445, -1.392, -1.338, -1.288, -1.238, -1.187, -1.139, -1.090, -1.041, -0.991, -0.941, -0.892, -0.844, -0.797, -0.749, -0.701, -0.654, -0.605, -0.559, -0.514, -0.467, -0.420, -0.373, -0.323, -0.277, -0.230, -0.183, -0.136, -0.088, -0.038, +0.011, +0.059, +0.108, +0.157, +0.207, +0.258, +0.310, +0.363, +0.418, +0.471, +0.526, +0.579, +0.635, +0.692, +0.748, +0.806, +0.865, +0.925, +0.989, +1.051, +1.115, +1.184, +1.251, +1.324, +1.396, +1.476, +1.552, +1.635, +1.720, +1.807, +1.903, +1.999, +2.100, +2.212, +2.323, +2.446, +2.572, +2.720, +2.877, +3.049, +3.251, +3.483, +3.745, +4.097, +4.583, +5.353,  +6.08309,  +7.04161,  +7.73405,  +8.44025,  +9.15763,  +9.64909,  +9.96923, +10.84282, +11.60427, +12.87181, +13.30980, +13.30980, +13.30980, +13.30980, +13.30980},  -0.183,  -0.007,   1.955, 0},
	//{"mod3_simple(4)",     1024, 151552,   0, {  -5.72812,  -5.72812,  -5.72812,  -5.72812,  -5.72812,  -5.72505,  -5.71574,  -5.66842,  -5.35732,  -5.22081,  -5.08550,  -4.86146,  -4.64538,  -4.41781,  -4.08090, -3.790, -3.434, -3.205, -3.020, -2.875, -2.746, -2.631, -2.527, -2.433, -2.348, -2.263, -2.185, -2.114, -2.045, -1.981, -1.913, -1.850, -1.791, -1.730, -1.669, -1.612, -1.557, -1.503, -1.447, -1.394, -1.342, -1.290, -1.240, -1.189, -1.139, -1.089, -1.039, -0.992, -0.943, -0.892, -0.843, -0.796, -0.748, -0.702, -0.654, -0.607, -0.559, -0.511, -0.464, -0.416, -0.365, -0.319, -0.272, -0.227, -0.180, -0.134, -0.084, -0.037, +0.012, +0.060, +0.109, +0.161, +0.213, +0.264, +0.314, +0.366, +0.421, +0.474, +0.526, +0.581, +0.637, +0.695, +0.755, +0.816, +0.876, +0.937, +0.998, +1.063, +1.129, +1.197, +1.267, +1.337, +1.410, +1.486, +1.563, +1.643, +1.728, +1.816, +1.905, +2.000, +2.101, +2.209, +2.323, +2.442, +2.571, +2.714, +2.873, +3.051, +3.241, +3.483, +3.752, +4.097, +4.560, +5.378,  +6.10755,  +7.14860,  +7.73296,  +8.32092,  +8.97758,  +9.54981, +10.32414, +11.56911, +11.73027, +12.11206, +12.24460, +12.24460, +12.24460, +12.24460, +12.24460},  -0.180,  -0.002,   1.954, 0},

	//{"mod3_simple(5)",       32, 151552,   0, {  -6.85708,  -6.85708,  -6.85708,  -6.85708,  -6.85708,  -6.82315,  -6.72390,  -6.54975,  -6.32642,  -6.11829,  -5.87424,  -5.52151,  -5.19249,  -4.88390,  -4.43510, -4.058, -3.644, -3.373, -3.159, -2.988, -2.842, -2.715, -2.600, -2.492, -2.394, -2.303, -2.214, -2.129, -2.047, -1.969, -1.893, -1.822, -1.751, -1.682, -1.615, -1.552, -1.493, -1.434, -1.371, -1.312, -1.256, -1.200, -1.143, -1.088, -1.035, -0.981, -0.928, -0.877, -0.824, -0.773, -0.722, -0.674, -0.622, -0.572, -0.526, -0.476, -0.428, -0.380, -0.332, -0.283, -0.235, -0.187, -0.138, -0.090, -0.043, +0.007, +0.056, +0.107, +0.158, +0.208, +0.258, +0.311, +0.361, +0.414, +0.469, +0.520, +0.573, +0.627, +0.682, +0.736, +0.791, +0.848, +0.906, +0.966, +1.025, +1.085, +1.148, +1.210, +1.276, +1.344, +1.411, +1.480, +1.549, +1.623, +1.698, +1.776, +1.855, +1.942, +2.028, +2.123, +2.221, +2.327, +2.438, +2.559, +2.681, +2.813, +2.960, +3.131, +3.319, +3.529, +3.786, +4.096, +4.513, +5.177,  +5.79671,  +6.58303,  +7.24325,  +7.81939,  +8.59688,  +9.11960,  +9.59103,  +9.84184, +10.03091, +12.35110, +13.15632, +13.15632, +13.15632, +13.15632, +13.15632},  -0.043,  +0.074,   1.987, 0},
	//{"mod3_simple(5)",       40, 151552,   0, {  -6.91445,  -6.91445,  -6.91445,  -6.91445,  -6.91445,  -6.85145,  -6.66580,  -6.33382,  -6.07797,  -5.96076,  -5.78347,  -5.45585,  -5.17938,  -4.90179,  -4.47081, -4.087, -3.656, -3.377, -3.176, -3.007, -2.860, -2.728, -2.613, -2.502, -2.405, -2.312, -2.223, -2.136, -2.054, -1.980, -1.906, -1.834, -1.764, -1.698, -1.634, -1.569, -1.510, -1.448, -1.390, -1.333, -1.276, -1.221, -1.163, -1.111, -1.057, -1.004, -0.954, -0.902, -0.853, -0.802, -0.752, -0.701, -0.650, -0.598, -0.550, -0.501, -0.452, -0.402, -0.351, -0.302, -0.253, -0.201, -0.152, -0.101, -0.053, -0.003, +0.046, +0.097, +0.145, +0.196, +0.247, +0.299, +0.354, +0.403, +0.454, +0.506, +0.560, +0.613, +0.666, +0.719, +0.778, +0.832, +0.887, +0.943, +1.004, +1.066, +1.128, +1.191, +1.256, +1.319, +1.389, +1.459, +1.530, +1.603, +1.675, +1.752, +1.833, +1.921, +2.009, +2.102, +2.205, +2.307, +2.418, +2.535, +2.655, +2.792, +2.939, +3.099, +3.286, +3.489, +3.728, +4.040, +4.476, +5.146,  +5.79502,  +6.61338,  +7.16890,  +7.78375,  +8.52063,  +8.83005,  +9.48895, +10.25781, +11.08776, +11.24761, +11.29904, +11.29904, +11.29904, +11.29904, +11.29904},  -0.053,  +0.054,   1.983, 0},
	//{"mod3_simple(5)",       48, 151552,   0, {  -7.14108,  -7.14108,  -7.14108,  -7.14108,  -7.14108,  -7.10594,  -7.00013,  -6.67809,  -6.32891,  -6.06706,  -5.71397,  -5.40494,  -5.18468,  -4.91508,  -4.47285, -4.088, -3.663, -3.391, -3.189, -3.016, -2.870, -2.737, -2.618, -2.506, -2.409, -2.314, -2.225, -2.138, -2.059, -1.982, -1.907, -1.836, -1.767, -1.700, -1.636, -1.576, -1.514, -1.453, -1.391, -1.332, -1.277, -1.222, -1.167, -1.110, -1.056, -1.004, -0.952, -0.900, -0.850, -0.799, -0.747, -0.696, -0.647, -0.597, -0.549, -0.500, -0.453, -0.402, -0.352, -0.303, -0.254, -0.204, -0.157, -0.108, -0.059, -0.010, +0.041, +0.091, +0.141, +0.189, +0.243, +0.293, +0.341, +0.394, +0.446, +0.498, +0.551, +0.603, +0.659, +0.714, +0.769, +0.822, +0.879, +0.937, +0.994, +1.055, +1.119, +1.181, +1.247, +1.312, +1.381, +1.451, +1.526, +1.598, +1.674, +1.753, +1.835, +1.924, +2.011, +2.102, +2.198, +2.303, +2.410, +2.521, +2.645, +2.778, +2.925, +3.087, +3.267, +3.467, +3.728, +4.039, +4.469, +5.167,  +5.82759,  +6.65601,  +7.14190,  +7.63718,  +8.37847,  +8.87336,  +9.86416, +10.37780, +11.02507, +11.27290, +11.35619, +11.35619, +11.35619, +11.35619, +11.35619},  -0.059,  +0.050,   1.982, 0},
	//{"mod3_simple(5)",       56, 151552,   0, {  -6.84223,  -6.84223,  -6.84223,  -6.84223,  -6.84223,  -6.81701,  -6.74425,  -6.67793,  -6.38615,  -6.13014,  -5.82854,  -5.47738,  -5.19947,  -4.92742,  -4.48200, -4.096, -3.665, -3.399, -3.188, -3.021, -2.872, -2.740, -2.620, -2.510, -2.409, -2.317, -2.229, -2.141, -2.063, -1.988, -1.914, -1.844, -1.777, -1.713, -1.650, -1.587, -1.524, -1.464, -1.405, -1.348, -1.290, -1.233, -1.177, -1.123, -1.071, -1.019, -0.965, -0.913, -0.861, -0.809, -0.758, -0.707, -0.656, -0.607, -0.555, -0.508, -0.460, -0.413, -0.364, -0.314, -0.267, -0.219, -0.170, -0.123, -0.075, -0.026, +0.026, +0.075, +0.124, +0.175, +0.226, +0.276, +0.327, +0.381, +0.433, +0.485, +0.539, +0.593, +0.649, +0.704, +0.762, +0.816, +0.876, +0.933, +0.993, +1.052, +1.113, +1.176, +1.239, +1.305, +1.370, +1.437, +1.508, +1.583, +1.658, +1.734, +1.814, +1.901, +1.991, +2.080, +2.181, +2.283, +2.389, +2.504, +2.627, +2.762, +2.905, +3.064, +3.255, +3.471, +3.722, +4.037, +4.473, +5.149,  +5.78051,  +6.59649,  +7.22455,  +7.69210,  +8.29765,  +8.76975,  +9.21514,  +9.91674, +10.97876, +11.80810, +12.09103, +12.09103, +12.09103, +12.09103, +12.09103},  -0.075,  +0.039,   1.980, 0},
	//{"mod3_simple(5)",       64, 151552,   0, {  -6.85597,  -6.85597,  -6.85597,  -6.85597,  -6.85597,  -6.81115,  -6.68147,  -6.58834,  -6.25608,  -6.12245,  -5.93019,  -5.49010,  -5.22272,  -4.90975,  -4.46227, -4.100, -3.690, -3.412, -3.198, -3.023, -2.868, -2.738, -2.618, -2.508, -2.409, -2.316, -2.230, -2.149, -2.065, -1.990, -1.917, -1.849, -1.780, -1.714, -1.647, -1.583, -1.522, -1.464, -1.405, -1.345, -1.289, -1.233, -1.179, -1.124, -1.069, -1.017, -0.967, -0.915, -0.864, -0.813, -0.763, -0.714, -0.665, -0.614, -0.566, -0.518, -0.468, -0.419, -0.371, -0.320, -0.272, -0.223, -0.173, -0.124, -0.077, -0.026, +0.027, +0.075, +0.125, +0.175, +0.228, +0.279, +0.331, +0.379, +0.432, +0.481, +0.532, +0.586, +0.639, +0.695, +0.750, +0.807, +0.862, +0.921, +0.982, +1.043, +1.105, +1.168, +1.231, +1.299, +1.368, +1.436, +1.504, +1.577, +1.652, +1.732, +1.814, +1.899, +1.987, +2.077, +2.174, +2.277, +2.388, +2.505, +2.633, +2.766, +2.913, +3.075, +3.255, +3.464, +3.707, +4.035, +4.456, +5.149,  +5.78436,  +6.61420,  +7.15344,  +7.72455,  +8.39742,  +8.97957,  +9.23583,  +9.84637, +10.09920, +10.11188, +10.11550, +10.11550, +10.11550, +10.11550, +10.11550},  -0.077,  +0.036,   1.980, 0},
	//{"mod3_simple(5)",       80, 151552,   0, {  -6.58068,  -6.58068,  -6.58068,  -6.58068,  -6.58068,  -6.57311,  -6.55087,  -6.48749,  -6.37672,  -6.04867,  -5.78769,  -5.46095,  -5.21753,  -4.91703,  -4.48482, -4.117, -3.686, -3.417, -3.213, -3.035, -2.888, -2.756, -2.634, -2.521, -2.425, -2.330, -2.241, -2.156, -2.075, -1.999, -1.926, -1.858, -1.787, -1.719, -1.656, -1.593, -1.530, -1.472, -1.414, -1.355, -1.299, -1.243, -1.186, -1.130, -1.077, -1.024, -0.971, -0.917, -0.862, -0.813, -0.764, -0.713, -0.664, -0.616, -0.568, -0.520, -0.473, -0.425, -0.378, -0.329, -0.278, -0.231, -0.183, -0.134, -0.085, -0.036, +0.014, +0.065, +0.115, +0.165, +0.216, +0.268, +0.317, +0.367, +0.422, +0.474, +0.526, +0.581, +0.635, +0.689, +0.743, +0.799, +0.858, +0.915, +0.976, +1.036, +1.099, +1.161, +1.224, +1.290, +1.354, +1.425, +1.495, +1.570, +1.645, +1.721, +1.805, +1.889, +1.974, +2.068, +2.165, +2.275, +2.385, +2.499, +2.624, +2.763, +2.906, +3.072, +3.253, +3.450, +3.700, +4.022, +4.443, +5.115,  +5.74181,  +6.50242,  +7.05769,  +7.72401,  +8.48768,  +8.89116,  +9.40117, +10.19323, +11.31138, +11.57404, +11.66085, +11.66085, +11.66085, +11.66085, +11.66085},  -0.085,  +0.027,   1.979, 0},
	//{"mod3_simple(5)",       96, 151552,   0, {  -6.63021,  -6.63021,  -6.63021,  -6.63021,  -6.63021,  -6.62300,  -6.60171,  -6.55536,  -6.26969,  -5.99469,  -5.77781,  -5.43936,  -5.16264,  -4.91688,  -4.48640, -4.113, -3.689, -3.406, -3.202, -3.031, -2.883, -2.753, -2.635, -2.527, -2.432, -2.337, -2.250, -2.166, -2.087, -2.011, -1.936, -1.866, -1.800, -1.733, -1.667, -1.603, -1.541, -1.482, -1.424, -1.366, -1.310, -1.256, -1.201, -1.146, -1.092, -1.040, -0.987, -0.937, -0.883, -0.831, -0.778, -0.726, -0.677, -0.626, -0.576, -0.527, -0.477, -0.426, -0.375, -0.328, -0.282, -0.235, -0.187, -0.138, -0.089, -0.039, +0.011, +0.062, +0.112, +0.162, +0.212, +0.264, +0.315, +0.369, +0.419, +0.472, +0.525, +0.577, +0.630, +0.684, +0.736, +0.790, +0.847, +0.906, +0.964, +1.025, +1.088, +1.150, +1.216, +1.283, +1.351, +1.422, +1.497, +1.568, +1.643, +1.717, +1.796, +1.881, +1.969, +2.059, +2.158, +2.260, +2.366, +2.484, +2.612, +2.749, +2.892, +3.057, +3.240, +3.455, +3.702, +4.003, +4.446, +5.099,  +5.81873,  +6.61732,  +7.23388,  +7.75138,  +8.46576,  +9.25526,  +9.64643, +10.23227, +10.77612, +10.84492, +10.86630, +10.86630, +10.86630, +10.86630, +10.86630},  -0.089,  +0.021,   1.980, 0},
	//{"mod3_simple(5)",      112, 151552,   0, {  -6.36669,  -6.36669,  -6.36669,  -6.36669,  -6.36669,  -6.34272,  -6.27333,  -6.24200,  -6.05558,  -5.94105,  -5.77337,  -5.53824,  -5.25215,  -4.91044,  -4.49748, -4.115, -3.690, -3.420, -3.206, -3.028, -2.887, -2.764, -2.650, -2.545, -2.446, -2.351, -2.261, -2.177, -2.094, -2.017, -1.945, -1.872, -1.804, -1.736, -1.669, -1.608, -1.546, -1.486, -1.428, -1.366, -1.311, -1.257, -1.201, -1.146, -1.095, -1.040, -0.989, -0.936, -0.883, -0.832, -0.781, -0.731, -0.683, -0.631, -0.583, -0.534, -0.485, -0.436, -0.385, -0.338, -0.288, -0.239, -0.190, -0.139, -0.089, -0.039, +0.011, +0.061, +0.110, +0.159, +0.211, +0.262, +0.313, +0.364, +0.413, +0.464, +0.519, +0.573, +0.629, +0.682, +0.737, +0.794, +0.853, +0.910, +0.968, +1.028, +1.091, +1.157, +1.225, +1.290, +1.355, +1.423, +1.493, +1.567, +1.643, +1.721, +1.807, +1.892, +1.981, +2.072, +2.165, +2.272, +2.379, +2.494, +2.621, +2.756, +2.904, +3.065, +3.250, +3.461, +3.712, +4.017, +4.440, +5.121,  +5.80878,  +6.60084,  +7.14907,  +7.72914,  +8.27717,  +9.17495,  +9.63301, +10.66457, +11.23757, +12.43472, +12.84824, +12.84824, +12.84824, +12.84824, +12.84824},  -0.089,  +0.020,   1.985, 0},
	//{"mod3_simple(5)",      128, 151552,   0, {  -6.87276,  -6.87276,  -6.87276,  -6.87276,  -6.87276,  -6.80013,  -6.59002,  -6.45607,  -6.29648,  -5.99424,  -5.79393,  -5.49187,  -5.25908,  -4.97131,  -4.52315, -4.129, -3.698, -3.425, -3.211, -3.038, -2.889, -2.758, -2.642, -2.531, -2.430, -2.333, -2.252, -2.167, -2.085, -2.010, -1.935, -1.863, -1.795, -1.729, -1.663, -1.600, -1.539, -1.478, -1.418, -1.362, -1.305, -1.251, -1.196, -1.142, -1.089, -1.039, -0.988, -0.936, -0.884, -0.834, -0.783, -0.734, -0.684, -0.634, -0.584, -0.534, -0.488, -0.438, -0.391, -0.342, -0.292, -0.243, -0.196, -0.149, -0.099, -0.049, +0.002, +0.051, +0.100, +0.149, +0.200, +0.249, +0.299, +0.349, +0.402, +0.455, +0.507, +0.560, +0.617, +0.672, +0.727, +0.783, +0.840, +0.900, +0.961, +1.020, +1.081, +1.144, +1.214, +1.279, +1.348, +1.419, +1.491, +1.564, +1.640, +1.719, +1.801, +1.883, +1.976, +2.070, +2.166, +2.266, +2.373, +2.492, +2.621, +2.756, +2.896, +3.059, +3.245, +3.455, +3.713, +4.034, +4.451, +5.131,  +5.76643,  +6.59048,  +7.08914,  +7.66087,  +8.42986,  +9.10395,  +9.59200,  +9.86407, +11.55288, +13.25826, +13.84153, +13.84153, +13.84153, +13.84153, +13.84153},  -0.099,  +0.017,   1.982, 0},
	//{"mod3_simple(5)",      192, 151552,   0, {  -7.37928,  -7.37928,  -7.37928,  -7.37928,  -7.37928,  -7.30195,  -7.07044,  -6.50167,  -6.32570,  -6.18518,  -5.88405,  -5.58015,  -5.26934,  -4.95753,  -4.49363, -4.104, -3.693, -3.421, -3.210, -3.039, -2.894, -2.770, -2.658, -2.551, -2.454, -2.358, -2.268, -2.179, -2.098, -2.019, -1.945, -1.874, -1.806, -1.739, -1.672, -1.608, -1.547, -1.486, -1.429, -1.371, -1.312, -1.256, -1.203, -1.148, -1.094, -1.040, -0.989, -0.938, -0.887, -0.835, -0.785, -0.736, -0.685, -0.634, -0.587, -0.539, -0.490, -0.441, -0.391, -0.343, -0.295, -0.248, -0.202, -0.151, -0.104, -0.054, -0.004, +0.046, +0.096, +0.146, +0.196, +0.244, +0.296, +0.347, +0.398, +0.450, +0.504, +0.559, +0.613, +0.667, +0.722, +0.777, +0.832, +0.890, +0.949, +1.009, +1.072, +1.135, +1.199, +1.267, +1.335, +1.406, +1.479, +1.553, +1.627, +1.705, +1.787, +1.871, +1.959, +2.052, +2.153, +2.253, +2.360, +2.469, +2.591, +2.724, +2.866, +3.036, +3.216, +3.431, +3.695, +4.009, +4.420, +5.069,  +5.71151,  +6.54091,  +7.08198,  +7.60712,  +8.33205,  +9.03028,  +9.89429, +10.35104, +10.44082, +11.97352, +12.50550, +12.50550, +12.50550, +12.50550, +12.50550},  -0.104,  +0.007,   1.976, 0},
	{"mod3_simple(5)",      256, 151552,   0, {  -6.98811,  -6.98811,  -6.98811,  -6.98811,  -6.98811,  -6.94280,  -6.81229,  -6.77065,  -6.52274,  -6.23719,  -5.95888,  -5.52807,  -5.25970,  -4.92050,  -4.49034, -4.126, -3.711, -3.438, -3.225, -3.048, -2.903, -2.771, -2.656, -2.549, -2.445, -2.349, -2.255, -2.171, -2.094, -2.019, -1.942, -1.872, -1.804, -1.737, -1.674, -1.612, -1.548, -1.483, -1.426, -1.366, -1.308, -1.253, -1.198, -1.143, -1.090, -1.038, -0.986, -0.935, -0.883, -0.833, -0.782, -0.732, -0.683, -0.633, -0.584, -0.535, -0.486, -0.437, -0.389, -0.340, -0.290, -0.243, -0.194, -0.145, -0.096, -0.046, +0.002, +0.051, +0.100, +0.151, +0.198, +0.249, +0.301, +0.352, +0.404, +0.457, +0.508, +0.563, +0.617, +0.673, +0.729, +0.785, +0.843, +0.900, +0.957, +1.016, +1.076, +1.137, +1.200, +1.265, +1.334, +1.404, +1.475, +1.547, +1.621, +1.701, +1.776, +1.861, +1.949, +2.038, +2.135, +2.237, +2.348, +2.464, +2.591, +2.727, +2.872, +3.037, +3.217, +3.435, +3.673, +3.994, +4.409, +5.089,  +5.75131,  +6.62205,  +7.10996,  +7.82991,  +8.81988,  +9.35751,  +9.87641, +11.04723, +11.18215, +12.77476, +13.32771, +13.32771, +13.32771, +13.32771, +13.32771},  -0.096,  +0.009,   1.977, 0},
	//{"mod3_simple(5)",      512, 151552,   0, {  -6.87589,  -6.87589,  -6.87589,  -6.87589,  -6.87589,  -6.80793,  -6.61078,  -6.44019,  -6.24863,  -6.05941,  -5.77606,  -5.48311,  -5.19923,  -4.93156,  -4.47137, -4.117, -3.689, -3.429, -3.224, -3.053, -2.906, -2.774, -2.660, -2.548, -2.445, -2.347, -2.263, -2.177, -2.098, -2.021, -1.950, -1.880, -1.810, -1.742, -1.676, -1.613, -1.553, -1.493, -1.435, -1.375, -1.318, -1.261, -1.205, -1.151, -1.099, -1.044, -0.992, -0.941, -0.891, -0.839, -0.790, -0.741, -0.691, -0.641, -0.592, -0.542, -0.492, -0.442, -0.394, -0.344, -0.296, -0.249, -0.199, -0.149, -0.100, -0.053, -0.002, +0.049, +0.098, +0.148, +0.199, +0.249, +0.299, +0.350, +0.402, +0.454, +0.507, +0.561, +0.615, +0.667, +0.723, +0.780, +0.835, +0.892, +0.952, +1.012, +1.077, +1.140, +1.204, +1.269, +1.338, +1.409, +1.481, +1.554, +1.628, +1.707, +1.789, +1.873, +1.963, +2.057, +2.152, +2.249, +2.358, +2.475, +2.591, +2.735, +2.882, +3.045, +3.222, +3.418, +3.673, +3.985, +4.433, +5.122,  +5.74366,  +6.50475,  +7.09145,  +7.74583,  +8.51816,  +8.86262,  +9.21672, +10.60099, +11.01683, +11.43750, +11.58131, +11.58131, +11.58131, +11.58131, +11.58131},  -0.100,  +0.007,   1.978, 0},

	//{"mod3_simple(6)",      128, 151552,   0, {  -7.38991,  -7.38991,  -7.38991,  -7.38991,  -7.38991,  -7.38701,  -7.37776,  -7.21119,  -6.92123,  -6.53099,  -6.29765,  -5.93639,  -5.60541,  -5.28082,  -4.71620, -4.269, -3.808, -3.503, -3.267, -3.071, -2.913, -2.768, -2.641, -2.524, -2.415, -2.315, -2.219, -2.126, -2.039, -1.959, -1.879, -1.805, -1.733, -1.664, -1.596, -1.531, -1.467, -1.405, -1.345, -1.283, -1.225, -1.165, -1.106, -1.049, -0.995, -0.939, -0.886, -0.832, -0.778, -0.725, -0.669, -0.616, -0.565, -0.513, -0.463, -0.413, -0.363, -0.315, -0.265, -0.214, -0.163, -0.114, -0.066, -0.016, +0.035, +0.086, +0.135, +0.184, +0.235, +0.288, +0.337, +0.390, +0.443, +0.495, +0.546, +0.599, +0.651, +0.705, +0.757, +0.812, +0.867, +0.924, +0.980, +1.040, +1.099, +1.159, +1.219, +1.280, +1.343, +1.410, +1.476, +1.544, +1.616, +1.688, +1.763, +1.839, +1.918, +2.001, +2.085, +2.177, +2.270, +2.365, +2.467, +2.573, +2.694, +2.825, +2.969, +3.123, +3.301, +3.496, +3.724, +4.011, +4.412, +5.055,  +5.61107,  +6.34226,  +6.86589,  +7.40630,  +8.11160,  +8.51881,  +9.06494,  +9.66377, +10.23568, +10.47474, +10.55480, +10.55480, +10.55480, +10.55480, +10.55480},  +0.035,  +0.100,   2.001, 0},
	//{"mod3_simple(6)",      160, 151552,   0, {  -7.99736,  -7.99736,  -7.99736,  -7.99736,  -7.99736,  -7.93588,  -7.75792,  -7.60293,  -6.80299,  -6.58295,  -6.33020,  -5.91375,  -5.59082,  -5.20807,  -4.68066, -4.268, -3.810, -3.504, -3.275, -3.090, -2.928, -2.783, -2.652, -2.529, -2.423, -2.325, -2.231, -2.138, -2.055, -1.976, -1.898, -1.823, -1.752, -1.680, -1.614, -1.549, -1.485, -1.421, -1.357, -1.298, -1.239, -1.182, -1.124, -1.067, -1.012, -0.957, -0.902, -0.848, -0.797, -0.744, -0.694, -0.642, -0.591, -0.539, -0.487, -0.435, -0.385, -0.336, -0.286, -0.238, -0.188, -0.136, -0.088, -0.037, +0.013, +0.062, +0.111, +0.162, +0.214, +0.266, +0.319, +0.371, +0.423, +0.473, +0.527, +0.579, +0.634, +0.687, +0.742, +0.795, +0.852, +0.906, +0.959, +1.019, +1.077, +1.137, +1.199, +1.262, +1.324, +1.389, +1.454, +1.522, +1.590, +1.662, +1.735, +1.813, +1.894, +1.976, +2.063, +2.153, +2.248, +2.348, +2.449, +2.556, +2.673, +2.801, +2.942, +3.096, +3.272, +3.481, +3.694, +3.981, +4.378, +5.025,  +5.61460,  +6.38215,  +6.96026,  +7.42122,  +8.18225,  +8.93879,  +9.26308,  +9.66416, +10.95490, +11.73919, +12.00460, +12.00460, +12.00460, +12.00460, +12.00460},  +0.013,  +0.081,   1.997, 0},
	//{"mod3_simple(6)",      192, 151552,   0, {  -8.19626,  -8.19626,  -8.19626,  -8.19626,  -8.19626,  -8.06075,  -7.66727,  -7.36341,  -7.03823,  -6.61400,  -6.32776,  -5.90041,  -5.58984,  -5.25333,  -4.73012, -4.294, -3.831, -3.517, -3.287, -3.100, -2.942, -2.803, -2.675, -2.559, -2.448, -2.343, -2.249, -2.159, -2.077, -1.996, -1.915, -1.838, -1.764, -1.692, -1.624, -1.560, -1.493, -1.429, -1.366, -1.306, -1.248, -1.192, -1.134, -1.080, -1.026, -0.970, -0.916, -0.862, -0.807, -0.754, -0.701, -0.648, -0.598, -0.549, -0.500, -0.452, -0.399, -0.346, -0.295, -0.245, -0.199, -0.149, -0.101, -0.052, -0.004, +0.049, +0.099, +0.149, +0.201, +0.252, +0.303, +0.354, +0.407, +0.458, +0.509, +0.562, +0.615, +0.668, +0.722, +0.776, +0.829, +0.888, +0.944, +1.003, +1.061, +1.120, +1.182, +1.241, +1.304, +1.371, +1.434, +1.505, +1.574, +1.650, +1.723, +1.798, +1.876, +1.956, +2.041, +2.126, +2.217, +2.316, +2.422, +2.534, +2.652, +2.783, +2.924, +3.084, +3.262, +3.460, +3.694, +4.000, +4.391, +4.999,  +5.56373,  +6.29237,  +6.82160,  +7.32119,  +8.01797,  +8.31085,  +8.99373, +10.13744, +10.55208, +10.89865, +11.01809, +11.01809, +11.01809, +11.01809, +11.01809},  -0.004,  +0.065,   1.996, 0},
	//{"mod3_simple(6)",      224, 151552,   0, {  -7.62545,  -7.62545,  -7.62545,  -7.62545,  -7.62545,  -7.58383,  -7.46174,  -7.24953,  -6.79952,  -6.56343,  -6.31052,  -5.92311,  -5.55499,  -5.21454,  -4.72444, -4.289, -3.822, -3.514, -3.288, -3.102, -2.943, -2.804, -2.683, -2.571, -2.462, -2.361, -2.264, -2.176, -2.090, -2.007, -1.927, -1.851, -1.776, -1.703, -1.635, -1.570, -1.503, -1.437, -1.375, -1.313, -1.250, -1.193, -1.136, -1.081, -1.026, -0.970, -0.918, -0.863, -0.809, -0.760, -0.710, -0.659, -0.609, -0.559, -0.509, -0.460, -0.408, -0.358, -0.308, -0.260, -0.210, -0.160, -0.112, -0.061, -0.011, +0.037, +0.087, +0.137, +0.188, +0.237, +0.289, +0.341, +0.393, +0.447, +0.498, +0.547, +0.600, +0.653, +0.706, +0.762, +0.819, +0.877, +0.934, +0.990, +1.049, +1.107, +1.168, +1.232, +1.294, +1.356, +1.422, +1.491, +1.563, +1.637, +1.709, +1.784, +1.865, +1.946, +2.031, +2.125, +2.219, +2.317, +2.420, +2.529, +2.647, +2.774, +2.914, +3.068, +3.247, +3.439, +3.674, +3.966, +4.357, +4.978,  +5.53963,  +6.24047,  +6.81870,  +7.34390,  +8.04896,  +8.61255,  +9.20621, +10.08729, +10.68019, +11.65457, +11.99011, +11.99011, +11.99011, +11.99011, +11.99011},  -0.011,  +0.056,   1.993, 0},
	//{"mod3_simple(6)",      256, 151552,   0, {  -7.11833,  -7.11833,  -7.11833,  -7.11833,  -7.11833,  -7.11372,  -7.10008,  -7.03583,  -6.76533,  -6.56413,  -6.15174,  -5.81770,  -5.51142,  -5.21698,  -4.71910, -4.297, -3.834, -3.536, -3.310, -3.121, -2.959, -2.822, -2.690, -2.567, -2.457, -2.351, -2.254, -2.163, -2.079, -1.997, -1.919, -1.843, -1.769, -1.699, -1.632, -1.566, -1.499, -1.436, -1.375, -1.316, -1.257, -1.200, -1.144, -1.088, -1.032, -0.977, -0.923, -0.871, -0.820, -0.767, -0.716, -0.665, -0.613, -0.562, -0.515, -0.465, -0.416, -0.366, -0.317, -0.264, -0.214, -0.161, -0.113, -0.062, -0.014, +0.036, +0.086, +0.135, +0.188, +0.240, +0.289, +0.340, +0.392, +0.443, +0.495, +0.549, +0.601, +0.655, +0.712, +0.765, +0.821, +0.875, +0.932, +0.990, +1.046, +1.103, +1.163, +1.223, +1.286, +1.350, +1.414, +1.484, +1.555, +1.627, +1.702, +1.778, +1.859, +1.939, +2.023, +2.115, +2.209, +2.301, +2.407, +2.518, +2.637, +2.769, +2.908, +3.060, +3.227, +3.430, +3.663, +3.971, +4.355, +4.969,  +5.57560,  +6.27480,  +6.82057,  +7.38191,  +7.97030,  +8.61113,  +8.95384,  +9.69305, +10.06733, +12.08075, +12.77829, +12.77829, +12.77829, +12.77829, +12.77829},  -0.014,  +0.052,   1.992, 0},
	//{"mod3_simple(6)",      384, 151552,   0, {  -7.78382,  -7.78382,  -7.78382,  -7.78382,  -7.78382,  -7.74454,  -7.62482,  -7.19368,  -6.81344,  -6.61928,  -6.20871,  -5.86051,  -5.53176,  -5.20025,  -4.72583, -4.297, -3.818, -3.518, -3.286, -3.110, -2.948, -2.805, -2.678, -2.567, -2.462, -2.358, -2.263, -2.177, -2.093, -2.014, -1.933, -1.861, -1.788, -1.718, -1.650, -1.586, -1.523, -1.459, -1.397, -1.335, -1.276, -1.217, -1.160, -1.103, -1.047, -0.994, -0.945, -0.890, -0.837, -0.786, -0.736, -0.683, -0.633, -0.581, -0.528, -0.479, -0.427, -0.377, -0.328, -0.281, -0.233, -0.183, -0.135, -0.086, -0.036, +0.014, +0.062, +0.111, +0.162, +0.213, +0.265, +0.316, +0.369, +0.420, +0.472, +0.525, +0.580, +0.634, +0.685, +0.741, +0.797, +0.852, +0.910, +0.968, +1.026, +1.083, +1.146, +1.207, +1.270, +1.333, +1.400, +1.469, +1.538, +1.608, +1.679, +1.753, +1.835, +1.918, +2.002, +2.090, +2.185, +2.284, +2.387, +2.496, +2.614, +2.740, +2.878, +3.033, +3.207, +3.402, +3.634, +3.920, +4.308, +4.925,  +5.52831,  +6.20849,  +6.84905,  +7.29333,  +7.86948,  +8.25257,  +8.59454,  +8.99541,  +9.49662,  +9.54898,  +9.56451,  +9.56451,  +9.56451,  +9.56451,  +9.56451},  -0.036,  +0.034,   1.982, 0},
	//{"mod3_simple(6)",      512, 151552,   0, {  -8.16053,  -8.16053,  -8.16053,  -8.16053,  -8.16053,  -7.85859,  -6.98908,  -6.92139,  -6.70089,  -6.54862,  -6.38235,  -5.93599,  -5.54739,  -5.20022,  -4.71836, -4.306, -3.842, -3.535, -3.314, -3.131, -2.964, -2.822, -2.699, -2.584, -2.473, -2.369, -2.278, -2.192, -2.107, -2.026, -1.947, -1.872, -1.799, -1.727, -1.661, -1.595, -1.529, -1.467, -1.404, -1.344, -1.284, -1.228, -1.172, -1.115, -1.060, -1.005, -0.954, -0.899, -0.848, -0.793, -0.742, -0.690, -0.638, -0.587, -0.536, -0.485, -0.434, -0.384, -0.333, -0.283, -0.234, -0.183, -0.134, -0.085, -0.034, +0.017, +0.066, +0.114, +0.163, +0.214, +0.264, +0.314, +0.368, +0.419, +0.471, +0.524, +0.577, +0.632, +0.685, +0.740, +0.794, +0.851, +0.907, +0.964, +1.024, +1.081, +1.140, +1.200, +1.262, +1.328, +1.393, +1.462, +1.533, +1.603, +1.676, +1.753, +1.832, +1.913, +2.001, +2.091, +2.184, +2.281, +2.385, +2.493, +2.610, +2.738, +2.877, +3.033, +3.207, +3.404, +3.627, +3.909, +4.302, +4.928,  +5.53776,  +6.27489,  +6.79790,  +7.29014,  +7.86980,  +8.25846,  +8.77145,  +9.53720,  +9.65489, +10.43474, +10.70511, +10.70511, +10.70511, +10.70511, +10.70511},  -0.034,  +0.028,   1.987, 0},
	//{"mod3_simple(6)",      768, 151552,   0, {  -7.84341,  -7.84341,  -7.84341,  -7.84341,  -7.84341,  -7.78558,  -7.61491,  -7.17581,  -6.86740,  -6.54057,  -6.31562,  -5.89696,  -5.63451,  -5.26346,  -4.76402, -4.320, -3.848, -3.548, -3.316, -3.128, -2.974, -2.828, -2.696, -2.581, -2.471, -2.372, -2.281, -2.192, -2.104, -2.023, -1.948, -1.873, -1.801, -1.728, -1.662, -1.595, -1.533, -1.471, -1.410, -1.354, -1.295, -1.237, -1.182, -1.123, -1.068, -1.017, -0.963, -0.910, -0.856, -0.803, -0.752, -0.703, -0.653, -0.601, -0.553, -0.502, -0.451, -0.403, -0.352, -0.304, -0.254, -0.206, -0.155, -0.105, -0.054, -0.003, +0.045, +0.095, +0.146, +0.196, +0.247, +0.298, +0.349, +0.400, +0.453, +0.502, +0.558, +0.610, +0.662, +0.717, +0.772, +0.828, +0.883, +0.941, +1.002, +1.065, +1.123, +1.186, +1.249, +1.314, +1.379, +1.446, +1.514, +1.585, +1.657, +1.737, +1.814, +1.896, +1.986, +2.075, +2.167, +2.271, +2.371, +2.487, +2.605, +2.731, +2.868, +3.019, +3.201, +3.401, +3.637, +3.929, +4.325, +4.966,  +5.53824,  +6.24906,  +6.72751,  +7.19811,  +7.73826,  +8.26879,  +8.69250,  +8.99968,  +9.26958,  +9.84409, +10.04224, +10.04224, +10.04224, +10.04224, +10.04224},  -0.054,  +0.017,   1.987, 0},
	{"mod3_simple(6)",     1024, 151552,   1, {  -7.29775,  -7.29775,  -7.29775,  -7.29775,  -7.29775,  -7.25711,  -7.13550,  -6.83723,  -6.59985,  -6.49026,  -6.27575,  -5.87683,  -5.53178,  -5.21137,  -4.73800, -4.342, -3.879, -3.580, -3.352, -3.156, -2.994, -2.854, -2.730, -2.612, -2.505, -2.403, -2.305, -2.216, -2.128, -2.045, -1.968, -1.894, -1.819, -1.750, -1.682, -1.617, -1.552, -1.491, -1.428, -1.365, -1.303, -1.247, -1.190, -1.133, -1.080, -1.023, -0.969, -0.913, -0.861, -0.809, -0.757, -0.704, -0.653, -0.602, -0.552, -0.502, -0.450, -0.399, -0.349, -0.300, -0.253, -0.202, -0.149, -0.100, -0.055, -0.006, +0.045, +0.096, +0.148, +0.198, +0.248, +0.300, +0.349, +0.401, +0.454, +0.506, +0.561, +0.616, +0.668, +0.721, +0.779, +0.833, +0.889, +0.946, +1.005, +1.063, +1.123, +1.185, +1.247, +1.311, +1.376, +1.446, +1.519, +1.590, +1.665, +1.740, +1.818, +1.900, +1.987, +2.075, +2.170, +2.266, +2.367, +2.482, +2.604, +2.731, +2.871, +3.026, +3.196, +3.389, +3.622, +3.906, +4.322, +4.970,  +5.54941,  +6.27694,  +6.78365,  +7.14427,  +7.75503,  +8.14945,  +8.65295,  +9.10673,  +9.24911, +10.10317, +10.39962, +10.39962, +10.39962, +10.39962, +10.39962},  -0.055,  +0.011,   1.994, 0},

	//{"mod3_simple(7)",     1024, 151552,   0, {  -8.35559,  -8.35559,  -8.35559,  -8.35559,  -8.35559,  -8.11216,  -7.41000,  -7.32353,  -7.05855,  -6.83429,  -6.47923,  -6.05304,  -5.76484,  -5.40284,  -4.85560, -4.414, -3.925, -3.607, -3.367, -3.173, -3.006, -2.854, -2.718, -2.587, -2.470, -2.361, -2.262, -2.174, -2.084, -2.002, -1.925, -1.847, -1.770, -1.699, -1.625, -1.557, -1.490, -1.427, -1.363, -1.300, -1.238, -1.178, -1.119, -1.063, -1.004, -0.949, -0.895, -0.842, -0.786, -0.733, -0.679, -0.625, -0.575, -0.523, -0.472, -0.420, -0.368, -0.318, -0.270, -0.219, -0.169, -0.121, -0.071, -0.020, +0.029, +0.081, +0.132, +0.182, +0.231, +0.281, +0.331, +0.381, +0.435, +0.488, +0.540, +0.593, +0.647, +0.700, +0.754, +0.808, +0.863, +0.918, +0.976, +1.033, +1.092, +1.151, +1.212, +1.273, +1.336, +1.396, +1.463, +1.530, +1.601, +1.671, +1.744, +1.816, +1.893, +1.975, +2.057, +2.143, +2.234, +2.326, +2.428, +2.532, +2.648, +2.775, +2.912, +3.062, +3.227, +3.413, +3.630, +3.903, +4.273, +4.877,  +5.46969,  +6.12500,  +6.63238,  +7.06576,  +7.48887,  +7.98194,  +8.43776,  +8.66416,  +8.69293,  +9.62975,  +9.95500,  +9.95500,  +9.95500,  +9.95500,  +9.95500},  +0.029,  +0.068,   2.000, 0},
	//{"mod3_simple(7)",     1280, 65536,   0, {  -8.17046,  -8.17046,  -8.17046,  -8.17046,  -8.17046,  -8.17046,  -8.11865,  -7.90011,  -7.21735,  -6.99258,  -6.75179,  -6.16854,  -5.84368,  -5.42828,  -4.89894, -4.451, -3.910, -3.616, -3.372, -3.174, -3.008, -2.858, -2.720, -2.600, -2.489, -2.381, -2.286, -2.189, -2.101, -2.015, -1.935, -1.862, -1.783, -1.712, -1.643, -1.576, -1.510, -1.445, -1.383, -1.323, -1.262, -1.202, -1.145, -1.087, -1.029, -0.976, -0.923, -0.873, -0.823, -0.769, -0.715, -0.665, -0.614, -0.562, -0.510, -0.455, -0.405, -0.354, -0.301, -0.250, -0.198, -0.148, -0.098, -0.047, +0.006, +0.052, +0.103, +0.152, +0.205, +0.256, +0.310, +0.361, +0.411, +0.463, +0.515, +0.574, +0.628, +0.680, +0.733, +0.786, +0.844, +0.903, +0.955, +1.009, +1.063, +1.121, +1.183, +1.243, +1.306, +1.365, +1.425, +1.498, +1.568, +1.635, +1.712, +1.790, +1.867, +1.947, +2.031, +2.117, +2.205, +2.302, +2.403, +2.510, +2.618, +2.746, +2.877, +3.018, +3.184, +3.369, +3.596, +3.878, +4.248, +4.882,  +5.39936,  +6.03734,  +6.60557,  +7.16341,  +8.20391,  +8.61569,  +8.73064,  +9.29369, +10.19096, +10.40366, +10.40366, +10.40366, +10.40366, +10.40366, +10.40366},  +0.006,  +0.043,   1.996, 0},
	//{"mod3_simple(7)",     1536, 65536,   0, {  -8.32814,  -8.32814,  -8.32814,  -8.32814,  -8.32814,  -8.32814,  -8.25818,  -7.96306,  -7.50261,  -6.92878,  -6.59012,  -6.05829,  -5.68964,  -5.37359,  -4.87882, -4.428, -3.918, -3.604, -3.357, -3.165, -2.986, -2.846, -2.708, -2.578, -2.464, -2.362, -2.264, -2.181, -2.096, -2.016, -1.938, -1.863, -1.789, -1.719, -1.648, -1.578, -1.514, -1.452, -1.390, -1.329, -1.265, -1.205, -1.143, -1.088, -1.032, -0.975, -0.918, -0.863, -0.812, -0.758, -0.706, -0.655, -0.602, -0.554, -0.501, -0.453, -0.403, -0.356, -0.309, -0.260, -0.209, -0.159, -0.110, -0.058, -0.006, +0.045, +0.093, +0.143, +0.191, +0.243, +0.292, +0.344, +0.398, +0.452, +0.503, +0.556, +0.612, +0.664, +0.714, +0.762, +0.818, +0.874, +0.932, +0.987, +1.044, +1.103, +1.164, +1.225, +1.286, +1.351, +1.420, +1.488, +1.556, +1.627, +1.705, +1.776, +1.847, +1.933, +2.012, +2.096, +2.189, +2.282, +2.386, +2.495, +2.611, +2.739, +2.874, +3.025, +3.196, +3.383, +3.616, +3.883, +4.253, +4.834,  +5.39406,  +6.07696,  +6.50518,  +6.97836,  +7.51691,  +7.99297,  +8.48790,  +8.72456,  +8.97044,  +9.02873,  +9.02873,  +9.02873,  +9.02873,  +9.02873,  +9.02873},  -0.006,  +0.038,   1.988, 0},
	//{"mod3_simple(7)",     1792, 65536,   0, {  -8.43880,  -8.43880,  -8.43880,  -8.43880,  -8.43880,  -8.43880,  -8.41396,  -8.30914,  -7.24819,  -6.94339,  -6.59954,  -6.18074,  -5.87447,  -5.48650,  -4.90144, -4.439, -3.914, -3.611, -3.360, -3.175, -3.011, -2.863, -2.726, -2.603, -2.492, -2.383, -2.280, -2.189, -2.101, -2.018, -1.943, -1.862, -1.789, -1.719, -1.650, -1.587, -1.521, -1.458, -1.397, -1.338, -1.277, -1.217, -1.156, -1.097, -1.041, -0.984, -0.930, -0.878, -0.825, -0.778, -0.727, -0.674, -0.623, -0.573, -0.521, -0.471, -0.420, -0.371, -0.320, -0.272, -0.220, -0.170, -0.118, -0.068, -0.019, +0.033, +0.079, +0.129, +0.182, +0.236, +0.287, +0.342, +0.393, +0.445, +0.499, +0.550, +0.601, +0.652, +0.705, +0.760, +0.815, +0.871, +0.930, +0.991, +1.051, +1.111, +1.170, +1.235, +1.293, +1.356, +1.417, +1.487, +1.553, +1.621, +1.689, +1.767, +1.844, +1.926, +2.013, +2.100, +2.195, +2.287, +2.386, +2.497, +2.617, +2.744, +2.884, +3.026, +3.198, +3.392, +3.622, +3.900, +4.286, +4.862,  +5.38148,  +6.06067,  +6.59449,  +7.13214,  +7.75298,  +8.24535,  +8.52340,  +8.81613,  +8.91360,  +8.93670,  +8.93670,  +8.93670,  +8.93670,  +8.93670,  +8.93670},  -0.019,  +0.032,   1.996, 0},
	//{"mod3_simple(7)",     2048, 65536,   0, {  -7.89500,  -7.89500,  -7.89500,  -7.89500,  -7.89500,  -7.89500,  -7.75467,  -7.16271,  -6.95246,  -6.73735,  -6.48359,  -6.03833,  -5.74107,  -5.40866,  -4.88221, -4.428, -3.926, -3.603, -3.361, -3.175, -3.012, -2.877, -2.745, -2.622, -2.508, -2.404, -2.302, -2.205, -2.115, -2.035, -1.957, -1.880, -1.808, -1.734, -1.670, -1.601, -1.537, -1.475, -1.413, -1.349, -1.290, -1.228, -1.172, -1.116, -1.058, -1.001, -0.946, -0.891, -0.837, -0.786, -0.732, -0.681, -0.626, -0.573, -0.521, -0.471, -0.424, -0.371, -0.322, -0.271, -0.221, -0.171, -0.119, -0.069, -0.018, +0.030, +0.081, +0.131, +0.182, +0.231, +0.281, +0.329, +0.381, +0.438, +0.488, +0.540, +0.592, +0.650, +0.701, +0.758, +0.811, +0.867, +0.928, +0.983, +1.041, +1.100, +1.160, +1.224, +1.288, +1.351, +1.422, +1.486, +1.557, +1.623, +1.696, +1.773, +1.852, +1.934, +2.021, +2.111, +2.196, +2.295, +2.397, +2.506, +2.619, +2.749, +2.876, +3.029, +3.206, +3.399, +3.607, +3.880, +4.256, +4.843,  +5.46499,  +6.13328,  +6.61196,  +7.29101,  +7.65620,  +7.91279,  +8.56487,  +9.10480,  +9.32114,  +9.37243,  +9.37243,  +9.37243,  +9.37243,  +9.37243,  +9.37243},  -0.018,  +0.026,   2.000, 0},
	//{"mod3_simple(7)",     2560, 65536,   0, {  -8.87667,  -8.87667,  -8.87667,  -8.87667,  -8.87667,  -8.87667,  -8.78957,  -8.42217,  -7.84391,  -6.94920,  -6.62594,  -6.19896,  -5.91058,  -5.44695,  -4.89952, -4.446, -3.947, -3.639, -3.389, -3.193, -3.026, -2.871, -2.733, -2.620, -2.513, -2.410, -2.313, -2.221, -2.138, -2.054, -1.967, -1.892, -1.820, -1.741, -1.667, -1.596, -1.527, -1.461, -1.402, -1.338, -1.283, -1.228, -1.172, -1.117, -1.058, -1.000, -0.945, -0.892, -0.836, -0.787, -0.738, -0.686, -0.635, -0.584, -0.536, -0.484, -0.432, -0.380, -0.328, -0.276, -0.226, -0.178, -0.131, -0.082, -0.034, +0.018, +0.070, +0.119, +0.169, +0.222, +0.273, +0.326, +0.378, +0.426, +0.480, +0.532, +0.585, +0.642, +0.697, +0.752, +0.806, +0.859, +0.913, +0.971, +1.030, +1.093, +1.156, +1.217, +1.280, +1.343, +1.408, +1.476, +1.547, +1.618, +1.688, +1.759, +1.832, +1.913, +1.996, +2.075, +2.165, +2.265, +2.365, +2.478, +2.596, +2.724, +2.862, +3.009, +3.183, +3.381, +3.601, +3.870, +4.248, +4.794,  +5.38190,  +6.15385,  +6.59486,  +6.91858,  +7.39487,  +7.66921,  +8.41739,  +9.13817, +10.10176, +10.33018, +10.33018, +10.33018, +10.33018, +10.33018, +10.33018},  -0.034,  +0.016,   1.996, 0},
	//{"mod3_simple(7)",     3072, 65536,   0, {  -8.12497,  -8.12497,  -8.12497,  -8.12497,  -8.12497,  -8.12497,  -8.03321,  -7.64615,  -7.36711,  -7.08109,  -6.71455,  -6.22169,  -5.75612,  -5.44549,  -4.89918, -4.442, -3.954, -3.633, -3.393, -3.190, -3.019, -2.870, -2.737, -2.619, -2.515, -2.409, -2.317, -2.223, -2.137, -2.053, -1.973, -1.894, -1.822, -1.751, -1.683, -1.615, -1.551, -1.482, -1.420, -1.357, -1.299, -1.236, -1.176, -1.118, -1.064, -1.008, -0.953, -0.900, -0.845, -0.793, -0.741, -0.689, -0.637, -0.586, -0.532, -0.482, -0.432, -0.380, -0.329, -0.276, -0.223, -0.175, -0.122, -0.072, -0.023, +0.027, +0.075, +0.123, +0.174, +0.224, +0.271, +0.322, +0.373, +0.423, +0.481, +0.534, +0.587, +0.640, +0.693, +0.748, +0.803, +0.855, +0.908, +0.964, +1.019, +1.075, +1.135, +1.200, +1.262, +1.329, +1.391, +1.458, +1.528, +1.604, +1.675, +1.746, +1.822, +1.900, +1.986, +2.070, +2.165, +2.264, +2.368, +2.476, +2.590, +2.714, +2.851, +3.005, +3.177, +3.370, +3.604, +3.877, +4.234, +4.818,  +5.41153,  +6.08139,  +6.53973,  +6.94278,  +7.64245,  +8.36457,  +8.63443,  +9.13203,  +9.30698,  +9.34845,  +9.34845,  +9.34845,  +9.34845,  +9.34845,  +9.34845},  -0.023,  +0.011,   1.995, 0},
	//{"mod3_simple(7)",     3584, 65536,   0, {  -8.63906,  -8.63906,  -8.63906,  -8.63906,  -8.63906,  -8.63906,  -8.44960,  -7.65037,  -7.15605,  -6.95363,  -6.69158,  -6.23191,  -5.78192,  -5.42714,  -4.90170, -4.441, -3.943, -3.633, -3.398, -3.196, -3.032, -2.882, -2.749, -2.624, -2.515, -2.416, -2.318, -2.219, -2.134, -2.040, -1.965, -1.893, -1.823, -1.753, -1.683, -1.617, -1.550, -1.491, -1.430, -1.370, -1.309, -1.247, -1.187, -1.131, -1.075, -1.017, -0.963, -0.908, -0.852, -0.800, -0.750, -0.699, -0.645, -0.591, -0.540, -0.486, -0.431, -0.379, -0.329, -0.278, -0.227, -0.180, -0.131, -0.080, -0.031, +0.020, +0.072, +0.122, +0.170, +0.222, +0.271, +0.323, +0.371, +0.424, +0.475, +0.525, +0.579, +0.632, +0.684, +0.740, +0.794, +0.853, +0.909, +0.968, +1.025, +1.081, +1.142, +1.200, +1.267, +1.330, +1.394, +1.460, +1.525, +1.596, +1.675, +1.748, +1.827, +1.911, +2.005, +2.088, +2.175, +2.269, +2.372, +2.479, +2.594, +2.721, +2.855, +2.996, +3.156, +3.338, +3.574, +3.862, +4.230, +4.813,  +5.34610,  +6.10109,  +6.51819,  +6.92634,  +7.46719,  +7.75725,  +8.13008,  +8.74040,  +9.26964,  +9.39510,  +9.39510,  +9.39510,  +9.39510,  +9.39510,  +9.39510},  -0.031,  +0.008,   1.993, 0},
	{"mod3_simple(7)",     4096, 65536,   0, {  -7.79223,  -7.79223,  -7.79223,  -7.79223,  -7.79223,  -7.79223,  -7.73747,  -7.50649,  -7.09749,  -6.82234,  -6.59469,  -6.14879,  -5.84277,  -5.47380,  -4.92121, -4.463, -3.948, -3.646, -3.404, -3.212, -3.050, -2.901, -2.770, -2.645, -2.538, -2.430, -2.322, -2.229, -2.137, -2.053, -1.969, -1.892, -1.823, -1.753, -1.682, -1.612, -1.542, -1.479, -1.415, -1.354, -1.295, -1.234, -1.179, -1.122, -1.067, -1.011, -0.955, -0.901, -0.849, -0.796, -0.743, -0.689, -0.638, -0.587, -0.536, -0.485, -0.435, -0.386, -0.338, -0.288, -0.238, -0.188, -0.139, -0.088, -0.035, +0.016, +0.066, +0.116, +0.166, +0.214, +0.263, +0.314, +0.368, +0.419, +0.471, +0.526, +0.577, +0.630, +0.681, +0.737, +0.790, +0.847, +0.901, +0.959, +1.016, +1.073, +1.131, +1.192, +1.255, +1.318, +1.386, +1.451, +1.521, +1.591, +1.668, +1.743, +1.823, +1.905, +1.990, +2.075, +2.171, +2.270, +2.373, +2.478, +2.596, +2.726, +2.875, +3.021, +3.188, +3.395, +3.611, +3.882, +4.242, +4.823,  +5.37463,  +6.05750,  +6.50343,  +6.97854,  +7.58761,  +7.93884,  +8.25975,  +9.11127,  +9.33195,  +9.38426,  +9.38426,  +9.38426,  +9.38426,  +9.38426,  +9.38426},  -0.035,  +0.007,   1.999, 0},

	//{"mod3_simple(8)",     4096, 65536,   0, {  -8.41912,  -8.41912,  -8.41912,  -8.41912,  -8.41912,  -8.41912,  -8.31235,  -7.86197,  -7.38471,  -6.99856,  -6.60733,  -6.30753,  -5.89980,  -5.37965,  -4.85432, -4.440, -3.923, -3.595, -3.354, -3.167, -2.994, -2.844, -2.708, -2.579, -2.459, -2.354, -2.252, -2.159, -2.067, -1.980, -1.897, -1.821, -1.742, -1.669, -1.603, -1.533, -1.469, -1.407, -1.345, -1.282, -1.219, -1.156, -1.097, -1.038, -0.982, -0.925, -0.873, -0.823, -0.771, -0.716, -0.664, -0.612, -0.555, -0.497, -0.444, -0.392, -0.341, -0.291, -0.240, -0.190, -0.143, -0.093, -0.038, +0.009, +0.059, +0.106, +0.156, +0.202, +0.252, +0.302, +0.352, +0.401, +0.452, +0.503, +0.556, +0.606, +0.659, +0.712, +0.762, +0.816, +0.870, +0.925, +0.978, +1.035, +1.093, +1.154, +1.213, +1.275, +1.334, +1.398, +1.461, +1.531, +1.602, +1.670, +1.745, +1.817, +1.894, +1.977, +2.059, +2.150, +2.243, +2.339, +2.441, +2.552, +2.662, +2.780, +2.908, +3.050, +3.208, +3.390, +3.608, +3.886, +4.239, +4.824,  +5.37532,  +6.01678,  +6.48183,  +6.96539,  +7.48079,  +7.91626,  +8.25407,  +9.26365, +10.66594, +10.99836, +10.99836, +10.99836, +10.99836, +10.99836, +10.99836},  +0.059,  +0.078,   1.992, 0},
	//{"mod3_simple(8)",     5120, 65536,   0, {  -7.41760,  -7.41760,  -7.41760,  -7.41760,  -7.41760,  -7.41760,  -7.41131,  -7.38477,  -7.09068,  -7.00693,  -6.71547,  -6.33409,  -5.93945,  -5.52906,  -5.00901, -4.511, -3.976, -3.649, -3.404, -3.196, -3.024, -2.868, -2.723, -2.606, -2.496, -2.388, -2.288, -2.198, -2.108, -2.022, -1.942, -1.865, -1.787, -1.717, -1.645, -1.572, -1.503, -1.442, -1.374, -1.308, -1.246, -1.190, -1.131, -1.073, -1.018, -0.959, -0.897, -0.840, -0.784, -0.730, -0.674, -0.619, -0.566, -0.513, -0.460, -0.410, -0.360, -0.311, -0.260, -0.208, -0.158, -0.108, -0.057, -0.009, +0.041, +0.092, +0.141, +0.189, +0.239, +0.288, +0.341, +0.388, +0.433, +0.487, +0.540, +0.588, +0.644, +0.694, +0.747, +0.805, +0.860, +0.916, +0.972, +1.031, +1.093, +1.149, +1.210, +1.275, +1.336, +1.399, +1.466, +1.531, +1.599, +1.667, +1.738, +1.814, +1.892, +1.967, +2.047, +2.134, +2.228, +2.327, +2.429, +2.532, +2.646, +2.767, +2.892, +3.032, +3.190, +3.368, +3.596, +3.871, +4.244, +4.835,  +5.38555,  +5.98227,  +6.38327,  +6.75901,  +7.37812,  +7.78076,  +8.35347,  +8.81515,  +9.01015,  +9.05638,  +9.05638,  +9.05638,  +9.05638,  +9.05638,  +9.05638},  +0.041,  +0.058,   2.003, 0},
	//{"mod3_simple(8)",     6144, 65536,   0, {  -8.81386,  -8.81386,  -8.81386,  -8.81386,  -8.81386,  -8.81386,  -8.61748,  -7.78908,  -7.39388,  -7.03230,  -6.58114,  -6.15873,  -5.83341,  -5.44023,  -4.97196, -4.472, -3.957, -3.637, -3.395, -3.190, -3.014, -2.864, -2.730, -2.606, -2.500, -2.393, -2.295, -2.200, -2.110, -2.025, -1.944, -1.867, -1.791, -1.724, -1.652, -1.581, -1.512, -1.447, -1.386, -1.319, -1.256, -1.199, -1.139, -1.083, -1.025, -0.970, -0.912, -0.852, -0.799, -0.748, -0.692, -0.641, -0.587, -0.533, -0.480, -0.433, -0.385, -0.335, -0.285, -0.237, -0.185, -0.134, -0.081, -0.031, +0.024, +0.074, +0.125, +0.179, +0.226, +0.275, +0.323, +0.377, +0.427, +0.475, +0.528, +0.582, +0.636, +0.690, +0.748, +0.806, +0.860, +0.915, +0.975, +1.036, +1.091, +1.151, +1.211, +1.267, +1.327, +1.388, +1.455, +1.520, +1.587, +1.653, +1.724, +1.797, +1.872, +1.952, +2.041, +2.126, +2.214, +2.313, +2.410, +2.516, +2.632, +2.753, +2.888, +3.041, +3.205, +3.396, +3.621, +3.884, +4.256, +4.852,  +5.35498,  +5.97952,  +6.45749,  +7.10966,  +7.72513,  +7.87284,  +8.39587,  +9.07898,  +9.79100,  +9.95979,  +9.95979,  +9.95979,  +9.95979,  +9.95979,  +9.95979},  +0.024,  +0.051,   2.002, 0},
	//{"mod3_simple(8)",     7168, 65536,   0, {  -9.14322,  -9.14322,  -9.14322,  -9.14322,  -9.14322,  -9.14322,  -9.04072,  -8.60833,  -7.43097,  -6.90397,  -6.66830,  -6.31377,  -5.97773,  -5.57777,  -5.04082, -4.531, -4.000, -3.658, -3.400, -3.200, -3.029, -2.866, -2.729, -2.601, -2.487, -2.385, -2.290, -2.196, -2.105, -2.023, -1.942, -1.867, -1.793, -1.725, -1.655, -1.585, -1.517, -1.452, -1.386, -1.330, -1.267, -1.203, -1.143, -1.086, -1.027, -0.970, -0.915, -0.857, -0.802, -0.743, -0.688, -0.636, -0.584, -0.532, -0.477, -0.429, -0.382, -0.330, -0.281, -0.231, -0.183, -0.133, -0.082, -0.034, +0.018, +0.069, +0.119, +0.170, +0.220, +0.273, +0.320, +0.371, +0.424, +0.474, +0.530, +0.582, +0.632, +0.683, +0.735, +0.794, +0.852, +0.912, +0.968, +1.023, +1.080, +1.143, +1.199, +1.257, +1.322, +1.387, +1.452, +1.517, +1.588, +1.652, +1.724, +1.794, +1.865, +1.941, +2.022, +2.106, +2.198, +2.296, +2.396, +2.501, +2.613, +2.730, +2.864, +3.014, +3.178, +3.366, +3.590, +3.858, +4.222, +4.800,  +5.36381,  +5.98378,  +6.36237,  +6.89974,  +7.22890,  +7.73132,  +8.22650,  +9.27391,  +9.68074,  +9.77718,  +9.77718,  +9.77718,  +9.77718,  +9.77718,  +9.77718},  +0.018,  +0.043,   1.999, 0},
	//{"mod3_simple(8)",     8192, 65536,   0, {  -8.70478,  -8.70478,  -8.70478,  -8.70478,  -8.70478,  -8.70478,  -8.59901,  -8.15283,  -7.51765,  -7.09056,  -6.77591,  -6.29405,  -5.91549,  -5.55486,  -4.95166, -4.504, -3.984, -3.661, -3.409, -3.214, -3.051, -2.899, -2.755, -2.624, -2.514, -2.408, -2.300, -2.206, -2.112, -2.028, -1.947, -1.872, -1.802, -1.730, -1.659, -1.588, -1.520, -1.456, -1.393, -1.329, -1.267, -1.208, -1.151, -1.095, -1.037, -0.981, -0.923, -0.866, -0.811, -0.753, -0.701, -0.649, -0.598, -0.547, -0.493, -0.441, -0.388, -0.337, -0.285, -0.233, -0.179, -0.127, -0.079, -0.025, +0.023, +0.072, +0.125, +0.175, +0.230, +0.277, +0.326, +0.377, +0.428, +0.475, +0.525, +0.578, +0.633, +0.684, +0.737, +0.788, +0.843, +0.895, +0.951, +1.010, +1.066, +1.124, +1.187, +1.247, +1.307, +1.372, +1.440, +1.503, +1.567, +1.633, +1.705, +1.778, +1.852, +1.933, +2.013, +2.094, +2.183, +2.281, +2.381, +2.496, +2.609, +2.732, +2.863, +3.004, +3.172, +3.371, +3.596, +3.861, +4.217, +4.771,  +5.27038,  +5.93309,  +6.41647,  +6.91642,  +7.41934,  +7.62616,  +8.15927,  +8.99170,  +9.41992,  +9.52143,  +9.52143,  +9.52143,  +9.52143,  +9.52143,  +9.52143},  +0.023,  +0.036,   1.998, 0},
	//{"mod3_simple(8)",    10240, 65536,   0, {  -9.07022,  -9.07022,  -9.07022,  -9.07022,  -9.07022,  -9.07022,  -8.96376,  -8.51470,  -7.86462,  -7.43810,  -6.97325,  -6.46951,  -6.03190,  -5.70244,  -5.02343, -4.523, -4.018, -3.697, -3.433, -3.240, -3.065, -2.896, -2.765, -2.642, -2.529, -2.416, -2.315, -2.218, -2.125, -2.033, -1.950, -1.875, -1.797, -1.725, -1.657, -1.586, -1.519, -1.452, -1.388, -1.331, -1.271, -1.208, -1.149, -1.095, -1.040, -0.983, -0.926, -0.871, -0.817, -0.764, -0.707, -0.654, -0.602, -0.549, -0.499, -0.446, -0.400, -0.347, -0.299, -0.245, -0.194, -0.142, -0.093, -0.043, +0.008, +0.059, +0.108, +0.158, +0.209, +0.263, +0.313, +0.362, +0.412, +0.462, +0.513, +0.565, +0.615, +0.667, +0.723, +0.776, +0.830, +0.888, +0.942, +1.000, +1.057, +1.113, +1.178, +1.239, +1.302, +1.369, +1.434, +1.501, +1.564, +1.636, +1.710, +1.786, +1.857, +1.940, +2.025, +2.111, +2.200, +2.292, +2.392, +2.493, +2.595, +2.707, +2.835, +2.975, +3.151, +3.334, +3.573, +3.841, +4.193, +4.785,  +5.33905,  +5.97391,  +6.41794,  +6.90848,  +7.48404,  +7.73854,  +8.25418,  +9.78287, +10.08581, +10.15762, +10.15762, +10.15762, +10.15762, +10.15762, +10.15762},  +0.008,  +0.027,   2.002, 0},
	//{"mod3_simple(8)",    12288, 65536,   0, {  -8.21983,  -8.21983,  -8.21983,  -8.21983,  -8.21983,  -8.21983,  -8.21886,  -8.21477,  -8.07992,  -7.56377,  -6.98143,  -6.51165,  -6.06842,  -5.65207,  -5.04780, -4.574, -4.011, -3.694, -3.445, -3.236, -3.057, -2.902, -2.762, -2.637, -2.523, -2.410, -2.304, -2.211, -2.129, -2.036, -1.959, -1.882, -1.803, -1.724, -1.656, -1.588, -1.522, -1.452, -1.394, -1.331, -1.269, -1.210, -1.150, -1.092, -1.032, -0.975, -0.920, -0.865, -0.812, -0.758, -0.703, -0.648, -0.599, -0.549, -0.497, -0.446, -0.395, -0.345, -0.296, -0.243, -0.194, -0.147, -0.097, -0.046, +0.004, +0.053, +0.102, +0.151, +0.200, +0.252, +0.300, +0.350, +0.404, +0.456, +0.504, +0.560, +0.615, +0.667, +0.722, +0.771, +0.826, +0.879, +0.937, +0.997, +1.055, +1.110, +1.166, +1.227, +1.286, +1.349, +1.412, +1.476, +1.545, +1.616, +1.690, +1.768, +1.845, +1.923, +2.009, +2.095, +2.184, +2.277, +2.380, +2.490, +2.599, +2.719, +2.840, +2.991, +3.161, +3.341, +3.559, +3.824, +4.190, +4.757,  +5.32167,  +5.91169,  +6.37081,  +6.88465,  +7.59262,  +7.89861,  +8.28909,  +9.33154,  +9.33212,  +9.33225,  +9.33225,  +9.33225,  +9.33225,  +9.33225,  +9.33225},  +0.004,  +0.023,   1.999, 0},
	//{"mod3_simple(8)",    14336, 65536,   0, {  -8.52345,  -8.52345,  -8.52345,  -8.52345,  -8.52345,  -8.52345,  -8.43078,  -8.03985,  -7.69865,  -7.33096,  -6.99415,  -6.50392,  -6.13911,  -5.69253,  -5.06127, -4.598, -4.046, -3.693, -3.441, -3.253, -3.074, -2.921, -2.775, -2.644, -2.525, -2.423, -2.322, -2.225, -2.137, -2.047, -1.964, -1.883, -1.807, -1.729, -1.657, -1.584, -1.514, -1.450, -1.392, -1.331, -1.269, -1.209, -1.151, -1.094, -1.042, -0.983, -0.932, -0.877, -0.823, -0.774, -0.720, -0.668, -0.615, -0.561, -0.509, -0.454, -0.404, -0.355, -0.307, -0.256, -0.207, -0.159, -0.107, -0.055, -0.007, +0.047, +0.098, +0.149, +0.199, +0.254, +0.303, +0.356, +0.407, +0.461, +0.513, +0.566, +0.619, +0.669, +0.723, +0.776, +0.830, +0.887, +0.938, +0.996, +1.054, +1.113, +1.173, +1.231, +1.290, +1.352, +1.413, +1.482, +1.550, +1.621, +1.693, +1.762, +1.837, +1.916, +1.995, +2.085, +2.170, +2.267, +2.375, +2.484, +2.600, +2.721, +2.852, +2.989, +3.154, +3.338, +3.561, +3.834, +4.212, +4.780,  +5.30766,  +5.92627,  +6.40033,  +6.81239,  +7.33915,  +7.74123,  +7.99401,  +8.04692,  +8.17769,  +8.20868,  +8.20868,  +8.20868,  +8.20868,  +8.20868,  +8.20868},  -0.007,  +0.018,   2.003, 0},
	//{"mod3_simple(8)",    16384, 65536,   0, {  -8.69750,  -8.69750,  -8.69750,  -8.69750,  -8.69750,  -8.69750,  -8.55962,  -7.97796,  -7.65919,  -7.03615,  -6.80181,  -6.37863,  -5.98081,  -5.66128,  -5.04868, -4.571, -4.019, -3.683, -3.420, -3.230, -3.048, -2.897, -2.751, -2.628, -2.518, -2.409, -2.302, -2.209, -2.122, -2.036, -1.953, -1.878, -1.808, -1.733, -1.663, -1.601, -1.529, -1.463, -1.402, -1.340, -1.281, -1.221, -1.161, -1.103, -1.045, -0.990, -0.935, -0.881, -0.827, -0.777, -0.724, -0.666, -0.611, -0.558, -0.502, -0.452, -0.403, -0.353, -0.303, -0.253, -0.204, -0.153, -0.103, -0.053, -0.001, +0.050, +0.099, +0.148, +0.199, +0.250, +0.302, +0.352, +0.403, +0.453, +0.505, +0.554, +0.605, +0.660, +0.712, +0.766, +0.822, +0.882, +0.942, +0.997, +1.057, +1.117, +1.180, +1.242, +1.301, +1.363, +1.429, +1.495, +1.563, +1.632, +1.702, +1.779, +1.856, +1.936, +2.021, +2.108, +2.193, +2.285, +2.372, +2.477, +2.592, +2.718, +2.855, +2.994, +3.162, +3.345, +3.564, +3.839, +4.188, +4.760,  +5.29385,  +5.87085,  +6.38433,  +6.85734,  +7.44218,  +7.70961,  +8.22262,  +8.75283,  +9.04621,  +9.11575,  +9.11575,  +9.11575,  +9.11575,  +9.11575,  +9.11575},  -0.001,  +0.022,   2.000, 0},
	//{"mod3_simple(8)",    24576, 65536,   0, {  -9.12214,  -9.12214,  -9.12214,  -9.12214,  -9.12214,  -9.12214,  -8.88155,  -7.86663,  -7.41536,  -7.15967,  -6.74095,  -6.28352,  -5.93036,  -5.55160,  -5.01763, -4.577, -4.034, -3.693, -3.438, -3.231, -3.067, -2.915, -2.785, -2.656, -2.537, -2.439, -2.339, -2.241, -2.148, -2.066, -1.979, -1.898, -1.824, -1.752, -1.680, -1.612, -1.539, -1.476, -1.409, -1.343, -1.282, -1.220, -1.161, -1.105, -1.049, -0.994, -0.937, -0.881, -0.827, -0.776, -0.725, -0.676, -0.623, -0.570, -0.518, -0.468, -0.418, -0.364, -0.314, -0.262, -0.210, -0.158, -0.108, -0.058, -0.007, +0.046, +0.095, +0.149, +0.198, +0.247, +0.300, +0.352, +0.402, +0.450, +0.504, +0.556, +0.607, +0.658, +0.712, +0.765, +0.819, +0.872, +0.928, +0.984, +1.045, +1.107, +1.166, +1.230, +1.293, +1.356, +1.422, +1.483, +1.553, +1.620, +1.692, +1.766, +1.840, +1.922, +2.006, +2.094, +2.179, +2.269, +2.370, +2.475, +2.589, +2.712, +2.847, +2.992, +3.149, +3.344, +3.562, +3.828, +4.189, +4.755,  +5.28477,  +5.90566,  +6.34656,  +6.66832,  +7.16810,  +7.30833,  +7.50291,  +8.92935,  +9.20772,  +9.27371,  +9.27371,  +9.27371,  +9.27371,  +9.27371,  +9.27371},  -0.007,  +0.013,   2.002, 0},
	{"mod3_simple(8)",    32768, 65536,   0, {  -8.80358,  -8.80358,  -8.80358,  -8.80358,  -8.80358,  -8.80358,  -8.65022,  -8.00328,  -7.46245,  -7.07660,  -6.70916,  -6.29641,  -5.89713,  -5.57985,  -5.01952, -4.544, -4.034, -3.709, -3.451, -3.243, -3.068, -2.918, -2.789, -2.665, -2.546, -2.442, -2.343, -2.249, -2.153, -2.074, -1.991, -1.915, -1.831, -1.759, -1.689, -1.618, -1.546, -1.480, -1.415, -1.357, -1.292, -1.228, -1.171, -1.114, -1.060, -1.004, -0.944, -0.892, -0.839, -0.788, -0.733, -0.681, -0.628, -0.575, -0.524, -0.469, -0.417, -0.366, -0.314, -0.265, -0.217, -0.166, -0.113, -0.066, -0.016, +0.033, +0.087, +0.134, +0.183, +0.229, +0.279, +0.332, +0.383, +0.437, +0.491, +0.548, +0.600, +0.652, +0.707, +0.759, +0.814, +0.871, +0.926, +0.986, +1.044, +1.102, +1.162, +1.223, +1.284, +1.345, +1.409, +1.467, +1.538, +1.609, +1.681, +1.754, +1.830, +1.908, +1.994, +2.078, +2.173, +2.269, +2.369, +2.479, +2.588, +2.713, +2.838, +2.976, +3.139, +3.315, +3.543, +3.801, +4.162, +4.778,  +5.27131,  +5.91522,  +6.30514,  +6.85867,  +7.36730,  +7.88911,  +8.14212,  +8.85606,  +8.98716,  +9.01823,  +9.01823,  +9.01823,  +9.01823,  +9.01823,  +9.01823},  -0.016,  +0.005,   2.000, 0},
	//{"mod3_simple(8)",    65536, 65536,   2, {  -8.33890,  -8.33890,  -8.33890,  -8.33890,  -8.33890,  -8.33890,  -8.26364,  -7.94614,  -7.54500,  -7.14867,  -6.92298,  -6.54412,  -6.12233,  -5.67577,  -5.05832, -4.577, -4.052, -3.728, -3.472, -3.263, -3.090, -2.938, -2.798, -2.674, -2.557, -2.451, -2.348, -2.253, -2.163, -2.080, -1.996, -1.923, -1.847, -1.767, -1.692, -1.623, -1.554, -1.487, -1.425, -1.365, -1.306, -1.247, -1.183, -1.125, -1.064, -1.006, -0.951, -0.891, -0.838, -0.781, -0.728, -0.674, -0.624, -0.572, -0.521, -0.470, -0.421, -0.368, -0.318, -0.269, -0.218, -0.170, -0.123, -0.073, -0.023, +0.029, +0.079, +0.132, +0.180, +0.232, +0.284, +0.335, +0.386, +0.434, +0.486, +0.536, +0.588, +0.641, +0.695, +0.750, +0.804, +0.859, +0.920, +0.975, +1.030, +1.090, +1.147, +1.208, +1.273, +1.337, +1.401, +1.467, +1.538, +1.603, +1.675, +1.748, +1.822, +1.900, +1.980, +2.069, +2.164, +2.256, +2.361, +2.460, +2.569, +2.690, +2.827, +2.962, +3.127, +3.308, +3.514, +3.801, +4.165, +4.730,  +5.27450,  +5.96609,  +6.41191,  +6.87721,  +7.54589,  +7.71461,  +8.07316,  +8.30250,  +8.36918,  +8.38498,  +8.38498,  +8.38498,  +8.38498,  +8.38498,  +8.38498},  -0.023,  -0.004,   2.001, 0},

	{"mod3_simple(9)",    65536, 65536,   1, {  -8.00631,  -8.00631,  -8.00631,  -8.00631,  -8.00631,  -8.00631,  -7.97828,  -7.86004,  -7.68655,  -7.38181,  -6.95952,  -6.43475,  -6.10145,  -5.66971,  -5.09981, -4.598, -4.040, -3.729, -3.491, -3.275, -3.096, -2.941, -2.801, -2.673, -2.557, -2.448, -2.344, -2.243, -2.150, -2.058, -1.979, -1.900, -1.824, -1.751, -1.674, -1.605, -1.537, -1.472, -1.407, -1.345, -1.280, -1.221, -1.162, -1.103, -1.044, -0.986, -0.931, -0.875, -0.820, -0.770, -0.713, -0.658, -0.604, -0.554, -0.500, -0.449, -0.397, -0.347, -0.296, -0.244, -0.194, -0.143, -0.091, -0.039, +0.011, +0.061, +0.110, +0.160, +0.212, +0.260, +0.310, +0.361, +0.412, +0.465, +0.516, +0.569, +0.622, +0.675, +0.731, +0.782, +0.838, +0.887, +0.940, +0.999, +1.059, +1.119, +1.180, +1.243, +1.306, +1.366, +1.431, +1.498, +1.568, +1.635, +1.714, +1.781, +1.862, +1.938, +2.016, +2.105, +2.193, +2.292, +2.398, +2.504, +2.608, +2.739, +2.860, +2.996, +3.157, +3.346, +3.573, +3.825, +4.168, +4.720,  +5.27325,  +5.89635,  +6.27358,  +6.66004,  +6.99777,  +7.43699,  +7.82631,  +8.26983,  +8.34037,  +8.35709,  +8.35709,  +8.35709,  +8.35709,  +8.35709,  +8.35709},  +0.011,  +0.019,   2.010, 0},

	//{"mod3_simple(10)",   131072, 16384,   0, {  -7.36099,  -7.36099,  -7.36099,  -7.36099,  -7.36099,  -7.36099,  -7.36099,  -7.36099,  -7.30005,  -7.11769,  -6.75107,  -6.36708,  -5.98314,  -5.52586,  -4.89394, -4.454, -3.958, -3.631, -3.372, -3.180, -2.990, -2.814, -2.693, -2.544, -2.432, -2.323, -2.231, -2.144, -2.047, -1.967, -1.883, -1.810, -1.744, -1.677, -1.607, -1.547, -1.482, -1.417, -1.353, -1.292, -1.224, -1.168, -1.106, -1.045, -0.986, -0.933, -0.878, -0.821, -0.759, -0.710, -0.652, -0.599, -0.551, -0.500, -0.448, -0.400, -0.355, -0.309, -0.258, -0.203, -0.157, -0.108, -0.061, -0.008, +0.044, +0.090, +0.145, +0.190, +0.239, +0.285, +0.335, +0.380, +0.434, +0.480, +0.530, +0.587, +0.637, +0.691, +0.745, +0.807, +0.861, +0.920, +0.976, +1.031, +1.089, +1.153, +1.209, +1.271, +1.337, +1.404, +1.470, +1.540, +1.613, +1.683, +1.758, +1.835, +1.917, +1.986, +2.062, +2.152, +2.240, +2.327, +2.430, +2.530, +2.635, +2.748, +2.870, +3.024, +3.182, +3.371, +3.579, +3.837, +4.226, +4.726,  +5.28985,  +5.92795,  +6.24854,  +6.63122,  +7.44831,  +8.22736,  +8.55018,  +8.66606,  +8.66606,  +8.66606,  +8.66606,  +8.66606,  +8.66606,  +8.66606,  +8.66606},  +0.044,  +0.070,   1.985, 0},
	//{"mod3_simple(10)",   196608, 16384,   0, {  -7.77273,  -7.77273,  -7.77273,  -7.77273,  -7.77273,  -7.77273,  -7.77273,  -7.77273,  -7.42273,  -6.66111,  -6.51701,  -6.23378,  -5.98772,  -5.63256,  -4.94244, -4.483, -3.990, -3.612, -3.387, -3.181, -2.996, -2.838, -2.700, -2.595, -2.478, -2.364, -2.244, -2.139, -2.053, -1.974, -1.903, -1.817, -1.743, -1.671, -1.597, -1.531, -1.458, -1.396, -1.344, -1.287, -1.226, -1.168, -1.111, -1.046, -0.990, -0.930, -0.875, -0.820, -0.766, -0.716, -0.666, -0.619, -0.572, -0.523, -0.476, -0.422, -0.375, -0.316, -0.262, -0.213, -0.168, -0.122, -0.064, -0.009, +0.039, +0.084, +0.137, +0.187, +0.238, +0.283, +0.328, +0.374, +0.428, +0.484, +0.541, +0.595, +0.650, +0.709, +0.760, +0.812, +0.866, +0.928, +0.984, +1.038, +1.097, +1.164, +1.221, +1.280, +1.340, +1.409, +1.483, +1.549, +1.605, +1.671, +1.748, +1.831, +1.896, +1.972, +2.055, +2.136, +2.214, +2.317, +2.410, +2.518, +2.633, +2.765, +2.896, +3.037, +3.178, +3.353, +3.556, +3.848, +4.192, +4.836,  +5.34361,  +5.94265,  +6.26416,  +6.59979,  +7.22993,  +7.68981,  +7.86043,  +7.91134,  +7.91134,  +7.91134,  +7.91134,  +7.91134,  +7.91134,  +7.91134,  +7.91134},  +0.039,  +0.066,   1.990, 0},
	//{"mod3_simple(10)",   262144, 16384,   0, {  -7.78800,  -7.78800,  -7.78800,  -7.78800,  -7.78800,  -7.78800,  -7.78800,  -7.78800,  -7.73097,  -7.60582,  -7.04944,  -6.03482,  -5.75046,  -5.40645,  -4.94926, -4.544, -4.029, -3.735, -3.484, -3.241, -3.066, -2.892, -2.735, -2.610, -2.492, -2.390, -2.276, -2.177, -2.094, -2.019, -1.942, -1.860, -1.780, -1.705, -1.639, -1.570, -1.505, -1.445, -1.387, -1.319, -1.257, -1.192, -1.134, -1.075, -1.024, -0.973, -0.912, -0.857, -0.799, -0.739, -0.685, -0.631, -0.575, -0.525, -0.480, -0.428, -0.381, -0.328, -0.282, -0.229, -0.177, -0.129, -0.080, -0.029, +0.020, +0.073, +0.113, +0.165, +0.223, +0.275, +0.325, +0.386, +0.435, +0.487, +0.538, +0.591, +0.643, +0.699, +0.752, +0.811, +0.864, +0.917, +0.965, +1.014, +1.073, +1.131, +1.195, +1.259, +1.315, +1.379, +1.444, +1.513, +1.572, +1.637, +1.705, +1.774, +1.846, +1.916, +1.992, +2.084, +2.178, +2.275, +2.377, +2.471, +2.584, +2.711, +2.856, +2.996, +3.159, +3.330, +3.576, +3.836, +4.222, +4.825,  +5.26132,  +5.82958,  +6.20809,  +6.69831,  +7.46459,  +7.94261,  +8.68762,  +9.00527,  +9.00527,  +9.00527,  +9.00527,  +9.00527,  +9.00527,  +9.00527,  +9.00527},  +0.020,  +0.039,   1.994, 0},
	//{"mod3_simple(10)",   524288, 16384,   0, {  -7.59228,  -7.59228,  -7.59228,  -7.59228,  -7.59228,  -7.59228,  -7.59228,  -7.59228,  -7.47603,  -7.18937,  -6.89122,  -6.25687,  -6.01179,  -5.57812,  -5.07887, -4.596, -4.052, -3.712, -3.453, -3.250, -3.050, -2.905, -2.768, -2.639, -2.527, -2.420, -2.314, -2.215, -2.109, -2.023, -1.941, -1.859, -1.790, -1.708, -1.636, -1.569, -1.500, -1.429, -1.351, -1.295, -1.242, -1.176, -1.126, -1.063, -1.005, -0.945, -0.888, -0.829, -0.772, -0.717, -0.667, -0.613, -0.565, -0.515, -0.467, -0.418, -0.375, -0.323, -0.270, -0.224, -0.165, -0.115, -0.066, -0.013, +0.036, +0.088, +0.133, +0.187, +0.234, +0.288, +0.341, +0.393, +0.442, +0.498, +0.544, +0.592, +0.645, +0.693, +0.739, +0.790, +0.852, +0.908, +0.968, +1.028, +1.085, +1.136, +1.201, +1.270, +1.332, +1.390, +1.451, +1.514, +1.580, +1.648, +1.711, +1.782, +1.854, +1.926, +1.998, +2.077, +2.167, +2.254, +2.354, +2.465, +2.569, +2.675, +2.817, +2.963, +3.137, +3.309, +3.534, +3.807, +4.141, +4.687,  +5.26157,  +5.80790,  +6.09735,  +6.42286,  +6.77142,  +7.54436,  +7.74152,  +7.77880,  +7.77880,  +7.77880,  +7.77880,  +7.77880,  +7.77880,  +7.77880,  +7.77880},  +0.036,  +0.037,   1.989, 0},
	{"mod3_simple(10)",  1048576, 16384,   0, {  -7.79812,  -7.79812,  -7.79812,  -7.79812,  -7.79812,  -7.79812,  -7.79812,  -7.79812,  -7.72475,  -7.56113,  -7.23996,  -6.68580,  -6.20131,  -5.78887,  -5.18851, -4.664, -4.085, -3.719, -3.451, -3.238, -3.091, -2.929, -2.773, -2.648, -2.534, -2.442, -2.336, -2.244, -2.154, -2.062, -1.988, -1.915, -1.842, -1.769, -1.696, -1.623, -1.548, -1.475, -1.413, -1.351, -1.289, -1.223, -1.163, -1.112, -1.049, -0.991, -0.937, -0.882, -0.827, -0.769, -0.709, -0.655, -0.602, -0.551, -0.498, -0.441, -0.399, -0.353, -0.301, -0.248, -0.193, -0.147, -0.094, -0.046, +0.009, +0.063, +0.111, +0.164, +0.216, +0.267, +0.325, +0.378, +0.429, +0.486, +0.536, +0.586, +0.643, +0.693, +0.742, +0.801, +0.852, +0.908, +0.966, +1.025, +1.081, +1.144, +1.201, +1.254, +1.312, +1.372, +1.429, +1.493, +1.565, +1.634, +1.703, +1.783, +1.857, +1.932, +1.999, +2.087, +2.165, +2.262, +2.374, +2.471, +2.575, +2.688, +2.814, +2.954, +3.123, +3.294, +3.496, +3.784, +4.143, +4.724,  +5.16525,  +5.75116,  +6.05586,  +6.41674,  +6.89181,  +6.97000,  +7.59474,  +7.88248,  +7.88248,  +7.88248,  +7.88248,  +7.88248,  +7.88248,  +7.88248,  +7.88248},  +0.009,  +0.014,   2.003, 0},
	//{"mod3_simple(10)",  2097152, 16384,   0, {  -7.60412,  -7.60412,  -7.60412,  -7.60412,  -7.60412,  -7.60412,  -7.60412,  -7.60412,  -7.53542,  -7.36337,  -7.09398,  -6.45418,  -6.07480,  -5.74318,  -5.13474, -4.661, -4.119, -3.763, -3.473, -3.262, -3.078, -2.906, -2.757, -2.640, -2.514, -2.416, -2.313, -2.223, -2.127, -2.042, -1.957, -1.883, -1.815, -1.744, -1.679, -1.613, -1.545, -1.484, -1.415, -1.354, -1.295, -1.238, -1.177, -1.115, -1.051, -0.997, -0.941, -0.881, -0.832, -0.784, -0.731, -0.678, -0.618, -0.566, -0.512, -0.459, -0.410, -0.352, -0.307, -0.262, -0.208, -0.158, -0.110, -0.054, +0.001, +0.046, +0.096, +0.145, +0.196, +0.246, +0.291, +0.344, +0.397, +0.446, +0.500, +0.551, +0.604, +0.663, +0.727, +0.781, +0.840, +0.890, +0.947, +1.010, +1.069, +1.125, +1.180, +1.247, +1.312, +1.378, +1.446, +1.502, +1.573, +1.645, +1.718, +1.793, +1.863, +1.946, +2.028, +2.110, +2.193, +2.279, +2.379, +2.475, +2.608, +2.740, +2.877, +3.017, +3.179, +3.360, +3.567, +3.834, +4.204, +4.686,  +5.12650,  +5.76668,  +6.09170,  +6.39902,  +7.11353,  +7.53491,  +7.96053,  +8.15221,  +8.15221,  +8.15221,  +8.15221,  +8.15221,  +8.15221,  +8.15221,  +8.15221},  +0.001,  +0.015,   2.009, 0},
	//{"mod3_simple(10)",  4194304, 16384,   1, {  -7.65755,  -7.65755,  -7.65755,  -7.65755,  -7.65755,  -7.65755,  -7.65755,  -7.65755,  -7.61085,  -7.45617,  -7.06328,  -6.72808,  -6.13814,  -5.71361,  -5.06507, -4.557, -4.090, -3.728, -3.478, -3.269, -3.084, -2.930, -2.775, -2.671, -2.551, -2.434, -2.341, -2.257, -2.172, -2.079, -2.011, -1.923, -1.846, -1.779, -1.699, -1.634, -1.575, -1.507, -1.440, -1.374, -1.305, -1.247, -1.183, -1.113, -1.055, -1.002, -0.948, -0.896, -0.837, -0.778, -0.725, -0.663, -0.617, -0.557, -0.509, -0.461, -0.405, -0.355, -0.292, -0.242, -0.195, -0.149, -0.102, -0.052, -0.003, +0.049, +0.102, +0.151, +0.202, +0.248, +0.300, +0.351, +0.399, +0.449, +0.502, +0.555, +0.604, +0.652, +0.713, +0.765, +0.815, +0.871, +0.926, +0.986, +1.039, +1.099, +1.151, +1.207, +1.270, +1.334, +1.401, +1.471, +1.537, +1.605, +1.682, +1.760, +1.833, +1.917, +2.002, +2.088, +2.171, +2.259, +2.361, +2.461, +2.563, +2.686, +2.807, +2.948, +3.122, +3.318, +3.550, +3.798, +4.182, +4.746,  +5.33141,  +5.88454,  +6.31891,  +6.67498,  +6.87616,  +7.28128,  +7.43592,  +7.47973,  +7.47973,  +7.47973,  +7.47973,  +7.47973,  +7.47973,  +7.47973,  +7.47973},  -0.003,  +0.002,   2.005, 0},

	{"mod3_simple(11)",  4194304, 16384,   1, {  -7.79303,  -7.79303,  -7.79303,  -7.79303,  -7.79303,  -7.79303,  -7.79303,  -7.79303,  -7.73913,  -7.53041,  -6.84429,  -6.47741,  -6.17558,  -5.73858,  -5.18767, -4.548, -4.005, -3.712, -3.476, -3.254, -3.079, -2.929, -2.789, -2.665, -2.543, -2.431, -2.329, -2.240, -2.147, -2.055, -1.974, -1.893, -1.808, -1.744, -1.684, -1.610, -1.540, -1.470, -1.407, -1.340, -1.284, -1.218, -1.155, -1.099, -1.040, -0.980, -0.934, -0.875, -0.824, -0.770, -0.717, -0.663, -0.612, -0.561, -0.507, -0.451, -0.398, -0.348, -0.295, -0.243, -0.193, -0.142, -0.092, -0.040, +0.001, +0.055, +0.100, +0.155, +0.204, +0.246, +0.297, +0.350, +0.397, +0.455, +0.504, +0.555, +0.607, +0.669, +0.715, +0.769, +0.820, +0.875, +0.926, +0.982, +1.050, +1.112, +1.168, +1.230, +1.293, +1.351, +1.413, +1.479, +1.539, +1.607, +1.681, +1.751, +1.824, +1.908, +1.978, +2.057, +2.150, +2.244, +2.349, +2.443, +2.547, +2.652, +2.785, +2.927, +3.095, +3.306, +3.543, +3.801, +4.135, +4.688,  +5.21634,  +5.72814,  +6.14076,  +6.59557,  +7.33163,  +8.11925,  +8.67769,  +8.89508,  +8.89508,  +8.89508,  +8.89508,  +8.89508,  +8.89508,  +8.89508,  +8.89508},  +0.001,  +0.007,   1.991, 0},

	{ NULL, 0, 0, 0, { 0.0 }, 0.0, 0.0, 0.0, 0 }
};

TestCalibrationManager calibration_manager(raw_calibration_data_array117, raw_calibration_data_array129);

static void truncate_table_bits(Uint64 *counts, double *probs, int old_bits, int new_bits) {
	int ns = 1 << new_bits;
	int os = 1 << old_bits;
	if (probs) for (int i = ns; i < os; i++) {
		int ni = i & (ns - 1);
		counts[ni] += counts[i];
		counts[i] = 0;
		probs[ni] += probs[i];
		probs[i] = 0;
	}
	else for (int i = ns; i < os; i++) {
		int ni = i & (ns - 1);
		counts[ni] += counts[i];
		counts[i] = 0;
	}
}
class TableIndexMasker {
	Uint32 lookup0[256];
	Uint32 lookup1[256];
	Uint32 lookup2[256];
	Uint32 lookup3[256];
public:
	void set_mask(int old_bits, Uint32 mask) {
		int bit_to_bit_lookup[32];
		int new_bit = 0;
		for (int old_bit = 0; old_bit < 32; old_bit++) {
			if (mask & (1 << old_bit)) bit_to_bit_lookup[old_bit] = new_bit++;
			else bit_to_bit_lookup[old_bit] = -1;
		}
		for (int i = 0; i < 256; i++) {
			Uint32 transformed = 0;
			for (int b = 0; b < 8; b++) if (i & (1 << b)) transformed |= Uint32(i) << bit_to_bit_lookup[b + 0];
			lookup0[i] = transformed;
		}
		for (int i = 0; i < 256; i++) {
			Uint32 transformed = 0;
			for (int b = 0; b < 8; b++) if (i & (1 << b)) transformed |= Uint32(i) << bit_to_bit_lookup[b + 8];
			lookup1[i] = transformed;
		}
		for (int i = 0; i < 256; i++) {
			Uint32 transformed = 0;
			for (int b = 0; b < 8; b++) if (i & (1 << b)) transformed |= Uint32(i) << bit_to_bit_lookup[b + 16];
			lookup2[i] = transformed;
		}
		for (int i = 0; i < 256; i++) {
			Uint32 transformed = 0;
			for (int b = 0; b < 8; b++) if (i & (1 << b)) transformed |= Uint32(i) << bit_to_bit_lookup[b + 24];
			lookup3[i] = transformed;
		}
	}
	Uint32 transform_index(Uint32 old_index) { return lookup0[Uint8(old_index >> 0)] | lookup1[Uint8(old_index >> 8)] | lookup2[Uint8(old_index >> 16)] | lookup3[Uint8(old_index >> 24)]; }
};

void Tests::TestBlock::fill(RNGs::vRNG *rng, unsigned long numblocks) {
	int b = rng->get_native_output_size();
	unsigned long n = numblocks * SIZE;
	switch (b) {
		default:
		case 8:
			n >>= 0;
			for (unsigned long i = 0; i < n; i++) as8[i] = rng->raw8();
			break;
		case 16:
			n >>= 1;
			for (unsigned long i = 0; i < n; i++) {
				as16[i] = rng->raw16();
			}
			break;
		case 32:
			n >>= 2;
			for (unsigned long i = 0; i < n; i++) as32[i] = rng->raw32();
			break;
		case 64:
			n >>= 3;
			for (unsigned long i = 0; i < n; i++) as64[i] = rng->raw64();
			break;
	}
}
Tests::ListOfTests::ListOfTests(TestBaseclass **tests_) {
	for (int i = 0; tests_[i]; i++) tests.push_back(tests_[i]);
}
Tests::ListOfTests::ListOfTests( 
	TestBaseclass *test1, TestBaseclass *test2, TestBaseclass *test3, TestBaseclass *test4, 
	TestBaseclass *test5, TestBaseclass *test6, TestBaseclass *test7, TestBaseclass *test8,
	TestBaseclass *test9, TestBaseclass *test10, TestBaseclass *test11, TestBaseclass *test12,
	TestBaseclass *test13, TestBaseclass *test14, TestBaseclass *test15, TestBaseclass *test16
) {
	if (test1) tests.push_back(test1);
	if (test2) tests.push_back(test2);
	if (test3) tests.push_back(test3);
	if (test4) tests.push_back(test4);
	if (test5) tests.push_back(test5);
	if (test6) tests.push_back(test6);
	if (test7) tests.push_back(test7);
	if (test8) tests.push_back(test8);
	if (test9) tests.push_back(test9);
	if (test10) tests.push_back(test10);
	if (test11) tests.push_back(test11);
	if (test12) tests.push_back(test12);
	if (test13) tests.push_back(test13);
	if (test14) tests.push_back(test14);
	if (test15) tests.push_back(test15);
	if (test16) tests.push_back(test16);
}

void PractRand::Tests::TestBaseclass::init(PractRand::RNGs::vRNG *known_good) {
	blocks_tested = 0;
}
int PractRand::Tests::TestBaseclass::get_blocks_to_repeat() const { return 1; }



std::string PractRand::Tests::Gap16::get_name() const {
	return std::string("Gap-16");
}
void PractRand::Tests::Gap16::init( PractRand::RNGs::vRNG *known_good ) {
	int i;
	for (i = 0; i < 65536; i += 1) last[i] = 0;
	counts.reset_counts();
	autofail = false;
	blocks_tested = 0;
	warmup = 65536;
	extreme_lags.clear();
}
void PractRand::Tests::Gap16::increment_lag(Uint32 lag) {
	//if (lag < 1<<24) {index = (lag >> lookup_shift[lag>>16]) + lookup_offset[lag>>16];}
	//if (lag < (SIZE1 << SET1_SHIFT)) {//this should be true about 99.97% of the time
	//	counts.increment(lag >> SET1_SHIFT);
	//}
	//else {
		unsigned long tmp = lag - (SIZE1 << SET1_SHIFT);
		if (tmp < SIZE2 << SET2_SHIFT) {
			counts.increment(SIZE1 + (tmp >> SET2_SHIFT));
		}
		else {
			tmp = (tmp - (SIZE2 << SET2_SHIFT)) >> SET3_SHIFT;
			if (tmp < SIZE3) counts.increment(SIZE1 + SIZE2 + tmp);
			else extreme_lags.push_back(lag);
		}
	//}
}
void PractRand::Tests::Gap16::test_blocks(TestBlock *data, int numblocks) {
	if (autofail) return;
	while (warmup && numblocks > 64) {
		test_blocks(data, 64);
		data += 64;
		numblocks -= 64;
	}
	Uint32 ofs = Uint32(blocks_tested) * (TestBlock::SIZE / 2);
	unsigned long max = TestBlock::SIZE * numblocks / 2;
	Uint32 max2 = ofs + max;
	Uint16 *base = &data[0].as16[0];
	if (warmup) while (ofs != max2) {//warmup should last about 1.5 megabytes, but be highly variable
		Uint16 a = *(base++);
		Uint32 prior = last[a];
		last[a] = ++ofs;
		if (prior) {
			Uint32 lag = ofs - prior - 1;
			if (lag < (SIZE1 << SET1_SHIFT)) counts.increment(lag >> SET1_SHIFT);
			else increment_lag(lag);
		}
		else warmup--;
	}
	else while (ofs != max2) {
		Uint16 a;
		Uint32 prior, lag;

		a = *(base++);
		prior = last[a];
		last[a] = ++ofs;
		lag = ofs - prior - 1;
		if (lag < (SIZE1 << SET1_SHIFT)) counts.increment(lag >> SET1_SHIFT);
		else increment_lag(lag);

		a = *(base++);
		prior = last[a];
		last[a] = ++ofs;
		lag = Uint32(ofs - prior - 1);
		if (lag < (SIZE1 << SET1_SHIFT)) counts.increment(lag >> SET1_SHIFT);
		else increment_lag(lag);

		a = *(base++);
		prior = last[a];
		last[a] = ++ofs;
		lag = Uint32(ofs - prior - 1);
		if (lag < (SIZE1 << SET1_SHIFT)) counts.increment(lag >> SET1_SHIFT);
		else increment_lag(lag);

		a = *(base++);
		prior = last[a];
		last[a] = ++ofs;
		lag = Uint32(ofs - prior - 1);
		if (lag < (SIZE1 << SET1_SHIFT)) counts.increment(lag >> SET1_SHIFT);
		else increment_lag(lag);
	}
	Uint64 oblocks = blocks_tested;
	blocks_tested += numblocks;
	if ((oblocks>>19) != (blocks_tested>>19)) {//once every 512 megabytes or so... prevent overflow
		if (warmup) autofail = true;
		for (int i = 0; i < 65536; i++) {
			Uint32 n = last[i];
			if (Uint32(ofs - n) > 0x18000000) {
				autofail = true;
			}
		}
	}
}
//double PractRand::Tests::Gap16::get_result() {
void PractRand::Tests::Gap16::get_results( std::vector<TestResult> &results ) {
		//total weight: 1.000001
	if (blocks_tested < 3) return;
	double baseprob = 65535.0 / 65536.0;
	enum {TSIZE = SIZE1 + SIZE2 + SIZE3};
	std::vector<double> probs; probs.resize(TSIZE);
	//if (autofail) return 9876543210.;
	if (autofail) {
		results.push_back(TestResult(this->get_name() + ":!", autofail, autofail, TestResult::TYPE_PASSFAIL, 0.000001));
		return;
	}
	//correct probs for startup region:
	double lopped = 0;
	double inv_total_samples = 1.0 / (blocks_tested * (TestBlock::SIZE/2.));
	for (int i = 0; i < TSIZE; i++) {
		int first, last;
		if (i < SIZE1) {
			first = i << SET1_SHIFT;
			last = first + (1 << SET1_SHIFT) - 1;
		}
		else if (i < SIZE1+SIZE2) {
			int tmp = i - SIZE1;
			first = (SIZE1 << SET1_SHIFT) + (tmp << SET2_SHIFT);
			last = first + (1 << SET2_SHIFT) - 1;
		}
		else if (i < TSIZE-1) {
			int tmp = i - SIZE1 - SIZE2;
			first = (SIZE1 << SET1_SHIFT) + (SIZE2 << SET2_SHIFT) + (tmp << SET3_SHIFT);
			last = first + (1 << SET3_SHIFT) - 1;
		}
		else {
			first = (SIZE1 << SET1_SHIFT) + (SIZE2 << SET2_SHIFT) + ((SIZE3-1) << SET3_SHIFT);
			last = 123456789;
		}
		double fraction = ((first+last)/2.+1.) * inv_total_samples;
		if (fraction > 1) fraction = 1;
		double p = gap_probs(first, last, baseprob);
		lopped += p * fraction;
		probs[i] = p * (1 - fraction);
	}
	for (int i = 0; i < TSIZE; i++) {
		probs[i] /= 1 - lopped;
	}

	const Uint64 *count_ = counts.get_array();
	std::vector<Uint64> count; count.resize(TSIZE);
	Uint64 total_counts = 0;
	for (int i = 0; i < TSIZE; i++) {
		count[i] = count_[i];
		total_counts += count[i];
	}
	count[TSIZE-1] += extreme_lags.size();
	if (!total_counts) {
		results.push_back(TestResult(get_name() + ":?", total_counts != 0, total_counts != 0, blocks_tested > 16 ? TestResult::TYPE_PASSFAIL : TestResult::TYPE_UNKNOWN, 0.0001));
		return;
	}

	double r1, r2;
	int reduced_size = simplify_prob_table(
		TSIZE, 
		(blocks_tested * TestBlock::SIZE/2.) / 40., 
		&probs[0], &count[0], true, true
	);
	r1 = g_test(reduced_size, &probs[0], &count[0]);
//	double p1 = math_chisquared_to_pvalue(r1, reduced_size-1);
	r1 = math_chisquared_to_normal(r1, reduced_size-1);
	reduced_size = simplify_prob_table(
		reduced_size, 
		sqrt(blocks_tested * TestBlock::SIZE/2.), 
		&probs[0], &count[0], true, true
	);
	r2 = g_test(reduced_size, &probs[0], &count[0]);
//	double p2 = math_chisquared_to_pvalue(r2, reduced_size-1);
	r2 = math_chisquared_to_normal(r2, reduced_size-1);
	//double r;
	//if (r1 + 2.0 > fabs(r2)) r = r1 - 1;
	//else if (r1 - 2.0 < -fabs(r2)) r = r1 + 1;
	//else r = r2;
	//return r;
	TestCalibrationData *calib1 = calibration_manager.get_calibration_data("Gap-16:A", blocks_tested);
	TestCalibrationData *calib2 = calibration_manager.get_calibration_data("Gap-16:B", blocks_tested);
	double s1 = calib1->sample_to_suspicion(r1) * -1;
	double s2 = calib2->sample_to_suspicion(r2) * -1;
	double cp1 = TestResult::suspicion_to_pvalue(s1);
	double cp2 = TestResult::suspicion_to_pvalue(s2);
	results.push_back(TestResult(get_name() + ":A", r1, s1, TestResult::TYPE_GOOD_S, 0.5));
	results.push_back(TestResult(get_name() + ":B", r2, s2, TestResult::TYPE_GOOD_S, 0.5));
}
/*double PractRand::Tests::Gap16::result_to_pvalue ( Uint64 blocks, double r ) {
	if (1) {//very crude aproximation:
		if (r < -9) return 1.0;
		if (r < -7) return 0.99999;
		if (r < -6) return 0.9999;
		if (r < -5) return 0.999;
		if (r < -4) return 0.99;
		if (r < -3) return 0.9;
		if (r > 12) return 0.0;
		if (r > 10) return 0.00001;
		if (r >  9) return 0.0001;
		if (r >  8) return 0.001;
		if (r >  7) return 0.01;
		if (r >  6) return 0.1;
		return 0.5;
	}
}*/
std::string PractRand::Tests::Rep16::get_name() const {
	return std::string("Rep-16");
}
void PractRand::Tests::Rep16::init(PractRand::RNGs::vRNG *known_good) {
	TestBaseclass::init(known_good);
	counts.reset_counts();
}
void PractRand::Tests::Rep16::test_blocks(TestBlock *data, int numblocks) {
	Uint16 old1, old2;
	unsigned long index;
	unsigned long max = numblocks * TestBlock::SIZE / 2;
	if (blocks_tested) {
		index = 0;
		old1 = data->as16[-1];
		old2 = data->as16[-2];
	}
	else {
		index = 2;
		old1 = data->as16[0];
		old2 = data->as16[1];
	}
	for (; index < max; index++) {
		Uint16 cur;
		cur = data->as16[index];
		if (cur == old1) counts.increment(cur);
		if (cur == old2) counts.increment(cur + 65536);
		old2 = old1;
		old1 = cur;
	}
	blocks_tested += numblocks;
}
void  PractRand::Tests::Rep16::get_results(std::vector<TestResult> &results) {
	if (blocks_tested < 1) return;
	Uint64 len = Uint64(blocks_tested) * TestBlock::SIZE / 2;
	double e = len / (65536.0 * 65536.0);
	std::vector<int> counts2;
	const Uint64 *_counts = counts.get_array();
	for (unsigned long value = 0; value < 65536; value++) {
		Uint64 v = _counts[value];
		if (counts2.size() <= v) counts2.resize(v + 1, 0);
		counts2[v]++;
	}
	for (unsigned long i = 0; i < counts2.size(); i++) {
		std::printf("%ld: %d\n", i, counts2[i]);
	}
}



PractRand::Tests::DistC6::DistC6 ( 
	int length_, 
	int unitsL_, 
	int bits_clipped_0_, 
	int bits_clipped_1_, 
	int bits_clipped_2_
)
:
	length(length_),
	unitsL(unitsL_),
	bits_clipped_0(bits_clipped_0_),
	bits_clipped_1(bits_clipped_1_),
	bits_clipped_2(bits_clipped_2_)
{
//	mode = mode_;

	bits_per_sample = 3 + unitsL - bits_clipped_0 - bits_clipped_1 - bits_clipped_2;
	size = 1 << (bits_per_sample * length); 

	generate_reorder_codes();
	mask_pre = Uint32(-1);
	Uint32 tmp = (1 << bits_per_sample) - 1;
	Uint32 index = _advance_index(0, reorder_bits(0));
	for (int i = 0; i < length-1; i++) {
		index = _advance_index(index, reorder_bits(tmp));
	}
	mask_pre = index;
}
Uint32 PractRand::Tests::DistC6::_reorder_bits ( Uint32 code, int bits_per_sample, int length ) {
	if (!ENABLE_REORDER) return code;
	int tbits = bits_per_sample * length;
	int r = 0;
	for (int i = 0; i < length; i++) {
		for (int j = 0; j < bits_per_sample; j++) {
			int b = (code >> (i*bits_per_sample + j)) & 1;
			r |= b << (j*length+i);
		}
	}
	return r;
}
int PractRand::Tests::DistC6::transform_bitcount ( int bit_count ) const {
	int k = bit_count - (1 << (3 - 1 + unitsL));
	if (bits_clipped_1) {
		int min = -1 << (3 - 1 + unitsL - bits_clipped_1);
		int max = 1 - min;
		if (k < min) k = min;
		if (k > max) k = max;
	}
	return (((k >> bits_clipped_0) + (1 << (bits_per_sample-1)))) & ((1 << bits_per_sample) - 1);
}
void PractRand::Tests::DistC6::init( PractRand::RNGs::vRNG *known_good ) {
	counts.set_size(size);
	counts.reset_counts();
	last_index = 0;
	if (!ENABLE_8_BIT_BYPASS || unitsL) {
		for (int i = 0; i <= (1 << (3+unitsL)); i++) {
			int trans = transform_bitcount(i);
			int rc = reorder_codes(trans);
			int rb = reorder_bits(rc);
			lookup_table[i] = reorder_bits(reorder_codes(transform_bitcount(i)));
		}
	}
	else {
		Uint32 tmp[9];
		for (int i = 0; i <= (1 << (3+unitsL)); i++) {
			int trans = transform_bitcount(i);
			int rc = reorder_codes(trans);
			int rb = reorder_bits(rc);
			tmp[i] = reorder_bits(reorder_codes(transform_bitcount(i)));
		}
		for (int i = 0; i < 256; i++) {
			lookup_table[i] = tmp[count_bits8(i)];
		}
	}
	warmup = length-1;
	blocks_tested = 0;
}
std::string PractRand::Tests::DistC6::get_name() const {
	std::ostringstream tmp;
	tmp << "DC6-" << length << "x" << (1<<unitsL) << "Bytes-" << 
		(bits_clipped_0 + 10 * bits_clipped_1 + 100 * bits_clipped_2);
	return tmp.str();
//	return make_string("DC6:%dx%dByte:%d", length, 1 << unitsL, 
//		bits_clipped_0 + 10 * bits_clipped_1 + 100 * bits_clipped_2
//	);
}
void PractRand::Tests::DistC6::test_blocks(TestBlock *data, int numblocks) {
	int max = numblocks * (TestBlock::SIZE >> unitsL);
	int i = 0;
	while (warmup) {
		//int max2 = 1 * (TestBlock::SIZE >> unitsL);
		int max2 = ((warmup + (1 << 4) - 1) >> 4) << 4;//round up to a multiple of 16
		if (max2 > max) max2 = max;
		if (!ENABLE_8_BIT_BYPASS || unitsL) while (max2 > i) {
			int bits;
			switch (unitsL) {
				case 0: bits = count_bits8 (data->as8 [i]); break;
				case 1: bits = count_bits16(data->as16[i]); break;
				case 2: bits = count_bits32(data->as32[i]); break;
				case 3: bits = count_bits64(data->as64[i]); break;
				default: {
					issue_error();
					bits=0;//just to make the compiler happy
				} break;
			}
			advance_index(bits);
			i++;
			if (warmup) warmup--;
			else counts.increment(last_index);
		}
		else while (max2 > i) {
			last_index = _advance_index(last_index, lookup_table[data->as8[i++]]);
			if (warmup) warmup--;
			else counts.increment(last_index);
		}
	}
	Uint32 index = last_index;
	switch (unitsL) {
		case 0: {//8bit
			if (ENABLE_8_BIT_BYPASS) for (; i < max; ) {
				index = _advance_index(index, lookup_table[data->as8 [i++]]);
				counts.increment(index);
				index = _advance_index(index, lookup_table[data->as8 [i++]]);
				counts.increment(index);
				index = _advance_index(index, lookup_table[data->as8 [i++]]);
				counts.increment(index);
				index = _advance_index(index, lookup_table[data->as8 [i++]]);
				counts.increment(index);
			}
			else for (; i < max; ) {
				index = _advance_index(index, lookup_table[count_bits8 (data->as8 [i++])]);
				counts.increment(index);
				index = _advance_index(index, lookup_table[count_bits8 (data->as8 [i++])]);
				counts.increment(index);
				index = _advance_index(index, lookup_table[count_bits8 (data->as8 [i++])]);
				counts.increment(index);
				index = _advance_index(index, lookup_table[count_bits8 (data->as8 [i++])]);
				counts.increment(index);
			}
		}
		break;
		case 1: {//16bit
			for (; i < max; ) {
				index = _advance_index(index, lookup_table[count_bits16(data->as16[i++])]);
				counts.increment(index);
				index = _advance_index(index, lookup_table[count_bits16(data->as16[i++])]);
				counts.increment(index);
				index = _advance_index(index, lookup_table[count_bits16(data->as16[i++])]);
				counts.increment(index);
				index = _advance_index(index, lookup_table[count_bits16(data->as16[i++])]);
				counts.increment(index);
			}
		}
		break;
		case 2: {//32bit
			for (; i < max; ) {
				index = _advance_index(index, lookup_table[count_bits32(data->as32[i++])]);
				counts.increment(index);
				index = _advance_index(index, lookup_table[count_bits32(data->as32[i++])]);
				counts.increment(index);
				index = _advance_index(index, lookup_table[count_bits32(data->as32[i++])]);
				counts.increment(index);
				index = _advance_index(index, lookup_table[count_bits32(data->as32[i++])]);
				counts.increment(index);
			}
		}
		break;
		case 3: {//64bit
			for (; i < max; ) {
				index = _advance_index(index, lookup_table[count_bits64(data->as64[i++])]);
				counts.increment(index);
				index = _advance_index(index, lookup_table[count_bits64(data->as64[i++])]);
				counts.increment(index);
				index = _advance_index(index, lookup_table[count_bits64(data->as64[i++])]);
				counts.increment(index);
				index = _advance_index(index, lookup_table[count_bits64(data->as64[i++])]);
				counts.increment(index);
			}
		}
		break;
		default: {
			issue_error();
			return;
		}
		break;
	}
	if (i != max) issue_error("DC6 went past end?");
	last_index = index;
	blocks_tested += numblocks;
}

void PractRand::Tests::DistC6::generate_reorder_codes ( ) {
	long double _probs[64+1];
	long double _tprobs[64];
	int i;
	//probabilities of bit-counts
	int hNP = 4 << unitsL;
	int NP = 1 + (8 << unitsL);
	_probs[0] = _probs[NP-1] = 1 / pow(double(2), double(NP-1));
	for (i = 1; i <= hNP; i++) {
		_probs[i] = _probs[i-1] * double(NP - i) / double(i);
		_probs[NP-i-1] = _probs[i];
	}
	
	//probabilities of codes
	for (i = 0; i < (1 << bits_per_sample); i++) _tprobs[i] = 0;
	for (i = 0; i < NP; i++) _tprobs[transform_bitcount(i)] += _probs[i];
	//reordering codes
	for (i = 0; i < (1 << bits_per_sample); i++) {
		reorder_codes_table[i] = Uint8(i);
		unreorder_codes_table[i] = Uint8(i);
	}
//	return;
	if (!ENABLE_REORDER) return;
	for (i = 1; i < (1 << bits_per_sample); i++) {
		for (int j = i-1; j >= 0; j--) {
			if (_tprobs[j] < _tprobs[j+1]) {
				long double tmp_ld = _tprobs[j];
				_tprobs[j] = _tprobs[j+1];
				_tprobs[j+1] = tmp_ld;
				Uint8 tmp_i = unreorder_codes_table[j];
				unreorder_codes_table[j] = unreorder_codes_table[j+1];
				unreorder_codes_table[j+1] = tmp_i;
				tmp_i = reorder_codes_table[unreorder_codes_table[j+1]];
				reorder_codes_table[unreorder_codes_table[j+1]] = reorder_codes_table[unreorder_codes_table[j]];
				reorder_codes_table[unreorder_codes_table[j]] = tmp_i;
			}
		}
	}
}
void PractRand::Tests::DistC6::get_results(std::vector<TestResult> &results) {
		//total weight: 2.0
	if (!blocks_tested) return;
	long double _probs[64+1];
	long double _tprobs[64];
	int i;
	//probabilities of bit-counts
	int hNP = 4 << unitsL;
	int NP = 1 + (8 << unitsL);
	_probs[0] = _probs[NP-1] = 1 / pow(double(2), double(NP-1));
	for (i = 1; i <= hNP; i++) {
		_probs[i] = _probs[i-1] * double(NP - i) / double(i);
		_probs[NP-i-1] = _probs[i];
	}

	//probabilities of codes
	for (i = 0; i < (1 << bits_per_sample); i++) _tprobs[i] = 0;
	for (i = 0; i < NP; i++) _tprobs[transform_bitcount(i)] += _probs[i];

	long double sum1 = 0;
	for (i = 0; i < NP; i++) sum1 += _probs[i];
//	sum1 = sqrt(sum1);
//	for (i = 0; i < (1 << bits_per_sample); i++) _probs[i] /= sum1;
	sum1 = 0;
	for (i = 0; i < (1 << bits_per_sample); i++) sum1 += _tprobs[i];

	//duplicate counts and applying probabilities
	std::vector<Uint64> tmp_counts; tmp_counts.resize(size);
	std::vector<double> probs; probs.resize(size);
	//retaining the reordered ordering
	const Uint64 *count_ = counts.get_array();
	if (1) {
		for (i = 0; i < size; i++) {
			//int x = reorder_bits(i);
			int x = 0;
			for (int j = 0; j < length; j++) {
				Uint32 k = (i >> ((length-j-1) * bits_per_sample)) & ((1 << bits_per_sample)-1);
				x = _advance_index ( x, reorder_bits(reorder_codes(k)) );
			}
			tmp_counts[i] = count_[x];
		}
		for (i = 0; i < size; i++) {
			long double p = 1.0;
			Uint32 x = i;//unreorder_bits(i);
			for (int j = 0; j < length; j++) {
				Uint32 k = (x >> (j * bits_per_sample)) & ((1 << bits_per_sample)-1);
				p *= _tprobs[k];
			}
  			probs[i] = p;
		}
	}
	else {
		for (i = 0; i < size; i++) {
			int x = i;
			tmp_counts[i] = count_[x];
		}
		for (i = 0; i < size; i++) {
			long double p = 1.0;
			Uint32 x = unreorder_bits(i);
			for (int j = 0; j < length; j++) {
				Uint32 k = (x >> (j * bits_per_sample)) & ((1 << bits_per_sample)-1);
				k = unreorder_codes(k);
				p *= _tprobs[k];
			}
  			probs[i] = p;
		}
	}

	//finishing
	std::string base_name;
	{
		std::ostringstream tmp;
		tmp << "DC6-" << length << "x" << (1 << unitsL) << "Bytes-" <<
			(bits_clipped_0 + 10 * bits_clipped_1 + 100 * bits_clipped_2);
		base_name = tmp.str();
	}
	int reduced_size = simplify_prob_table(size,
		blocks_tested * (TestBlock::SIZE >> unitsL) / 25.0,
		&probs[0], &tmp_counts[0], true, true);
	double r = g_test(reduced_size, &probs[0], &tmp_counts[0]);
	r = math_chisquared_to_normal(r, reduced_size - 1);
	double weight = std::pow(2.0, 1.0 - unitsL/2.0);
	if (unitsL != 0) weight *= 0.75;
	if (size < 1024*128) weight *= 0.5;
	Uint64 min_len = calibration_manager.get_minimum_length(base_name);
	if (min_len && min_len <= blocks_tested) {
		TestCalibrationData *calib = calibration_manager.get_calibration_data(base_name, blocks_tested);
		double suspicion = calib->sample_to_suspicion(r) * -1;//negation to make the normal failure type occur at 0 instead of 1
		results.push_back(TestResult(get_name(), r, suspicion, TestResult::TYPE_GOOD_S, weight));
	}
	else if (blocks_tested > unitsL * 1024 * 1024 * 16) {
		results.push_back(TestResult(get_name(), r, 0, TestResult::TYPE_RAW_NORMAL, weight/5));
	}
	else {
		results.push_back(TestResult(get_name(), r, 0, TestResult::TYPE_RAW, .01));
	}
/*	if (unitsL == 0 && length == 9 && bits_clipped_0 == 1 && bits_clipped_1 == 0 && bits_clipped_2 == 0) {
		int L2 = int(floor(0.5 + std::log((double)blocks_tested) / std::log(2.0)));
		if (L2 > 36 - 10) L2 = 36-10;

		TestCalibrationData *calib = calibration_manager.get_calibration_data("DC6-9x1Bytes-1", blocks_tested);
		//TestCalibrationData &calib = standard_dc6_9x1_1[L2];
		double suspicion = calib->sample_to_suspicion(r) * -1;//negation to make the normal failure type occur at 0 instead of 1
		results.push_back(TestResult(get_name(), r, suspicion, TestResult::TYPE_GOOD_S, 2.0));
	}
	else {
		results.push_back(TestResult(get_name(), r, 0, TestResult::TYPE_RAW_NORMAL, 2.0));
	}
	//return r;*/
}
PractRand::Tests::DistC7::DistC7(int length_, int unitsL_, int bits_clipped_0_, int bits_clipped_1_, int bits_clipped_2_)
:
DistC6(length_, unitsL_, bits_clipped_0_, bits_clipped_1_, bits_clipped_2_)
{
}
void PractRand::Tests::DistC7::init(PractRand::RNGs::vRNG *known_good) {
	DistC6::init(known_good);
	odd_counts.set_size(counts.get_size());
	odd_counts.reset_counts();
	odd = false;
}
std::string PractRand::Tests::DistC7::get_name() const {
	std::ostringstream tmp;
	tmp << "DC7-" << length << "x" << (1 << unitsL) << "Bytes-" <<
		(bits_clipped_0 + 10 * bits_clipped_1 + 100 * bits_clipped_2);
	return tmp.str();
}
void PractRand::Tests::DistC7::test_blocks(TestBlock *data, int numblocks) {
	int max = numblocks * (TestBlock::SIZE >> unitsL);
	int i = 0;
	while (warmup) {
		//int max2 = 1 * (TestBlock::SIZE >> unitsL);
		int max2 = ((warmup + (1 << 4) - 1) >> 4) << 4;//round up to a multiple of 16
		if (max2 > max) max2 = max;
		if (!ENABLE_8_BIT_BYPASS || unitsL) while (max2 > i) {
			int bits;
			switch (unitsL) {
				case 0: bits = count_bits8(data->as8[i]); break;
				case 1: bits = count_bits16(data->as16[i]); break;
				case 2: bits = count_bits32(data->as32[i]); break;
				case 3: bits = count_bits64(data->as64[i]); break;
				default: {
					issue_error();
					bits = 0;//just to make the compiler happy
				} break;
			}
			advance_index(bits);
			i++;
			if (warmup) warmup--;
			else {
				if (odd) odd_counts.increment(last_index);
				else counts.increment(last_index);
			}
			odd = !odd;
		}
		else while (max2 > i) {
			last_index = _advance_index(last_index, lookup_table[data->as8[i++]]);
			if (warmup) warmup--;
			else {
				if (odd) odd_counts.increment(last_index);
				else counts.increment(last_index);
			}
			odd = !odd;
		}
	}
	if (odd) issue_error("DC7 - odd should be false post-warmup, right?");
	Uint32 index = last_index;
	switch (unitsL) {
		case 0: {//8bit
				if (ENABLE_8_BIT_BYPASS) for (; i < max;) {
					index = _advance_index(index, lookup_table[data->as8[i++]]);
					counts.increment(index);
					index = _advance_index(index, lookup_table[data->as8[i++]]);
					odd_counts.increment(index);
					index = _advance_index(index, lookup_table[data->as8[i++]]);
					counts.increment(index);
					index = _advance_index(index, lookup_table[data->as8[i++]]);
					odd_counts.increment(index);
				}
				else for (; i < max;) {
					index = _advance_index(index, lookup_table[count_bits8(data->as8[i++])]);
					counts.increment(index);
					index = _advance_index(index, lookup_table[count_bits8(data->as8[i++])]);
					odd_counts.increment(index);
					index = _advance_index(index, lookup_table[count_bits8(data->as8[i++])]);
					counts.increment(index);
					index = _advance_index(index, lookup_table[count_bits8(data->as8[i++])]);
					odd_counts.increment(index);
				}
		}
		break;
		case 1: {//16bit
				for (; i < max;) {
					index = _advance_index(index, lookup_table[count_bits16(data->as16[i++])]);
					counts.increment(index);
					index = _advance_index(index, lookup_table[count_bits16(data->as16[i++])]);
					odd_counts.increment(index);
					index = _advance_index(index, lookup_table[count_bits16(data->as16[i++])]);
					counts.increment(index);
					index = _advance_index(index, lookup_table[count_bits16(data->as16[i++])]);
					odd_counts.increment(index);
				}
		}
		break;
		case 2: {//32bit
				for (; i < max;) {
					index = _advance_index(index, lookup_table[count_bits32(data->as32[i++])]);
					counts.increment(index);
					index = _advance_index(index, lookup_table[count_bits32(data->as32[i++])]);
					odd_counts.increment(index);
					index = _advance_index(index, lookup_table[count_bits32(data->as32[i++])]);
					counts.increment(index);
					index = _advance_index(index, lookup_table[count_bits32(data->as32[i++])]);
					odd_counts.increment(index);
				}
		}
		break;
		case 3: {//64bit
				for (; i < max;) {
					index = _advance_index(index, lookup_table[count_bits64(data->as64[i++])]);
					counts.increment(index);
					index = _advance_index(index, lookup_table[count_bits64(data->as64[i++])]);
					odd_counts.increment(index);
					index = _advance_index(index, lookup_table[count_bits64(data->as64[i++])]);
					counts.increment(index);
					index = _advance_index(index, lookup_table[count_bits64(data->as64[i++])]);
					odd_counts.increment(index);
				}
		}
		break;
		default: {
				 issue_error();
				 return;
		}
		break;
	}
	if (i != max) issue_error("DC7 went past end?");
	last_index = index;
	blocks_tested += numblocks;
}
void PractRand::Tests::DistC7::get_results(std::vector<TestResult> &results) {
	long initial_results_size = results.size();
	long old_results_size;
	Uint64 tmp = blocks_tested;
	blocks_tested >>= 1;
	if (blocks_tested) {
		old_results_size = results.size();
		DistC6::get_results(results);
		if (results.size() == old_results_size + 1) results.back().name += ":even";
		old_results_size = results.size();
		counts.swap_array(odd_counts); DistC6::get_results(results); counts.swap_array(odd_counts);
		if (results.size() == old_results_size + 1) results.back().name += ":odd";
	}
	blocks_tested = tmp;
	const Uint64 *evens = counts.get_array();
	const Uint64 *odds = odd_counts.get_array();
	VariableSizeCount<Uint8> tmp_counts; tmp_counts.set_size(size);
	for (int i = 0; i < size; i++) tmp_counts.force_count(i, evens[i] + odds[i]);
	old_results_size = results.size();
	counts.swap_array(tmp_counts); DistC6::get_results(results); counts.swap_array(tmp_counts);
	if (results.size() == old_results_size + 1) results.back().name += ":both";
	if (results.size() != initial_results_size + 3) return;
	double raw = -2 * (std::log(results[initial_results_size].get_pvalue()) + std::log(results[initial_results_size + 1].get_pvalue()));
	double n = math_chisquared_to_normal(raw, 4);
	results.push_back(TestResult(get_name() + ":indep", n, 1 - math_chisquared_to_pvalue(raw, 4), TestResult::TYPE_GOOD_P, 0.5));
	return;
}



static const char bit_count_table8[256] = {
	0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4,
	1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
	1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
	2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
	1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
	2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
	2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
	3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
	1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
	2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
	2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
	3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
	2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
	3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
	3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
	4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8
};

#if 0
PractRand::Tests::BCFN_MT::BCFN_MT( int unitsL2_, int tbits_ ) {
	unitsL2 = unitsL2_;
	tbits = tbits_;
}
static std::vector<int> BCFN_MT_calculate_thresholds(int max_thresholds, Uint64 shift, int word_bits_L2, double target_fraction = 1.0/3) {
	Uint64 word_bits = 1ull << word_bits_L2;
	std::vector<int> rv;
	rv.push_back(1);
	if (word_bits <= 16384) {
		std::vector<double> pdf, cdf;
		Tests::get_hamming_weight_chances(1 << word_bits_L2, pdf, cdf);
		Uint64 n = word_bits/2;
		double target = cdf[n-1] * target_fraction;
		int max = n >> shift;
		for (Uint64 i = 1; i <= max; i++) {
			double cur = cdf[n-(i << shift)];
			if (cur >= target) continue;
			rv.push_back(i<<shift);
			if (rv.size() >= max_thresholds) break;
			target = cur * target_fraction;
		}
	}
	else {
		Uint64 n = word_bits/2;
		double target = (0.5 - 0.5 * Tests::calculate_center_bit_combination_chance(word_bits_L2)) * target_fraction;
		int max = n >> shift;
		double mean = word_bits/2.0;
		double dev = sqrt(word_bits * 0.5 * 0.5);
		double delta = 1.0 / dev;
		for (Uint64 i = 1; i < max; i++) {
			int ti = n+1-i;
			double norm = (ti - mean) / dev;
			double cur = Tests::math_normaldist_to_pvalue(norm + 0.5 * delta);
			if (cur >= target) continue;
			rv.push_back(i<<shift);
			if (rv.size() >= max_thresholds) break;
			target = cur * target_fraction;
		}
	}
	return rv;
}
void PractRand::Tests::BCFN_MT::init( PractRand::RNGs::vRNG *known_good ) {
	int tsize = 1 << tbits;
	mask = tsize - 1;
	for (int level = 0; level < LEVELS; level++) {
		int elevel = unitsL2 + level;
		if (true) {
			int shift = (elevel <= 4) ? 0 : (elevel/2 - 2);
			bitcount_shift[level] = shift;
			std::vector<int> thresholds = BCFN_MT_calculate_thresholds(THRESHOLDS, shift, elevel+3, 0.333);

			for (int threshold_index = 0; threshold_index < INDEX_SIZE; threshold_index++) threshold_lookup[threshold_index + level * THRESHOLDS] = 255;
			int threshold_n = 0;
			int next_threshold = thresholds[threshold_n]>>shift;//BCFNMT_find_next_threshold(1, (1 << shift), (1 << bitcount_shift[level]), 8 << elevel) >> shift;
			for (int threshold_index = 0; threshold_index < INDEX_SIZE; threshold_index++) {
				if (threshold_index == next_threshold) {
					if (threshold_n < THRESHOLDS-1) threshold_n++;
					next_threshold = threshold_n < thresholds.size() ? thresholds[threshold_n]>>shift : 0;
					//next_threshold = BCFNMT_find_next_threshold(next_threshold << shift, next_threshold << shift, 1 << shift, 8 << elevel) >> shift;
				}
				threshold_lookup[threshold_index + level * THRESHOLDS] = threshold_n;
			}
		}
		for (int threshold = 0; threshold < THRESHOLDS; threshold++) {
			int lti = level * THRESHOLDS + threshold;
			warmup[lti] = tbits - 1;
			cur[lti] = 0;
			//total[lti] = 0;
			counts[lti].set_size(tsize);
			counts[lti].reset_counts();
		}
		odd[level] = false;
		leftovers[level] = 0;
	}
	blocks_tested = 0;
}
void PractRand::Tests::BCFN_MT::deinit() {
	for (int i = 0; i < LEVELS; i++) {
		counts[i].reset_counts();
	}
}
std::string PractRand::Tests::BCFN_MT::get_name() const {
	std::ostringstream f;
	f << "BCFN_MT(" << unitsL2 << "," << "," << tbits << ")";
	return f.str();
	//return make_string("BCFN-%d", tbits);
}
void PractRand::Tests::BCFN_MT::test_blocks(TestBlock *data, int numblocks) {
	//while (warmup[4]) {
	while (true) {
#define GET_BITS8(pos)  (count_bits8 (data[0].as8 [i+(pos)]) - 4)
#define GET_BITS16(pos) (count_bits16(data[0].as16[i+(pos)]) - 8)
#define GET_BITS32(pos) (count_bits32(data[0].as32[i+(pos)]) - 16)
#define GET_BITS64(pos) (count_bits64(data[0].as64[i+(pos)]) - 32)
//#define HANDLE_BITS(level,var) if (var){tmp=var>>31;cur[level]=((cur[level]<<1)-tmp)&mask[level];if (warmup[level]) warmup[level]--; else counts[level].increment(cur[level]);}
		switch (unitsL2) {
			case 0: {
				for (int i = 0; i < TestBlock::SIZE / 1; i+=1) {
					int bits0;
					int tmp;
					//0
					bits0 = GET_BITS8(0);
					//HANDLE_BITS(0,bits0);
					handle_high_levels(0, bits0);
				}
			}
			break;
			case 1: {
				for (int i = 0; i < TestBlock::SIZE / 2; i+=1) {
					int bits0;
					int tmp;
					//0
					bits0 = GET_BITS16(0);
					//HANDLE_BITS(0,bits0);
					handle_high_levels(0, bits0);
				}
			}
			break;
			case 2: {
				for (int i = 0; i < TestBlock::SIZE / 4; i+=1) {
					int bits0;
					int tmp;
					//0
					bits0 = GET_BITS32(0);
					//HANDLE_BITS(0,bits0);
					handle_high_levels(0, bits0);
				}
			}
			break;
			case 3: {
				for (int i = 0; i < TestBlock::SIZE / 8; i+=1) {
					int bits0;
					int tmp;
					//0
					bits0 = GET_BITS64(0);
					//HANDLE_BITS(0,bits0);
					handle_high_levels(0, bits0);
				}
			}
			break;
			default:
				issue_error();
		}
#undef HANDLE_BITS
		blocks_tested += 1;
		data += 1;
		numblocks -= 1;
		if (!numblocks) return;
	}
}
void PractRand::Tests::BCFN_MT::get_results(std::vector<TestResult> &results) {
		//total weight: varies, generally 0.5 on short samples to 1.5 on long samples
	return;
	/*if (!blocks_tested) return;
	//results.push_back(TestResult(this->get_name() + ":!", autofail ? 1 : 0, autofail ? 1 : 0, TestResult::TYPE_PASSFAIL, 0.000001));
	static const double chance_skipped[15] = {
		0.0,              //1 bit
		0.5,              //2 bit
		0.375,            //4 bit
		0.2734375,        //8 bit
		0.196380615234375,//16 bit
		0.139949934091419,//32 bit
		0.0993467537479669,//64 bit
		0.0703860921700151,//128 bit
		0.0498191099361402,//256 bit
		0.0352446354858388,//512 bit
		0.0249278058726663,//1 Kbit
		0.0176287723815027,//2 Kbit
		0.0124661853439194,//4 Kbit
		0.0088151932052590,//8 Kbit
		0.0062333780055594//16 Kbit
	};
	const double ref_chance = 1 - chance_skipped[5];
	std::vector<Uint64> tempcount; tempcount.resize(1<<tbits);
	std::vector<double> probs; probs.resize(1<<tbits);
	for (int level = 0; level < LEVELS; level++) {
		counts[level].flush();
		for (int i = 0; i < tempcount.size(); i++) tempcount[i] = counts[level][i];
		double p = 1.0 / probs.size();
		for (int i = 0; i < probs.size(); i++) probs[i] = p;

		int nlevel = level + unitsL2 + 3;
		double chance = chance_skipped[(nlevel < 15) ? nlevel : 14];
		if (nlevel > 14) chance *= std::pow(0.5, (nlevel-14) * 0.5);
		chance = 1 - chance;
		double samples = blocks_tested * TestBlock::SIZE * pow(0.5, level+unitsL2) * chance - tbits + 1;
		if (samples < 0) samples = 0;
		int effective_bits;
		//	when tbits is 1, the result is a close aproximation of a normal distribution
		//	but at higher tbits, the samples are coorelated and the deviation from normality becomes large
		//	once the number of samples becomes large though, it stabilizes to a consistent pattern
		//	if the number of samples is not large enough to reach a stable pattern then I transform the data to make it act like tbits was smaller
		if (false) ;
		else if (samples >= 256 * 1024 * 1024) effective_bits = 15;
		else if (samples >= 128 * 1024 * 1024) effective_bits = 14;
		else if (samples >= 64 * 1024 * 1024) effective_bits = 13;
		else if (samples >= 16 * 1024 * 1024) effective_bits = 12;
		else if (samples >= 8 * 1024 * 1024) effective_bits = 11;
		else if (samples >= 2 * 1024 * 1024) effective_bits = 10;
		else if (samples >= 1 * 1024 * 1024) effective_bits = 9;
		else if (samples >= 256 * 1024) effective_bits = 8;
		else if (samples >= 64 * 1024) effective_bits = 7;
		else if (samples >= 32 * 1024) effective_bits = 6;
		else if (samples >= 8 * 1024) effective_bits = 5;
		else if (samples >= 1536) effective_bits = 4;
		else if (level) continue; else effective_bits = 4;
		if (samples < 16 * 1024 && level) continue;
		if (effective_bits > tbits) effective_bits = tbits;

		TestCalibrationData *calib = NULL;
		if (effective_bits == 4) {
			if (samples > 1<<13) calib = calibration_manager.get_calibration_data("BCFN-4/4", samples / ref_chance / (1024/4));
			else calib = calibration_manager.get_calibration_data("_BCFN-4/4", samples / ref_chance / (1024/4));
		}
		else if (effective_bits > 4) {
			std::ostringstream internal_name;
			internal_name << "_BCFN-" << effective_bits << "/4";
			calib = calibration_manager.get_calibration_data(internal_name.str(), samples / ref_chance / (1024/4));
		}
		
		std::ostringstream name;
		name << "BCFN(";
		//double w = 0.5 / (1.0 + level * 0.25 + level * level * 0.05);
		double w;
		if (unitsL2 + level < 5) w = (unitsL2 + level + 2) / 8.0;
		else w = std::pow(0.5, double((unitsL2 + level + 2)/2));
		if (w > 0.375) w = 0.375;
		if (!level) w += 0.125;

		if (calib) {
			name << unitsL2 << "+" << level << "," << tbits << "-" << (tbits - effective_bits) << ")";
			truncate_table_bits(&tempcount[0], &probs[0], tbits, effective_bits);
			double rv = g_test(1 << effective_bits, &probs[0], &tempcount[0]);
			double rn = math_chisquared_to_normal(rv, (1<<effective_bits)-1);
			double rs = calib->sample_to_suspicion(rn) * -1;
			results.push_back(TestResult(name.str(), rn, rs, TestResult::TYPE_GOOD_S, w ) );
		}
		else {
			name << unitsL2 << "+" << level << "," << tbits << ")";
			double rv = g_test(1 << tbits, &probs[0], &tempcount[0]);
			double rn = math_chisquared_to_normal(rv, (1<<tbits)-1);
			results.push_back(TestResult(name.str(), rn, std::fabs(rn) > 25, TestResult::TYPE_PASSFAIL, w ) );
		}
	}*/
}
//*/
#endif








PractRand::Tests::BCFN::BCFN( int unitsL2_, int tbits_, bool unbalanced_ ) {
	unitsL2 = unitsL2_;
	tbits = tbits_;
	unbalanced = unbalanced_;
}
void PractRand::Tests::BCFN::init( PractRand::RNGs::vRNG *known_good ) {
	for (int i = 0; i < LEVELS; i++) {
		int tbitsl = tbits;
		if (tbitsl <= 0) {
			issue_error();
		}
		int tsize = 1 << tbitsl;
		mask[i] = tsize - 1;
		leftovers[i] = 0;
		warmup[i] = tbitsl - 1;
		cur[i] = 0;
		even[i] = false;
		counts[i].set_size(tsize);
		counts[i].reset_counts();
	}
	blocks_tested = 0;
}
void PractRand::Tests::BCFN::deinit() {
	for (int i = 0; i < LEVELS; i++) {
		counts[i].reset_counts();
	}
}
std::string PractRand::Tests::BCFN::get_name() const {
	std::ostringstream f;
	f << "BCFN(" << unitsL2 << "," << tbits << (unbalanced ? ",T" : ",F") << ")";
	return f.str();
	//return make_string("BCFN-%d", tbits);
}

void PractRand::Tests::BCFN::get_results(std::vector<TestResult> &results) {
		//total weight: varies, generally 0.5 on short samples to 1.5 on long samples
	if (!blocks_tested) return;
	//results.push_back(TestResult(this->get_name() + ":!", autofail ? 1 : 0, autofail ? 1 : 0, TestResult::TYPE_PASSFAIL, 0.000001));
	//const double ref_chance = 1 - chance_skipped[5];
	const double ref_chance_unbalanced = 1 - calculate_center_bit_combination_chance(5);
	std::vector<Uint64> tempcount; tempcount.resize(1<<tbits);
	std::vector<double> probs; probs.resize(1<<tbits);
	double overall_raw = 0;
	double overall_bins = 0;
	for (int level = 0; level < LEVELS; level++) {
		int nlevel = level + unitsL2 + 3;
		double chance_balanced = calculate_center_bit_combination_chance(nlevel);
		double samples = blocks_tested * TestBlock::SIZE * pow(0.5, level+unitsL2);
		if (!unbalanced) samples *= 1 - chance_balanced;
		samples -= tbits + 1;
		if (samples < 0) samples = 0;
		int effective_bits;
		/*
			when tbits is 1, the result is a close aproximation of a normal distribution
			but at higher tbits, the samples are coorelated and the deviation from normality becomes large
			once the number of samples becomes large though, it stabilizes to a consistent pattern
			if the number of samples is not large enough to reach a stable pattern then I transform the data to make it act like tbits was smaller
		*/
		double safety_factor = 1;
		static const float unbalanced_safety_table[6] = {8,6,4.5,3,2,1.5};
		if (unbalanced) safety_factor = unbalanced_safety_table[nlevel>=9?5:nlevel-3];
		double adjusted_samples = samples / safety_factor;
		if (false) ;
		else if (adjusted_samples >= 256 * 1024 * 1024) effective_bits = 15;
		else if (adjusted_samples >= 128 * 1024 * 1024) effective_bits = 14;
		else if (adjusted_samples >= 64 * 1024 * 1024) effective_bits = 13;
		else if (adjusted_samples >= 16 * 1024 * 1024) effective_bits = 12;
		else if (adjusted_samples >= 8 * 1024 * 1024) effective_bits = 11;
		else if (adjusted_samples >= 2 * 1024 * 1024) effective_bits = 10;
		else if (adjusted_samples >= 1 * 1024 * 1024) effective_bits = 9;
		else if (adjusted_samples >= 256 * 1024) effective_bits = 8;
		else if (adjusted_samples >= 64 * 1024) effective_bits = 7;
		else if (adjusted_samples >= 32 * 1024) effective_bits = 6;
		else if (adjusted_samples >= 8 * 1024) effective_bits = 5;
		else if (adjusted_samples >= 1536) effective_bits = 4;
		else if (level || samples < 768) continue; else effective_bits = 4;
		if (effective_bits > tbits) effective_bits = tbits;

		TestCalibrationData *calib = NULL;
		if (effective_bits == 4) {
			if (adjusted_samples > 1<<13) calib = calibration_manager.get_calibration_data("BCFN-4/4", adjusted_samples / ref_chance_unbalanced / (1024/4));
			else calib = calibration_manager.get_calibration_data("_BCFN-4/4", adjusted_samples / ref_chance_unbalanced / (1024/4));
		}
		else if (effective_bits > 4) {
			std::ostringstream internal_name;
			internal_name << "_BCFN-" << effective_bits << "/4";
			calib = calibration_manager.get_calibration_data(internal_name.str(), adjusted_samples / ref_chance_unbalanced / (1024/4));
		}
		
		std::ostringstream name;
		name << "BCFN(";
		//double w = 0.5 / (1.0 + level * 0.25 + level * level * 0.05);
		double w;
		if (unitsL2 + level < 5) w = (unitsL2 + level + 2) / 8.0;
		else w = std::pow(0.5, double((unitsL2 + level + 2)/2));
		if (w > 0.375) w = 0.375;
		if (!level) w += 0.125;
		/*
			unitsL2+level		Base Weight
			0					3/8
			1					3/8
			2*					3/8
			3					3/8
			4					2/8
			5					1/8
			6					1/16
			7					1/16
			8					1/32
			9					1/32
			10					1/64
			11					1/64
			12					1/128
			13					1/128
			...					...
		*/
		counts[level].flush();
		for (int i = 0; i < tempcount.size(); i++) tempcount[i] = counts[level][i];
		if (unbalanced) {
			double p1 = 0.5 - 0.5 * chance_balanced;
			double p1L = std::log(p1), p0L = std::log(1-p1);
			for (int i = 0; i < probs.size(); i++) {
				int b = count_bits32(i);
				probs[i] = std::exp(p1L * b + p0L * (tbits-b));
			}
		}
		else {
			double p = 1.0 / probs.size();
			for (int i = 0; i < probs.size(); i++) probs[i] = p;
		}

		if (calib) {
			name << unitsL2 << "+" << level << "," << tbits << "-" << (tbits - effective_bits) << (unbalanced?",T":",F") << ")";
			truncate_table_bits(&tempcount[0], &probs[0], tbits, effective_bits);
			double rv = g_test(1 << effective_bits, &probs[0], &tempcount[0]);
			//for (int i = 0; i < 1<<effective_bits; i++) if (tempcount[i]) overall_raw += tempcount[i] * std::log(tempcount[i] / (probs[i] * samples));
			//overall_bins += (1 << effective_bits) - 1;
			double rn = math_chisquared_to_normal(rv, (1<<effective_bits)-1);
			double rs = calib->sample_to_suspicion(rn) * -1;
			results.push_back(TestResult(name.str(), rn, rs, TestResult::TYPE_GOOD_S, w ) );
		}
		else {
			name << unitsL2 << "+" << level << "," << tbits << ")";
			double rv = g_test(1 << tbits, &probs[0], &tempcount[0]);
			double rn = math_chisquared_to_normal(rv, (1<<tbits)-1);
			results.push_back(TestResult(name.str(), rn, std::fabs(rn) > 25 + (samples > 12345 ? 0 : 5), TestResult::TYPE_PASSFAIL, w ) );
		}
	}
	if (overall_bins) {
		double overall_norm = math_chisquared_to_normal(overall_raw*2, overall_bins);
		results.push_back(TestResult(get_name() + ":all", overall_norm, overall_norm, TestResult::TYPE_RAW_NORMAL, 0.1 ) );
	}
}
void PractRand::Tests::BCFN::handle_high_levels_balanced ( long level, long bits ) {
	if (level >= LEVELS) return;
	if (!even[level]) {
		even[level] = true;
		leftovers[level] = bits;
		return;
	}
	else {
		even[level] = false;
		bits += leftovers[level];
	}

	if (bits) {
		int tmp = bits < 0 ? 1 : 0;
		int index = ((cur[level] << 1) | tmp) & mask[level];
		cur[level] = index;
		if (warmup[level]) warmup[level] --;
		else {
			counts[level].increment(index);
		}
	}
	handle_high_levels_balanced(level+1, bits);
}
void PractRand::Tests::BCFN::handle_high_levels_unbalanced ( long level, long bits ) {
	if (level >= LEVELS) return;
	if (!even[level]) {
		even[level] = true;
		leftovers[level] = bits;
		return;
	}
	else {
		even[level] = false;
		bits += leftovers[level];
	}

	if (true) {
		int tmp = bits < 0 ? 1 : 0;
		int index = ((cur[level] << 1) | tmp) & mask[level];
		cur[level] = index;
		if (warmup[level]) warmup[level] --;
		else {
			counts[level].increment(index);
		}
	}
	handle_high_levels_unbalanced(level+1, bits);
}
void PractRand::Tests::BCFN::test_blocks(TestBlock *data, int numblocks) {
	while (blocks_tested < 16 && numblocks > 1) {
		test_blocks(data, 1);
		data += 1;
		numblocks -= 1;
	}
	if (unbalanced) while (warmup[4]) {
#define GET_BITS8(pos)  (count_bits8 (data[0].as8 [i+(pos)]) - 4)
#define GET_BITS16(pos) (count_bits16(data[0].as16[i+(pos)]) - 8)
#define GET_BITS32(pos) (count_bits32(data[0].as32[i+(pos)]) - 16)
#define GET_BITS64(pos) (count_bits64(data[0].as64[i+(pos)]) - 32)
#define HANDLE_BITS(level,var) if (true){tmp=var>>31;cur[level]=((cur[level]<<1)-tmp)&mask[level];if (warmup[level]) warmup[level]--; else counts[level].increment(cur[level]);}
		switch (unitsL2) {
			case 0: {
				for (int i = 0; i < TestBlock::SIZE / 1; i+=1) {
					int bits0;
					int tmp;
					//0
					bits0 = GET_BITS8(0);
					HANDLE_BITS(0,bits0);
					handle_high_levels_unbalanced(1, bits0);
				}
			}
			break;
			case 1: {
				for (int i = 0; i < TestBlock::SIZE / 2; i+=1) {
					int bits0;
					int tmp;
					//0
					bits0 = GET_BITS16(0);
					HANDLE_BITS(0,bits0);
					handle_high_levels_unbalanced(1, bits0);
				}
			}
			break;
			case 2: {
				for (int i = 0; i < TestBlock::SIZE / 4; i+=1) {
					int bits0;
					int tmp;
					//0
					bits0 = GET_BITS32(0);
					HANDLE_BITS(0,bits0);
					handle_high_levels_unbalanced(1, bits0);
				}
			}
			break;
			case 3: {
				for (int i = 0; i < TestBlock::SIZE / 8; i+=1) {
					int bits0;
					int tmp;
					//0
					bits0 = GET_BITS64(0);
					HANDLE_BITS(0,bits0);
					handle_high_levels_unbalanced(1, bits0);
				}
			}
			break;
			default:
				issue_error();
		}
#undef HANDLE_BITS
		blocks_tested += 1;
		data += 1;
		numblocks -= 1;
		if (!numblocks) return;
	}
	else while (warmup[4]) {//balanced
#define GET_BITS8(pos)  (count_bits8 (data[0].as8 [i+(pos)]) - 4)
#define GET_BITS16(pos) (count_bits16(data[0].as16[i+(pos)]) - 8)
#define GET_BITS32(pos) (count_bits32(data[0].as32[i+(pos)]) - 16)
#define GET_BITS64(pos) (count_bits64(data[0].as64[i+(pos)]) - 32)
#define HANDLE_BITS(level,var) if (var){tmp=var>>31;cur[level]=((cur[level]<<1)-tmp)&mask[level];if (warmup[level]) warmup[level]--; else counts[level].increment(cur[level]);}
		switch (unitsL2) {
			case 0: {
				for (int i = 0; i < TestBlock::SIZE / 1; i+=1) {
					int bits0;
					int tmp;
					//0
					bits0 = GET_BITS8(0);
					HANDLE_BITS(0,bits0);
					handle_high_levels_balanced(1, bits0);
				}
			}
			break;
			case 1: {
				for (int i = 0; i < TestBlock::SIZE / 2; i+=1) {
					int bits0;
					int tmp;
					//0
					bits0 = GET_BITS16(0);
					HANDLE_BITS(0,bits0);
					handle_high_levels_balanced(1, bits0);
				}
			}
			break;
			case 2: {
				for (int i = 0; i < TestBlock::SIZE / 4; i+=1) {
					int bits0;
					int tmp;
					//0
					bits0 = GET_BITS32(0);
					HANDLE_BITS(0,bits0);
					handle_high_levels_balanced(1, bits0);
				}
			}
			break;
			case 3: {
				for (int i = 0; i < TestBlock::SIZE / 8; i+=1) {
					int bits0;
					int tmp;
					//0
					bits0 = GET_BITS64(0);
					HANDLE_BITS(0,bits0);
					handle_high_levels_balanced(1, bits0);
				}
			}
			break;
			default:
				issue_error();
		}
#undef HANDLE_BITS
		blocks_tested += 1;
		data += 1;
		numblocks -= 1;
		if (!numblocks) return;
	}
	if (unbalanced) {
		unsigned long max = numblocks * TestBlock::SIZE >> unitsL2;
		switch (unitsL2) {
#define GET_BITS(a) GET_BITS8(a)
			case 0: {
				for (unsigned long i = 0; i < max; i+=8) {
					long bits0, bits1, bits2, bits3;
					long tmp;
#define HANDLE_BITS(level,var) if (true){tmp=var>>31;cur[level]=((cur[level]<<1)-tmp)&mask[level];if (warmup[level]) warmup[level]--; else counts[level].increment(cur[level]);}
					//0
					bits1 = bits0 = GET_BITS(0);
					HANDLE_BITS(0,bits0);
					//1
					bits2 = bits1 += bits0 = GET_BITS(1);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//2
					bits1 = bits0 = GET_BITS(2);
					HANDLE_BITS(0,bits0);
					//3
					bits3 = bits2 += bits1 += bits0 = GET_BITS(3);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					//4
					bits1 = bits0 = GET_BITS(4);
					HANDLE_BITS(0,bits0);
					//5
					bits2 = bits1 += bits0 = GET_BITS(5);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//6
					bits1 = bits0 = GET_BITS(6);
					HANDLE_BITS(0,bits0);
					//7
					bits3 += bits2 += bits1 += bits0 = GET_BITS(7);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					HANDLE_BITS(3,bits3);
					handle_high_levels_unbalanced ( 4, bits3 );
				}
			}
			break;
#undef GET_BITS
#define GET_BITS(a) GET_BITS16(a)
			case 1: {
				for (unsigned long i = 0; i < max; i+=8) {
					long bits0, bits1, bits2, bits3;
					long tmp;
					//0
					bits1 = bits0 = GET_BITS(0);
					HANDLE_BITS(0,bits0);
					//1
					bits2 = bits1 += bits0 = GET_BITS(1);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//2
					bits1 = bits0 = GET_BITS(2);
					HANDLE_BITS(0,bits0);
					//3
					bits3 = bits2 += bits1 += bits0 = GET_BITS(3);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					//4
					bits1 = bits0 = GET_BITS(4);
					HANDLE_BITS(0,bits0);
					//5
					bits2 = bits1 += bits0 = GET_BITS(5);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//6
					bits1 = bits0 = GET_BITS(6);
					HANDLE_BITS(0,bits0);
					//7
					bits3 += bits2 += bits1 += bits0 = GET_BITS(7);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					HANDLE_BITS(3,bits3);
					handle_high_levels_unbalanced ( 4, bits3 );
				}
			}
			break;
#undef GET_BITS
#define GET_BITS(a) GET_BITS32(a)
			case 2: {
				for (unsigned long i = 0; i < max; i+=8) {
					long bits0, bits1, bits2, bits3;
					long tmp;
					//0
					bits1 = bits0 = GET_BITS(0);
					HANDLE_BITS(0,bits0);
					//1
					bits2 = bits1 += bits0 = GET_BITS(1);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//2
					bits1 = bits0 = GET_BITS(2);
					HANDLE_BITS(0,bits0);
					//3
					bits3 = bits2 += bits1 += bits0 = GET_BITS(3);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					//4
					bits1 = bits0 = GET_BITS(4);
					HANDLE_BITS(0,bits0);
					//5
					bits2 = bits1 += bits0 = GET_BITS(5);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//6
					bits1 = bits0 = GET_BITS(6);
					HANDLE_BITS(0,bits0);
					//7
					bits3 += bits2 += bits1 += bits0 = GET_BITS(7);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					HANDLE_BITS(3,bits3);
					handle_high_levels_unbalanced ( 4, bits3 );
				}
			}
			break;
#undef GET_BITS
#define GET_BITS(a) GET_BITS64(a)
			case 3: {
				for (unsigned long i = 0; i < max; i+=8) {
					int bits0, bits1, bits2, bits3;
					int tmp;
					//0
					bits1 = bits0 = GET_BITS(0);
					HANDLE_BITS(0,bits0);
					//1
					bits2 = bits1 += bits0 = GET_BITS(1);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//2
					bits1 = bits0 = GET_BITS(2);
					HANDLE_BITS(0,bits0);
					//3
					bits3 = bits2 += bits1 += bits0 = GET_BITS(3);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					//4
					bits1 = bits0 = GET_BITS(4);
					HANDLE_BITS(0,bits0);
					//5
					bits2 = bits1 += bits0 = GET_BITS(5);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//6
					bits1 = bits0 = GET_BITS(6);
					HANDLE_BITS(0,bits0);
					//7
					bits3 += bits2 += bits1 += bits0 = GET_BITS(7);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					HANDLE_BITS(3,bits3);
					handle_high_levels_unbalanced ( 4, bits3 );
				}
			}
			break;
#undef GET_BITS
#undef HANDLE_BITS
			default:
				issue_error();
		}
	}
	else {//balanced
		unsigned long max = numblocks * TestBlock::SIZE >> unitsL2;
		switch (unitsL2) {
#define GET_BITS(a) GET_BITS8(a)
			case 0: {
				for (unsigned long i = 0; i < max; i+=8) {
					long bits0, bits1, bits2, bits3;
					long tmp;
#define HANDLE_BITS(level,var) if (var){tmp=var>>31;cur[level]=((cur[level]<<1)-tmp)&mask[level];if (warmup[level]) warmup[level]--; else counts[level].increment(cur[level]);}
					//0
					bits1 = bits0 = GET_BITS(0);
					HANDLE_BITS(0,bits0);
					//1
					bits2 = bits1 += bits0 = GET_BITS(1);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//2
					bits1 = bits0 = GET_BITS(2);
					HANDLE_BITS(0,bits0);
					//3
					bits3 = bits2 += bits1 += bits0 = GET_BITS(3);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					//4
					bits1 = bits0 = GET_BITS(4);
					HANDLE_BITS(0,bits0);
					//5
					bits2 = bits1 += bits0 = GET_BITS(5);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//6
					bits1 = bits0 = GET_BITS(6);
					HANDLE_BITS(0,bits0);
					//7
					bits3 += bits2 += bits1 += bits0 = GET_BITS(7);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					HANDLE_BITS(3,bits3);
					handle_high_levels_balanced ( 4, bits3 );
				}
			}
			break;
#undef GET_BITS
#define GET_BITS(a) GET_BITS16(a)
			case 1: {
				for (unsigned long i = 0; i < max; i+=8) {
					long bits0, bits1, bits2, bits3;
					long tmp;
					//0
					bits1 = bits0 = GET_BITS(0);
					HANDLE_BITS(0,bits0);
					//1
					bits2 = bits1 += bits0 = GET_BITS(1);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//2
					bits1 = bits0 = GET_BITS(2);
					HANDLE_BITS(0,bits0);
					//3
					bits3 = bits2 += bits1 += bits0 = GET_BITS(3);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					//4
					bits1 = bits0 = GET_BITS(4);
					HANDLE_BITS(0,bits0);
					//5
					bits2 = bits1 += bits0 = GET_BITS(5);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//6
					bits1 = bits0 = GET_BITS(6);
					HANDLE_BITS(0,bits0);
					//7
					bits3 += bits2 += bits1 += bits0 = GET_BITS(7);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					HANDLE_BITS(3,bits3);
					handle_high_levels_balanced ( 4, bits3 );
				}
			}
			break;
#undef GET_BITS
#define GET_BITS(a) GET_BITS32(a)
			case 2: {
				for (unsigned long i = 0; i < max; i+=8) {
					long bits0, bits1, bits2, bits3;
					long tmp;
					//0
					bits1 = bits0 = GET_BITS(0);
					HANDLE_BITS(0,bits0);
					//1
					bits2 = bits1 += bits0 = GET_BITS(1);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//2
					bits1 = bits0 = GET_BITS(2);
					HANDLE_BITS(0,bits0);
					//3
					bits3 = bits2 += bits1 += bits0 = GET_BITS(3);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					//4
					bits1 = bits0 = GET_BITS(4);
					HANDLE_BITS(0,bits0);
					//5
					bits2 = bits1 += bits0 = GET_BITS(5);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//6
					bits1 = bits0 = GET_BITS(6);
					HANDLE_BITS(0,bits0);
					//7
					bits3 += bits2 += bits1 += bits0 = GET_BITS(7);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					HANDLE_BITS(3,bits3);
					handle_high_levels_balanced ( 4, bits3 );
				}
			}
			break;
#undef GET_BITS
#define GET_BITS(a) GET_BITS64(a)
			case 3: {
				for (unsigned long i = 0; i < max; i+=8) {
					int bits0, bits1, bits2, bits3;
					int tmp;
					//0
					bits1 = bits0 = GET_BITS(0);
					HANDLE_BITS(0,bits0);
					//1
					bits2 = bits1 += bits0 = GET_BITS(1);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//2
					bits1 = bits0 = GET_BITS(2);
					HANDLE_BITS(0,bits0);
					//3
					bits3 = bits2 += bits1 += bits0 = GET_BITS(3);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					//4
					bits1 = bits0 = GET_BITS(4);
					HANDLE_BITS(0,bits0);
					//5
					bits2 = bits1 += bits0 = GET_BITS(5);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//6
					bits1 = bits0 = GET_BITS(6);
					HANDLE_BITS(0,bits0);
					//7
					bits3 += bits2 += bits1 += bits0 = GET_BITS(7);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					HANDLE_BITS(3,bits3);
					handle_high_levels_balanced ( 4, bits3 );
				}
			}
			break;
#undef GET_BITS
#undef GET_BITS8
#undef GET_BITS16
#undef GET_BITS32
#undef GET_BITS64
#undef HANDLE_BITS
			default:
				issue_error();
		}
	}
	blocks_tested += numblocks;
}



















PractRand::Tests::BCFN_FF::BCFN_FF( int unitsL2_, int tbits_, bool unbalanced_ ) {
	unitsL2 = unitsL2_;
	tbits = tbits_;
	unbalanced = unbalanced_;
}
void PractRand::Tests::BCFN_FF::init( PractRand::RNGs::vRNG *known_good ) {
	int tsize = 1 << tbits;
	mask = tsize - 1;
	for (int level = 0; level < LEVELS; level++) {
		leftovers[level] = 0;
		warmup[level] = tbits - 1;
		cur[level] = 0;
		even[level] = false;
		counts[level].set_size(tsize);
		counts[level].reset_counts();

		int tmp = level + unitsL2 + 3 - 9;//2048-4096 bits should be shift=1 for COUNTS2_SIZE==256
		shifts[level] = tmp > 0 ? tmp/2 : 0;
		for (int x = 0; x < COUNTS2_SIZE; x++) counts2[level][x] = 0;
		extreme_counts2[level].clear();
	}
	blocks_tested = 0;
}
void PractRand::Tests::BCFN_FF::deinit() {
	for (int i = 0; i < LEVELS; i++) {
		counts[i].reset_counts();
	}
}
std::string PractRand::Tests::BCFN_FF::get_name() const {
	std::ostringstream f;
	f << "BCFN_FF(" << unitsL2 << "," << tbits << ")";
	return f.str();
	//return make_string("BCFN-%d", tbits);
}
void PractRand::Tests::BCFN_FF::get_results(std::vector<TestResult> &results) {
		//total weight: varies, generally 0.5 on short samples to 1.5 on long samples
	if (!blocks_tested) return;
	//results.push_back(TestResult(this->get_name() + ":!", autofail ? 1 : 0, autofail ? 1 : 0, TestResult::TYPE_PASSFAIL, 0.000001));
	static const double chance_skipped[15] = {
		0.0,              //1 bit
		0.5,              //2 bit
		0.375,            //4 bit
		0.2734375,        //8 bit
		0.196380615234375,//16 bit
		0.139949934091419,//32 bit
		0.0993467537479669,//64 bit
		0.0703860921700151,//128 bit
		0.0498191099361402,//256 bit
		0.0352446354858388,//512 bit
		0.0249278058726663,//1 Kbit
		0.0176287723815027,//2 Kbit
		0.0124661853439194,//4 Kbit
		0.0088151932052590,//8 Kbit
		0.0062333780055594//16 Kbit
	};
	const double ref_chance = 1 - chance_skipped[5];

	const double ref_chance_unbalanced = 1 - calculate_center_bit_combination_chance(5);
	std::vector<Uint64> tempcount; tempcount.resize(1 << tbits);
	std::vector<double> probs; probs.resize(1 << tbits);
	double overall_raw = 0;
	double overall_bins = 0;
	for (int level = 0; level < LEVELS; level++) {
		int nlevel = level + unitsL2 + 3;
		double chance_balanced = calculate_center_bit_combination_chance(nlevel);
		double samples = blocks_tested * TestBlock::SIZE * pow(0.5, level + unitsL2);
		if (!unbalanced) samples *= 1 - chance_balanced;
		samples -= tbits + 1;
		if (samples < 0) samples = 0;
		int effective_bits;
		/*
		when tbits is 1, the result is a close aproximation of a normal distribution
		but at higher tbits, the samples are coorelated and the deviation from normality becomes large
		once the number of samples becomes large though, it stabilizes to a consistent pattern
		if the number of samples is not large enough to reach a stable pattern then I transform the data to make it act like tbits was smaller
		*/
		double safety_factor = 1;
		static const float unbalanced_safety_table[6] = { 8, 6, 4.5, 3, 2, 1.5 };
		if (unbalanced) safety_factor = unbalanced_safety_table[nlevel >= 9 ? 5 : nlevel - 3];
		double adjusted_samples = samples / safety_factor;
		if (false);
		else if (adjusted_samples >= 256 * 1024 * 1024) effective_bits = 15;
		else if (adjusted_samples >= 128 * 1024 * 1024) effective_bits = 14;
		else if (adjusted_samples >= 64 * 1024 * 1024) effective_bits = 13;
		else if (adjusted_samples >= 16 * 1024 * 1024) effective_bits = 12;
		else if (adjusted_samples >= 8 * 1024 * 1024) effective_bits = 11;
		else if (adjusted_samples >= 2 * 1024 * 1024) effective_bits = 10;
		else if (adjusted_samples >= 1 * 1024 * 1024) effective_bits = 9;
		else if (adjusted_samples >= 256 * 1024) effective_bits = 8;
		else if (adjusted_samples >= 64 * 1024) effective_bits = 7;
		else if (adjusted_samples >= 32 * 1024) effective_bits = 6;
		else if (adjusted_samples >= 8 * 1024) effective_bits = 5;
		else if (adjusted_samples >= 1536) effective_bits = 4;
		else if (level || samples < 768) continue; else effective_bits = 4;
		if (effective_bits > tbits) effective_bits = tbits;

		TestCalibrationData *calib = NULL;
		if (effective_bits == 4) {
			if (adjusted_samples > 1 << 13) calib = calibration_manager.get_calibration_data("BCFN-4/4", adjusted_samples / ref_chance_unbalanced / (1024 / 4));
			else calib = calibration_manager.get_calibration_data("_BCFN-4/4", adjusted_samples / ref_chance_unbalanced / (1024 / 4));
		}
		else if (effective_bits > 4) {
			std::ostringstream internal_name;
			internal_name << "_BCFN-" << effective_bits << "/4";
			calib = calibration_manager.get_calibration_data(internal_name.str(), adjusted_samples / ref_chance_unbalanced / (1024 / 4));
		}

		std::ostringstream name;
		name << "BCFN_FF(";
		//double w = 0.5 / (1.0 + level * 0.25 + level * level * 0.05);
		double w;
		if (unitsL2 + level < 5) w = (unitsL2 + level + 2) / 8.0;
		else w = std::pow(0.5, double((unitsL2 + level + 2) / 2));
		if (w > 0.375) w = 0.375;
		if (!level) w += 0.125;
		/*
		unitsL2+level		Base Weight
		0					3/8
		1					3/8
		2*					3/8
		3					3/8
		4					2/8
		5					1/8
		6					1/16
		7					1/16
		8					1/32
		9					1/32
		10					1/64
		11					1/64
		12					1/128
		13					1/128
		...					...
		*/
		counts[level].flush();
		for (int i = 0; i < tempcount.size(); i++) tempcount[i] = counts[level][i];
		if (unbalanced) {
			double p1 = 0.5 - 0.5 * chance_balanced;
			double p1L = std::log(p1), p0L = std::log(1 - p1);
			for (int i = 0; i < probs.size(); i++) {
				int b = count_bits32(i);
				probs[i] = std::exp(p1L * b + p0L * (tbits - b));
			}
		}
		else {
			double p = 1.0 / probs.size();
			for (int i = 0; i < probs.size(); i++) probs[i] = p;
		}

		if (calib) {
			name << unitsL2 << "+" << level << "," << tbits << "-" << (tbits - effective_bits) << (unbalanced ? ",T" : ",F") << ")";
			truncate_table_bits(&tempcount[0], &probs[0], tbits, effective_bits);
			double rv = g_test(1 << effective_bits, &probs[0], &tempcount[0]);
			//for (int i = 0; i < 1<<effective_bits; i++) if (tempcount[i]) overall_raw += tempcount[i] * std::log(tempcount[i] / (probs[i] * samples));
			//overall_bins += (1 << effective_bits) - 1;
			double rn = math_chisquared_to_normal(rv, (1 << effective_bits) - 1);
			double rs = calib->sample_to_suspicion(rn) * -1;
			results.push_back(TestResult(name.str(), rn, rs, TestResult::TYPE_GOOD_S, w));
		}
		else {
			name << unitsL2 << "+" << level << "," << tbits << ")";
			double rv = g_test(1 << tbits, &probs[0], &tempcount[0]);
			double rn = math_chisquared_to_normal(rv, (1 << tbits) - 1);
			results.push_back(TestResult(name.str(), rn, std::fabs(rn) > 25 + (samples > 12345 ? 0 : 5), TestResult::TYPE_PASSFAIL, w));
		}
	}
	if (overall_bins) {
		double overall_norm = math_chisquared_to_normal(overall_raw * 2, overall_bins);
		results.push_back(TestResult(get_name() + ":all", overall_norm, overall_norm, TestResult::TYPE_RAW_NORMAL, 0.1));
	}

	for (int level = 0; level < LEVELS; level++) {
		//now the counts2 stuff:
		Uint64 total = 0;
		for (int i = 0; i < COUNTS2_SIZE; i++) total += counts2[level][i];
		total += extreme_counts2[level].size();
		if (!total) continue;
		int num_bits_L2 = unitsL2 + level + 3;
		int num_bits = 1 << num_bits_L2;
		int n = num_bits >> 1;
		if (num_bits_L2 <= 16) {
			if (total > 64) {
				std::vector<double> pdf, cdf;
				get_hamming_weight_chances(1 << num_bits_L2, pdf, cdf);
				double probs[COUNTS2_SIZE+2];
				Uint64 counts2_dup[COUNTS2_SIZE+2];
				for (int i = 0; i < COUNTS2_SIZE; i++) {
					counts2_dup[i+1] = counts2[level][i];
					int min = (i - COUNTS2_SIZE/2) << shifts[level];
					int max = min + (1 << shifts[level]) - 1;
					if (max < -n || min > n) probs[i+1] = 0;
					else {
						double p = 0;
						for (int j = min; j <= max; j++) p += abs(j) <= n ? pdf[n-abs(j)] : 0;
						probs[i+1] = p;
					}
				}
				/*if (COUNTS2_SIZE << shifts[level] >= num_bits) {
					probs[0] = 0;
					counts2_dup[0] = 0;
					probs[COUNTS2_SIZE+1] = 0;
					counts2_dup[COUNTS2_SIZE+1] = 0;
				}
				else {
					probs[0] = pdf[((-COUNTS2_SIZE/2) << shifts[level]) + n - 1];
					probs[COUNTS2_SIZE+1] = pdf[((-COUNTS2_SIZE/2) << shifts[level]) + n - 1];
					Uint64 lc = 0, hc = 0;
					for (
				}*/
				double samples = blocks_tested * TestBlock::SIZE * pow(0.5, level+unitsL2) - tbits + 1;
				int reduced_size = simplify_prob_table(COUNTS2_SIZE, samples / 40., &probs[1], &counts2_dup[1], true, false);
				double tr = g_test(reduced_size, &probs[1], &counts2_dup[1]);
				double n = math_chisquared_to_normal(tr, reduced_size-1);
				double p = math_chisquared_to_pvalue(tr, reduced_size - 1);
				double p2 = math_normaldist_to_pvalue(-n / 1.6);
				std::ostringstream name;
				name << "BCFN_FF(" << unitsL2 << "+" << level << "):freq";
				double w;
				if (unitsL2 + level < 5) w = (unitsL2 + level + 2) / 8.0;
				else w = std::pow(0.5, double((unitsL2 + level + 2)/2));
				if (w > 0.375) w = 0.375;
				if (!level) w += 0.125;
				//results.push_back(TestResult(name.str(), n, n, TestResult::TYPE_RAW_NORMAL, w*0.1 ) );
				results.push_back(TestResult(name.str(), n, p2, TestResult::TYPE_BAD_P, w*0.05 ) );
				//results.push_back(TestResult(name.str(), n, p, TestResult::TYPE_GOOD_P, w*0.1 ) );
			}
		}
	}
}
void PractRand::Tests::BCFN_FF::handle_high_levels ( int level, int bits ) {
	if (level >= LEVELS) return;
	if (!even[level]) {
		even[level] = true;
		leftovers[level] = bits;
		return;
	}
	else {
		even[level] = false;
		bits += leftovers[level];
	}

	if (true) {
		unsigned int c2i = (bits >> shifts[level]) + COUNTS2_SIZE/2;
		if (c2i < COUNTS2_SIZE) counts2[level][c2i]++;
		else extreme_counts2[level].push_back(bits);
	}
	if (true) {
		int tmp = bits >> 31;
		int index = ((cur[level] << 1) - tmp) & mask;
		cur[level] = index;
		if (warmup[level]) warmup[level] --;
		else {
			counts[level].increment(index);
		}
	}
	handle_high_levels(level+1, bits);
}
void PractRand::Tests::BCFN_FF::test_blocks(TestBlock *data, int numblocks) {
	while (blocks_tested < 16 && numblocks > 1) {
		test_blocks(data, 1);
		data += 1;
		numblocks -= 1;
	}
	while (warmup[4]) {
#define GET_BITS8(pos)  (count_bits8 (data[0].as8 [i+(pos)]) - 4)
#define GET_BITS16(pos) (count_bits16(data[0].as16[i+(pos)]) - 8)
#define GET_BITS32(pos) (count_bits32(data[0].as32[i+(pos)]) - 16)
#define GET_BITS64(pos) (count_bits64(data[0].as64[i+(pos)]) - 32)
#define HANDLE_BITS(level,var) {counts2[level][var+COUNTS2_SIZE/2]++; if (true){tmp=var>>31;cur[level]=((cur[level]<<1)-tmp)&mask;if (warmup[level]) warmup[level]--; else counts[level].increment(cur[level]);}}
		switch (unitsL2) {
			case 0: {
				for (int i = 0; i < TestBlock::SIZE / 1; i+=1) {
					int bits0;
					int tmp;
					//0
					bits0 = GET_BITS8(0);
					HANDLE_BITS(0,bits0);
					handle_high_levels(1, bits0);
				}
			}
			break;
			case 1: {
				for (int i = 0; i < TestBlock::SIZE / 2; i+=1) {
					int bits0;
					int tmp;
					//0
					bits0 = GET_BITS16(0);
					HANDLE_BITS(0,bits0);
					handle_high_levels(1, bits0);
				}
			}
			break;
			case 2: {
				for (int i = 0; i < TestBlock::SIZE / 4; i+=1) {
					int bits0;
					int tmp;
					//0
					bits0 = GET_BITS32(0);
					HANDLE_BITS(0,bits0);
					handle_high_levels(1, bits0);
				}
			}
			break;
			case 3: {
				for (int i = 0; i < TestBlock::SIZE / 8; i+=1) {
					int bits0;
					int tmp;
					//0
					bits0 = GET_BITS64(0);
					HANDLE_BITS(0,bits0);
					handle_high_levels(1, bits0);
				}
			}
			break;
			default:
				issue_error();
		}
#undef HANDLE_BITS
		blocks_tested += 1;
		data += 1;
		numblocks -= 1;
		if (!numblocks) return;
	}
	if (true) {
		unsigned long max = numblocks * TestBlock::SIZE >> unitsL2;
		switch (unitsL2) {
#define GET_BITS(a) GET_BITS8(a)
			case 0: {
				for (unsigned long i = 0; i < max; i+=8) {
					long bits0, bits1, bits2, bits3;
					long tmp;
#define HANDLE_BITS(level,var) {counts2[level][var+COUNTS2_SIZE/2]++; if (true){tmp=var>>31;cur[level]=((cur[level]<<1)-tmp)&mask;if (warmup[level]) warmup[level]--; else counts[level].increment(cur[level]);}}
					//0
					bits1 = bits0 = GET_BITS(0);
					HANDLE_BITS(0,bits0);
					//1
					bits2 = bits1 += bits0 = GET_BITS(1);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//2
					bits1 = bits0 = GET_BITS(2);
					HANDLE_BITS(0,bits0);
					//3
					bits3 = bits2 += bits1 += bits0 = GET_BITS(3);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					//4
					bits1 = bits0 = GET_BITS(4);
					HANDLE_BITS(0,bits0);
					//5
					bits2 = bits1 += bits0 = GET_BITS(5);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//6
					bits1 = bits0 = GET_BITS(6);
					HANDLE_BITS(0,bits0);
					//7
					bits3 += bits2 += bits1 += bits0 = GET_BITS(7);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					HANDLE_BITS(3,bits3);
					handle_high_levels ( 4, bits3 );
				}
			}
			break;
#undef GET_BITS
#define GET_BITS(a) GET_BITS16(a)
			case 1: {
				for (unsigned long i = 0; i < max; i+=8) {
					long bits0, bits1, bits2, bits3;
					long tmp;
					//0
					bits1 = bits0 = GET_BITS(0);
					HANDLE_BITS(0,bits0);
					//1
					bits2 = bits1 += bits0 = GET_BITS(1);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//2
					bits1 = bits0 = GET_BITS(2);
					HANDLE_BITS(0,bits0);
					//3
					bits3 = bits2 += bits1 += bits0 = GET_BITS(3);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					//4
					bits1 = bits0 = GET_BITS(4);
					HANDLE_BITS(0,bits0);
					//5
					bits2 = bits1 += bits0 = GET_BITS(5);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//6
					bits1 = bits0 = GET_BITS(6);
					HANDLE_BITS(0,bits0);
					//7
					bits3 += bits2 += bits1 += bits0 = GET_BITS(7);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					HANDLE_BITS(3,bits3);
					handle_high_levels ( 4, bits3 );
				}
			}
			break;
#undef GET_BITS
#define GET_BITS(a) GET_BITS32(a)
			case 2: {
				for (unsigned long i = 0; i < max; i+=8) {
					long bits0, bits1, bits2, bits3;
					long tmp;
					//0
					bits1 = bits0 = GET_BITS(0);
					HANDLE_BITS(0,bits0);
					//1
					bits2 = bits1 += bits0 = GET_BITS(1);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//2
					bits1 = bits0 = GET_BITS(2);
					HANDLE_BITS(0,bits0);
					//3
					bits3 = bits2 += bits1 += bits0 = GET_BITS(3);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					//4
					bits1 = bits0 = GET_BITS(4);
					HANDLE_BITS(0,bits0);
					//5
					bits2 = bits1 += bits0 = GET_BITS(5);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//6
					bits1 = bits0 = GET_BITS(6);
					HANDLE_BITS(0,bits0);
					//7
					bits3 += bits2 += bits1 += bits0 = GET_BITS(7);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					HANDLE_BITS(3,bits3);
					handle_high_levels ( 4, bits3 );
				}
			}
			break;
#undef GET_BITS
#define GET_BITS(a) GET_BITS64(a)
			case 3: {
				for (unsigned long i = 0; i < max; i+=8) {
					int bits0, bits1, bits2, bits3;
					int tmp;
					//0
					bits1 = bits0 = GET_BITS(0);
					HANDLE_BITS(0,bits0);
					//1
					bits2 = bits1 += bits0 = GET_BITS(1);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//2
					bits1 = bits0 = GET_BITS(2);
					HANDLE_BITS(0,bits0);
					//3
					bits3 = bits2 += bits1 += bits0 = GET_BITS(3);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					handle_high_levels ( 3, bits2 );//bits2 is already 256 bits, any more might overflow the array index on counts2[3]
					//4
					/*bits1 = bits0 = GET_BITS(4);
					HANDLE_BITS(0,bits0);
					//5
					bits2 = bits1 += bits0 = GET_BITS(5);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					//6
					bits1 = bits0 = GET_BITS(6);
					HANDLE_BITS(0,bits0);
					//7
					bits3 += bits2 += bits1 += bits0 = GET_BITS(7);
					HANDLE_BITS(0,bits0);
					HANDLE_BITS(1,bits1);
					HANDLE_BITS(2,bits2);
					HANDLE_BITS(3,bits3);
					handle_high_levels ( 4, bits3 );*/
				}
			}
			break;
#undef GET_BITS
#undef GET_BITS8
#undef GET_BITS16
#undef GET_BITS32
#undef GET_BITS64
#undef HANDLE_BITS
			default:
				issue_error();
		}
	}
	blocks_tested += numblocks;
}











static const Uint8 count_low_zeroes_table[256] = {
//	0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,
	8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,//0
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,//1
	5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,//2
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,//3
	6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,//4
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,//5
	5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,//6
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,//7
	7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,//8
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,//9
	5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,//10
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,//11
	6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,//12
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,//13
	5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,//14
	4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,//15
};
static const Uint8 count_high_zeroes_table[256] = {
//	0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,
	8, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4,//0
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,//1
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,//2
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,//3
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,//4
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,//5
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,//6
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,//7
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,//8
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,//9
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,//10
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,//11
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,//12
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,//13
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,//14
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,//15
};
static unsigned long count_high_zeroes32(Uint32 value) {
	Uint8 count = 0;
	if (!(value >> 16)) {count += 16; value <<= 16;}
	if (!(value >> 24)) {count += 8; value <<= 8;}
	return count_high_zeroes_table[value >> 24] + count;
}
#if defined _MSC_VER && _MSC_VER >= 1400 && (defined _M_IX86 || defined _M_X64) && 0
// is this actually a good idea?  I'm not sure this helps performance any
#include <intrin.h>
static unsigned long count_low_zeroes32(Uint32 value) {
	unsigned long rv;
	if (!_BitScanForward(&rv, value)) rv = 32;
	return rv;
}
static unsigned long count_low_zeroes64(Uint64 value) {
	unsigned long rv;
	if (!_BitScanForward64(&rv, value)) rv = 64;
	return rv;
}
#else
static unsigned long count_low_zeroes32(Uint32 value) {
	if (value & 255) return count_low_zeroes_table[value & 255];
	value >>= 8;
	if (value & 255) return count_low_zeroes_table[value & 255] + 8;
	value >>= 8;
	if (value & 255) return count_low_zeroes_table[value & 255] + 16;
	value >>= 8;
	return count_low_zeroes_table[value & 255] + 24;
}
static unsigned long count_low_zeroes64(Uint64 value) {
	if (value & 255) return count_low_zeroes_table[value & 255] + 0;
	value >>= 8;
	if (value & 255) return count_low_zeroes_table[value & 255] + 8;
	value >>= 8;
	if (value & 255) return count_low_zeroes_table[value & 255] + 16;
	value >>= 8;
	if (value & 255) return count_low_zeroes_table[value & 255] + 24;
	value >>= 8;
	if (value & 255) return count_low_zeroes_table[value & 255] + 32;
	value >>= 8;
	if (value & 255) return count_low_zeroes_table[value & 255] + 40;
	value >>= 8;
	if (value & 255) return count_low_zeroes_table[value & 255] + 48;
	value >>= 8;
	return count_low_zeroes_table[value & 255] + 56;
}
#endif

PractRand::Tests::FPF::FPF(int stride_bits_L2_ , int sig_bits_ , int exp_bits_ ) : stride_bits_L2(stride_bits_L2_), sig_bits(sig_bits_), exp_bits(exp_bits_) {
	if (sig_bits > MAX_SIG_BITS) issue_error();
	if (exp_bits > 6) issue_error();
	for (int i = 0; i <= 32; i++) {
		Uint32 x = i, y = 1LL << i;
		if (x >= 32) { x = 32; y = 0; }
		if (count_low_zeroes32(y) != x) issue_error("count_low_zeroes32 behaving incorrectly");
	}
}
void PractRand::Tests::FPF::init( RNGs::vRNG *known_good ) {
	unsigned long max_exp = (1 << exp_bits) - 1;
	if (max_exp - 1 + sig_bits > 64) max_exp = 64 + 1 - sig_bits;
	unsigned long max_sig = (1 << sig_bits) - 1;
	unsigned long footprint = sig_bits + max_exp;
	unsigned long stride_bits = 1 << stride_bits_L2;

	int total_size = (max_sig + 1) * (max_exp + 1);
//	int bits = sig_bits + exp_bits;
	counts.set_size(total_size);
	static bool zeroes_table_inited = false;
	if (!zeroes_table_inited) {
		for (int i = 0; i < 256; i++) {
			int k;
			for (k=0; (k < 8) && !((i>>k)&1); k++) ;//number of leading 0s, max 7
			//count_leading_zeroes_table[i] = k;
			if (count_low_zeroes_table[i] != k) issue_error("count zeroes table invalid");
		}
		zeroes_table_inited = true;
	}
	blocks_tested = 0;
}
void PractRand::Tests::FPF::deinit( ) {
	counts.set_size(0);
}
std::string PractRand::Tests::FPF::get_name() const {
	std::ostringstream str;
	str << "FPF-" << sig_bits << "+" << exp_bits << "/" << (1 << stride_bits_L2);
	return str.str();
}
void PractRand::Tests::FPF::get_results(std::vector<TestResult> &results) {
	unsigned long max_exp = (1 << exp_bits) - 1;
	if (max_exp - 1 + sig_bits > 64) max_exp = 64 + 1 - sig_bits;
	unsigned long max_sig = (1 << sig_bits) - 1;
	unsigned long footprint = sig_bits + max_exp;
	unsigned long stride_bits = 1 << stride_bits_L2;

	int total_size = (max_sig + 1) * (max_exp + 1);
	double samples = (blocks_tested * TestBlock::SIZE * 8.0 + 1 - footprint) / stride_bits;

	//std::vector<double> overall_probs; overall_probs.resize(total_size);// overall test ":*"
	const Uint64 *counts_ = counts.get_array();
	//std::vector<Uint64> overall_counts; overall_counts.resize(total_size);
	std::vector<double> intra_probs; intra_probs.resize(max_sig+1);// intra-platter only test ":0", ":1", etc, also used for ":overall"?
	std::vector<Uint64> intra_counts; intra_counts.resize(max_sig+1);
	std::vector<double> inter_probs; inter_probs.resize(max_exp+1);// inter-platter only test ":cross"
	std::vector<Uint64> inter_counts; inter_counts.resize(max_exp+1, 0);

	double intra_p = 1.0 / (max_sig+1);
	double over_raw = 0;
	double over_bins = 0;

	double sum_s = 0;
	int num_s = 0;
	for (int i = 0; i < total_size; i++) {
		int e = i >> sig_bits;
		//inter_counts[e] += intra_counts[i & max_sig] = overall_counts[i] = counts_[i];
		inter_counts[e] += intra_counts[i & max_sig] = counts_[i];
		if ((i & max_sig) == max_sig && inter_counts[e]) {
			double expected = std::pow(0.5, e+1.0+(e==max_exp?-1:0)) * samples;
			
			double _ebits = std::log(expected) / std::log(2.0) - 4;
			int ebits = int(std::floor(_ebits * 0.75 + 0.1));
			if (ebits > sig_bits) ebits = sig_bits;

			//if (ebits < 1 && e < 4) ebits += 2;
			if (ebits >= 1) {
				for (int x = 0; x <= max_sig; x++) intra_probs[x] = intra_p;
				if (ebits < sig_bits) truncate_table_bits(&intra_counts[0], &intra_probs[0], sig_bits, ebits);
				else ebits = sig_bits;
				int bins = 1<<ebits;
				double truncated_expected = expected * std::pow(.5, double(ebits));
				for (int x = 0; x < bins; x++) if (intra_counts[x]) if (intra_counts[x]) over_raw += intra_counts[x] * std::log(intra_counts[x] / truncated_expected);
				over_bins += bins;
				if (ebits < 3) continue; // too few distinct values show up in calibration data
				double raw = g_test(bins, &intra_probs[0], &intra_counts[0]);
				double norm = math_chisquared_to_normal(raw, bins-1);
				double p = math_normaldist_to_pvalue(norm);
				std::ostringstream namestr;
				namestr << get_name() << ":" << "(" << e << "," << sig_bits << "-" << (sig_bits-ebits);
				std::ostringstream teststr;
				teststr << "FPF/16(" << ebits << ")";
				TestCalibrationData *calib = calibration_manager.get_calibration_data( teststr.str(), samples / 512.0 + 0.5 );
				if (!calib && ebits > 14 && ebits <= 16) calib = calibration_manager.get_calibration_data( "FPF/16(14)", samples / 512.0 + 0.5 );
				if (stride_bits_L2 + e < 2 ) calib = NULL;
				if (calib) {
					double suspicioun = -calib->sample_to_suspicion(norm);
					sum_s += suspicioun * suspicioun;//std::pow(2.0, std::fabs(suspicioun));
					num_s++;
					results.push_back(TestResult(namestr.str() + ")", norm, suspicioun, TestResult::TYPE_GOOD_S, ebits * 0.00625 / sig_bits));
				}
				else results.push_back(TestResult(namestr.str() + ")", norm, norm,  TestResult::TYPE_RAW_NORMAL, ebits * 0.00625 / sig_bits));
			}
		}
	}
	if (over_bins >= 2) {//on short runs this may be the only usable result from FPF
		over_raw *= 2;
		double over_norm = math_chisquared_to_normal(over_raw, over_bins-1);
		double over_p = math_normaldist_to_pvalue(over_norm);
		TestCalibrationData *calib = calibration_manager.get_calibration_data("FPF-14+6/16:overall", samples / 512.0 + 0.5);
		if (stride_bits_L2 < 2 || sig_bits != 14 || exp_bits < 4) calib = NULL;
		if (calib && samples >= 3000)
			results.push_back( TestResult(get_name() + ":all", over_norm, -calib->sample_to_suspicion(over_norm),  TestResult::TYPE_GOOD_S, .25));
		else results.push_back(TestResult(get_name() + ":all", over_norm, over_norm,  TestResult::TYPE_RAW_NORMAL, .25));
	}
	if (false) {//num_s >= 3) { - DISABLED because I don't trust the p-values near the extremas
		/*long double calib_mean = 0;
		long double calib_e = 4.162737902123020;
		long double calib_dev = 0;
		const double calib_step = std::pow(0.5, 30);
		for (double x = calib_step / 2; x < 1; x += calib_step) {
		double susp = TestResult::pvalue_to_suspicion(x);
		double v = susp*susp - calib_e;
		calib_mean += v;
		calib_dev += v * v;
		}
		calib_mean *= calib_step; calib_dev *= calib_step;
		calib_dev = std::sqrt(calib_dev - calib_mean * calib_mean);
		std::printf("\n %.15f %.15f \n", double(calib_mean + calib_e), double(calib_dev));*/
		//sum_s = std::log(sum_s) / std::log(2.0);
		sum_s -= num_s * 4.162737902123020;
		sum_s /= 9.308158403091918;
		sum_s /= std::sqrt(double(num_s));
		TestCalibrationData *calib = calibration_manager.get_calibration_data("FPF:all2", num_s);
		if (calib) results.push_back(TestResult(get_name() + ":all2", sum_s, -calib->sample_to_suspicion(sum_s), TestResult::TYPE_GOOD_S, 0.1));
		else results.push_back(TestResult(get_name() + ":all2", sum_s, sum_s, TestResult::TYPE_RAW_NORMAL, 0.1));
	}
	double actual_samples = 0;
	for (int e = 0; e <= max_exp; e++) actual_samples += inter_counts[e];
	if (samples >= 1000) {
		for (int e = 0; e <= max_exp; e++) inter_probs[e] = std::pow(0.5, e+1.0+(e==max_exp?-1:0));
		int bins = simplify_prob_table(max_exp+1, samples/40.0, &inter_probs[0], &inter_counts[0], true, true);
		double raw = g_test(bins, &inter_probs[0], &inter_counts[0]);
		double norm = math_chisquared_to_normal(raw, bins-1) / std::sqrt(2.0);
		double p = math_normaldist_to_pvalue(norm);
		std::ostringstream str; str << get_name() << ":cross";
		TestCalibrationData *calib = calibration_manager.get_calibration_data( "FPF-14+6/16:cross", samples / 512.0 + 0.5 );
		if (calib) 
			results.push_back(TestResult(str.str(), norm, -calib->sample_to_suspicion(norm),  samples >= 4000 ? TestResult::TYPE_GOOD_S : TestResult::TYPE_BAD_S, 0.25));
		else results.push_back(TestResult(str.str(), norm, norm,  TestResult::TYPE_RAW_NORMAL, 0.25));
	}
}
void PractRand::Tests::FPF::test_blocks(TestBlock *data, int numblocks) {
	unsigned long max_exp = (1 << exp_bits) - 1;
	if (max_exp - 1 + sig_bits > 64) max_exp = 64 + 1 - sig_bits;
	unsigned long max_sig = (1 << sig_bits) - 1;
	unsigned long footprint = sig_bits + max_exp;
	unsigned long stride_bits = 1 << stride_bits_L2;

	if (max_exp + sig_bits - 1 <= 32) {
		if (stride_bits >= 32) {//small footprint, long stride
			long stride32 = 1 << (stride_bits_L2 - 5);
			long max = numblocks * (TestBlock::SIZE / 4);
			for (long i = 0; i < max; i += stride32) {
				Uint32 cur = data->as32[i];
				unsigned long e = count_low_zeroes32(cur);
				if (e < max_exp) {
					unsigned long sig = (cur >> (e+1)) & max_sig;
					unsigned long index = (e << sig_bits) + sig;
					counts.increment(index);
				}
				else {
					e = max_exp;
					unsigned long sig = (cur >> e) & max_sig;
					unsigned long index = (e << sig_bits) + sig;
					counts.increment(index);
				}
			}
		}
		else {//small footprint, short stride
			long max32 = numblocks * (TestBlock::SIZE / 4);
			Uint32 cur;
			long start;
			if (blocks_tested) {
				cur = reverse_bits32(data->as32[-1]);
				start = 0;
			}
			else {
				cur = reverse_bits32(data->as32[0]);
				start = 1;
			}
			unsigned long word_parts = 32 >> stride_bits_L2;
			for (long i = start; i < max32; i += 1) {
				Uint32 word = data->as32[i];
				for (unsigned long sub_word = 0; sub_word < word_parts; sub_word++) {
					for (unsigned long j = 0; j < stride_bits; j++) {
						cur = (cur << 1) | (word & 1);
						word >>= 1;
					}
					unsigned long e = count_low_zeroes32(cur);
					unsigned long sig;
					if (e >= max_exp) {
						e = max_exp;
						sig = (cur >> e) & max_sig;
					}
					else {
						sig = (cur >> (e+1)) & max_sig;
					}
					unsigned long index = (e << sig_bits) + sig;
					counts.increment(index);
				}
			}
		}
	}
	else {//large footprint
		if (stride_bits >= 32) {//large footprint, long stride
			long stride32 = 1 << (stride_bits_L2 - 5);
			long max = numblocks * (TestBlock::SIZE / 4) - 1;
			const unsigned long inv_sig_bits = 32 - sig_bits;
			for (long i = blocks_tested ? -1 : 0; i < max; i += stride32) {
				Uint32 cur = data->as32[i];
				unsigned long e = count_low_zeroes32(cur);
				if (e < inv_sig_bits) {
					unsigned long sig = (cur >> (e+1)) & max_sig;
					unsigned long index = (e << sig_bits) + sig;
					counts.increment(index);
				}
				else {
					Uint64 cur2 = cur | (Uint64(data->as32[i+1]) << 32);
					if (e == 32) e += count_low_zeroes32(data->as32[i+1]);
					unsigned long sig;
					if (e < max_exp) {
						sig = Uint32(cur2 >> (e+1)) & max_sig;
					}
					else {
						e = max_exp;
						sig = Uint32(cur2 >> e) & max_sig;
					}
					unsigned long index = (e << sig_bits) + sig;
					counts.increment(index);
				}
			}
		}
		else {//large footprint, short stride
			long max32 = numblocks * (TestBlock::SIZE / 4) - 1;
			long start;
			Uint32 cur;
			if (blocks_tested) {
				cur = data->as32[-2];//
				start = -1;
			}
			else {
				cur = data->as32[0];//
				start = 1;
			}
			const unsigned long inv_sig_bits = 32 - sig_bits;
			if (stride_bits == 16) {enum {STRIDE_BITS=16};
				for (long i = start; i < max32; i += 1) {
					Uint32 word = data->as32[i];

					unsigned long e, sig;
					cur >>= STRIDE_BITS;
					cur |= word << (32 - STRIDE_BITS);
					word >>= stride_bits;//
					e = count_low_zeroes32(cur);
					if (e < inv_sig_bits) {
						sig = (cur >> (e+1)) & max_sig;
						counts.increment((e << sig_bits) + sig);
					}
					else {
						Uint64 cur2 = cur | (Uint64(word) << 32) | (Uint64(data->as32[i+1]) << (64 - STRIDE_BITS));
						if (e == 32) e += count_low_zeroes32(Uint32(cur2 >> 32));
						if (e < max_exp) {
							sig = Uint32(cur2 >> (e+1)) & max_sig;
						}
						else {
							e = max_exp;
							sig = Uint32(cur2 >> e) & max_sig;
						}
						counts.increment((e << sig_bits) + sig);
					}

					cur >>= STRIDE_BITS;
					cur |= word << (32 - STRIDE_BITS);
					e = count_low_zeroes32(cur);
					if (e < inv_sig_bits) {
						sig = (cur >> (e+1)) & max_sig;
						counts.increment((e << sig_bits) + sig);
					}
					else {
						word >>= stride_bits;//
						Uint64 cur2 = cur | (Uint64(word) << 32) | (Uint64(data->as32[i+1]) << (64 - 2*STRIDE_BITS));
						if (e == 32) e += count_low_zeroes32(Uint32(cur2 >> 32));
						if (e < max_exp) {
							sig = Uint32(cur2 >> (e+1)) & max_sig;
						}
						else {
							e = max_exp;
							sig = Uint32(cur2 >> e) & max_sig;
						}
						counts.increment((e << sig_bits) + sig);
					}
				}
			}
			else if (stride_bits == 8) {enum {STRIDE_BITS=8};
				for (long i = start; i < max32; i += 1) {
					Uint32 word = data->as32[i];
					for (unsigned long sub_word = 0; sub_word < 32/STRIDE_BITS; sub_word++) {
						cur >>= STRIDE_BITS;
						cur |= word << (32 - STRIDE_BITS);
						word >>= stride_bits;//
						unsigned long e = count_low_zeroes32(cur);
						unsigned long sig;
						if (e < inv_sig_bits) {
							sig = (cur >> (e+1)) & max_sig;
						}
						else {
							Uint64 cur2 = cur | (Uint64(word) << 32) | (Uint64(data->as32[i+1]) << (64 - (sub_word+1) * STRIDE_BITS));//
							if (e == 32) e += count_low_zeroes32(Uint32(cur2 >> 32));
							if (e < max_exp) {
								sig = Uint32(cur2 >> (e+1)) & max_sig;
							}
							else {
								e = max_exp;
								sig = Uint32(cur2 >> e) & max_sig;
							}
						}
						unsigned long index = (e << sig_bits) + sig;
						counts.increment(index);
					}
				}
			}
			else if (stride_bits == 4) {enum {STRIDE_BITS=4};
				for (long i = start; i < max32; i += 1) {
					Uint32 word = data->as32[i];
					for (unsigned long sub_word = 0; sub_word < 32/STRIDE_BITS; sub_word++) {
						cur >>= STRIDE_BITS;
						cur |= word << (32 - STRIDE_BITS);
						word >>= stride_bits;//
						unsigned long e = count_low_zeroes32(cur);
						unsigned long sig;
						if (e < inv_sig_bits) {
							sig = (cur >> (e+1)) & max_sig;
						}
						else {
							Uint64 cur2 = cur | (Uint64(word) << 32) | (Uint64(data->as32[i+1]) << (64 - (sub_word+1) * STRIDE_BITS));//
							if (e == 32) e += count_low_zeroes32(Uint32(cur2 >> 32));
							if (e < max_exp) {
								sig = Uint32(cur2 >> (e+1)) & max_sig;
							}
							else {
								e = max_exp;
								sig = Uint32(cur2 >> e) & max_sig;
							}
						}
						unsigned long index = (e << sig_bits) + sig;
						counts.increment(index);
					}
				}
			}
			else {
				unsigned long word_parts = 32 >> stride_bits_L2;
				for (long i = start; i < max32; i += 1) {
					Uint32 word = data->as32[i];
					for (unsigned long sub_word = 0; sub_word < word_parts; sub_word++) {
						cur >>= stride_bits;
						cur |= word << (32 - stride_bits);
						word >>= stride_bits;//
						unsigned long e = count_low_zeroes32(cur);
						unsigned long sig;
						if (e < inv_sig_bits) {
							sig = (cur >> (e+1)) & max_sig;
						}
						else {
							//Uint64 cur2 = cur | (Uint64(reverse_bits32(data->as32[i+1])) << 32);
							Uint64 cur2 = cur | (Uint64(word) << 32) | (Uint64(data->as32[i+1]) << (64 - (sub_word+1) * stride_bits));//
							if (e == 32) e += count_low_zeroes32(Uint32(cur2 >> 32));
							if (e < max_exp) {
								sig = Uint32(cur2 >> (e+1)) & max_sig;
							}
							else {
								e = max_exp;
								sig = Uint32(cur2 >> e) & max_sig;
							}
						}
						unsigned long index = (e << sig_bits) + sig;
						counts.increment(index);
					}
				}
			}
		}
	}
	blocks_tested += numblocks;
}


PractRand::Tests::FPMulti::FPMulti() //(int stride_bits_L2_, int skip_platters_)
	//:
	//stride_bits_L2(stride_bits_L2_)
{
	static const double gap_L2_expected_lookup[30] = {
		// I printed lots of precision, but the actual calculations weren't that accurate.  I'm pretty sure it's all at least as good as single-precision, probably better.  
		0.732649482117484,
		1.537438290932739,
		2.401606811975667,
		3.311224720400715,
		4.253426596472763,
		5.217705249861148,
		6.196250654101414,
		7.183665553491496,
		8.176424757912608,
		9.172324308194467,
		10.170032291922604,
		11.168764874403314,
		12.168070314222019,
		13.167692567126194,
		14.167488448594183,
		15.167378763675536,
		16.167320107527143,
		17.167288872374503,
		18.167272301195908,
		19.167263538788724,
		20.167258919171243,
		21.167256490152202,
		22.167255216034651,
		23.167254549165989,
		24.167254200815417,
		25.167254019159184,
		26.167253924545253,
		27.167253875254346,
		28.167253848788377,
		29.167253834281478,
	};
	for (int i = 0; i <= MAX_EXP; i++) {
		int L = i + BASE_SIG_BITS + 1 - (i == MAX_EXP ? 1 : 0);
		double e;
		enum { THRESHOLD = 30 };
		//if (L <= THRESHOLD) e = gap_log2_expected(std::pow(0.5, L));
		//else e = gap_log2_expected(std::pow(0.5, 20)) + L - THRESHOLD;
		if (L < THRESHOLD) e = gap_L2_expected_lookup[L - 1];
		else e = gap_L2_expected_lookup[THRESHOLD - 1] + L - THRESHOLD;
		//std::printf("%d %.15f\n", i, e);
		platter[i].gap_expected_inverse = std::pow(0.5, e);
		//platter[i].gap_expected_inverse = std::pow(0.5, L-1);
	}
}
void PractRand::Tests::FPMulti::Platter::reset(PractRand::RNGs::vRNG *known_good, unsigned long e) {
	total_count = 0;

	//gap test stuff:
	for (int i = 0; i < (1 << GAP_SIG_BITS); i++) {
		//gap_global_history[i] = 1ull << 63;
		gap_global_history[i] = 0;
		//gap_global_history[i] = 0 - known_good->randli(1ull << (e + GAP_SIG_BITS + 1));
		//gap_global_history[i] = 0 - 1ull << (e + GAP_SIG_BITS);
	}
	gap_product = 0.5;
	gap_product_extracted_L2 = 1;
	gap_hits = 0;
	gap_warmed_up = false;
	
	//for (int i = 0; i < COUP_MASK_SIZE; i++) coup_mask[i] = 0;
	//freq_count.reset_counts();
	//coup_count.reset_counts();
	//last_coup = 0;
}
void PractRand::Tests::FPMulti::process(Uint64 position, unsigned long e, unsigned long sig) {
	Platter &p = platter[e];
	p.total_count++;

	if (1) {
		unsigned long gap_sig = sig >> (BASE_SIG_BITS - GAP_SIG_BITS);
		Uint64 old_pos = p.gap_global_history[gap_sig];
		p.gap_global_history[gap_sig] = position;// & 0x7FffFFffFFffFFffull;
		enum { WARMUP_SETS = 2 };
		if (!p.gap_warmed_up) {
			Uint64 warmup_distance = WARMUP_SETS << (e + GAP_SIG_BITS);
			if (position >= warmup_distance) p.gap_warmed_up = true;
		}
		if (p.gap_warmed_up) {
			p.gap_hits += 1;
			double g = (position - old_pos);// & 0x7FffFFffFFffFFffull;
			if (!old_pos) {
				Uint64 warmup_distance = WARMUP_SETS << (e + GAP_SIG_BITS);
				g += (g - warmup_distance) * 1.5;
			}
			double normalized = g * p.gap_expected_inverse;
			p.gap_product *= normalized;
			if (!(p.gap_hits & 63)) {//testing suggests this is good up to 4095 - for safety margin I use 1023, and set autofail on any gap products out of range at that point
				// no wait... if GAP_SIG_BITS is adjusted the usable range changes (4095 was for 9 bits), though 127 seems to be usable for all useful values of GAP_SIG_BITS
				int L2;
				if (std::isinf(p.gap_product)) issue_error("FPMulti::process - gap product is infinite");
				if (std::isinf(p.gap_product)) autofail = true;
				if (0 == p.gap_product) issue_error("FPMulti::process - gap product is zero");
				if (p.gap_product == 0) autofail = true;
				if (std::isnan(p.gap_product)) issue_error("FPMulti::process - gap product is NaN");// should be impossible, I think
				if (autofail) return;
				p.gap_product = std::frexp(p.gap_product, &L2);
				p.gap_product_extracted_L2 += L2;
			}
		}
	}
	/*
	if (1) {//frequency
		p.freq_count.increment(sig >> (BASE_SIG_BITS - GAP_SIG_BITS));
	}
	if (1) {//coupon
		unsigned long index = sig & ((1 << COUP_SIG_BITS) - 1);
		COUP_WORD b = COUP_WORD(1) << (index & (COUP_WORD_SIZE - 1));
		index >>= COUP_WORD_SIZE_L2;
		p.coup_mask[index] |= b;
		if (p.coup_mask[index] == ~COUP_WORD(0)) {//possible end of set
			bool done = true;
			for (int i = 0; i < COUP_MASK_SIZE; i++) if (~p.coup_mask[i]) done = false;
			if (done) {
				for (int i = 0; i < COUP_MASK_SIZE; i++) p.coup_mask[i] = 0;
				Sint64 delta = p.total_count - p.last_coup;
				p.last_coup = p.total_count;
				delta -= 1 << COUP_SIG_BITS;
				if (delta < 0) issue_error("FPM:C: impossible");
				index = delta >> (COUP_SIG_BITS - 5);
				if (index > 1023) autofail = true;
			}
		}
	}*/
}
void PractRand::Tests::FPMulti::init(RNGs::vRNG *known_good) {
	TestBaseclass::init(known_good);
	static bool zeroes_table_inited = false;
	if (!zeroes_table_inited) {//now just a validity check, not initialization
		for (int i = 0; i < 256; i++) {
			int k;
			for (k = 0; (k < 8) && !((i >> k) & 1); k++);//number of leading 0s, max 7
			if (count_low_zeroes_table[i] != k) issue_error("FPMulti::init() - count zeroes table invalid");
		}
		zeroes_table_inited = true;
	}
	autofail = false;

	for (int e = 0; e <= MAX_EXP; e++) platter[e].reset(known_good, e);
}
void PractRand::Tests::FPMulti::deinit() {}
std::string PractRand::Tests::FPMulti::get_name() const {
	//std::ostringstream str;
	//str << "FPM(" << skip_platters << "/" << (1 << stride_bits_L2) << ")";
	//return str.str();
	return "FPM";
}
void PractRand::Tests::FPMulti::get_results(std::vector<TestResult> &results) {
	Uint64 total_samples = 0;

	if (1) {// gap test preliminary work checking for autofail
		for (int e = 0; e <= MAX_EXP && !autofail; e++) {
			Platter &p = platter[e];
			//if (std::isinf(p.gap_product)) issue_error("FPMulti::get_results - gap product is infinite");
			if (std::isinf(p.gap_product)) { autofail = true; continue; }
			//if (0 == p.gap_product) issue_error("FPMulti::get_results - gap product is zero");
			if (p.gap_product == 0) { autofail = true; continue; }
			if (std::isnan(p.gap_product)) issue_error("FPMulti::get_results - gap product is NaN");// should be impossible, I think

			int L2;
			p.gap_product = std::frexp(p.gap_product, &L2);
			p.gap_product_extracted_L2 += L2;
		}
	}

	if (autofail) {
		results.push_back(TestResult(get_name() + ":G:!", autofail, autofail, TestResult::TYPE_PASSFAIL, 0.001));
		return;
	}

	if (1) {// full gap test
		enum { NUM_PRECALCED = 29 };
		static const double precalced_per_sample_variance[NUM_PRECALCED] = {
			// I printed lots of precision, but the actual calculations weren't that accurate.  I think it's all at least as good as single-precision though.  
			0.689767784941473,
			1.337738769110027,
			1.901334686734523,
			2.357736926112877,
			2.704552837299473,
			2.954032389076138,
			3.125391844474298,
			3.238662124118501,
			3.311200833954624,
			3.356456856372971,
			3.384086977313802,
			3.400654090320465,
			3.410437953635610,
			3.416141765833042,
			3.419430341441828,
			3.421308286318003,
			3.422371735456495,
			3.422969518546240,
			3.423303348278004,
			3.423488686362224,
			3.423591043978246,
			3.423647305527636,
			3.423678096892326,
			3.423694882477087,
			3.423704000023767,
			3.423708936075639,
			3.423711600191441,
			3.423713034019782,
			3.423713803681121
		};
		Uint64 total_gap_hits = 0;
		double total_gap_product_L2 = 0;
		double total_gap_product_L2_adjusted_variance = 0;
		for (int e = 0; e <= MAX_EXP; e++) {
			Platter &p = platter[e];
			double gap_product_L2 = std::log2(p.gap_product);
			gap_product_L2 += p.gap_product_extracted_L2;
			if (p.gap_hits < 30) continue;

			int L = GAP_SIG_BITS + e - (e == MAX_EXP ? 1 : 0);
			//double L = 0 + e - (e == MAX_EXP ? 1 : 0);
			//double cLK = 0.7 - 0.8 / L + (4 + 32.0 / L) * std::pow(double(p.gap_hits), -3.0 / L) / 15;
			//double cLK = 0.7;
			double cLK = 1.0;
			//double per_sample_variance = gap_log2_variance(std::pow(0.5, L));
			double per_sample_variance;
			if (L <= NUM_PRECALCED) per_sample_variance = precalced_per_sample_variance[L - 1];
			else per_sample_variance = precalced_per_sample_variance[NUM_PRECALCED - 1];
			//std::printf("%2d %2d %.15f\n", e, int(L), per_sample_variance);
			double adjusted_variance = per_sample_variance * p.gap_hits * cLK * cLK;

			total_gap_hits += p.gap_hits;
			total_gap_product_L2 += gap_product_L2;
			total_gap_product_L2_adjusted_variance += adjusted_variance;
			double avg = gap_product_L2 / p.gap_hits;
			double norm = gap_product_L2 / std::sqrt(adjusted_variance);
			if (p.gap_hits < 1000) continue;

			std::ostringstream buf;
			buf << get_name() << ":G" << GAP_SIG_BITS << ":e" << e;
			results.push_back(TestResult(buf.str(), norm, math_normaldist_to_pvalue(norm), TestResult::TYPE_BAD_P, 0.02 * std::pow(0.65, e)));

			/*
				for Maurer's paper: (not that I'm actually following it that closely, but need these to be able to reference it quickly)
				Q = words skipped during warmup
				K = number of usable gap samples
				L = bits per word

				V = 2^L
				S^N = sequence of input bits
				S[n] = nth bit of input
				b[n] = nth word of input
				A[n](S^N) = gap value for nth word of input (distance since last occurance) - defined to be n if there is no gap prior occurance
				fTu(S^N) = log2 of geometric mean of all (usable) gaps
				c(L,K) = adjust factor that the standard deviation is multiplied by, probably fitted from empirical data
			*/
		}
		if (total_gap_hits > 5000) {
			double avg = total_gap_product_L2 / total_gap_hits;
			double norm = total_gap_product_L2 / std::sqrt(total_gap_product_L2_adjusted_variance);
			results.push_back(TestResult(get_name() + ":G:comb", norm, math_normaldist_to_pvalue(norm), TestResult::TYPE_BAD_P, 0.4));
		}
	}

	/*const int skip_platters = 0;
	for (int p = skip_platters; p <= MAX_EXP; p++) total_samples += platter[p].total_count;
	//double expected_total_samples2 = (blocks_tested * 8.0 * TestBlock::SIZE - 64) * std::pow(0.5, stride_bits_L2 + skip_platters) + 1;//not too sure about this calculation
	if (total_samples >= 16000 && true) {//platter local gap test results
		long double bins = 1 << GAP_SIG_BITS;
		long double base_prob = 1.0 / bins;
		long double base_prob_inv = 1.0 - base_prob;
		long double avg = 0;
		long double dev = 0;
		long double baseline = bins * bins - bins;
		for (int x = 64 << GAP_SIG_BITS; x >= 1; x--) {
			long double prob = std::pow(base_prob_inv, x - 1) / bins;
			double value = x - (1 << GAP_SIG_BITS);
			value *= value;
			value -= baseline;
			avg += value * prob;
			dev += value * value * prob;
		}
		dev = std::sqrt(dev - avg * avg);
		avg += baseline;
		for (int p = skip_platters; p <= MAX_EXP; p++) {
			//double expected_samples = 
			double samples = platter[p].total_count - platter[p].gap_negative_count1;
			if (samples < 8000) continue;
			double observed_avg = platter[p].gap_sum1 / samples;
			double diff = observed_avg - avg;
			double norm = diff * std::sqrt(samples) / dev;
			std::ostringstream name;
			name << get_name() << ":G1(" << p << ")";
			results.push_back(TestResult(name.str(), norm, norm, TestResult::TYPE_RAW_NORMAL, 0.02 * std::pow(0.65, p - skip_platters)));
		}
	}*/
	/*if (total_samples && true) {//frequency test results
		double freq_all_sum = 0;
		double freq_all_total = 0;
		double freq_all_bins = 0;
		double freq_all_tail_count = 0;
		double freq_all_tail_prob = 0;
		for (int p = skip_platters; p <= MAX_EXP; p++) {
			double expected_samples = total_samples * std::pow(0.5, p - skip_platters + 1 - (p == MAX_EXP));
			double samples = platter[p].total_count;
			int ebits = int(std::log(expected_samples) / std::log(2.0) * 0.5 - 0.4);
			if (ebits < 2 || !samples) {
				freq_all_tail_count += samples;
				freq_all_tail_prob += std::pow(0.5, p + 1 - (p == MAX_EXP) - skip_platters);
				continue;
			}
			std::vector<Uint64> counts_vec;
			const Uint64 *counts = platter[p].freq_count.get_array();
			if (ebits < FREQ_SIG_BITS) {
				counts_vec.resize(1 << FREQ_SIG_BITS);
				for (int i = 0; i < 1 << FREQ_SIG_BITS; i++) counts_vec[i] = counts[i];
				truncate_table_bits(&counts_vec[0], NULL, FREQ_SIG_BITS, ebits);
				counts = &counts_vec[0];
			}
			else ebits = FREQ_SIG_BITS;
			double freq_platter_sum = 0;
			for (int i = (1 << ebits) - 1; i >= 0; i--) if (counts[i]) freq_platter_sum += counts[i] * std::log(counts[i]);
			freq_all_bins += 1 << ebits;
			freq_all_total += samples;
			freq_all_sum += freq_platter_sum - samples * std::log(std::pow(0.5, p + 1 - (p == MAX_EXP) - skip_platters + ebits));
			if (samples < 200) continue;
			//double raw = PractRand::Tests::g_test_flat(1 << ebits, &counts[0]);
			//double norm = PractRand::Tests::math_chisquared_to_normal(raw, (1 << ebits) - 1);
			double raw2 = (freq_platter_sum - samples * std::log(samples * std::pow(0.5, ebits))) * 2.0;
			double norm2 = PractRand::Tests::math_chisquared_to_normal(raw2, (1 << ebits) - 1);
			std::ostringstream name;
			name << get_name() << ":F(" << p << "," << ebits << ")";
			//results.push_back(TestResult(name.str(), norm, norm, TestResult::TYPE_RAW_NORMAL, 0.02));
			results.push_back(TestResult(name.str(), norm2, norm2, TestResult::TYPE_RAW_NORMAL, 0.05 * std::pow(0.6, p - skip_platters)));
		}
		if (freq_all_total > 200) {//frequency, all platters combined
			if (freq_all_tail_prob) {
				freq_all_bins += 1;
				freq_all_total += freq_all_tail_count;
				if (freq_all_tail_count) freq_all_sum += freq_all_tail_count * std::log(freq_all_tail_count / freq_all_tail_prob);
			}
			freq_all_sum -= freq_all_total * std::log(freq_all_total);
			freq_all_sum *= 2;
			double all_norm = math_chisquared_to_normal(freq_all_sum, freq_all_bins - 1);
			double all_p = math_normaldist_to_pvalue(all_norm);
			TestCalibrationData *calib = NULL;//calibration_manager.get_calibration_data("FPF-14+6/16:overall", samples / 512.0 + 0.5);
			if (calib && total_samples >= 3000)
				results.push_back(TestResult(get_name() + ":F:all", all_norm, -calib->sample_to_suspicion(all_norm), TestResult::TYPE_GOOD_S, .25));
			else results.push_back(TestResult(get_name() + ":F:all", all_norm, all_norm, TestResult::TYPE_RAW_NORMAL, .25));
		}
		if (total_samples > 320) {//frequency, cross-platter
			std::vector<Uint64> cross_counts; cross_counts.resize(MAX_EXP + 1);
			for (int p = skip_platters; p <= MAX_EXP; p++) cross_counts[p] = platter[p].total_count;
			std::vector<double> cross_probs; cross_probs.resize(MAX_EXP + 1);
			for (int p = skip_platters; p <= MAX_EXP; p++) cross_probs[p] = std::pow(0.5, p + 1 - (p == MAX_EXP) - skip_platters);
			if (false) {
				for (int p = skip_platters; p <= MAX_EXP; p++) {
					std::printf("%2d:", p);
					if (cross_counts[p] >> 32) {
						std::printf("%8X", Uint32(cross_counts[p] >> 32));
						std::printf("%08X", Uint32(cross_counts[p]));
					}
					else std::printf("        %8X", Uint32(cross_counts[p]));
					std::printf("    %.15f\n", cross_probs[p]);
				}
			}
			//int bins = MAX_EXP + 1 - skip_platters;
			int bins = simplify_prob_table(MAX_EXP + 1 - skip_platters, total_samples / 10.0, &cross_probs[skip_platters], &cross_counts[skip_platters], true, true);
			if (false) {
				std::printf("---\n");
				for (int p = skip_platters; p < bins; p++) {
					std::printf("%2d:", p);
					if (cross_counts[p] >> 32) {
						std::printf("%8X", Uint32(cross_counts[p] >> 32));
						std::printf("%08X", Uint32(cross_counts[p]));
					}
					else std::printf("        %8X", Uint32(cross_counts[p]));
					std::printf("    %.15f\n", cross_probs[p]);
				}
			}
			double raw = PractRand::Tests::g_test(bins, &cross_probs[skip_platters], &cross_counts[skip_platters]);
			double norm = PractRand::Tests::math_chisquared_to_normal(raw, bins - 1);
			results.push_back(TestResult(get_name() + ":F:cross", norm, norm, TestResult::TYPE_RAW_NORMAL, 0.25));
		}
	}*/
}
void PractRand::Tests::FPMulti::test_blocks(TestBlock *data, int numblocks) {
	unsigned long end = numblocks << (TestBlock::SIZE_L2 - 3);
	Uint64 offset = (blocks_tested << (TestBlock::SIZE_L2 - 3)) + 1;
	//Uint64 *base_addr = &data[0].as64[-offset]; //we can optimize things slightly once we're more confident in this
	if (autofail) return;
	for (unsigned long i = 0; i < end; i++) {
		Uint64 raw = data[0].as64[i];
		unsigned long e = count_low_zeroes64(raw);
		unsigned long sig;
		if (e < MAX_EXP) {
			sig = (raw >> (e + 1)) & ((1 << BASE_SIG_BITS) - 1);
		}
		else {
			e = MAX_EXP;
			sig = (raw >> e) & ((1 << BASE_SIG_BITS) - 1);
		}
		process(i + offset, e, sig);
	}
#if 0
	//unsigned long stride_bits = 1 << stride_bits_L2;
	//Uint32 skip_mask = ((1 << skip_platters) - 1) << (32 - skip_platters);

	Uint32 skip_mask = (1 << skip_platters) - 1;
	base_position = blocks_tested * (8 * TestBlock::SIZE >> stride_bits_L2);

	if (stride_bits_L2 >= 5) {//long stride
		long stride32 = 1 << (stride_bits_L2 - 5);
		long max = numblocks * (TestBlock::SIZE / 4) - 1 - (stride32 - 1);
		for (long i = blocks_tested ? -1 : 0; i < max; i += stride32) {
			Uint32 cur = data->as32[i];
			if (cur & skip_mask) continue;
			unsigned long e = count_low_zeroes32(cur);
			unsigned long sig;
			if (e < 32 - BASE_SIG_BITS) process(platter[e], cur >> (e + 1),  i);
			else {
				//Uint64 cur2 = cur | (Uint64(reverse_bits32(data->as32[i + 1])) << 32);
				Uint64 cur2 = cur | (Uint64(data->as32[i + 1]) << 32);
				if (e == 32) e += count_low_zeroes32(Uint32(cur2 >> 32));
				if (e < MAX_EXP) process(platter[e], Uint32(cur2 >> (e + 1)), i);
				else process(platter[MAX_EXP], cur2 >> MAX_EXP, i);
			}
		}
	}
	else {//short stride
		long max = numblocks * (TestBlock::SIZE / 4) - 1;
		long start;
		Uint32 cur,next;
		if (blocks_tested) {
			cur = data->as32[-2];//64 bit samples on 32 bit words
			next = data->as32[-1];
			start = -1;
		}
		else {
			cur = data->as32[0];//this misses the very first possible sample, but there's no way to do that with the shared code path
			next = data->as32[1];
			start = 1;
			//...so we have a special case just for the first possible sample (unoptimized)
			unsigned long e = count_low_zeroes32(cur);
			if (e == 32) e += count_low_zeroes32(next);
			if (e < MAX_EXP) process(platter[e], Uint32(data->as64[0] >> (e + 1)), 1);
			else process(platter[MAX_EXP], Uint32(data->as64[0] >> MAX_EXP), 1);
		}
		if (stride_bits_L2 == 4) {
			enum { STRIDE_BITS = 16 };
			for (long i = start; i < max; i ++) {
				Uint32 word = next;
				next = data->as32[i + 1];//we need 3 32-bit values to slide a 64 bit window across them

				unsigned long e, sig;

				cur >>= STRIDE_BITS;
				cur |= word << (32 - STRIDE_BITS);
				word >>= STRIDE_BITS;// it's easier to keep cur and word up to date as the window slides, but next rarely gets used
				if (!(cur & skip_mask)) {
					Uint32 n = (i << 1) + 0;
					e = count_low_zeroes32(cur);
					if (e < 32 - BASE_SIG_BITS) process(platter[e], cur >> (e + 1), n);
					else {
						Uint64 cur2 = cur | (Uint64(word) << 32) | (Uint64(next) << (64 - STRIDE_BITS));
						if (e == 32) e += count_low_zeroes32(Uint32(cur2 >> 32));
						if (e < MAX_EXP) process(platter[e], Uint32(cur2 >> (e + 1)), n);
						else process(platter[MAX_EXP], cur2 >> MAX_EXP, n);
					}
				}

				cur >>= STRIDE_BITS;
				cur |= word << (32 - STRIDE_BITS);
				//word >>= STRIDE_BITS; // should now be zero, no longer useful
				if (!(cur & skip_mask)) {
					Uint32 n = (i << 1) + 1;
					cur |= next << (32 - STRIDE_BITS);
					e = count_low_zeroes32(cur);
					if (e < 32 - BASE_SIG_BITS) process(platter[e], cur >> (e + 1), n);
					else {
						//Uint64 cur2 = cur | (Uint64(word) << 32) | (Uint64(next) << (64 - STRIDE_BITS * 2)); // word is now zero, ignore it
						Uint64 cur2 = cur | (Uint64(next) << (64 - STRIDE_BITS * 2));
						if (e == 32) e += count_low_zeroes32(Uint32(cur2 >> 32));
						if (e < MAX_EXP) process(platter[e], Uint32(cur2 >> (e + 1)), n);
						else process(platter[MAX_EXP], cur2 >> MAX_EXP, n);
					}
				}
			}
		}
		/*
		//global gaps not set up correctly for other strides, skip_mask not checked, other?
		else if (stride_bits_L2 == 3) {
			enum { STRIDE_BITS = 8 };
			for (long i = start; i < max32; i += 1) {
				Uint32 word = data->as32[i];
				for (unsigned long sub_word = 0; sub_word < 32 / STRIDE_BITS; sub_word++) {
					cur >>= STRIDE_BITS;
					cur |= word << (32 - STRIDE_BITS);
					word >>= STRIDE_BITS;//
					unsigned long e = count_low_zeroes32(cur);
					unsigned long sig;
					if (e < 32 - BASE_SIG_BITS) platter[e].process(cur >> (e + 1));
					else {
						Uint64 cur2 = cur | (Uint64(word) << 32) | (Uint64(data->as32[i + 1]) << (64 - (sub_word + 1) * STRIDE_BITS));//
						if (e == 32) e += count_low_zeroes32(Uint32(cur2 >> 32));
						if (e < MAX_EXP) platter[e].process(Uint32(cur2 >> (e + 1)));
						else platter[MAX_EXP].process(cur2 >> MAX_EXP);
					}
				}
			}
		}
		else if (stride_bits_L2 == 2) {
			enum { STRIDE_BITS = 4 };
			for (long i = start; i < max32; i += 1) {
				Uint32 word = data->as32[i];
				for (unsigned long sub_word = 0; sub_word < 32 / STRIDE_BITS; sub_word++) {
					cur >>= STRIDE_BITS;
					cur |= word << (32 - STRIDE_BITS);
					word >>= STRIDE_BITS;//
					unsigned long e = count_low_zeroes32(cur);
					unsigned long sig;
					if (e < 32 - BASE_SIG_BITS) platter[e].process(cur >> (e + 1));
					else {
						Uint64 cur2 = cur | (Uint64(word) << 32) | (Uint64(data->as32[i + 1]) << (64 - (sub_word + 1) * STRIDE_BITS));//
						if (e == 32) e += count_low_zeroes32(Uint32(cur2 >> 32));
						if (e < MAX_EXP) platter[e].process(Uint32(cur2 >> (e + 1)));
						else platter[MAX_EXP].process(cur2 >> MAX_EXP);
					}
				}
			}
		}
		*/
	}
#endif
	blocks_tested += numblocks;
}

PractRand::Tests::Birthday32::Birthday32() {
	if (BUFFER_SIZE * sizeof(buffer[0]) < TestBlock::SIZE) issue_error("Birthday32 - bad BUFFER_SIZE");
}
void PractRand::Tests::Birthday32::init(PractRand::RNGs::vRNG *known_good) {
	num_buffered = 0;
	for (int i = 0; i < MAX_DUPLICATES; i++) counts[i] = 0;
}
std::string Tests::Birthday32::get_name() const {
	return "BDay32";
}
void PractRand::Tests::Birthday32::get_results(std::vector<TestResult> &results) {
	Uint64 counts2[MAX_DUPLICATES];
	Uint64 total = 0;
	for (int i = 0; i < MAX_DUPLICATES; i++) {
		counts2[i] = counts[i];
		total += counts2[i];
	}
	if (total < 500) return;
	double probs[MAX_DUPLICATES];
	const int lambda_L2 = BUFFER_SIZE_L2 * 3 - 32 - 2;
	if (lambda_L2 < 1) issue_error("Birthday32 - bad configuration");
	const double lambda = 1 << lambda_L2;
	for (int i = 0; i < MAX_DUPLICATES + lambda * 4; i++) {
		double p = std::exp(-lambda) * std::pow(lambda, i) / math_factorial(i);
		if (i < MAX_DUPLICATES) probs[i] = p;
		else probs[MAX_DUPLICATES - 1] += p;
	}
	int cat = simplify_prob_table(MAX_DUPLICATES, total / 40.0, probs, counts2, true, false);
	double chisquared = g_test(cat, probs, counts2);
	double norm = math_chisquared_to_normal(chisquared, cat - 1);
	results.push_back(TestResult(get_name(), norm, norm, TestResult::TYPE_RAW_NORMAL, 0.125));
}
void PractRand::Tests::Birthday32::flush_buffer() {
	if (num_buffered != BUFFER_SIZE) issue_error("Birthday32::flush_buffer - buffer not full?");
	num_buffered = 0;
	enum {
		SORTHELP_SIZE_L2 = BUFFER_SIZE_L2 - 3,
		SORTHELP_SIZE = 1 << SORTHELP_SIZE_L2
	};
	Uint32 sort_helper[SORTHELP_SIZE + 1];
	std::memset(sort_helper, 0, (SORTHELP_SIZE + 1) * sizeof(Uint32));
	for (int i = 0; i < BUFFER_SIZE; i++) sort_helper[1 + (buffer[i] >> (32 - SORTHELP_SIZE_L2))]++;
	int running_total = 0;
	for (int i = 2; i <= SORTHELP_SIZE; i++) {
		sort_helper[i] += sort_helper[i-1];
	}
	Uint32 sorted_buffer[BUFFER_SIZE];
	for (int i = 0; i < BUFFER_SIZE; i++) {
		Uint32 value = buffer[i];
		int hi = value >> (32 - SORTHELP_SIZE_L2);
		sorted_buffer[sort_helper[hi]++] = value;
	}
	if (true) {
		int old = 0;
		for (int i = 0; i < SORTHELP_SIZE; i++) {
			int end = sort_helper[i];
			std::sort(&sorted_buffer[old], &sorted_buffer[end]);//is this reasonably optimized for very small sorts?
			old = end;
		}
	}
	Uint32 deltas[BUFFER_SIZE - 1];//possibly some sort of mask could work better instead?
	for (int i = 0; i < BUFFER_SIZE - 1; i++) deltas[i] = sorted_buffer[i + 1] - sorted_buffer[i];
	//tired of trying to write optimized sorting, just doing it the easy way now:
	std::sort(&deltas[0], &deltas[BUFFER_SIZE - 1]);
	int duplicates = 0;
	for (int i = 1; i < BUFFER_SIZE - 1; i++) if (deltas[i] == deltas[i - 1]) duplicates++;
	if (duplicates >= MAX_DUPLICATES) duplicates = MAX_DUPLICATES - 1;
	counts[duplicates]++;
}
void PractRand::Tests::Birthday32::test_blocks(TestBlock *data, int numblocks) {
	while (numblocks) {
		Uint32 *ptr = &buffer[num_buffered];
		if (false) buffer[num_buffered++] = data[0].as32[0];
		else {
			std::memcpy(&buffer[num_buffered], &data[0].as32[0], TestBlock::SIZE);
			num_buffered += TestBlock::SIZE / sizeof(Uint32);
		}		
		if (num_buffered == BUFFER_SIZE) flush_buffer();
		numblocks--;
		data++;
	}
}


void PractRand::Tests::Birthday64::_histogram_in_place_sort64(Uint64 *buffer, long length, long bits_already, Uint32 region_counts[1 << SORT_HELPER_BITS]) {
	if (length <= 1) return;
	if (length < (4 << SORT_HELPER_BITS) || 64 - bits_already - SORT_HELPER_BITS < SORT_HELPER_BITS) {
		std::sort(&buffer[0], &buffer[length]);
		return;
	}
	Uint64 total = 0;
	Uint32 region_bases[(1 << SORT_HELPER_BITS) + 1];
	Uint32 region_bases2[(1 << SORT_HELPER_BITS) + 1];
	long shift = 64 - SORT_HELPER_BITS - bits_already;
	region_bases[0] = 0;
	region_bases2[0] = 0;
	for (long i = 0; i < (1 << SORT_HELPER_BITS); i++) {
		region_bases[i + 1] = region_bases[i] + region_counts[i];
		region_bases2[i + 1] = region_bases[i + 1];
		total += region_counts[i];
	}
	if (total != length) issue_error("Birthday64::_histogram_sort64 - bad region counts");

	long region = 0;
	while (region < (1 << SORT_HELPER_BITS)) {
		long index = region_bases[region];
		if (!region_counts[region]) {
			region++;
			continue;
		}
		Uint64 value = buffer[index];
		long ri = (value >> shift) & ((1 << SORT_HELPER_BITS) - 1);
		if (ri == region) {
			region_counts[region]--;
			region_bases[region]++;
			index++;
			continue;
		}

		while (true) {
			long index2 = region_bases[ri];
			Uint64 value2 = buffer[index2];
			long ri2 = (value2 >> shift) & ((1 << SORT_HELPER_BITS) - 1);
			if (ri2 == ri) {
				region_counts[ri]--;
				region_bases[ri]++;
				continue;
			}
			buffer[index2] = value;
			region_counts[ri]--;
			region_bases[ri]++;

			value = value2;
			ri = ri2;
			if (ri == region) break;
		}
		buffer[index] = value;
		region_counts[region]--;
		region_bases[region]++;
	}
	shift -= SORT_HELPER_BITS;
	for (int i = 0; i < 1 << SORT_HELPER_BITS; i++) {
		if (false) {
			std::sort(&buffer[region_bases2[i]], &buffer[region_bases2[i + 1]]);
		}
		else {
			int len = region_bases2[i + 1] - region_bases2[i];
			if (len >= (4 << SORT_HELPER_BITS)) {
				std::memset(region_counts, 0, sizeof(region_counts[0]) << SORT_HELPER_BITS);
				for (int x = region_bases2[i]; x < region_bases2[i + 1]; x++) {
					long ri = (buffer[x] >> shift) & ((1 << SORT_HELPER_BITS) - 1);
					region_counts[ri]++;
				}
				_histogram_in_place_sort64(&buffer[region_bases2[i]], len, bits_already + SORT_HELPER_BITS, region_counts);
			}
			else std::sort(&buffer[region_bases2[i]], &buffer[region_bases2[i + 1]]);
		}
	}
}
void PractRand::Tests::Birthday64::_histogram_in_place_sort64(Uint64 *base, long length) {
	if (length <= 1) return;
	/*if (bits_already >= 64 - SORT_HELPER_BITS) {// - no longer applies since bits_already is assumed to be zero
		std::sort(&base[0], &base[length]);
		return;
	}//*/
	Uint32 region_count[1 << SORT_HELPER_BITS];
	std::memset(region_count, 0, sizeof(region_count[0])* (1 << SORT_HELPER_BITS));
	long shift = 64 - SORT_HELPER_BITS;// -bits_already;
	//Uint64 any_1s = 0, all_1s = 0xFFffFFffFFffFFffull;//for debuging only, disable in release - no longer applies since bits_already is assumed to be zero
	for (Uint64 *cur = base; cur < &base[length]; cur++) {
		long ri = (*cur >> shift);// &((1 << SORT_HELPER_BITS) - 1);
		region_count[ri]++;
		//any_1s |= *cur; all_1s &= *cur;//for debuging only, disable in release - no longer applies since bits_already is assumed to be zero
	}
	//if ((any_1s ^ all_1s) >> bits_already) issue_error("_histogram_sort64 - bits_already not already sorted");//for debuging only, disable in release - no longer applies since bits_already is assumed to be zero
	_histogram_in_place_sort64(base, length, 0, region_count);
}
void PractRand::Tests::Birthday64::_histogram_sort64(Uint64 *buffer, long length, long bits_already, Uint32 region_counts[1 << SORT_HELPER_BITS]) {
	if (length <= 1) return;
	std::vector<Uint64> copied_buffer; copied_buffer.resize(length);
	std::memcpy(&copied_buffer[0], &buffer[0], sizeof(buffer[0]) * length);
	Uint32 region_bases[(1 << SORT_HELPER_BITS) + 1];
	long shift = 64 - SORT_HELPER_BITS - bits_already;
	region_bases[0] = 0;
	for (long i = 0; i < (1 << SORT_HELPER_BITS); i++) {
		region_bases[i + 1] = region_bases[i] + region_counts[i];
	}
	for (long i = 0; i < length; i++) {
		Uint64 value = copied_buffer[i];
		long ri = (value >> shift) & ((1 << SORT_HELPER_BITS) - 1);
		buffer[region_bases[ri]++] = value;
	}
	copied_buffer.clear();
	shift -= SORT_HELPER_BITS;
	bits_already += SORT_HELPER_BITS;
	long begin = 0;
	for (long ri = 0; ri < (1 << SORT_HELPER_BITS); ri++) {
		long end = region_bases[ri];
		long begin = ri ? region_bases[ri - 1] : 0;
		long len = end - begin;
		if (len > (32 << SORT_HELPER_BITS)) {
			std::memset(region_counts, 0, sizeof(region_counts[0])* (1 << SORT_HELPER_BITS));
			for (long i = begin; i < end; i++) {
				Uint64 value = buffer[i];
				long ri2 = (value >> shift) & ((1 << SORT_HELPER_BITS) - 1);
				region_counts[ri2]++;
			}
			_histogram_sort64(&buffer[begin], end - begin, bits_already, region_counts);
		}
		else std::sort(&buffer[begin], &buffer[end]);
		begin = end;
	}
}
void PractRand::Tests::Birthday64::_histogram_sort64(Uint64 *base, long length) {
	Uint32 region_count[1 << SORT_HELPER_BITS];
	std::memset(region_count, 0, sizeof(region_count[0])* (1 << SORT_HELPER_BITS));
	long shift = 64 - SORT_HELPER_BITS;// -bits_already;
	for (Uint64 *cur = base; cur < &base[length]; cur++) {
		long ri = (*cur >> shift);
		region_count[ri]++;
	}
	_histogram_sort64(base, length, 0, region_count);
}
PractRand::Tests::Birthday64::Birthday64() {
	if (BUFFER_SIZE * sizeof(buffer[0]) < TestBlock::SIZE) issue_error("Birthday64 - bad BUFFER_SIZE");
}
void PractRand::Tests::Birthday64::init(PractRand::RNGs::vRNG *known_good) {
	num_buffered = 0;
	for (int i = 0; i < MAX_DUPLICATES; i++) counts[i] = 0;
}
std::string Tests::Birthday64::get_name() const {
	return "BDay64";
}
void PractRand::Tests::Birthday64::get_results(std::vector<TestResult> &results) {
	Uint64 counts2[MAX_DUPLICATES];
	Uint64 total = 0;
	for (int i = 0; i < MAX_DUPLICATES; i++) {
		counts2[i] = counts[i];
		total += counts2[i];
	}
	if (total < 200) return;
	double probs[MAX_DUPLICATES];
	const double lambda = std::pow(2.0, BUFFER_SIZE_L2 * 3 - 64 - 2);
	for (int i = 0; i < MAX_DUPLICATES + lambda * 4; i++) {
		double p = std::exp(-lambda) * std::pow(lambda, i) / math_factorial(i);
		if (i < MAX_DUPLICATES) probs[i] = p;
		else probs[MAX_DUPLICATES - 1] += p;
	}
	int cat = simplify_prob_table(MAX_DUPLICATES, total / 40.0, probs, counts2, true, false);
	double chisquared = g_test(cat, probs, counts2);
	double norm = math_chisquared_to_normal(chisquared, cat - 1);
	results.push_back(TestResult(get_name(), norm, norm, TestResult::TYPE_RAW_NORMAL, 0.125));
}
void PractRand::Tests::Birthday64::flush_buffer() {
	if (num_buffered != BUFFER_SIZE) issue_error("Birthday64::flush_buffer - buffer not full?");
	num_buffered = 0;
	//std::sort(&buffer[0], &buffer[BUFFER_SIZE]);
	_histogram_in_place_sort64(buffer, BUFFER_SIZE);// fastest in my tests
	//_histogram_sort64(buffer, BUFFER_SIZE);//
	//now it's sorted
	for (int i = 0; i < BUFFER_SIZE - 1; i++) {
		//if (buffer[i] > buffer[i + 1]) issue_error("sort broken");
		buffer[i] = buffer[i + 1] - buffer[i];
	}
	//now it's unsorted deltas of sorted values
	//std::sort(&buffer[0], &buffer[BUFFER_SIZE-1]);
	_histogram_in_place_sort64(buffer, BUFFER_SIZE - 1);//fastest even here, a case it's not optimized for
	//_histogram_sort64(buffer, BUFFER_SIZE - 1);
	//now it's sorted deltas of sorted values
	/*double mean = 0, low = 999999999999999999999999999999.0, high = 0;;
	for (int i = 0; i < BUFFER_SIZE - 1; i++) {
		mean += buffer[i];
		if (buffer[i] < low) low = buffer[i];
		if (buffer[i] > high) high = buffer[i];
	}
	mean /= BUFFER_SIZE - 1;//expected mean is 2**64 / (BUFFER_SIZE + 1), I think
	//std::printf("\nmean=%.6f   low=%.0f   high=%.0f", mean, low, high);
	//std::printf("\nlog2(mean)=%.6f   log2(low)=%.6f   log2(high)=%.6f\n", std::log2(mean), std::log2(low), std::log2(high));
	*/
	int duplicates = 0;
	std::vector<std::pair<Uint64, Uint64> > repeated_values;
	for (int i = 0; i < BUFFER_SIZE - 2; i++) {
		if (buffer[i] == buffer[i + 1]) {
			//run found
			int first = i;
			while (i < BUFFER_SIZE - 2 && buffer[i] == buffer[i + 1]) i++;
			int run_len = i - first + 1;
			repeated_values.push_back(std::pair<Uint64, Uint64>(buffer[i], run_len));
			duplicates += run_len - 1;
		}
	}
	/*
	for (int i = 0; i < repeated_values.size(); i++) {
		//if (repeated_values[i].second > 2 || repeated_values[i].first > 1ull << (41 + 2) || repeated_values[i].first < 1ull << (41 - 10)) 
		if (repeated_values[i].second > 2) 
			std::printf("  num = %2d   log2(value) = %.6f   value = %13.0f\n\n", int(repeated_values[i].second), double(std::log2(repeated_values[i].first)), double(repeated_values[i].first));
		//auto it = dup_value_counts.find()
		Uint64 total = dup_value_counts[repeated_values[i].first] += repeated_values[i].second + (1ull << 32);
		if (total > repeated_values[i].second) std::printf("  num = %2d   log2(value) = %.6f   value = %13.0f (combined from %d passes)\n\n", int(total), double(std::log2(repeated_values[i].first)), double(repeated_values[i].first), int(total >> 32));
	}
	*/
	if (duplicates >= MAX_DUPLICATES) duplicates = MAX_DUPLICATES - 1;
	counts[duplicates]++;
}
void PractRand::Tests::Birthday64::test_blocks(TestBlock *data, int numblocks) {
	while (numblocks) {
		Uint64 *ptr = &buffer[num_buffered];
		std::memcpy(&buffer[num_buffered], &data[0].as64[0], TestBlock::SIZE);
		num_buffered += TestBlock::SIZE / sizeof(Uint64);
		if (num_buffered == BUFFER_SIZE) flush_buffer();
		numblocks--;
		data++;
	}
}

void PractRand::Tests::BirthdayHelpers::histogram_sort_and_copy(i128 *buffer, i128 *dest, Uint64 length, long bits_already, Uint64 regions[1 << SORT_HELPER_BITS]) {
	long shift = 64 - SORT_HELPER_BITS - bits_already;
	for (long i = 1; i < (1 << SORT_HELPER_BITS); i++) {
		regions[i] += regions[i - 1];
	}
	for (Uint64 i = 0; i < length; i++) {
		long bin = (buffer[i].high >> shift) & ((1 << bits_already) - 1);
		dest[regions[bin]++] = buffer[i];
	}

	for (long i = (1 << SORT_HELPER_BITS) - 1; i > 0; i--) {
		regions[i] = regions[i - 1];
	}
	regions[0] = 0;
	bits_already += SORT_HELPER_BITS;
	for (long i = 0; i < (1 << SORT_HELPER_BITS); i++) {
		Uint64 sublength = regions[i + 1] - regions[i];
		histogram_in_place_sort128(dest + regions[i], sublength, bits_already);
	}
	for (Uint64 i = 0; i < length; i++) buffer[i] = dest[i];
}
void PractRand::Tests::BirthdayHelpers::histogram_sort_and_copy(i128 *buffer, i128 *dest, Uint64 length, long bits_already) {
	Uint64 regions[(1 << SORT_HELPER_BITS) + 1];
	for (long i = 0; i < (1 << SORT_HELPER_BITS); i++) regions[i] = 0;
	long shift = 64 - SORT_HELPER_BITS - bits_already;
	for (Uint64 i = 0; i < length; i++) {
		long bin = (buffer[i].high >> shift) & ((1 << bits_already) - 1);
		regions[1 + bin]++;
	}
	histogram_sort_and_copy(buffer, dest, length, bits_already, regions);
}
void PractRand::Tests::BirthdayHelpers::radix_sort_and_copy(i128 *buffer, i128 *dest, Uint64 length, long bits_already) {
	if (length <= 1) return;
	enum {COMBINED_PASSES = 3};
	Uint64 regions[COMBINED_PASSES << SORT_HELPER_BITS];
	if (true) {//count frequencies for each pass
		for (long i = 0; i < (COMBINED_PASSES << SORT_HELPER_BITS); i++) regions[i] = 0;
		long shift = 64 - SORT_HELPER_BITS - bits_already;
		Uint64 already_check_mask = ((1ull << bits_already) - 1) << (64 - bits_already);//debuging check, remove sometime
		Uint64 already_check_value = buffer[0].high & already_check_mask;//debuging check, remove sometime
		for (Uint64 i = 0; i < length; i++) {
			Uint64 value = buffer[i].high;
			if ((value & already_check_mask) != already_check_value) issue_error();//debuging check, remove sometime
			value <<= bits_already;

			for (long region_base = 0; region_base < (COMBINED_PASSES << SORT_HELPER_BITS); region_base += (1 << SORT_HELPER_BITS)) {
				long bin = value >> (64 - SORT_HELPER_BITS);
				regions[region_base + bin]++;

				value <<= SORT_HELPER_BITS;
			}
		}
	}
	if (true) {//convert from frequency counts to destination regions
		for (long region_base = 0; region_base < (COMBINED_PASSES << SORT_HELPER_BITS); region_base += (1 << SORT_HELPER_BITS)) {
			Uint64 sum = 0;
			for (long i = 1; i < (1 << SORT_HELPER_BITS); i++) {
				Uint64 new_sum = sum + regions[region_base + i];
				regions[region_base + i] = sum;
				sum = new_sum;
			}
		}
	}
	long shift = 64 - COMBINED_PASSES * SORT_HELPER_BITS - bits_already;
	for (long dimension = COMBINED_PASSES - 1; dimension >= 0; dimension--) {
		// now the actual sorting passes, least significant first
		Uint64 *region_base = &regions[dimension << SORT_HELPER_BITS];
		for (Uint64 i = 0; i < length; i++) {
			long bin = (buffer[i].high >> shift) & ((1 << SORT_HELPER_BITS) - 1);
			dest[region_base[bin]++] = buffer[i];
		}

		shift += SORT_HELPER_BITS;
		i128 *tmp = buffer; buffer = dest; dest = tmp;
	}
	// now the copy and recursive sorting in case that wasn't enough:
	Uint64 sorted_mask = Uint64(0) - Uint64((1ull << (64 - SORT_HELPER_BITS * COMBINED_PASSES - bits_already)) - 1);
	Uint64 run_value = buffer[0].high & sorted_mask;
	Uint64 run_length = 0;
	for (long i = 1; i < (1 << SORT_HELPER_BITS); i++) {
		Uint64 value = buffer[i].high & sorted_mask;
		if (value == run_value) run_length++;//run continuing
		else {
			run_value = value;
			if (!run_length) {// no run, needs a single-copy
				dest[i - 1] = buffer[i - 1];
			}
			else {//run ends, needs internal sorting and a multiple-copy
				Uint64 start_index = i - run_length - 1;
				std::sort(&buffer[start_index], &buffer[i]);
				std::copy(&buffer[start_index], &buffer[i], &dest[start_index]);
				run_length = 0;
			}
		}
	}
}
void PractRand::Tests::BirthdayHelpers::histogram_in_place_sort128(i128 *base, Uint64 length, long bits_already) {
	Uint64 freq_counts[1 << SORT_HELPER_BITS];
	for (long i = 0; i < (1 << SORT_HELPER_BITS); i++) freq_counts[i] = 0;
	long shift = 64 - SORT_HELPER_BITS - bits_already;
	for (Uint64 i = 0; i < length; i++) {
		freq_counts[(base[i].high >> shift) & ((1ull << SORT_HELPER_BITS) - 1)]++;
	}
	histogram_in_place_sort128(base, length, bits_already, freq_counts);
}
void PractRand::Tests::BirthdayHelpers::histogram_in_place_sort128(i128 *buffer, Uint64 length, long bits_already, Uint64 region_counts[1 << SORT_HELPER_BITS]) {
	if (length <= 1) return;
	if (length < (4 << SORT_HELPER_BITS) || bits_already >= 64 - SORT_HELPER_BITS) {
		std::sort(&buffer[0], &buffer[length]);
		return;
	}
	Uint64 total = 0;
	Uint32 region_bases[(1 << SORT_HELPER_BITS) + 1];
	Uint32 region_bases2[(1 << SORT_HELPER_BITS) + 1];
	long shift = 64 - SORT_HELPER_BITS - bits_already;
	region_bases[0] = 0;
	region_bases2[0] = 0;
	for (long i = 0; i < (1 << SORT_HELPER_BITS); i++) {
		region_bases[i + 1] = region_bases[i] + region_counts[i];
		region_bases2[i + 1] = region_bases[i + 1];
		total += region_counts[i];
	}
	if (total != length) issue_error("BirthdayHelpers::histogram_in_place_sort128 - bad region counts");

	long region = 0;
	while (region < (1 << SORT_HELPER_BITS)) {
		long index = region_bases[region];
		if (!region_counts[region]) {
			region++;
			continue;
		}
		i128 value = buffer[index];
		long ri = (value.high >> shift) & ((1 << SORT_HELPER_BITS) - 1);
		if (ri == region) {
			region_counts[region]--;
			region_bases[region]++;
			index++;
			continue;
		}

		while (true) {
			if (!region_counts[ri]) {
				issue_error("region already empty");
			}
			long index2 = region_bases[ri];
			i128 value2 = buffer[index2];
			long ri2 = (value2.high >> shift) & ((1 << SORT_HELPER_BITS) - 1);
			if (ri2 == ri) {
				region_counts[ri]--;
				region_bases[ri]++;
				continue;
			}
			buffer[index2] = value;
			region_counts[ri]--;
			region_bases[ri]++;

			value = value2;
			ri = ri2;
			if (ri == region) break;
		}
		buffer[index] = value;
		region_counts[region]--;
		region_bases[region]++;
	}

	shift -= SORT_HELPER_BITS;
	bits_already += SORT_HELPER_BITS;
	for (int i = 0; i < 1 << SORT_HELPER_BITS; i++) {
		if (false || shift >= 64) {
			std::sort(&buffer[region_bases2[i]], &buffer[region_bases2[i + 1]]);
		}
		else {
			int len = region_bases2[i + 1] - region_bases2[i];
			if (len >= (4 << SORT_HELPER_BITS)) {
				std::memset(region_counts, 0, sizeof(region_counts[0]) << SORT_HELPER_BITS);
				for (int x = region_bases2[i]; x < region_bases2[i + 1]; x++) {
					long ri = (buffer[x].high >> shift) & ((1 << SORT_HELPER_BITS) - 1);
					region_counts[ri]++;
				}
				histogram_in_place_sort128(&buffer[region_bases2[i]], len, bits_already, region_counts);
			}
			else std::sort(&buffer[region_bases2[i]], &buffer[region_bases2[i + 1]]);
		}
	}
}
void PractRand::Tests::BirthdayHelpers::_sorted_deltas_of_sorted_values(i128 *base, long length_L2, Uint64 freq_counts[1 << SORT_HELPER_BITS]) {
	if (length_L2 < 1) issue_error();
	long length = 1 << length_L2;
	if (false) {// both sortings use regular algorithms
		std::sort(base, base + length);
		// it's now sorted
		for (int i = 0; i < length - 1; i++) base[i] = base[i + 1] - base[i];
		// it's now deltas of sorted values
		std::sort(base, base + (length - 1));
		// it's now sorted deltas of sorted values
	}
	else if (false) {// 2nd sorting uses regular algorithm, 1st uses a histogram sort
		histogram_in_place_sort128(base, length, 0, freq_counts);
		for (int i = 0; i < length - 1; i++) {
			if (base[i + 1] < base[i]) issue_error("BirthdayHelpers::_sorted_deltas_of_sorted_values - sort1 failed");//debugging only, remove
		}
		for (int i = 0; i < length - 1; i++) base[i] = base[i + 1] - base[i];
		// it's now deltas of sorted values
		std::sort(base, base + (length - 1));
		// it's now sorted deltas of sorted values
	}
	else if (true) {// both sortings use variants of histogram sort
		histogram_in_place_sort128(base, length, 0, freq_counts);
		//for (int i = 0; i < length - 1; i++) { if (base[i + 1] < base[i]) issue_error("BirthdayHelpers::_sorted_deltas_of_sorted_values - sort1 failed"); }//debugging only, remove
		// it's now sorted
		enum { SAFETY_MARGIN = 2 };
		std::memset(freq_counts, 0, sizeof(freq_counts[0]) << SORT_HELPER_BITS);
		std::vector<i128> spills;
		long shift = 64 - SORT_HELPER_BITS - length_L2 + SAFETY_MARGIN;
		for (Uint64 i = 0; i < length - 1; i++) {
			i128 delta = base[i + 1] - base[i];
			base[i] = delta;
			long ri = delta.high >> shift;
			if (ri >= (1 << SORT_HELPER_BITS)) spills.push_back(delta);
			else {
				freq_counts[ri]++;
				base[i - spills.size()] = delta;
			}
		}
		// it's now deltas of sorted values
		histogram_in_place_sort128(base, length - 1 - spills.size(), length_L2 - SAFETY_MARGIN, freq_counts);
		std::sort(spills.begin(), spills.end());
		for (int i = 0; i < spills.size(); i++) base[length - 1 - spills.size() + i] = spills[i];
		//for (int i = 0; i < length - 2; i++) {if (base[i + 1] < base[i]) issue_error("BirthdayHelpers::_sorted_deltas_of_sorted_values - sort2 failed");}//debugging only, remove
		// it's now sorted deltas of sorted values
	}
	else if (false) {// ...trying a radix-sort, despite not needing the extra copy of the data
		i128 *buffer2 = new i128[length];
		//histogram_in_place_sort128(base, length, 0, freq_counts);
		radix_sort_and_copy(base, buffer2, length, 0);
		for (int i = 0; i < length - 1; i++) {
			if (base[i + 1] < base[i]) issue_error("BirthdayHelpers::_sorted_deltas_of_sorted_values - sort1 failed");//debugging only, remove
		}
		// it's now sorted
		enum { SAFETY_MARGIN = 2 };
		std::memset(freq_counts, 0, sizeof(freq_counts[0]) << SORT_HELPER_BITS);
		std::vector<i128> spills;
		long shift = 64 - SORT_HELPER_BITS - length_L2 + SAFETY_MARGIN;
		for (Uint64 i = 0; i < length - 1; i++) {
			i128 delta = base[i + 1] - base[i];
			base[i] = delta;
			long ri = delta.high >> shift;
			if (ri >= (1 << SORT_HELPER_BITS)) spills.push_back(delta);
			else {
				freq_counts[ri]++;
				base[i - spills.size()] = delta;
			}
		}
		// it's now deltas of sorted values
		histogram_in_place_sort128(base, length - 1 - spills.size(), length_L2 - SAFETY_MARGIN, freq_counts);
		std::sort(spills.begin(), spills.end());
		for (int i = 0; i < spills.size(); i++) base[length - 1 - spills.size() + i] = spills[i];
		for (int i = 0; i < length - 2; i++) {
			if (base[i + 1] < base[i]) issue_error("BirthdayHelpers::_sorted_deltas_of_sorted_values - sort2 failed");//debugging only, remove
		}
		// it's now sorted deltas of sorted values
		delete[] buffer2;
	}
	else issue_error();
}
void PractRand::Tests::BirthdayHelpers::_sorted_deltas_of_sorted_values(i128 *base, long length_L2) {
	if (length_L2 < 1) issue_error();
	Uint64 length = 1 << length_L2;
	Uint64 freq_counts[1 << SORT_HELPER_BITS];
	for (long i = 0; i < (1 << SORT_HELPER_BITS); i++) freq_counts[i] = 0;
	for (Uint64 i = 0; i < length; i++) {
		freq_counts[base[i].high >> (64 - SORT_HELPER_BITS)]++;
	}
	_sorted_deltas_of_sorted_values(base, length_L2, freq_counts);
}
PractRand::Tests::BirthdayLamda1::~BirthdayLamda1() {
	delete[] buffer;
}
PractRand::Tests::BirthdayLamda1::BirthdayLamda1(int buffer_size_L2_) : buffer_size_L2(buffer_size_L2_) {
	buffer = new i128[1 << buffer_size_L2];
	//buffer.resize(1 << buffer_size_L2);
	bits_to_use = buffer_size_L2 * 3 - 2;
	//const double lambda = std::pow(2.0, buffer_size_L2 * 3 - BITS_TO_USE - 2);
	//if (lambda != 1.0) issue_error("BirthdayLambda1 - bad configuration");
	duplicates = expected_duplicates = 0;
	if (bits_to_use > 128 || bits_to_use < 1) issue_error("BirthdayLamda1 - bad bits_to_use");
	if ((1ull << buffer_size_L2) * sizeof(buffer[0]) < TestBlock::SIZE) issue_error("BirthdayLamda1 - bad buffer size");
}
void PractRand::Tests::BirthdayLamda1::init(PractRand::RNGs::vRNG *known_good) {
	num_buffered = 0;
	for (int i = 0; i < (1 << SORT_HELPER_BITS); i++) sort_helper_counts[i] = 0;
	autofail = false;
}
std::string Tests::BirthdayLamda1::get_name() const {
	std::stringstream buf;
	buf << "BDayL1(" << buffer_size_L2 << ")";
	return buf.str();
}
static double poisson_pmf(double lambda, int value) {
	return std::exp(std::log(lambda) * value - lambda - PractRand::Tests::math_factorial_log(value));
}
static double largest_spacing_cdf(Uint64 N, double value) {
	long double invN = 1.0 / N;
	if (value < invN) return 0;
	if (value > 1) return 1;
	long double invX = 1.0 / value;
	Uint64 mink, maxk;
	bool invert_result;
	if (invX > N / 2) { mink = int(invX + 1); maxk = N; invert_result = true; }
	else { mink = 1; maxk = int(invX); invert_result = false; }
	long double p = 0, pp = 0;
	for (Uint64 k = mink; k <= maxk; k++) {
		long double term = (((k - 1) & 1) ? -1 : 0);
		term *= std::pow(1 - k * value, N - 1);
		if (k > N) issue_error();//multiply by zero otherwise, but I don't think that should happen?
		using PractRand::Tests::math_factorial_log;
		long double choose_n_of_k = math_factorial_log(N) - math_factorial_log(k) - math_factorial_log(N - k);
		choose_n_of_k = std::exp(choose_n_of_k);
		term *= choose_n_of_k;
		if (pp) {
			p += (pp + term);
			pp = 0;
		}
		else pp = term;
	}
	p += pp;
	if (invert_result) p = 1 - p;
	return p;
}
void PractRand::Tests::BirthdayLamda1::get_results(std::vector<TestResult> &results) {
	if (autofail) {
		results.push_back(TestResult(get_name() + ":!", -1, 1, TestResult::TYPE_PASSFAIL, 0.125));
		return;
	}
	if (!expected_duplicates) return;

	double norm = (duplicates - expected_duplicates) / std::sqrt(expected_duplicates);

	if (expected_duplicates < 100) {
		if (norm <= 0) {
			double p = 0;
			for (int i = 0; i < duplicates; i++) p += poisson_pmf(expected_duplicates, i);
			p += 0.5 * poisson_pmf(expected_duplicates, duplicates);
			std::vector<double> probs; probs.resize(duplicates + 1);
			for (int i = 0; i <= duplicates; i++) probs[i] = poisson_pmf(expected_duplicates, i);
			results.push_back(TestResult(get_name(), norm, 1-p, TestResult::TYPE_BAD_P, 0.125));
		}
		else {
			double p = 0;
			double high = duplicates > expected_duplicates ? duplicates : expected_duplicates;
			high += 8 * std::sqrt(expected_duplicates);
			for (int i = high + 3; i > duplicates; i--) p += poisson_pmf(expected_duplicates, i);
			p += 0.5 * poisson_pmf(expected_duplicates, duplicates);
			results.push_back(TestResult(get_name(), norm, p, TestResult::TYPE_BAD_P, 0.125));
		}
	}
	else {
		results.push_back(TestResult(get_name(), norm, math_normaldist_to_pvalue(-norm), TestResult::TYPE_BAD_P, 0.125));
		// would be better passed through calibration, but this will do for now
	}
}
Uint64 PractRand::Tests::BirthdayLamda1::flush_buffer() {
	const Uint64 buffer_size = 1ull << buffer_size_L2;
	if (num_buffered != buffer_size) issue_error("BirthdayLamda1::flush_buffer - buffer not full?");
	num_buffered = 0;
	if (autofail) return 0;

	//BirthdayHelpers::_sorted_deltas_of_sorted_values(&buffer[0], buffer_size_L2, sort_helper_counts);
	BirthdayHelpers::histogram_in_place_sort128(buffer, buffer_size, 0, sort_helper_counts);
	// it's now sorted
	enum { SAFETY_MARGIN = 2 };
	std::memset(sort_helper_counts, 0, sizeof(sort_helper_counts[0]) << SORT_HELPER_BITS);
	std::vector<i128> spills;
	i128 largest; largest.high = largest.low = 0;
	long shift = 64 - SORT_HELPER_BITS - buffer_size_L2 + SAFETY_MARGIN;
	for (Uint64 i = 0; i < buffer_size - 1; i++) {
		i128 delta = buffer[i + 1] - buffer[i];
		buffer[i] = delta;
		if (DO_LARGEST_SPACING && largest < delta) {
			largest = delta;
		}
		long ri = delta.high >> shift;
		if (ri >= (1 << SORT_HELPER_BITS)) spills.push_back(delta);
		else {
			sort_helper_counts[ri]++;
			buffer[i - spills.size()] = delta;
		}
	}
	// it's now deltas of sorted values
	BirthdayHelpers::histogram_in_place_sort128(buffer, buffer_size - 1 - spills.size(), buffer_size_L2 - SAFETY_MARGIN, sort_helper_counts);
	std::sort(spills.begin(), spills.end());
	for (int i = 0; i < spills.size(); i++) buffer[buffer_size - 1 - spills.size() + i] = spills[i];
	//for (int i = 0; i < length - 2; i++) {if (base[i + 1] < base[i]) issue_error("BirthdayHelpers::_sorted_deltas_of_sorted_values - sort2 failed");}//debugging only, remove
	// it's now sorted deltas of sorted values
	std::memset(sort_helper_counts, 0, sizeof(sort_helper_counts[0]) << BirthdayHelpers::SORT_HELPER_BITS); // have to reset the histograms even if we never use them, to prevent overflow if nothing else

	if (DO_LARGEST_SPACING) {
		double d_largest = (largest.high + (largest.low / 18446744073709551616.0)) / 18446744073709551616.0;
		double largest_spacing_p = largest_spacing_cdf(buffer_size, d_largest);
		if (largest_spacing_p > longest_spacing) longest_spacing = largest_spacing_p;
	}

	//std::vector<std::pair<i128, Uint64> > repeated_values;
	Uint64 rv = 0;
	for (int i = 0; i < buffer_size - 2; i++) {
		if (buffer[i] == buffer[i + 1]) {
			//run found
			int first = i;
			while (i < buffer_size - 2 && buffer[i] == buffer[i + 1]) i++;
			int run_len = i - first + 1;
			//repeated_values.push_back(std::pair<Uint64, Uint64>(sorted_buffer[i], run_len));
			rv += run_len - 1;
		}
	}
	duplicates += rv;
	expected_duplicates += std::pow(2.0, buffer_size_L2 * 3 - (bits_to_use + 2));
	return rv;
}
void PractRand::Tests::BirthdayLamda1::test_blocks(TestBlock *data, int numblocks) {
	if (autofail) return;
	//const long shift1 = (64 - bits_to_use) & 63;
	//const long shift2 = (bits_to_use - 64) & 63;
	Uint64 mask_high = Uint64(Sint64(-1)), mask_low;
	if (bits_to_use < 64) {
		mask_low = 0;
		mask_high <<= (64 - bits_to_use);
	}
	else if (bits_to_use == 64) mask_low = 0;
	else if (bits_to_use < 128) {
		mask_low = mask_high << (128 - bits_to_use);
	}
	else if (bits_to_use == 128) mask_low = mask_high;
	else issue_error();
	while (numblocks) {
		i128 *dest = &buffer[num_buffered];
		Uint64 *cur = &data[0].as64[0];
		Uint64 *end = &data[1].as64[0];
		enum { LOW = 0, HIGH = 1 };//that's kind of endian-ist, but the tests generally don't bother dealing with such issues
		for (; cur != end; cur += 2, dest++) {
			dest->low = cur[LOW] & mask_low;
			dest->high = cur[HIGH] & mask_high;
			int ri = dest->high >> (64 - SORT_HELPER_BITS);
			sort_helper_counts[ri]++;
		}
		num_buffered += TestBlock::SIZE / sizeof(i128);
		if (num_buffered >> buffer_size_L2) {
			flush_buffer();
			mask_high = Uint64(Sint64(-1)), mask_low;
			if (bits_to_use < 64) {
				mask_low = 0;
				mask_high <<= (64 - bits_to_use);
			}
			else if (bits_to_use == 64) mask_low = 0;
			else if (bits_to_use < 128) {
				mask_low = mask_high << (128 - bits_to_use);
			}
		}
		numblocks--;
		data++;
	}
}


PractRand::Tests::BirthdaySystematic128::BirthdaySystematic128(int bufsize_L2_) : BirthdayLamda1(bufsize_L2_) {}
void PractRand::Tests::BirthdaySystematic128::init(PractRand::RNGs::vRNG *known_good) {
	BirthdayLamda1::init(known_good);

	already_sorted = 0;
	score = 0;
	incomplete_expected_duplicates = 0;
	//incomplete_duplicates = 0;
}
std::string Tests::BirthdaySystematic128::get_name() const {
	std::ostringstream buf;
	buf << "BDayS128(" << buffer_size_L2 << ")";
	return buf.str();
}
void PractRand::Tests::BirthdaySystematic128::do_incomplete_buffer() {
	const Uint64 buffer_size = 1ull << buffer_size_L2;
	const Uint64 half_buffer_size = buffer_size >> 1;
	if (expected_duplicates) issue_error("BirthdaySystematic128 - do_incomplete_buffer should not be called after a full sample");
	if (num_buffered > half_buffer_size) issue_error("BirthdaySystematic128 - do_incomplete_buffer should not be called with a buffer this full");

	already_sorted = 0;
	Uint64 num_unsorted = num_buffered - already_sorted;
	if (num_unsorted) {
		if (already_sorted) {
			BirthdayHelpers::histogram_in_place_sort128(&buffer[already_sorted], num_unsorted);
			Uint64 p1 = 0, p2 = already_sorted, p3 = half_buffer_size, max = half_buffer_size + num_buffered;
			while (true) {
				if (p1 == already_sorted) {
					while (p2 < num_buffered) buffer[p3++] = buffer[p2++];
					break;
				}
				else if (p2 == num_buffered) {
					while (p1 < already_sorted) buffer[p3++] = buffer[p1++];
					break;
				}
				else {
					while (true) {
						if (buffer[p1] < buffer[p2]) {
							buffer[p3++] = buffer[p1++];
							if (p1 == already_sorted) break;
						}
						else {
							buffer[p3++] = buffer[p2++];
							if (p2 == num_buffered) break;
						}
					}
				}
			}
			std::copy(&buffer[half_buffer_size], &buffer[half_buffer_size + num_buffered], &buffer[0]);
		}
		else {
			Uint64 region_counts[1 << BirthdayHelpers::SORT_HELPER_BITS];
			std::copy(&sort_helper_counts[0], &sort_helper_counts[1 << SORT_HELPER_BITS], &region_counts[0]);
			BirthdayHelpers::histogram_in_place_sort128(buffer, num_buffered, 0, region_counts);
			std::copy(&buffer[0], &buffer[num_buffered], &buffer[half_buffer_size]);
		}
		already_sorted = num_buffered;
	}
	else {
		std::copy(&buffer[0], &buffer[num_buffered], &buffer[half_buffer_size]);
	}
	//now we should all be sorted, plus the second half of the buffer should contain a redundant copy of the data - that's why we can't do this if more than half the buffer is full already
//	Uint64 effective_num_buffered = num_buffered;
//	int effective_bufsize_L2 = 10;
	if (num_buffered < 64) return;
	//while ((2ull << effective_bufsize_L2) < num_buffered) effective_bufsize_L2++;
	double log2_of_buffer_size = std::log(double(num_buffered)) / std::log(2.0);
	long bits_per_sample = std::floor(3 * log2_of_buffer_size - 2);
	if (bits_per_sample > bits_to_use) issue_error();
	//const Uint64 effective_buffer_size = 1ull << effective_bufsize_L2;
	Uint64 high_mask = 0xFFffFFffFFffFFffull, low_mask;
	if (bits_per_sample == 128) low_mask = high_mask;
	else if (bits_per_sample > 64) low_mask = high_mask << (128 - bits_per_sample);
	else if (bits_per_sample == 64) low_mask = 0;
	else if (bits_per_sample < 64) {
		low_mask = 0;
		high_mask <<= (64 - bits_per_sample);
	}
	buffer[half_buffer_size].low &= low_mask;
	buffer[half_buffer_size].high &= high_mask;
	for (Uint64 i = 1; i < num_buffered; i++) {
		//buffer[half_buffer_size + i].low = buffer[i].low & low_mask;
		//buffer[half_buffer_size + i].high = buffer[i].high & high_mask;
		buffer[half_buffer_size + i].low &= low_mask;
		buffer[half_buffer_size + i].high &= high_mask;
		buffer[half_buffer_size + i - 1] = buffer[half_buffer_size + i] - buffer[half_buffer_size + i - 1];
	}
	BirthdayHelpers::histogram_in_place_sort128(&buffer[half_buffer_size], num_buffered - 1);
	Uint64 dup = 0;
	for (Uint64 i = 1; i < num_buffered - 1; i++) {
		if (buffer[half_buffer_size + i] == buffer[half_buffer_size + i - 1]) dup++;
	}
	incomplete_duplicates = dup;
	incomplete_expected_duplicates = std::pow(2.0, 3 * log2_of_buffer_size - 2 - bits_per_sample);
	score = evaluate_score(incomplete_expected_duplicates, dup);
	return;
}
void PractRand::Tests::BirthdaySystematic128::get_results(std::vector<TestResult> &results) {
	if (autofail) {
		results.push_back(TestResult(get_name() + ":!", 0, 1.0, TestResult::TYPE_PASSFAIL, 0.01));
		return;
	}
	double total_expected_duplicates = BirthdayLamda1::expected_duplicates;
	double total_actual_duplicates = BirthdayLamda1::duplicates;
	if (!total_expected_duplicates) {// we have not yet completed a full pass
		if (!num_buffered) return;;
		const Uint64 half_buffer_size = 1ull << (buffer_size_L2 - 1);
		if (already_sorted < half_buffer_size && already_sorted < num_buffered) {
			// we have not yet completed a half-pass, and we lack an up-to-date incomplete assessment, so do a fresh one
			do_incomplete_buffer();
		}
		total_expected_duplicates += incomplete_expected_duplicates;
		total_actual_duplicates += incomplete_duplicates;
	}
	if (!total_expected_duplicates) return;

	double norm = (total_actual_duplicates - total_expected_duplicates) / std::sqrt(double(total_expected_duplicates));
	std::ostringstream buf;
	buf << get_name();
	if (BirthdayLamda1::expected_duplicates) buf << ":all";
	else buf << ":inc";
	if (total_expected_duplicates < 100) {
		if (norm <= 0) {
			double p = 0;
			for (int i = 0; i < total_actual_duplicates; i++) p += poisson_pmf(total_expected_duplicates, i);
			p += 0.5 * poisson_pmf(total_expected_duplicates, total_actual_duplicates);
			results.push_back(TestResult(buf.str() + "1", norm, 1 - p, TestResult::TYPE_BAD_P, 0.125));
		}
		else {
			double p = 0;
			double high = total_actual_duplicates > total_expected_duplicates ? total_actual_duplicates : total_expected_duplicates;
			high += 8 * std::sqrt(total_expected_duplicates);

			for (int i = high + 3; i > total_actual_duplicates; i--) p += poisson_pmf(total_expected_duplicates, i);
			p += 0.5 * poisson_pmf(total_expected_duplicates, total_actual_duplicates);
			results.push_back(TestResult(buf.str() + "1", norm, p, TestResult::TYPE_BAD_P, 0.125));
		}
	}
	else {
		results.push_back(TestResult(buf.str() + "1", norm, math_normaldist_to_pvalue(-norm), TestResult::TYPE_BAD_P, 0.125));
		// would be better passed through calibration, but this will do for now
	}

	buf << "2";
	double norm2 = score / std::sqrt(double(total_expected_duplicates));
	results.push_back(TestResult(buf.str(), norm2, math_normaldist_to_pvalue(-norm2), TestResult::TYPE_BAD_P, 0.125));
}
double PractRand::Tests::BirthdaySystematic128::evaluate_score(double lambda, Uint64 num_duplicates) {
	long SIZE = lambda * 2 + std::sqrt(lambda) * 5 + 5;
	std::vector<double> probs; probs.resize(SIZE);
	for (int i = 0; i < SIZE; i++) probs[i] = poisson_pmf(lambda, i);
	double tmp = 0;
	for (int i = 0; i < SIZE; i++) tmp += probs[i];
	for (int i = 0; i < SIZE; i++) probs[i] /= tmp;
	std::vector<double> score_roots; score_roots.resize(SIZE);
	for (int i = 0; i < SIZE; i++) score_roots[i] = -std::log(probs[i]);
	double mean = 0;
	for (int i = 0; i < SIZE; i++) mean += score_roots[i] * probs[i];
	for (int i = 0; i < SIZE; i++) score_roots[i] -= mean;
	double dev = 0;
	for (int i = 0; i < SIZE; i++) dev += score_roots[i] * score_roots[i] * probs[i];
	dev = std::sqrt(dev);
	for (int i = 0; i < SIZE; i++) probs[i] /= dev;

	return (-std::log(poisson_pmf(lambda, num_duplicates)) - mean) / dev;
}
Uint64 PractRand::Tests::BirthdaySystematic128::flush_buffer() {
	Uint64 dups = BirthdayLamda1::flush_buffer();
	if (autofail) return dups;
	
	if (expected_duplicates == 1) score = 0;
	score += evaluate_score(1.0, dups);//scoring method 2
	return dups;
}
void PractRand::Tests::BirthdaySystematic128::test_blocks(TestBlock *data, int numblocks) {
	if (autofail) return;
	Uint64 mask_high = Uint64(Sint64(-1)), mask_low;
	if (bits_to_use < 64) {
		mask_low = 0;
		mask_high <<= (64 - bits_to_use);
	}
	else if (bits_to_use == 64) mask_low = 0;
	else if (bits_to_use < 128) {
		mask_low = mask_high << (128 - bits_to_use);
	}
	else if (bits_to_use == 128) mask_low = mask_high;
	else {
		issue_error();
		mask_low = 0;
	}
	while (numblocks) {
		i128 *dest = &buffer[num_buffered];
		Uint64 *cur = &data[0].as64[0];
		Uint64 *end = &data[1].as64[0];
		enum { LOW = 0, HIGH = 1 };//that's kind of endian-ist, but the tests generally don't bother dealing with such issues
		for (; cur != end; cur += 2, dest++) {
			dest->low = cur[LOW] & mask_low;
			dest->high = cur[HIGH] & mask_high;
			int ri = dest->high >> (64 - SORT_HELPER_BITS);
			sort_helper_counts[ri]++;
		}
		num_buffered += TestBlock::SIZE / sizeof(i128);
		if (num_buffered >> buffer_size_L2) {
			flush_buffer();
			mask_high = Uint64(Sint64(-1)), mask_low;
			if (bits_to_use < 64) {
				mask_low = 0;
				mask_high <<= (64 - bits_to_use);
			}
			else if (bits_to_use == 64) mask_low = 0;
			else if (bits_to_use < 128) {
				mask_low = mask_high << (128 - bits_to_use);
			}
		}
		else if (expected_duplicates == 0 && num_buffered == (1ull << (buffer_size_L2 - 1))) {
			do_incomplete_buffer();
		}

		numblocks--;
		data++;
	}
}


PractRand::Tests::BirthdayAlt::BirthdayAlt(int buffer_size_L2_, int filter_bits_) : buffer_size_L2(buffer_size_L2_), filter_bits(filter_bits_) {
	if (buffer_size_L2 < 6 || buffer_size_L2 > 29) issue_error("BirthdayAlt - bad buffer_size_L2");
	buffer = NULL;
}
PractRand::Tests::BirthdayAlt::~BirthdayAlt() {
	delete[] buffer;
	buffer = NULL;
}
void PractRand::Tests::BirthdayAlt::init(PractRand::RNGs::vRNG *known_good) {
	if (!buffer) buffer = new i128[1 << buffer_size_L2];
	num_buffered = 0;
	autofail = false;

	for (int i = 0; i < (1 << SORT_HELPER_BITS); i++) sort_helper_counts[i] = 0;

	score_sum_log = 0;
	score_sum_log2 = 0;
	score_sum_log_sqr = 0;
	count = 0;
}
std::string Tests::BirthdayAlt::get_name() const {
	std::ostringstream buf;
	buf << "BDayX(" << buffer_size_L2 << ")";
	return buf.str();
}
void PractRand::Tests::BirthdayAlt::_lookup_constants(int table_size_L2,long double *_offset, long double *_deviation, long double *_sample_size) {
	struct PerSizeEmpiricalData {
		double mean;
		double dev;
		Uint64 samples;
	};
	if (table_size_L2 < 6) issue_error("BirthdayAlt::_lookup_constants: table_size_L2 too low");
	if (table_size_L2 >= 32) issue_error("BirthdayAlt::_lookup_constants: table_size_L2 too high");
	static const PerSizeEmpiricalData table[32] = {
		// haven't found a good formula for these values yet, but the number of possible cases is limited and we can tolerate minor errors
		// and the units are in an ugly format, will try to fix that shortly
		{ 0, 0, 0 }, { 0, 0, 0 }, { 0, 0, 0 }, { 0, 0, 0 }, { 0, 0, 0 }, { 0, 0, 0 },//0-5
		{ 0.004760612, 0.0102824, 1ull << 26 },//6
		{ 0.005065438, 0.0103139, 1ull << 26 },//7
		{ 0.005284246, 0.0104208, 1ull << 24 },//8
		{ 0.005454068, 0.0105728, 1ull << 24 },//9
		{ 0.005596846, 0.0107491, 1ull << 26 },//10
		{ 0.005726084, 0.0109407, 1ull << 26 },//11
		{ 0.005849366, 0.0111451, 1ull << 26 },//12
		{ 0.005971410, 0.0113600, 1ull << 26 },//13
		{ 0.006094866, 0.0115875, 1ull << 26 },//14
		{ 0.006221473, 0.0118215, 1ull << 24 },//15
		{ 0.006352280, 0.0120681, 1ull << 24 },//16
		{ 0.00648806,  0.012326, 1ull << 20 },//17
		{ 0.00662950,  0.012593, 1ull << 20 },//18
		{ 0.00677697,  0.012870, 1ull << 20 },//19
		{ 0.00693114,  0.013128, 1ull << 17 },//20
		{ 0.00709237,  0.013502, 1ull << 17 },//21
		{ 0.007261390, 0.0137676, 1ull << 19 },//22
		{ 0.00743840,  0.01419, 1ull << 14 },//23
		{ 0.00762432,  0.01453, 1ull << 14 },//24
		{ 0.007819814, 0.0148607, 1ull << 18 },//25
		{ 0.00802560,  0.01510, 1ull << 12 },//26
		{ 0.00824261,  0.01566, 1ull << 12 },//27
		{ 0.00847146,  0.01613, 1ull << 10 },//28
		{ 0.00871354,  0.01682, 1ull << 10 },//29
		{ 0, 0, 0 },//30
		{ 0, 0, 0 },//31
	};
	long double offset, dev, samples;
	if (_offset) {
		if (table[table_size_L2].mean > 0) *_offset = table[table_size_L2].mean;
		else ;
	}
	if (_deviation) *_deviation = table[table_size_L2].dev;
	if (_sample_size) *_sample_size = table[table_size_L2].samples;
}

void PractRand::Tests::BirthdayAlt::get_results(std::vector<TestResult> &results) {
	if (!count) return;
	long buffer_size = 1 << buffer_size_L2;
	long double dev, _sample_size, uncertainty;
	_lookup_constants(buffer_size_L2, NULL, &dev, &_sample_size);

	double score = score_sum_log / std::sqrt(double(count)) / dev;

	results.push_back(TestResult(get_name(), score, score, TestResult::TYPE_RAW_NORMAL, 0.125));
}
void PractRand::Tests::BirthdayAlt::flush_buffer() {
	long buffer_size = 1 << buffer_size_L2;
	if (num_buffered != buffer_size) issue_error("BirthdayAlt::flush_buffer - buffer not full?");
	num_buffered = 0;
	if (autofail) return;
	BirthdayHelpers::_sorted_deltas_of_sorted_values(buffer, buffer_size_L2, sort_helper_counts);
	for (int i = 0; i < (1 << SORT_HELPER_BITS); i++) sort_helper_counts[i] = 0;

	long double expected_log_offset, expected_log_samples, deviation, uncertainty;
	_lookup_constants(buffer_size_L2, &expected_log_offset, &deviation, &expected_log_samples);

	long double sum_log = 0, sum_log2 = 0;
	long double expected_delta1 = std::pow(2.0, 128 - buffer_size_L2);
	//long double expected_log1 = std::log(expected_delta1);
	long double expected_delta2 = expected_delta1 / (buffer_size - 1);
	long double expected_log2 = std::log(expected_delta2);
	long double adjusted_expected_log2 = expected_log2 * (1 + expected_log_offset);
	long double adjusted_expected_delta2 = std::exp(adjusted_expected_log2);

	for (int i = 0; i < buffer_size - 2; i++) {
		i128 diff = buffer[i + 1] - buffer[i];
		long double delta = diff.low + 1.0;
		delta += diff.high * 18446744073709551616.0;
		//long double L = std::log(delta);
		//sum_log -= L - expected_log2;//instead of subtracting expected_log2, change to dividing by expected_delta2
		//long double L = std::log(delta / expected_delta2) - expected_log_offset * expected_log2;
		long double L = std::log(delta / adjusted_expected_delta2);
		sum_log -= L;
		sum_log2 += L * L;
	}
	sum_log /= expected_log2;
	sum_log /= std::sqrt(double(buffer_size - 2));
	//sum_log += expected_log_offset * std::sqrt(double(buffer_size - 2));

	score_sum_log += sum_log;
	score_sum_log2 += sum_log2;
	score_sum_log_sqr += sum_log * sum_log;
	count++;
	if (count == 1) {
		for (int i = 6; i <= 29; i++) {
			long double old;
			_lookup_constants(i, &old, NULL, NULL);
			Uint64 bufsize = 1ull << i;
			long double preadj = std::pow(2.0, 128.0 - i) / (bufsize - 1);
			//long double revised = ;
		}
	}
	if (count > 1 && !(count & (count-1))) {
		std::printf("\n");
		std::printf("sum_log obs ofs: %+.10Lf\n", (long double)score_sum_log / count / std::sqrt(double(buffer_size - 2)) + expected_log_offset);
		std::printf("sum_log exp ofs: %+.10Lf\n", expected_log_offset);
		std::printf("sum_log   delta: %+.12Lf\n", (long double)score_sum_log / count / std::sqrt((long double)(buffer_size - 2)));
		std::printf("revised obs ofs: %+.10Lf\n", score_sum_log / count / std::sqrt(double(buffer_size - 2)) + adjusted_expected_log2 - expected_log2);
		std::printf("revised exp ofs: %+.10Lf\n", expected_log2 * expected_log_offset);
		std::printf("sum_log obs dev: %.9Lf\n", (long double)std::sqrt(score_sum_log_sqr / count - (score_sum_log / count * score_sum_log / count)));
		std::printf("sum_log exp dev: %.9Lf\n", deviation);
		std::printf("count: %.0Lf\n\n", (long double)(count));
		//std::exit(0);
	}
}
void PractRand::Tests::BirthdayAlt::test_blocks(TestBlock *data, int numblocks) {
	blocks_tested += numblocks;
	if (autofail) return;
	if (!filter_bits) {
		while (numblocks) {
			i128 *dest = &buffer[num_buffered];
			Uint64 *cur = &data[0].as64[0];
			Uint64 *end = &data[1].as64[0];
			enum { LOW = 0, HIGH = 1 };//that's kind of endian-ist, but the tests generally don't bother dealing with such issues
			for (; cur != end; cur += 2, dest++) {
				dest->low = cur[LOW];
				dest->high = cur[HIGH];
				int ri = dest->high >> (64 - SORT_HELPER_BITS);
				sort_helper_counts[ri]++;
			}

			num_buffered += TestBlock::SIZE / sizeof(i128);
			if (num_buffered >> buffer_size_L2) {
				flush_buffer();
			}
			numblocks--;
			data++;
		}
	}
	else {
		long shift = 64 - SORT_HELPER_BITS - filter_bits;
		i128 *dest = &buffer[num_buffered];
		i128 *dest_end = &buffer[num_buffered];
		Uint64 *cur = &data[0].as64[0];
		Uint64 *end = &data[numblocks].as64[0];
		enum { LOW = 0, HIGH = 1 };//that's kind of endian-ist, but the tests generally don't bother dealing with such issues
		for (; cur != end; cur += 2) {
			dest->low = cur[LOW];
			dest->high = cur[HIGH];
			Uint64 ri = dest->high >> shift;
			if (ri >= ((1 << SORT_HELPER_BITS) - 1)) continue;
			sort_helper_counts[ri]++;
			dest++;
			if (dest == dest_end) {
				num_buffered = 1ull << buffer_size_L2;
				flush_buffer();
				dest = &buffer[0];
			}
		}
		num_buffered = dest - &buffer[0];
	}
}



PractRand::Tests::Pat5::Pat5()
//:
//	lifespan(1<<16),
{
}
void PractRand::Tests::Pat5::init(PractRand::RNGs::vRNG *known_good) {
	counts.reset_counts();
	for (int pi = 0; pi < (1 << PATTERN_INDEX_BITS); pi++) patterns[pi].total_count = -1;
	blocks_tested = 0;
}
std::string PractRand::Tests::Pat5::get_name() const {
	std::ostringstream tmp;
	tmp << "Pat5";
	return tmp.str();
}
void PractRand::Tests::Pat5::test_blocks(TestBlock *data, int numblocks) {
	enum { CENTER = (PATTERN_WIDTH - 1) / 2 };
	int max = numblocks * (TestBlock::SIZE / sizeof(Word)) - CENTER;
	int min = blocks_tested ? 0 : CENTER;
	for (long i = min; i < max; i++) {
		Word word = data->as32[i];
		if (!(word & ((1<<ZERO_FILTER_BITS)-1))) {
			int pi = word >> ((8 * sizeof(word)) - PATTERN_INDEX_BITS);
			if (patterns[pi].total_count == -1) {
				if (count_bits32(data->as32[i] ^ data->as32[i + 1]) > 4) {
					patterns[pi].total_count = 0;
					for (int j = 0; j < PATTERN_WIDTH; j++) patterns[pi].base_pattern[j] = data->as32[i + j - CENTER];
				}
			}
			else {
				patterns[pi].total_count++;
				int d1 = count_bits32(patterns[pi].base_pattern[CENTER] ^ word);
				unsigned int d2 = 0, d3 = 0, d4 = 0;
				enum { D1 = 1, D2 = D1 + NUM_SECONDARY_WORDS, D3 = D2 + NUM_TERTIARY_WORDS, D4 = D3 + NUM_QUATERNARY_WORDS };
				for (int j = D1; j < D2; j++) {
					d2 += count_bits32(patterns[pi].base_pattern[CENTER - j] ^ data->as32[i - j]);
					d2 += count_bits32(patterns[pi].base_pattern[CENTER + j] ^ data->as32[i + j]);
				}
				for (int j = D2; j < D3; j++) {
					d3 += count_bits32(patterns[pi].base_pattern[CENTER - j] ^ data->as32[i - j]);
					d3 += count_bits32(patterns[pi].base_pattern[CENTER + j] ^ data->as32[i + j]);
				}
				for (int j = D3; j < D4; j++) {
					d4 += count_bits32(patterns[pi].base_pattern[CENTER - j] ^ data->as32[i - j]);
					d4 += count_bits32(patterns[pi].base_pattern[CENTER + j] ^ data->as32[i + j]);
				}
				d1 >>= PRIMARY_WORD_DISTANCE_EXTRA_BITS;
				d2 >>= SECONDARY_WORD_DISTANCE_EXTRA_BITS;
				d3 >>= TERTIARY_WORD_DISTANCE_EXTRA_BITS;
				d4 >>= QUATERNARY_WORD_DISTANCE_EXTRA_BITS;
				enum { MAX_d1 = (1 << PRIMARY_WORD_DISTANCE_BITS) - 1 };
				enum { MAX_d2 = (1 << SECONDARY_WORD_DISTANCE_BITS) - 1 };
				enum { MAX_d3 = (1 << TERTIARY_WORD_DISTANCE_BITS) - 1 };
				enum { MAX_d4 = (1 << QUATERNARY_WORD_DISTANCE_BITS) - 1 };
				if (d1 > MAX_d1) d1 = MAX_d1;
				if (d2 > MAX_d2) d2 = MAX_d2;
				if (d3 > MAX_d3) d3 = MAX_d3;
				if (d4 > MAX_d4) d4 = MAX_d4;
				enum { D1SH = 0, D2SH = D1SH + PRIMARY_WORD_DISTANCE_BITS, D3SH = D2SH + SECONDARY_WORD_DISTANCE_BITS, D4SH = D3SH + TERTIARY_WORD_DISTANCE_BITS };
				unsigned int ci = (d1 << D1SH) +(d2 << D2SH) + (d3 << D3SH) + (d4 << D4SH);
				ci += pi << (TABLE_SIZE_L2 - PATTERN_INDEX_BITS);
				counts.increment(ci);
			}
		}
	}
	blocks_tested += numblocks;
}
static std::vector<double> get_Pat5_prob_sub_table(int base_bits, int shift, int final_bits) {
	std::vector<double> pdf, cdf, result;
	Tests::get_hamming_weight_chances(base_bits, pdf, cdf);
	result.resize(1 << final_bits, 0.0);
	int max = (1 << final_bits) - 1;
	for (int i = 0; i <= base_bits; i++) {
		double chance = (i <= base_bits / 2) ? pdf[i] : pdf[base_bits - i];
		int transform = i >> shift;
		if (transform > max) transform = max;
		result[transform] += chance;
	}
	return result;
}
void PractRand::Tests::Pat5::get_results(std::vector<TestResult> &results) {
	if (!blocks_tested) return;
	const Uint64 *_counts = counts.get_array();
	Uint64 total_opportunities = blocks_tested * TestBlock::SIZE / sizeof(Word) - PATTERN_WIDTH + 1;
	enum { TOTAL_SIZE = 1 << TABLE_SIZE_L2, TOTAL_PATTERNS = 1 << PATTERN_INDEX_BITS };
	enum { BASE_SIZE = TOTAL_SIZE / TOTAL_PATTERNS };
	std::vector<double> base_probs; base_probs.resize(BASE_SIZE);
	if (true) {
		std::vector<double> primary_probs, secondary_probs, tertiary_probs, quaternary_probs;
		std::vector<double> cdf;
		enum { PRIMARY_BITS = WORD_BITS - ZERO_FILTER_BITS - PATTERN_INDEX_BITS };
		primary_probs = get_Pat5_prob_sub_table(PRIMARY_BITS, PRIMARY_WORD_DISTANCE_EXTRA_BITS, PRIMARY_WORD_DISTANCE_BITS);
		secondary_probs = get_Pat5_prob_sub_table(WORD_BITS * 2 * NUM_SECONDARY_WORDS, SECONDARY_WORD_DISTANCE_EXTRA_BITS, SECONDARY_WORD_DISTANCE_BITS);
		tertiary_probs = get_Pat5_prob_sub_table(WORD_BITS * 2 * NUM_TERTIARY_WORDS, TERTIARY_WORD_DISTANCE_EXTRA_BITS, TERTIARY_WORD_DISTANCE_BITS);
		quaternary_probs = get_Pat5_prob_sub_table(WORD_BITS * 2 * NUM_QUATERNARY_WORDS, QUATERNARY_WORD_DISTANCE_EXTRA_BITS, QUATERNARY_WORD_DISTANCE_BITS);
		for (int i = 0; i < BASE_SIZE; i++) {
			double chance = 1.0;
			enum { D1SH = 0, D2SH = D1SH + PRIMARY_WORD_DISTANCE_BITS, D3SH = D2SH + SECONDARY_WORD_DISTANCE_BITS, D4SH = D3SH + TERTIARY_WORD_DISTANCE_BITS };
			chance *= primary_probs[(i >> D1SH) & ((1 << PRIMARY_WORD_DISTANCE_BITS) - 1)];
			chance *= secondary_probs[(i >> D2SH) & ((1 << SECONDARY_WORD_DISTANCE_BITS) - 1)];
			chance *= tertiary_probs[(i >> D3SH) & ((1 << TERTIARY_WORD_DISTANCE_BITS) - 1)];
			chance *= quaternary_probs[(i >> D4SH) & ((1 << QUATERNARY_WORD_DISTANCE_BITS) - 1)];
			base_probs[i] = chance;
		}
	}
	if (true) {
		enum { INCLUDE_NON_MATCHES = 0 };// 0 or 1
		std::vector<Uint64> counts2; counts2.resize(TOTAL_SIZE + INCLUDE_NON_MATCHES);
		std::vector<double> probs2; probs2.resize(TOTAL_SIZE + INCLUDE_NON_MATCHES);
		std::copy(&_counts[0], &_counts[TOTAL_SIZE], &counts2[0]);
		double any_match_prob = std::pow(0.5, INCLUDE_NON_MATCHES ? ZERO_FILTER_BITS : 0);
		double specific_match_prob = any_match_prob * std::pow(0.5, PATTERN_INDEX_BITS);
		if (INCLUDE_NON_MATCHES) probs2[TOTAL_SIZE] = 1 - any_match_prob;
		for (int i = 0; i < TOTAL_SIZE; i++) probs2[i] = base_probs[i & (BASE_SIZE - 1)] * specific_match_prob;
		Sint64 total_matches = 0;
		for (int i = 0; i < TOTAL_PATTERNS; i++) total_matches += patterns[i].total_count;
		if (total_matches < 100) return;
		if (INCLUDE_NON_MATCHES) counts2[TOTAL_SIZE] = total_opportunities - total_matches;
		if (total_opportunities > 300) {
			double rarity = Tests::rarity_test(TOTAL_SIZE + INCLUDE_NON_MATCHES, &probs2[0], &counts2[0]);
			std::ostringstream ss; ss << get_name() << "(*,r)"; results.push_back(TestResult(ss.str(), rarity, 0, TestResult::TYPE_RAW_NORMAL, 0.125));
		}
		if (total_opportunities > 3000) {
			int n = Tests::simplify_prob_table(TOTAL_SIZE + INCLUDE_NON_MATCHES, (INCLUDE_NON_MATCHES ? total_opportunities : total_matches) / 40.0, &probs2[0], &counts2[0], false, false);
			double raw = Tests::g_test(n, &probs2[0], &counts2[0]);
			double norm = Tests::math_chisquared_to_normal(raw, n - 1);
			std::ostringstream ss; ss << get_name() << "(*,g)"; results.push_back(TestResult(ss.str(), norm, 0, TestResult::TYPE_RAW_NORMAL, 0.125));
		}
	}
	for (int pi = 0; pi < TOTAL_PATTERNS; pi++) {
		if (patterns[pi].total_count < 30) continue;
		std::vector<double> local_probs = base_probs;
		std::vector<Uint64> local_counts; local_counts.resize(BASE_SIZE);
		std::copy(&_counts[pi * BASE_SIZE], &_counts[pi * BASE_SIZE + BASE_SIZE], &local_counts[0]);
		if (true) {
			double rarity = Tests::rarity_test(BASE_SIZE, &local_probs[0], &local_counts[0]);
			std::ostringstream ss; ss << get_name() << "(" << pi << ",r)"; results.push_back(TestResult(ss.str(), rarity, 0, TestResult::TYPE_RAW_NORMAL, 0.001 / TOTAL_PATTERNS));
		}
		if (patterns[pi].total_count > 300) {
			int n = Tests::simplify_prob_table(BASE_SIZE, patterns[pi].total_count / 40.0, &local_probs[0], &local_counts[0], false, false);
			double raw = Tests::g_test(n, &local_probs[0], &local_counts[0]);
			double norm = Tests::math_chisquared_to_normal(raw, n - 1);
			std::ostringstream ss; ss << get_name() << "(" << pi << ",g)"; results.push_back(TestResult(ss.str(), norm, 0, TestResult::TYPE_RAW_NORMAL, 0.001 / TOTAL_PATTERNS));
		}
	}

	//finishing
/*	int reduced_size = simplify_prob_table(size,
		blocks_tested * (TestBlock::SIZE >> unitsL) / 25.0,
		&probs[0], &tmp_counts[0], true, true);
	double r = g_test(reduced_size, &probs[0], &tmp_counts[0]);
	r = math_chisquared_to_normal(r, reduced_size - 1);
	double weight = std::pow(2.0, 1.0 - unitsL / 2.0);
	if (unitsL != 0) weight *= 0.75;
	if (size < 1024 * 128) weight *= 0.5;
	Uint64 min_len = calibration_manager.get_minimum_length(get_name());
	if (min_len && min_len <= blocks_tested) {
		TestCalibrationData *calib = calibration_manager.get_calibration_data(get_name(), blocks_tested);
		double suspicion = calib->sample_to_suspicion(r) * -1;//negation to make the normal failure type occur at 0 instead of 1
		results.push_back(TestResult(get_name(), r, suspicion, TestResult::TYPE_GOOD_S, weight));
	}
	else if (blocks_tested > unitsL * 1024 * 1024 * 16) {
		results.push_back(TestResult(get_name(), r, 0, TestResult::TYPE_RAW_NORMAL, weight / 5));
	}
	else {
		results.push_back(TestResult(get_name(), r, 0, TestResult::TYPE_RAW, .01));
	}*/
}





void PractRand::Tests::CoupGap::init( RNGs::vRNG *known_good ) {
	autofail = 0;
	blocks_tested = 0;
	symbols_ready = 0;
	for (int i = 0; i < 256; i++) {
		sym_has_appeared[i] = false;
		next_younger_sym[i] = (i+1) & 255;
		youngest_sym = 255;
		oldest_sym = 0;
//		last_sym_pos[i] = 0;
	}
	count_syms_by_oldest_sym.reset_counts();
//	count_gaps_by_oldest_sym.reset_counts();
}
std::string PractRand::Tests::CoupGap::get_name( ) const {
	return std::string("CoupGap");
}
void PractRand::Tests::CoupGap::get_results(std::vector<TestResult> &results) {
	if (autofail) {
		results.push_back(TestResult(this->get_name() + ":!", autofail, autofail, TestResult::TYPE_PASSFAIL, 0.0000001));
		return;
	}

	std::vector<double> probs;

	if (blocks_tested >= 256) {
		probs.resize(65536);
		for (int i = 0; i < 65536; i++) probs[i] = 1 / 65536.0;
		const Uint64 *counts_ = count_syms_by_oldest_sym.get_array();
		const double *probs_ = &probs[0];
		double raw = g_test(65536, probs_, counts_);
		raw = (raw - 3 * 65536) / (256 * 32);
		TestCalibrationData *calib = calibration_manager.get_calibration_data("CoupGap:SxO", blocks_tested);
		double suspicion = calib->sample_to_suspicion(raw) * -1;//negation to make the normal failure type occur at 0 instead of 1
		results.push_back(TestResult(get_name() + ":SxO", raw, suspicion, TestResult::TYPE_GOOD_S, 0.25));
	}
}
void PractRand::Tests::CoupGap::test_blocks(TestBlock *data, int numblocks) {
	if (autofail) return;
	int i;
	Uint32 ofs = Uint32(blocks_tested) * TestBlock::SIZE;
	int max = TestBlock::SIZE * numblocks;
	for (i = 0; i < max; i++, ofs++) {
		unsigned long sym = data[0].as8[i];
//		Uint32 last_pos = last_sym_pos[sym];

		if (symbols_ready == 256) {
//			Uint32 oldest_age = ofs - last_sym_pos[oldest_sym] - 256;
//			if (oldest_age > MAX_OLDEST_AGE-1) oldest_age = MAX_OLDEST_AGE-1;
//			Uint32 current_age = ofs - last_pos - 1;
//			if (current_age > MAX_CURRENT_AGE-1) current_age = MAX_CURRENT_AGE-1;
			count_syms_by_oldest_sym.increment(sym * 256 + oldest_sym);
//			count_gaps_by_oldest_sym.increment(oldest_sym + (current_age << 8));
		}
		else if (!sym_has_appeared[sym]) {
			sym_has_appeared[sym] = true;
			symbols_ready ++;
		}

		//update linked list
//		last_sym_pos[sym] = ofs;
		if (oldest_sym == sym) {
			oldest_sym = next_younger_sym[sym];
		}
		next_younger_sym[youngest_sym] = Uint8(sym);
		youngest_sym = sym;
	}
	Uint64 oblocks = blocks_tested;
	blocks_tested += numblocks;
//	if ((oblocks>>17) != (blocks_tested>>17)) {//once every 128 megabytes or so... prevent overflow
//		for (i = 0; i < 256; i++) {
//			int n = last_sym_pos[i];
//			if (n == -1) continue;
//			if ((ofs - n) > 12345678) {
//				autofail += 1;
//			}
//		}
//	}
}





PractRand::Tests::BRank::BRank( Uint32 rate_hl2_ ) : rate_hl2(rate_hl2_), in_progress(NULL) {
	static Uint32 sizes[] = { 
		128, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6<<10, 8<<10, 12<<10, 16<<10, 24<<10, 32<<10, 48<<10, 64<<10, 0
	};
	for (int i = 0; true; i++) {
		int size = sizes[i];
		if (size == 0) break;
		if (sizeof(void*) < 8 && size >= 32768) //32 bit platforms have a hard time with large sizes, at least when extra-folding is enabled
			break;
		ps.resize(i+1);
		PerSize &s = ps[i];
		s.size = size;
		Uint64 t = s.size / 64;
		if (!t) t = 1;
		s.time_per = t*t*t * 256 + t*t * 256;// *very* rough approximation
		s.reset();
	}
	rate = (Uint64) std::pow(2.0, 0.5 * rate_hl2);
	in_progress = NULL;
}
void PractRand::Tests::BRank::PerSize::reset() {
	total = 0;
	for (int i = 0; i < NUM_COUNTS; i++) counts[i] = 0;
	outliers.resize(0);
	outliers_overflow = 0;
}
void PractRand::Tests::BRank::deinit( ) {
	if (in_progress) delete in_progress;
	in_progress = NULL;
}
void PractRand::Tests::BRank::init( RNGs::vRNG *known_good ) {
	for (int i = 0; i < ps.size(); i++) ps[i].reset();
	saved_time = 0;
	if (in_progress) delete in_progress;
	in_progress = NULL;
	pick_next_size();
}
std::string PractRand::Tests::BRank::get_name( ) const {
	std::ostringstream name;
	name << "BRank(" << rate_hl2 << ")";
	return name.str();
}
void PractRand::Tests::BRank::get_results(std::vector<TestResult> &results) {
	long double _base_probs[PerSize::NUM_COUNTS + 1];
	long double base_score[PerSize::NUM_COUNTS + 1];
	if (true) {
		_base_probs[0] = 0.2887880950866024212789;
		for (int i = 1; i < PerSize::NUM_COUNTS + 1; i++) _base_probs[i] = _base_probs[i - 1] * 2.0 / std::pow((1 << i) - 1, 2);
		long double sum = 0;
		for (int i = 0; i < PerSize::NUM_COUNTS + 1; i++) sum += _base_probs[i];
		for (int i = 0; i < PerSize::NUM_COUNTS + 1; i++) _base_probs[i] /= sum;
		for (int i = 0; i < PerSize::NUM_COUNTS + 1; i++) base_score[i] = -std::log(_base_probs[i]) / std::log(2.0);
		long double expected = 0;
		for (int i = 0; i < PerSize::NUM_COUNTS + 1; i++) expected += base_score[i] * _base_probs[i];
		for (int i = 0; i < PerSize::NUM_COUNTS + 1; i++) base_score[i] -= expected;
		long double deviation = 0;
		for (int i = 0; i < PerSize::NUM_COUNTS + 1; i++) deviation += base_score[i] * base_score[i] * _base_probs[i];
		deviation = std::sqrt(deviation);
		for (int i = 0; i < PerSize::NUM_COUNTS + 1; i++) base_score[i] /= deviation;
	}

	for (int si = 0; si < ps.size(); si++) {
		PerSize &s = ps[si];
		if (!s.total) continue;
		int worst = 1;
		for (int i = 0; i < PerSize::NUM_COUNTS; i++) {
			if (s.counts[i] && i > worst) worst = i;
		}
		std::ostringstream name;
		name << this->get_name() << ":";
		if (s.size & (TestBlock::SIZE - 1)) name << s.size; else name << (s.size >> TestBlock::SIZE_L2) << "K";
		int L2 = int(std::log((double)s.total)/std::log(2.0));
		/*if (L2 < 10) name << "(" << L2 << ")";
		else {
			char blah[2] = {char('A' + L2 - 10), 0};
			name << "(" << &blah[0] << ")";
		}*/
		name << "(" << s.total << ")";
		if (s.outliers_overflow) {
			results.push_back(TestResult(name.str() + ":!", s.outliers_overflow + PerSize::MAX_OUTLIERS, 1, TestResult::TYPE_PASSFAIL, 0.125 / ps.size()));
			continue;
		}
		double score = 0;
		if (s.outliers.size()) for (int i = 0; i < s.outliers.size(); i++) {
			if (s.outliers[i] > worst) worst = s.outliers[i];
			score += base_score[PerSize::NUM_COUNTS] + (s.outliers[i] - PerSize::NUM_COUNTS) * (base_score[PerSize::NUM_COUNTS] - base_score[PerSize::NUM_COUNTS - 1]);
		}
		for (int i = 0; i < PerSize::NUM_COUNTS; i++) score += base_score[i] * s.counts[i];
		score /= std::sqrt(double(s.total));
		//if (s.total >= 4096) {
		//	results.push_back(TestResult(name.str(), score, Tests::math_normaldist_pdf(score), TestResult::TYPE_GOOD_P, 0.25 / ps.size()));
		//}
		//else 
		if (s.total >= 3) {
			TestCalibrationData *calib = calibration_manager.get_calibration_data("BRank", s.total);
			if (s.total >= 3 && (score > 0 || s.total >= 32)) {
				results.push_back(TestResult(name.str(), score, -calib->sample_to_suspicion(score), TestResult::TYPE_BAD_S, 0.125 / ps.size()));
			}
			else {
				results.push_back(TestResult(name.str(), score, -calib->sample_to_suspicion_no_extrapolation(score), TestResult::TYPE_BAD_S, 0.125 / ps.size()));
			}
		}
		else {
			results.push_back(TestResult(name.str(), score, -score, TestResult::TYPE_BAD_S, 0.25 / ps.size()));//...aren't the units wrong on this?

			/*double l2p;
			if (worst < 11) l2p = std::log(_base_probs[worst]) / std::log(2.0);
			else l2p = -worst * worst + 1.7467146707898304805678543833716;
			l2p += std::log(double(s.total)) / std::log(2.0) * 0.47;
			double s = -(l2p + 1);
			results.push_back(TestResult(name.str() + ":W", s, s, TestResult::TYPE_BAD_S, 1.0 / ps.size()));*/
		}
	}
}
void PractRand::Tests::BRank::pick_next_size() {
	double best_score = 0;
	int best = -1;
	for (int i = 0; i < ps.size(); i++) {
		double score = ps[i].size; score *= (score + 128);
		score /= ps[i].time_per;
		if (ps[i].total) {
			if ((ps[i].size & (ps[i].size - 1))) {
				score /= ps[i].total;
				score /= ps[i].total;
				score /= 16.0;
				//score = 0;//not much point in numerous instances at every half-step
			}
			else {
				score /= ps[i].total;
				score /= ps[i].total;
				score /= 2.0;
			}
		}
		if (score > best_score) {
			best = i;
			best_score = score;
		}
	}
	if (best == -1) {
		std::printf("BRank::pick_next_size : best is -1\n");
		std::exit(0);
	}
	size_index = best;
	in_progress = new BitMatrix();
	if (!in_progress) {
		std::printf("BRank::pick_next_size : new BitMatrix failed\n");
		std::exit(0);
	}
	in_progress->init(ps[size_index].size, ps[size_index].size);
	blocks_in_progress = 0;
}
void PractRand::Tests::BRank::finish_matrix() {
	PerSize &s = ps[size_index];
	int result = (s.size > 1000) ? in_progress->large_normalize_and_rank() : in_progress->normalize_and_rank();
	result = s.size - result;
	if (result < PerSize::NUM_COUNTS) s.counts[result]++;
	else if (s.outliers.size() < PerSize::MAX_OUTLIERS) s.outliers.push_back(result);
	else s.outliers_overflow++;
	s.total++;
	blocks_in_progress = 0;
	if (s.total & (s.total-1)) {//not a power of 2
		return;
	}
	delete in_progress;
	in_progress = NULL;
	pick_next_size();
}
void PractRand::Tests::BRank::test_blocks(TestBlock *data, int numblocks) {
	while (numblocks) {
		PerSize &s = ps[size_index];
		Uint64 time_needed = s.time_per;

		Uint32 bytes = s.size * (s.size >> 3);//may exceed 4 gigabits, but not that many gigaBYTEs
		Uint32 blocks_needed = (bytes + TestBlock::SIZE - 1) >> TestBlock::SIZE_L2;//rounding up, so no more than one matrix per block

		if (saved_time < time_needed) {//throttle
			time_needed -= saved_time;
			Uint64 blocks_to_skip = (time_needed + rate - 1) / rate;
			if (blocks_to_skip > numblocks) blocks_to_skip = numblocks;
			data += blocks_to_skip;
			numblocks -= blocks_to_skip;
			saved_time += rate * blocks_to_skip;
		}
		else {//throttling done, begin actually using blocks
			blocks_needed -= blocks_in_progress;
			Uint32 offset = (blocks_in_progress * TestBlock::SIZE) >> (BitMatrix::WORD_BITS_L2 - 3);
			if (numblocks >= blocks_needed) {//whole matrix
				in_progress->raw_import(offset, &data[0].as32[0], (bytes - blocks_in_progress * TestBlock::SIZE) >> (BitMatrix::WORD_BITS_L2 - 3));
				finish_matrix();//this will reset blocks_in_progress
				data += blocks_needed;
				saved_time -= s.time_per;
				saved_time += rate * blocks_needed;
				numblocks -= blocks_needed;
			}
			else {//partial matrix
				in_progress->raw_import(offset, &data[0].as32[0], numblocks << (TestBlock::SIZE_L2 - (BitMatrix::WORD_BITS_L2 - 3)));
				blocks_in_progress += numblocks;
				//data += numblocks; //we're now done here, so need to update the local variable
				saved_time += rate * numblocks;
				numblocks = 0;
			}
		}
	}
}

PractRand::Tests::NearSeq::NearSeq() {
	//if (false);
	//else if (BITS_PER_BLOCK == 8) verify_NearSeq_byte_code8(NearSeq_byte_code8);
	//else if (BITS_PER_BLOCK == 4) verify_NearSeq_byte_code4x2(NearSeq_byte_code4x2);
	//else if (BITS_PER_BLOCK == 5) verify_NearSeq_byte_code5x2(NearSeq_byte_code5x2);
	//else issue_error("NearSeq: what block size?");
	lookup_table = NULL;
}
void PractRand::Tests::NearSeq::init(PractRand::RNGs::vRNG *known_good) {
	if (SEQUENCE_BITS < CORE_SEQUENCE_BITS) issue_error("NearSeq - bad settings");
	static const Word lookup[2] = { (1 << BITS_PER_BLOCK) - 1, 0x0 };//backwards, as we're inverting values here for maximum hamming distance
	for (int bi = 0; bi < NUM_BUCKETS; bi++) {
		for (int x = 0; x < SEQUENCE_WORDS; x++) buckets[bi].sequence[x] = 0;
		for (int x = 0; x < BLOCKS_PER_CORE; x++) {
			int dest_bit_pos = x * BITS_PER_BLOCK;
			int dest_word_start = dest_bit_pos >> WORD_BITS_L2;
			int dest_word_end = (dest_bit_pos + BITS_PER_BLOCK - 1) >> WORD_BITS_L2;
			int dest_word_offset = dest_bit_pos & (WORD_BITS - 1);
			//here we're trying to initialize all buckets to impossible values, so that we can recognize them as not-yet-populated later
			buckets[bi].sequence[SEQUENCE_WORD_OFFSET + dest_word_start] |= lookup[(bi >> x) & 1] << dest_word_offset;
			if (dest_word_end != dest_word_start) {//maximum of 1 extra word, since BITS_PER_BLOCK is guaranteed to be less than or equal to WORD_BITS
				buckets[bi].sequence[SEQUENCE_WORD_OFFSET + dest_word_end] |= lookup[(bi >> x) & 1] >> (WORD_BITS - dest_word_offset);
			}
		}
	}

	for (int x = 0; x < MAX_CORE_DISTANCES; x++) core_distances[x] = 0;
	for (int x = 0; x < MAX_CORE_DISTANCES; x++) sum_extra_distances[x] = 0;

	int table_size = 1 << BITS_PER_BLOCK;
	lookup_table = new Uint8[table_size];
	lookup_table2 = new Uint8[table_size];
	for (int i = 0; i < table_size; i++) {
		int bits = count_bits16(i);
		if (bits > BITS_PER_BLOCK / 2) {
			bits = BITS_PER_BLOCK - bits;
			lookup_table[i] = 1;
		}
		else lookup_table[i] = 0;
		if (bits > MAX_ERRORS_PER_BLOCK) lookup_table[i] |= 128;

		if (bits > 7) bits = 7;
		lookup_table2[i] = 1 << bits;
	}

	TestBaseclass::init(known_good);
}
void PractRand::Tests::NearSeq::deinit() {
	delete[] lookup_table;
	delete[] lookup_table2;
	TestBaseclass::deinit();
}
std::string PractRand::Tests::NearSeq::get_name() const {
	return "NearS";
	//std::ostringstream name;
	//name << "BRank(" << rate_hl2 << ")";
	//return name.str();
}
void PractRand::Tests::NearSeq::get_results(std::vector<TestResult> &results) {
	//if (blocks_tested < 1 << 24) return;

	Uint64 total_count = 0;
	for (int i = 0; i < MAX_CORE_DISTANCES; i++) total_count += core_distances[i];
	if (!total_count) return;
	Uint64 target_threshold = (total_count * 9) / 10;
	Uint64 total_so_far = 0;
	int run_high = MAX_CORE_DISTANCES - 1;
	while (true) {
		Uint64 run_sum = sum_extra_distances[run_high];
		Uint64 run_count = core_distances[run_high];
		if (!run_count) {
			run_high--;
			continue;
		}
		int run_low = run_high;
		for (int i = run_high - 1; i >= 0 && run_count < target_threshold; i--) {
			if (core_distances[i]) {
				run_low = i;
				run_count += core_distances[i];
				run_sum += sum_extra_distances[i];
			}
		}
		Uint64 total_bits = run_count * (SEQUENCE_BITS - CORE_SEQUENCE_BITS);
		double variance = 0.5 * 0.5 * total_bits;
		double value = ((Sint64(run_sum << 1) - Sint64(total_bits)) * 0.5) / std::sqrt(variance);
		std::ostringstream os;
		os << get_name() << ":[" << run_low << "-" << run_high << "](" << run_count << ")";
		results.push_back(TestResult(os.str(), value, math_normaldist_to_suspicion(-value), total_bits > 4000 ? TestResult::TYPE_GOOD_S : TestResult::TYPE_BAD_S, 0.1));

		total_so_far += run_count;
		if (total_so_far == total_count) return;
		target_threshold = ((total_count - total_so_far) * 9) / 10;
		run_high = run_low - 1;
	}

	/*double leftover_sum = 0;
	Uint64 leftover_count = 0;
	int lowest = 0;
	for (int i = 0; i < MAX_CORE_DISTANCES; i++) {
		enum {EXTRA_BITS = SEQUENCE_BITS - CORE_SEQUENCE_BITS };
		double sum = leftover_sum + sum_extra_distances[i];//binomial distribution
		Uint64 count = leftover_count + core_distances[i];
		double total_bits = count * EXTRA_BITS;
		double variance = 0.5 * 0.5 * total_bits;
		if (variance < 1) variance = 1;
		double mean = total_bits * 0.5;
		double value = (sum - mean) / std::sqrt(variance);
		if (total_bits > 10000) {
			std::ostringstream os;
			os << get_name() << ":[" << lowest << "-" << i << "](" << count << ")";
			results.push_back(TestResult(os.str(), value, math_normaldist_to_suspicion(-value), TestResult::TYPE_GOOD_S, 0.1));
			leftover_sum = 0;
			leftover_count = 0;
			lowest = i + 1;
		}
		else if (total_bits > 0) {
			leftover_sum = sum;
			leftover_count = count;
		}
		else {
			lowest = i + 1;
		}
	}*/
	return;
}
int PractRand::Tests::NearSeq::is_core_good(const Word *core) const {
	int index = 0;
	int worst = 0;
	Word w = core[0];
	int usable_bits_left = WORD_BITS;
	while (index < BLOCKS_PER_CORE) {
		if (usable_bits_left < BITS_PER_BLOCK) {
			int ibit = index * BITS_PER_BLOCK + usable_bits_left;
			int wi = ibit >> WORD_BITS_L2;
			Word w2 = core[wi];
			int boff = ibit & (WORD_BITS - 1);
			if (boff) {
				w2 >>= boff;
				w2 |= core[wi + 1] << (WORD_BITS - boff);
			}
			w |= w2 << usable_bits_left;
			usable_bits_left = WORD_BITS;
		}
		worst |= lookup_table2[w & ((1 << BITS_PER_BLOCK) - 1)];
		w >>= BITS_PER_BLOCK;
		usable_bits_left -= BITS_PER_BLOCK;
		index++;
	}
	return worst < (1 << (GOOD_ERRORS_PER_BLOCK + 1));
}
int PractRand::Tests::NearSeq::core_to_index(const Word *core) const {
	int index = 0;
	Uint8 flags = 0;
	Word w = core[0];
	enum {LOOP1_MAX = WORD_BITS > CORE_SEQUENCE_BITS ? BLOCKS_PER_CORE : WORD_BITS / BITS_PER_BLOCK };
	int obit = 0;
	for (; obit < LOOP1_MAX; obit++) {
		flags |= lookup_table[w & ((1 << BITS_PER_BLOCK) - 1)];
		index |= lookup_table[w & ((1 << BITS_PER_BLOCK) - 1)] << obit;
		w >>= BITS_PER_BLOCK;
	}
	if (flags & 128) return -1;
	if (CORE_SEQUENCE_BITS <= WORD_BITS) return index;
	if (WORD_BITS % BITS_PER_BLOCK) {//they don't evenly divide
		int usable_bits_left = BITS_PER_BLOCK % WORD_BITS;
		while (obit < BLOCKS_PER_CORE) {
			if (usable_bits_left < BITS_PER_BLOCK) {
				if (flags & 128) return -1;
				int ibit = obit * BITS_PER_BLOCK + usable_bits_left;
				int wi = ibit >> WORD_BITS_L2;
				Word w2 = core[wi];
				int boff = ibit & (WORD_BITS - 1);
				if (boff) {
					w2 >>= boff;
					w2 |= core[wi + 1] << (WORD_BITS - boff);
				}
				w |= w2 << usable_bits_left;
				usable_bits_left = WORD_BITS;
			}
			flags |= lookup_table[w & ((1 << BITS_PER_BLOCK) - 1)];
			index |= lookup_table[w & ((1 << BITS_PER_BLOCK) - 1)] << obit++;
			w >>= BITS_PER_BLOCK;
			usable_bits_left -= BITS_PER_BLOCK;
		}
		if (flags & 128) return -1;
		return index;
	}
	else { // they do evenly divide
		enum {BLOCKS_PER_WORD = WORD_BITS / BITS_PER_BLOCK};
		enum {MAX_FULL_WORDS = BLOCKS_PER_CORE / BLOCKS_PER_WORD};
		for (int word = 1; word < MAX_FULL_WORDS; word++) {
			w = core[word];
			for (int i = 0; i < BLOCKS_PER_WORD; i++) {
				flags |= lookup_table[w & ((1 << BITS_PER_BLOCK) - 1)];
				index |= lookup_table[w & ((1 << BITS_PER_BLOCK) - 1)] << obit++;
				w >>= BITS_PER_BLOCK;
			}
			if (flags & 128) return -1;
		}
		if (!(BLOCKS_PER_CORE % BLOCKS_PER_WORD)) return index;
		w = core[(CORE_SEQUENCE_BITS - 1) / WORD_BITS];
		for (int i = 0; i < (BLOCKS_PER_CORE % BLOCKS_PER_WORD); i++) {
			flags |= lookup_table[w & ((1 << BITS_PER_BLOCK) - 1)];
			index |= lookup_table[w & ((1 << BITS_PER_BLOCK) - 1)] << obit++;
			w >>= BITS_PER_BLOCK;
		}
		if (flags & 128) return -1;
		return index;
	}
}
int  PractRand::Tests::NearSeq::get_core_distance(const Word *core, int bucket_index) const {
	typedef int(*CBFUNC)(Word);
	CBFUNC _count_bits = (WORD_BITS == 64) ? (CBFUNC)count_bits64 : ((WORD_BITS == 32) ? (CBFUNC)count_bits32 : ((WORD_BITS == 16) ? (CBFUNC)count_bits16 : NULL));// ((WORD_BITS == 8) ? counts_bits8 : NULL)));
	int bits_left = CORE_SEQUENCE_BITS;
	int core_distance = 0;
	int pos = 0;
	while (bits_left >= WORD_BITS) {
		core_distance += _count_bits(core[pos] ^ buckets[bucket_index].sequence[pos + SEQUENCE_WORD_OFFSET]);
		bits_left -= WORD_BITS;
		pos++;
	}
	if (CORE_SEQUENCE_BITS % WORD_BITS) {
		Word delta = core[pos] ^ buckets[bucket_index].sequence[pos + SEQUENCE_WORD_OFFSET];
		delta &= (1ull << (CORE_SEQUENCE_BITS % WORD_BITS)) - 1;
		core_distance += _count_bits(delta);
	}
	return core_distance;
}
int  PractRand::Tests::NearSeq::get_extra_distance(const Word *core, int bucket_index) const {
	typedef int(*CBFUNC)(Word);
	CBFUNC _count_bits = (WORD_BITS == 64) ? (CBFUNC)count_bits64 : ((WORD_BITS == 32) ? (CBFUNC)count_bits32 : ((WORD_BITS == 16) ? (CBFUNC)count_bits16 : NULL));// ((WORD_BITS == 8) ? counts_bits8 : NULL)));
	int bits_left = CORE_SEQUENCE_BITS;
	int extra_distance = 0;
	int pos = 0;
	//early words
	for (int i = 0; i < SEQUENCE_WORD_OFFSET; i++) extra_distance += _count_bits(core[i - SEQUENCE_WORD_OFFSET] ^ buckets[bucket_index].sequence[i]);
	if (CORE_SEQUENCE_BITS % WORD_BITS) {
		enum { INDEX = CORE_SEQUENCE_BITS / WORD_BITS };
		extra_distance += _count_bits((core[INDEX] ^ buckets[bucket_index].sequence[INDEX + SEQUENCE_WORD_OFFSET]) >> (CORE_SEQUENCE_BITS % WORD_BITS));
	}
	for (int i = (CORE_SEQUENCE_BITS + WORD_BITS - 1) / WORD_BITS; i < SEQUENCE_BITS / WORD_BITS - SEQUENCE_WORD_OFFSET; i++) 
		extra_distance += _count_bits(core[i] ^ buckets[bucket_index].sequence[i +  SEQUENCE_WORD_OFFSET]);
	return extra_distance;
}
void PractRand::Tests::NearSeq::test_blocks(TestBlock *data, int numblocks) {
	int start = blocks_tested ? -SEQUENCE_WORD_OFFSET : SEQUENCE_WORD_OFFSET;
	int end = (numblocks * (TestBlock::SIZE * 8 / WORD_BITS)) - (SEQUENCE_BITS / WORD_BITS - SEQUENCE_WORD_OFFSET);

	static const Word lookup_block_value[2] = { (1 << BITS_PER_BLOCK) - 1, 0x0 };//backwards

	for (int pos = start; pos < end; pos++) {
		/* chances at various settings
		setting:			64/8		64/8		64/4		32/4		32/8		32/8		16/8		16/8		16/4		desired
		codable/ideal		3/2			2/1			1/0			1/0			2/1			1/0			2/1			1/0			1/0			--
		bucketing bits		8			8			16			8			4			4			2			2			4			6 - 16
		is_word_codable		12.9		20.5 K		1845		43			143			41 K		12			202			6.5			1, or 20 - 50 K
		is_near_ideal		20.5 K		1.67 B		281 T		16.7 M		40.9 K		268 M		202			16 K		4.0 K		10 K - 1 B
		looks nice?						.						*			.			.						

		not perfectly aligned, no tails:

		setting:            60/6		30/6		60/5		63/3		30/3		30/5		63/7		63/9		63/9
		codable/ideal		2/1			2/1			2/1			1/0			1/0			2/1			2/1			3/2			3/1
		bucketing bits		10			5			12			21			10			6			9			7			7
		is_word_codable     42.4		6.5			1			1			1			1			1.2 K		115			115
		is_near_ideal       4.0 M		2.0 K		129 K		4.4 T		2 M			719			268 M		165 K		7.2 B
		looks nice?			*			.			*			.									**			*

		maybe some larger area, or at least not as round numbers? no tails.

		setting:            120/10	120/10	120/12	120/12	96/12	99/9	156/12	156/12	112/8	40/4
		codable/ideal		3/2		4/3		4/3		4/2		4/2		3/2		5/4		4/3		3/2		1/0
		bucketing bits		12		12		10		10		8		11		13		13		14		10
		is_word_codable     367 K	16.8	13 K	13 K	~2 K	1.7 K	27.8	224 K	87.5	110
		is_near_ideal       341 B	367 K	227 M	137 T	204 B	159 M	224 K	73 B	35 M	1 B
		looks nice?					.		*						*						*		*
		*/
		Word *core;
		if (false); 
		else if (WORD_BITS == 8) core = (Word*)&data[0].as8[pos];
		else if (WORD_BITS == 16) core = (Word*)&data[0].as16[pos];
		else if (WORD_BITS == 32) core = (Word*)&data[0].as32[pos];
		else if (WORD_BITS == 64) core = (Word*)&data[0].as64[pos];
		else issue_error("NearS - what word size???");
		int bucket_index = core_to_index(core);
		if (bucket_index < 0) continue;
		Bucket &bucket = buckets[bucket_index];
		if ((bucket.sequence[SEQUENCE_WORD_OFFSET] & ((1 << BITS_PER_BLOCK) - 1)) == lookup_block_value[bucket_index & 1]) {
			if (!is_core_good(core)) continue;
			for (int x = 0; x < SEQUENCE_WORDS; x++) bucket.sequence[x] = core[x - SEQUENCE_WORD_OFFSET];
		}
		else {//a populated bucket
			int core_distance = get_core_distance(core, bucket_index);
			int extra_distance = get_extra_distance(core, bucket_index);
			if (core_distance >= MAX_CORE_DISTANCES) core_distance = MAX_CORE_DISTANCES - 1;
			core_distances[core_distance]++;
			sum_extra_distances[core_distance] += extra_distance;
		}
	}
	blocks_tested += numblocks;
}

PractRand::Tests::NearSeq2::NearSeq2() {
	//if (false);
	//else if (BITS_PER_BLOCK == 8) verify_NearSeq_byte_code8(NearSeq_byte_code8);
	//else if (BITS_PER_BLOCK == 4) verify_NearSeq_byte_code4x2(NearSeq_byte_code4x2);
	//else if (BITS_PER_BLOCK == 5) verify_NearSeq_byte_code5x2(NearSeq_byte_code5x2);
	//else issue_error("NearSeq: what block size?");
	lookup_table1 = NULL;
	lookup_table2 = NULL;

	if (EXTRA_FULL_WORDS & 1) issue_error("NearSeq2 - odd number of extra words");
	if (EXTRA_PARTIAL_WORD_BITS < 0 || EXTRA_PARTIAL_WORD_BITS >= WORD_BITS) issue_error("NearSeq2 - EXTRA_PARTIAL_WORD_BITS value outside of range");
	if (BITS_PER_BLOCK > 64) issue_error("NearSeq2 - blocks too large");
	if (MAX_HDIST_PER_BLOCK * 2 > BITS_PER_BLOCK) issue_error("NearSeq2 - noise tolerance exceeds maximum possible");
}
void PractRand::Tests::NearSeq2::init(PractRand::RNGs::vRNG *known_good) {
	_total_cores = 0;
	_total_invalid_cores = 0;
	if (!lookup_table1) {
		if (BITS_PER_BLOCK <= MAX_LOOKUP_L2) {//index directly with block value
			lookup_table1 = new Sint8[1 << BITS_PER_BLOCK];
			lookup_table2 = new Uint8[1 << BITS_PER_BLOCK];
			for (int i = 0; i < (1 << BITS_PER_BLOCK); i++) {
				int h = count_bits32(i);
				int v1, v2;
				if (h >= BITS_PER_BLOCK - MAX_HDIST_PER_BLOCK) {
					v1 = 1;
					v2 = BITS_PER_BLOCK - h;
				}
				else if (h > MAX_HDIST_PER_BLOCK) {
					v1 = 1 << 7;
					v2 = 255;
				}
				else {
					v1 = 0;
					v2 = h;
				}
				lookup_table1[i] = v1;
				lookup_table2[i] = v2;
			}
		}
		else {//block value too large, index with block hamming weight instead
			lookup_table1 = new Sint8[BITS_PER_BLOCK + 1];
			lookup_table2 = new Uint8[BITS_PER_BLOCK + 1];
			for (int h = 0; h <= BITS_PER_BLOCK; h++) {
				int v1, v2;
				if (h >= BITS_PER_BLOCK - MAX_HDIST_PER_BLOCK) {
					v1 = 1;
					v2 = BITS_PER_BLOCK - h;
				}
				else if (h > MAX_HDIST_PER_BLOCK) {
					v1 = 1 << 7;
					v2 = 255;
				}
				else {
					v1 = 0;
					v2 = h;
				}
				lookup_table1[h] = v1;
				lookup_table2[h] = v2;
			}
		}
	}
	for (int i = 0; i < NUM_BUCKETS; i++) buckets[i].reset();
	TestBaseclass::init(known_good);
}
void PractRand::Tests::NearSeq2::Bucket::reset() {
	for (int i = 0; i <= MAX_TOTAL_HDIST; i++) core_hdist[i] = 0;
	for (int b = 0; b < HDIST_BINS; b++) for (int i = 0; i < EXTRA_BITS; i++) extra_counts[b][i] = 0;
}
void PractRand::Tests::NearSeq2::deinit() {
	delete[] lookup_table1;
	delete[] lookup_table2;
	lookup_table1 = NULL;
	lookup_table2 = NULL;
	TestBaseclass::deinit();
}
std::string PractRand::Tests::NearSeq2::get_name() const {
	return "NearS2";
}
bool PractRand::Tests::NearSeq2::is_core_bad(const Word *core) const {
	Sint8 is_bad = 0;
	if (CORE_WORDS == 1) {
		Word w = core[0];
		for (int i = 0; i < BLOCKS_PER_CORE; i++) {
			is_bad |= lookup1(w);
			w >>= BITS_PER_BLOCK;
			if (CHECK_VALIDITY_EARLY && is_bad < 0) return true;
		}
		if (is_bad < 0) return true;
		else return false;
	}
	else if (!(WORD_BITS % BITS_PER_BLOCK)) {//blocks align to word boundaries
		int index;
		Word w = core[0];
		for (int i = 0; i < WORD_BITS / BITS_PER_BLOCK; i++) {
			if (lookup1(w) < 0) return true;
			w >>= BITS_PER_BLOCK;
		}
		for (index = 1; index < CORE_WORDS - 1; index++) {
			w = core[index];
			for (int i = 0; i < WORD_BITS / BITS_PER_BLOCK; i++) {
				is_bad |= lookup1(w);
				w >>= BITS_PER_BLOCK;
			}
			if (is_bad < 0) return true;
		}
		w = core[index];
		for (int i = 0; i < BLOCKS_PER_CORE - (CORE_WORDS - 1) * (WORD_BITS / BITS_PER_BLOCK); i++) {
			is_bad |= lookup1(w);
			w >>= BITS_PER_BLOCK;
		}
		if (is_bad < 0) return true;
		else return false;
	}
	else {//blocks do NOT align to word boundaries
		//
		// ...this is ugly, so if possible choose parameterizations that don't hit this
		// or, failing that, paramterizations that will reject most cores in the first word
		Word w = core[0];
		for (int i = 0; i < WORD_BITS / BITS_PER_BLOCK; i++) {//first word
			is_bad |= lookup1(w);
			w >>= BITS_PER_BLOCK;
		}
		if (is_bad & 128) return true;
		int index = 1;
		enum { WORD_LEFTOVERS = WORD_BITS % BITS_PER_BLOCK };
		int usable_bits = WORD_LEFTOVERS;
		while (index < CORE_WORDS - 1) {//middle words
			Word w2 = core[index++];
			w |= w2 << usable_bits;
			for (int i = 0; i < WORD_BITS / BITS_PER_BLOCK; i++) {
				is_bad |= lookup1(w);
				w >>= BITS_PER_BLOCK;
			}
			if (is_bad < 0) return true;
			usable_bits += WORD_LEFTOVERS;
			w = w2 >> (WORD_BITS - usable_bits);
			if (usable_bits >= BITS_PER_BLOCK) {
				is_bad |= lookup1(w);
				w >>= BITS_PER_BLOCK;
				usable_bits -= BITS_PER_BLOCK;
			}
		}
		//last word
		enum { INDEX = CORE_WORDS - 1 };
		if (index != INDEX) issue_error("NearSeq2::is_core_good - internal error");
		enum { USABLE_BITS = ((CORE_WORDS - 1) * WORD_BITS) % BITS_PER_BLOCK };
		if (usable_bits != USABLE_BITS) issue_error("NearSeq2::is_core_good - internal error 2");
		enum { FINAL_WORD_BITS = WORD_BITS - EXTRA_PARTIAL_WORD_BITS };
		Word w2 = core[INDEX];
		w |= w2 << USABLE_BITS;
		if (USABLE_BITS + FINAL_WORD_BITS <= WORD_BITS - WORD_LEFTOVERS) {
			for (int i = 0; i < (USABLE_BITS + FINAL_WORD_BITS) / BITS_PER_BLOCK; i++) {
				is_bad |= lookup1(w);
				w >>= BITS_PER_BLOCK;
			}
		}
		else {
			for (int i = 0; i < WORD_BITS / BITS_PER_BLOCK; i++) {
				is_bad |= lookup1(w);
				w >>= BITS_PER_BLOCK;
			}
			w = w2 >> (WORD_BITS - USABLE_BITS - WORD_LEFTOVERS);
			is_bad |= lookup1(w);
		}
		if (is_bad < 0) return true;
		else return false;
	}
}
void PractRand::Tests::NearSeq2::core_analysis(const Word *core, int &index, int &ham) const {
	long core_bucket = 0;
	long bucket_bit = 0;
	long h = 0;
	if (CORE_WORDS == 1) {
		Word w = core[0];
		for (int i = 0; i < BLOCKS_PER_CORE; i++) {
			analyze_block(w, core_bucket, bucket_bit++, h);
			w >>= BITS_PER_BLOCK;
		}
	}
	else if (!(WORD_BITS % BITS_PER_BLOCK)) {//blocks align to word boundaries
		int index;
		Word w = core[0];
		for (int i = 0; i < WORD_BITS / BITS_PER_BLOCK; i++) {
			analyze_block(w, core_bucket, bucket_bit++, h);
			w >>= BITS_PER_BLOCK;
		}
		for (index = 1; index < CORE_WORDS - 1; index++) {
			w = core[index];
			for (int i = 0; i < WORD_BITS / BITS_PER_BLOCK; i++) {
				analyze_block(w, core_bucket, bucket_bit++, h);
				w >>= BITS_PER_BLOCK;
			}
		}
		w = core[index];
		for (int i = 0; i < BLOCKS_PER_CORE - (CORE_WORDS - 1) * (WORD_BITS / BITS_PER_BLOCK); i++) {
			analyze_block(w, core_bucket, bucket_bit++, h);
			w >>= BITS_PER_BLOCK;
		}
	}
	else {//blocks do NOT align to word boundaries
		//
		// ...this is ugly, so if possible choose parameterizations that don't hit this
		// or, failing that, paramterizations that will reject most cores in the first word
		Word w = core[0];
		for (int i = 0; i < WORD_BITS / BITS_PER_BLOCK; i++) {//first word
			analyze_block(w, core_bucket, bucket_bit++, h);
			w >>= BITS_PER_BLOCK;
		}
		int index = 1;
		enum { WORD_LEFTOVERS = WORD_BITS % BITS_PER_BLOCK };
		int usable_bits = WORD_LEFTOVERS;
		while (index < CORE_WORDS - 1) {//middle words
			Word w2 = core[index++];
			w |= w2 << usable_bits;
			for (int i = 0; i < WORD_BITS / BITS_PER_BLOCK; i++) {
				analyze_block(w, core_bucket, bucket_bit++, h);
				w >>= BITS_PER_BLOCK;
			}
			usable_bits += WORD_LEFTOVERS;
			w = w2 >> (WORD_BITS - usable_bits);
			if (usable_bits >= BITS_PER_BLOCK) {
				analyze_block(w, core_bucket, bucket_bit++, h);
				w >>= BITS_PER_BLOCK;
				usable_bits -= BITS_PER_BLOCK;
			}
		}
		//last word
		enum { INDEX = CORE_WORDS - 1 };
		if (index != INDEX) issue_error("NearSeq2::analyze_core - internal error");
		enum { USABLE_BITS = ((CORE_WORDS - 1) * WORD_BITS) % BITS_PER_BLOCK };
		if (usable_bits != USABLE_BITS) issue_error("NearSeq2::analyze_core - internal error 2");
		enum { FINAL_WORD_BITS = WORD_BITS - EXTRA_PARTIAL_WORD_BITS };
		Word w2 = core[INDEX];
		w |= w2 << USABLE_BITS;
		if (USABLE_BITS + FINAL_WORD_BITS <= WORD_BITS - WORD_LEFTOVERS) {
			for (int i = 0; i < (USABLE_BITS + FINAL_WORD_BITS) / BITS_PER_BLOCK; i++) {
				analyze_block(w, core_bucket, bucket_bit++, h);
				w >>= BITS_PER_BLOCK;
			}
		}
		else {
			for (int i = 0; i < WORD_BITS / BITS_PER_BLOCK; i++) {
				analyze_block(w, core_bucket, bucket_bit++, h);
				w >>= BITS_PER_BLOCK;
			}
			w = w2 >> (WORD_BITS - USABLE_BITS - WORD_LEFTOVERS);
			analyze_block(w, core_bucket, bucket_bit++, h);
		}
	}
	index = core_bucket;
	ham = h;
}
int PractRand::Tests::NearSeq2::get_hdist_bin(int hdist) const {
	// some parameterizations have a wide variety of possible total core hamming weights
	// to keep the size of Bucket::extra_counts under control, I index them by a function of the hamming weight with more limited range
	return hdist * HDIST_BINS / (MAX_TOTAL_HDIST + 1);
	//this could be done with a lookup table for more speed, but I think it's not called much so there's no point
}
void PractRand::Tests::NearSeq2::count_bits_distribution(Word bits, Uint64 *counts, int num) {
	Uint64 *end = counts + num;
	while (counts < end) {
		if (bits & 1) (*counts)++;
		bits >>= 1;
		counts++;
	}
}
void PractRand::Tests::NearSeq2::get_results(std::vector<TestResult> &results) {
	if (!blocks_tested) return;

	double block_probs[MAX_HDIST_PER_BLOCK + 1];
	double core_probs[MAX_TOTAL_HDIST + 1];
	for (int i = 0; i <= MAX_HDIST_PER_BLOCK; i++) block_probs[i] = math_nChooseR(BITS_PER_BLOCK, i) * std::pow(0.5, BITS_PER_BLOCK);
	double total_block_prob = 0;
	for (int i = 0; i <= MAX_HDIST_PER_BLOCK; i++) total_block_prob += block_probs[i];
	for (int i = 0; i <= MAX_HDIST_PER_BLOCK; i++) block_probs[i] /= total_block_prob;
	if (1) {//populate core_probs
		for (int i = 0; i <= MAX_TOTAL_HDIST; i++) core_probs[i] = 0;
		int block_h[BLOCKS_PER_CORE];
		for (int i = 0; i < BLOCKS_PER_CORE; i++) block_h[i] = 0;
		bool end = false;
		while (!end) {
			double chance = 1.0;
			int core_h = 0;
			for (int i = 0; i < BLOCKS_PER_CORE; i++) {
				chance *= block_probs[block_h[i]];
				core_h += block_h[i];
			}
			core_probs[core_h] += chance;
			for (int i = 0; true; ) {
				block_h[i] += 1;
				if (block_h[i] <= MAX_HDIST_PER_BLOCK) break;
				block_h[i] = 0;
				if (++i == BLOCKS_PER_CORE) {
					end = true;
					break;
				}
			}
		}
	}
	double valid_core_chance = std::pow(total_block_prob * 2, BLOCKS_PER_CORE);
	double invalid_core_chance = 1.0 - valid_core_chance;
	Uint64 total_samples = blocks_tested * (TestBlock::SIZE / sizeof(Word)) - (CORE_WORDS + EXTRA_FULL_WORDS - 1);
	Uint64 total_valid_samples = 0;
	Uint64 per_bucket_total[NUM_BUCKETS];
	for (int bucket_index = 0; bucket_index < NUM_BUCKETS; bucket_index++) {
		Bucket &bucket = buckets[bucket_index];
		Uint64 total = 0;
		for (int i = 0; i <= MAX_TOTAL_HDIST; i++) total += bucket.core_hdist[i];
		per_bucket_total[bucket_index] = total;
		total_valid_samples += total;
	}
	Sint64 total_invalid_samples = total_samples - total_valid_samples;
	if (total_invalid_samples < 0) issue_error("NearS2::get_results - negative number of invalid samples?");


	/*
		things to check:
		1. overall distribution of hamming weights within each bucket
			report as seperate p-values or unify in to a single p-value? lets try unifying
		2. overall distribution of extra-bits within each bucket, on a per-hamming-weight-bin basis
			report as seperate p-values or unify in to a single p-value? both by bit position and by bucket?  lets try unifying buckets and bit positions, but not hamming weights
		3. distribution between buckets, and invalid cores
	*/

	if (total_samples * valid_core_chance < 300) return;//too few to do anything reasonable

	//if (total_samples * valid_core_chance / NUM_BUCKETS < 10) {//too few to do anything much, but we can do *something*
	if (true) {
		G_TEST cores_valid;
		cores_valid.add_category(total_invalid_samples, invalid_core_chance);
		cores_valid.add_category(total_valid_samples, valid_core_chance);
		cores_valid.finalize();

		Uint64 counts[2] = { Uint64(total_invalid_samples), total_valid_samples };
		double probs[2] = { invalid_core_chance, valid_core_chance };
		double raw1 = cores_valid.get_result();
		double raw2 = g_test(2, probs, counts);
		raw2 = math_chisquared_to_normal(raw2, 1);
		std::ostringstream os;
		os << get_name() << ":cv";
		results.push_back(TestResult(os.str(),
			math_chisquared_to_normal(cores_valid.get_result(), cores_valid.get_DoF()),
			1-math_chisquared_to_pvalue(cores_valid.get_result(), cores_valid.get_DoF()),
			TestResult::TYPE_GOOD_P, 0.01)
		);
	}

	if (total_samples * valid_core_chance > 40 * NUM_BUCKETS) {
		G_TEST bucket_distribution;
		for (int bucket_index = 0; bucket_index < NUM_BUCKETS; bucket_index++) {
			bucket_distribution.add_category(per_bucket_total[bucket_index], valid_core_chance / NUM_BUCKETS);
		}
		bucket_distribution.add_category(total_invalid_samples, invalid_core_chance);
		bucket_distribution.finalize();
		std::ostringstream os;
		os << get_name() << ":bd";
		results.push_back(TestResult(os.str(),
			math_chisquared_to_normal(bucket_distribution.get_result(), bucket_distribution.get_DoF()),
			math_chisquared_to_pvalue(bucket_distribution.get_result(), bucket_distribution.get_DoF()),
			TestResult::TYPE_GOOD_P, 0.03)
		);
	}

	if (total_valid_samples > 100 * NUM_BUCKETS) {
		G_TEST core_nearness;
		core_nearness.set_minimum_prob(10.0 / total_valid_samples);
		double scale = 1.0 / NUM_BUCKETS;// we're only counting valid cores this time
		for (int bucket_index = 0; bucket_index < NUM_BUCKETS; bucket_index++) {
			for (int h = 0; h <= MAX_TOTAL_HDIST; h++) {
				core_nearness.add_category(buckets[bucket_index].core_hdist[h], core_probs[h] * scale);
			}
		}
		core_nearness.finalize();
		std::ostringstream os;
		os << get_name() << ":cn1";
		results.push_back(TestResult(os.str(),
			math_chisquared_to_normal(core_nearness.get_result(), core_nearness.get_DoF()),
			1 - math_chisquared_to_pvalue(core_nearness.get_result(), core_nearness.get_DoF()),
			TestResult::TYPE_GOOD_P, 0.1)
			);
	}

	if (total_samples * valid_core_chance > 100 * NUM_BUCKETS) {
		G_TEST core_nearness;
		core_nearness.set_minimum_prob(10.0 / total_samples);
		double scale = valid_core_chance / NUM_BUCKETS;
		for (int bucket_index = 0; bucket_index < NUM_BUCKETS; bucket_index++) {
			for (int h = 0; h <= MAX_TOTAL_HDIST; h++) {
				core_nearness.add_category(buckets[bucket_index].core_hdist[h], core_probs[h] * scale);
			}
		}
		core_nearness.add_category(total_invalid_samples, invalid_core_chance);
		core_nearness.finalize();
		std::ostringstream os;
		os << get_name() << ":cn2";
		results.push_back(TestResult(os.str(),
			math_chisquared_to_normal(core_nearness.get_result(), core_nearness.get_DoF()),
			1 - math_chisquared_to_pvalue(core_nearness.get_result(), core_nearness.get_DoF()),
			TestResult::TYPE_GOOD_P, 0.1)
			);
	}

	/*if (total_samples * valid_core_chance / NUM_BUCKETS > 100) {
		Uint64 counts[2];
		double probs[2] = { 0.5, 0.5 };
		double overall_chisquared;
		for (int bucket_index = 0; bucket_index < NUM_BUCKETS; bucket_index++) {
			Uint64 total = per_bucket_total[bucket_index];
			double bucket_chisquared = 0;
			for (int i = 0; i < EXTRA_BITS; i++) {
				counts[0] = buckets[]
			}
		}
	}*/

	return;
}
void PractRand::Tests::NearSeq2::test_blocks(TestBlock *data, int numblocks) {
	int start = blocks_tested ? -(CORE_WORDS + SEQUENCE_WORD_OFFSET - 1) : SEQUENCE_WORD_OFFSET;
	int end = (numblocks * (TestBlock::SIZE * 8 / WORD_BITS)) - (CORE_WORDS + SEQUENCE_WORD_OFFSET - 1);

	for (int pos = start; pos < end; pos++) {
		/* chances at various settings
		setting:			64/8		64/8		64/4		32/4		32/8		32/8		16/8		16/8		16/4		desired
		codable/ideal		3/2			2/1			1/0			1/0			2/1			1/0			2/1			1/0			1/0			--
		bucketing bits		8			8			16			8			4			4			2			2			4			6 - 16
		is_word_codable		12.9		20.5 K		1845		43			143			41 K		12			202			6.5			1, or 20 - 50 K
		is_near_ideal		20.5 K		1.67 B		281 T		16.7 M		40.9 K		268 M		202			16 K		4.0 K		10 K - 1 B
		looks nice?						.						*			.			.

		not perfectly aligned, no tails:

		setting:            60/6		30/6		60/5		63/3		30/3		30/5		63/7		63/9		63/9
		codable/ideal		2/1			2/1			2/1			1/0			1/0			2/1			2/1			3/2			3/1
		bucketing bits		10			5			12			21			10			6			9			7			7
		is_word_codable     42.4		6.5			1			1			1			1			1.2 K		115			115
		is_near_ideal       4.0 M		2.0 K		129 K		4.4 T		2 M			719			268 M		165 K		7.2 B
		looks nice?			*			.			*			.									**			*

		maybe some larger area, or at least not as round numbers? no tails.

		setting:            120/10	120/10	120/12	120/12	96/12	99/9	156/12	156/12	112/8	40/4	256/32	128/16	256/64	256/16
		codable/ideal		3/2		4/3		4/3		4/2		4/2		3/2		5/4		4/3		3/2		1/0		13/12	6/5		27/18	7/6
		bucketing bits		12		12		10		10		8		11		13		13		14		10		8		8		4		16
		is_word_codable     367 K	16.8	13 K	13 K	~2 K	1.7 K	27.8	224 K	87.5	110		44		78.6 K	217		33
		is_near_ideal       341 B	367 K	227 M	137 T	204 B	159 M	224 K	73 B	35 M	1 B		216 K	10 M	5 B		300 K
		looks nice?					.		*						*						*		*

		64 bit
		0	1
		1	64
		2	2016
		3	41664
		4	635376
		5	7624512						8303633
		6	74974368
		7	621216192
		8	4426165368
		9	27540584512
		10	151473214816				184144458889
		11	743595781824
		12	3284214703056
		13	13136858812224
		14	47855699958816
		15	159518999862720				224723513577529
		16	488526937079580		28 Q	713250450657109
		17	1379370175283520
		18	3601688791018080	7 T		5694309416958709
		19	8719878125622720
		20	19619725782651120	5 B		34033913325232549
		21	41107996877935680
		22	80347448443237920	12 M	155489358646406149
		23	146721427591999680	867 K	302210786238405829
		24	250649105469666120	77 K	552859891708071949
		25	401038568751465792	8.7 K	953898460459537741
		26	601557853127198688	1.2 K	1555456313586736429
		27	846636978475316672	217		2402093292062053101
		28	1118770292985239888	47		3520863585047292989
		*/
		Word *core;
		if (false);
		else if (WORD_BITS == 8) core = (Word*)&data[0].as8[pos];
		else if (WORD_BITS == 16) core = (Word*)&data[0].as16[pos];
		else if (WORD_BITS == 32) core = (Word*)&data[0].as32[pos];
		else if (WORD_BITS == 64) core = (Word*)&data[0].as64[pos];
		else issue_error("NearS2 - what word size???");

		_total_cores++;
		if (is_core_bad(core)) {
			_total_invalid_cores++;
			continue;
		}

		int bucket_index, hdist;
		core_analysis(core, bucket_index, hdist);
		if (bucket_index < 0 || bucket_index > NUM_BUCKETS) issue_error("NearS2::text_blocks bucket_index out of range, bad analysis");

		Bucket &bucket = buckets[bucket_index];
		bucket.core_hdist[hdist]++;
		int hdist_bin = get_hdist_bin(hdist);
		Uint64 *extra_pos = &bucket.extra_counts[hdist_bin][0];
		for (int i = 1; i <= EXTRA_FULL_WORDS / 2; i++) {
			count_bits_distribution(core[-i], extra_pos);
			extra_pos += WORD_BITS;
		}
		for (int i = 0; i < EXTRA_FULL_WORDS / 2; i++) {
			count_bits_distribution(core[CORE_WORDS + i], extra_pos);
			extra_pos += WORD_BITS;
		}
		if (EXTRA_PARTIAL_WORD_BITS) {
			count_bits_distribution(core[CORE_WORDS - 1] >> (WORD_BITS - EXTRA_PARTIAL_WORD_BITS), extra_pos, EXTRA_PARTIAL_WORD_BITS);
		}
	}
	blocks_tested += numblocks;
}






void PractRand::Tests::mod3_simple::init(PractRand::RNGs::vRNG *known_good) {
	if (P2 / 2 >= K) issue_error("mod3_simple - bad internal configuration1");
	if (K != std::pow(3.0, EXP)) issue_error("mod3_simple - bad internal configuration2");
	counts.reset_counts();
	index = 0;//not actually necessary
	blocks_tested = 0;
}
std::string PractRand::Tests::mod3_simple::get_name() const {
	return "mod3_simple";
}
static Uint8 mod3_table[1024] = {
	//	0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 0
		1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1, // 1
		2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2, // 2
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 3
		1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1, // 4
		2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2, // 5
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 6
		1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1, // 7
		2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2, // 8
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 9
		1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1, // 10
		2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2, // 11
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 12
		1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1, // 13
		2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2, // 14
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 15
		1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1, // 16
		2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2, // 17
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 18
		1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1, // 19
		2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2, // 20
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 21
		1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1, // 22
		2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2, // 23
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 24
		1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1, // 25
		2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2, // 26
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 27
		1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1, // 28
		2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2, // 29
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 30
		1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1, // 31
		2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2, // 32
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 33
		1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1, // 34
		2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2, // 35
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 36
		1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1, // 37
		2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2, // 38
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 39
		1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1, // 40
		2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2, // 41
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 42
		1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1, // 43
		2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2, // 44
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 45
		1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1, // 46
		2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2, // 47
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 48
		1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1, // 49
		2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2, // 50
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 51
		1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1, // 52
		2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2, // 53
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 54
		1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1, // 55
		2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2, // 56
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 57
		1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1, // 58
		2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2, // 59
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 60
		1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1, // 61
		2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2, // 62
		0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0,	1,	2,	0, // 63
};
static Uint8 combine_mod3s(Uint8 a, Uint8 b) { return mod3_table[a + b]; }
static Uint8 combine_mod3s(Uint8 a, Uint8 b, Uint8 c) { return mod3_table[a + b + c]; }
static Uint8 combine_mod3s(Uint8 a, Uint8 b, Uint8 c, Uint8 d) { return mod3_table[a + b + c + d]; }
static Uint8 u8_mod3(Uint8 v) { return mod3_table[v]; }
//static Uint8 u16_mod3(Uint16 v) { return combine_mod3s(mod3_table[Uint8(v)], mod3_table[v >> 8]); }
static Uint8 u16_mod3(Uint16 v) { return mod3_table[(v & 255) + (v >> 8)]; }
static Uint8 u32_mod3(Uint32 v) { v = (v & 65535) + (v >> 16); v = (v & 255) + (v >> 8); return mod3_table[v]; }
static Uint8 u64_mod3(Uint64 v) { v = (v & 4294967295) + (v >> 32); v = (v & 65535) + (v >> 16); v = (v & 255) + (v >> 8); return mod3_table[v]; }
void PractRand::Tests::mod3_simple::get_results(std::vector<TestResult> &results) {
	if (blocks_tested < 1) return;
	const Uint64 *unpacked_counts = counts.get_array();
	std::vector<Uint64> packed_counts; packed_counts.resize(K);
	std::memcpy(&packed_counts[0], unpacked_counts, sizeof(Uint64)* K);
	for (int i = K; i < P2; i++) {
		packed_counts[i - K] += counts[i];
	}
	double base1, base2;
	if (WORD_BITS == 8) {
		base1 = 85.0 / 256;
		base2 = 86.0 / 256;
	}
	else if (WORD_BITS == 16) {
		base1 = 21845.0 / 65536;
		base2 = 21846.0 / 65536;
	}
	else if (WORD_BITS == 32) {
		base1 = 1431655765.0 / 4294967296;
		base2 = 1431655766.0 / 4294967296;
	}
	else if (WORD_BITS == 64) {
		base1 = 6148914691236517205.0 / 18446744073709551616.0;
		base2 = 6148914691236517206.0 / 18446744073709551616.0;
	}
	else issue_error("mod3_simple - impossible settings");
	std::vector<double> probs; probs.resize(K);
	for (int i = 0; i < K; i++) {
		int num_zeroes = 0;
		int i2 = i;
		for (int x = 0; x < EXP; x++) {
			int m3 = u32_mod3(i2);
			i2 /= 3;
			if (m3 == 0) num_zeroes++;
		}
		probs[i] = std::pow(base1, EXP - num_zeroes - 0.0) * std::pow(base2, num_zeroes - 0.0);
	}
	Uint64 samples = blocks_tested * TestBlock::SIZE / sizeof(Word)-EXP + 1;

	Uint64 cat = K;
	/*
	while (cat > 9 && cat * 162 < samples) cat /= 3;
	if (cat != K) {
		int reduced = 0;
		for (int i = cat; i < K; i++,reduced++) {
			if (reduced >= cat) reduced -= cat;
			probs[reduced] += probs[i];
			packed_counts[reduced] += packed_counts[i];
		}
	}*/
	for (int x = EXP; x >= 9; x--) {
		cat = Uint64(std::pow(3.0, (double)x));
		if (cat != K) {
			int reduced = 0;
			for (int i = cat; i < K; i++, reduced++) {
				if (reduced >= cat) reduced -= cat;
				probs[reduced] += probs[i];
				packed_counts[reduced] += packed_counts[i];
				probs[i] = 0;
				packed_counts[i] = 0;
			}
		}
		double cs = g_test(cat, &probs[0], &packed_counts[0]);
		double n = math_chisquared_to_normal(cs, cat - 1);
		std::ostringstream buf;
		buf << "mod3_simple(" << x << ")";
		results.push_back(TestResult(buf.str(), n, n, TestResult::TYPE_RAW_NORMAL, 0.2));
	}
	/*double cs = g_test(cat, &probs[0], &packed_counts[0]);
	double n = math_chisquared_to_normal(cs, cat - 1);
	std::ostringstream buf;
	buf << "mod3_simple(" << EXP << ")";
	TestCalibrationData *calib = calibration_manager.get_calibration_data(buf.str(), blocks_tested);
	if (calib) {
		double sus = calib->sample_to_suspicion(n);
		results.push_back(TestResult(buf.str(), n, sus, TestResult::TYPE_GOOD_S, 0.2));
	}
	results.push_back(TestResult(buf.str(), n, n, TestResult::TYPE_RAW_NORMAL, 0.2));*/
}
void PractRand::Tests::mod3_simple::update_index(Word value) {
	if (WORD_BITS == 8) value = u8_mod3(value);
	else if (WORD_BITS == 16) value = u16_mod3(value);
	else if (WORD_BITS == 32) value = u32_mod3(value);
	else if (WORD_BITS == 64) value = u64_mod3(value);
	index += index << 1;
	index += value;
	const unsigned long table[4] = { 
		0, 
		((P2 * 1) / K)*K, 
		((P2 * 2) / K)*K, 
		((P2 * 3) / K)*K
	};
	index -= table[index >> BITS];
	index -= table[index >> BITS];
	//if (index > P2) issue_error("mod3_simple - impossible!");
}
void PractRand::Tests::mod3_simple::test_blocks(TestBlock *data, int numblocks) {
	int max = numblocks * TestBlock::SIZE / sizeof(Word);
	if (WORD_BITS == 8) {
		if (!blocks_tested) {
			for (unsigned long i = 0; i < EXP - 1; i++) {
				update_index(data[0].as8[i]);
			}
			for (unsigned long i = EXP - 1; i < max; i++) {
				update_index(data[0].as8[i]);
				counts.increment(index);
			}
		}
		else {
			for (unsigned long i = 0; i < max; i++) {
				update_index(data[0].as8[i]);
				counts.increment(index);
			}
		}
	}
	else if (WORD_BITS == 16) {
		if (!blocks_tested) {
			for (unsigned long i = 0; i < EXP - 1; i++) {
				update_index(data[0].as16[i]);
			}
			for (unsigned long i = EXP - 1; i < max; i++) {
				update_index(data[0].as16[i]);
				counts.increment(index);
			}
		}
		else {
			for (unsigned long i = 0; i < max; i++) {
				update_index(data[0].as16[i]);
				counts.increment(index);
			}
		}
	}
	else if (WORD_BITS == 32) {
		if (!blocks_tested) {
			for (unsigned long i = 0; i < EXP - 1; i++) {
				update_index(data[0].as32[i]);
			}
			for (unsigned long i = EXP - 1; i < max; i++) {
				update_index(data[0].as32[i]);
				counts.increment(index);
			}
		}
		else {
			for (unsigned long i = 0; i < max; i++) {
				update_index(data[0].as32[i]);
				counts.increment(index);
			}
		}
	}
	else if (WORD_BITS == 64) {
		if (!blocks_tested) {
			for (unsigned long i = 0; i < EXP - 1; i++) {
				update_index(data[0].as64[i]);
			}
			for (unsigned long i = EXP - 1; i < max; i++) {
				update_index(data[0].as64[i]);
				counts.increment(index);
			}
		}
		else {
			for (unsigned long i = 0; i < max; i++) {
				update_index(data[0].as64[i]);
				counts.increment(index);
			}
		}
	}
	blocks_tested += numblocks;
}



PractRand::Tests::mod3n::mod3n(int block_fraction_) : block_fraction(block_fraction_) {
}
void PractRand::Tests::mod3n::init(PractRand::RNGs::vRNG *known_good) {
	TestBaseclass::init(known_good);
	if (P2 / 2 >= K) issue_error("mod3n - bad internal configuration1");
	if (K != std::pow(3.0, EXP)) issue_error("mod3n - bad internal configuration2");
	for (int i = 0; i < LEVELS; i++) {
		levels[i].index = 0;
		levels[i].odd = false;
		levels[i].remainder = 0;
		levels[i].warmup = EXP - 1;
		levels[i].counts.reset_counts();
	}
	blocks_tested = 0;
	block_phase = 0;
	block_scale = 0;
	total_blocks_on = 0;
}
std::string PractRand::Tests::mod3n::get_name() const {
	std::ostringstream buf;
	buf << "mod3n(" << block_fraction << ")";
	return buf.str();
}
void PractRand::Tests::mod3n::get_results(std::vector<TestResult> &results) {
	if (!total_blocks_on) return;
	for (int level = 0; level < LEVELS; level++) {
		Uint64 predicted_samples = ((total_blocks_on * TestBlock::SIZE) >> level) - (EXP - 1) * (level + 1);
		//if (predicted_samples < 200) return;
		if (predicted_samples < 20) return;//remove me

		int effective_EXP = int(std::floor(std::log(predicted_samples) / std::log(4.0) - 2.9));
		if (effective_EXP < 3) effective_EXP = 3;
		if (effective_EXP > EXP) effective_EXP = EXP;
		effective_EXP = 3;////remove me

		int effective_K = int(std::pow(3.0, (double)effective_EXP));
		double E = predicted_samples / effective_K;

		PerLevel &pl = levels[level];
		const Uint64 *_counts = pl.counts.get_array();
		std::vector<Uint64> counts; counts.resize(effective_K);
		std::memcpy(&counts[0], _counts, sizeof(Uint64)* effective_K);
		if (effective_K != K || !PACKED_INDEX) {
			int reduced = 0;
			for (int i = effective_K; i < (PACKED_INDEX ? K : P2); i++, reduced++) {
				if (reduced >= effective_K) {
					reduced -= effective_K;
				}
				counts[reduced] += _counts[i];
			}
		}
		if (true) {
			Uint64 actual_samples = 0;
			for (int i = 0; i < effective_K; i++) actual_samples += counts[i];
			if (actual_samples < 200) return;
		}

		std::vector<double> probs; probs.resize(effective_K);
		double cs;
		if (level < 5) {
			long double base1, base2, values;
			values = std::pow(2.0, 8 << level);
			base1 = std::floor(values / 3) / values;
			base2 = std::floor(values / 3 + 1) / values;
			for (int i = 0; i < effective_K; i++) {
				int num_zeroes = 0;
				int i2 = i;
				for (int x = 0; x < effective_EXP; x++) {
					int m3 = u32_mod3(i2);
					i2 /= 3;
					if (m3 == 0) num_zeroes++;
				}
				probs[i] = std::pow(base1, effective_EXP - num_zeroes - 0.0) * std::pow(base2, num_zeroes - 0.0);
			}
			cs = g_test(effective_K, &probs[0], &counts[0]);
		}
		else cs = g_test_flat(effective_K, &counts[0]);
		double n = math_chisquared_to_normal(cs, effective_K - 1);
		std::ostringstream buf;
		buf << "mod3_simple(" << (effective_EXP < 11 ? effective_EXP : 11) << ")";
		//we don't have calibration data past 11
		//but for values only slightly past 11, it's about the same as for 11
		//and values far past 11 take impossible amounts of memory/cache anyway
		TestCalibrationData *calib = calibration_manager.get_calibration_data(buf.str(), total_blocks_on);
		buf.str("");
		buf << "mod3n(" << block_fraction << "):(" << level << "," << EXP << "-" << (EXP - effective_EXP) << ")";
		double priority = 0.1;
		if (level > 2) priority *= std::pow(0.7, level - 2.0);
		if (calib) {
			double sus = calib->sample_to_suspicion(n);
			results.push_back(TestResult(buf.str(), n, -sus, TestResult::TYPE_GOOD_S, priority));
		}
		else results.push_back(TestResult(buf.str(), n, n, TestResult::TYPE_RAW_NORMAL, priority));
	}
}
unsigned long PractRand::Tests::mod3n::update_index(unsigned long index, Uint8 remainder) {
	index += index << 1;
	index += remainder;
	/*
	const unsigned long table[4] = { // this approach was slower in my testing
		0,
		((P2 * 1) / K)*K,
		((P2 * 2) / K)*K,
		((P2 * 3) / K)*K
	};
	index -= table[index >> BITS];
	index -= table[index >> BITS];
	*/
	/*
	if (P2 < 4) issue_error(); // haven't tried measuring the speed of this yet
	const unsigned long table[16] = {
		0,
		(((P2 >> 2) * 1) / K) * K,
		(((P2 >> 2) * 2) / K) * K,
		(((P2 >> 2) * 3) / K) * K,
		(((P2 >> 2) * 4) / K) * K,
		(((P2 >> 2) * 5) / K) * K,
		(((P2 >> 2) * 6) / K) * K,
		(((P2 >> 2) * 7) / K) * K,
		(((P2 >> 2) * 8) / K) * K,
		(((P2 >> 2) * 9) / K) * K,
		(((P2 >> 2) * 10) / K) * K,
		(((P2 >> 2) * 11) / K) * K,
		(((P2 >> 2) * 12) / K) * K,
		(((P2 >> 2) * 13) / K) * K,
		(((P2 >> 2) * 14) / K) * K,
		(((P2 >> 2) * 15) / K) * K,
	};
	index -= table[index >> (BITS - 2)];//index size may exceed K by up to (P2 / 4), plan table size accordingly
	*/
	index -= (index >= K*2) ? K*2 : 0;
	index -= (index >= K) ? K : 0;
	return index;
}
void PractRand::Tests::mod3n::handle_level(int level, Uint8 remainder) {
	PerLevel &pl = levels[level];
	pl.index = update_index(pl.index, remainder);
	if (pl.warmup) pl.warmup -= 1;
	else pl.counts.increment(pl.index);
	if (pl.odd) {
		if (level + 1 < LEVELS) handle_level(level + 1, combine_mod3s(pl.remainder, remainder));
		pl.odd = false;
	}
	else {
		pl.remainder = remainder;
		pl.odd = true;
	}
}
void PractRand::Tests::mod3n::test_blocks(TestBlock *data, int numblocks) {
	blocks_tested += numblocks;
	while (numblocks) {
		Sint64 blocks_on = (1LL << block_scale) - block_phase;
		if (blocks_on <= 0) {
			Sint64 blocks_to_skip = (1LL << (block_scale + block_fraction)) - block_phase;
			if (blocks_to_skip > 0) {
				if (blocks_to_skip > numblocks) blocks_to_skip = numblocks;
				data += blocks_to_skip;
				numblocks -= blocks_to_skip;
				block_phase += blocks_to_skip;
			}
			else {
				if (blocks_to_skip < 0) issue_error("mod3n: impossible phase");
				// end of round reached
				block_phase = 0;
				block_scale++;
				if (block_fraction) {//we can skip the barrier between on regions if there's never an real off regions
					for (int i = 0; i < LEVELS; i++) {
						levels[i].odd = false;
						levels[i].warmup = EXP - 1;
					}
				}
			}
			continue;
		}
		if (blocks_on > numblocks) blocks_on = numblocks;
		int max = blocks_on * TestBlock::SIZE;
		unsigned long i;
		for (i = 0; levels[1].warmup && i < max; i += 4) {
			handle_level(0, u8_mod3(data->as8[i + 0]));
			handle_level(0, u8_mod3(data->as8[i + 1]));
			handle_level(0, u8_mod3(data->as8[i + 2]));
			handle_level(0, u8_mod3(data->as8[i + 3]));
		}
		for (; i < max; i += 4) {
			Uint8 remainder;

			//level 0, even
			remainder = u8_mod3(data->as8[i + 0]);
			levels[0].index = update_index(levels[0].index, remainder);
			levels[0].counts.increment(levels[0].index);
			levels[0].remainder = remainder;
			//levels[0].odd = true;

			//level 0, odd
			remainder = u8_mod3(data->as8[i + 1]);
			levels[0].index = update_index(levels[0].index, remainder);
			levels[0].counts.increment(levels[0].index);
			//handle_level(1, combine_mod3s(levels[0].remainder, remainder));
			//levels[0].odd = false;

			//level 1, even
			remainder = combine_mod3s(levels[0].remainder, remainder);
			levels[1].index = update_index(levels[1].index, remainder);
			levels[1].counts.increment(levels[1].index);
			levels[1].remainder = remainder;
			//levels[1].odd = true;

			//level 0, even
			remainder = u8_mod3(data->as8[i + 2]);
			levels[0].index = update_index(levels[0].index, remainder);
			levels[0].counts.increment(levels[0].index);
			levels[0].remainder = remainder;
			//levels[0].odd = true;

			//level 0, odd
			remainder = u8_mod3(data->as8[i + 3]);
			levels[0].index = update_index(levels[0].index, remainder);
			levels[0].counts.increment(levels[0].index);
			//handle_level(1, combine_mod3s(levels[0].remainder, remainder));
			//levels[0].odd = false;

			//level 1, odd
			remainder = combine_mod3s(levels[0].remainder, remainder);
			levels[1].index = update_index(levels[1].index, remainder);
			levels[1].counts.increment(levels[1].index);
			handle_level(2, combine_mod3s(levels[1].remainder, remainder));
			//levels[1].odd = false;
		}
		data += blocks_on;
		numblocks -= blocks_on;
		block_phase += blocks_on;
		total_blocks_on += blocks_on;
	}
}


void PractRand::Tests::Coup16::init(PractRand::RNGs::vRNG *known_good) {
	counts.reset_counts();
	for (int i = 0; i < S; i++) flags[i] = 0;
	blocks_tested = 0;
	TestBaseclass::init(known_good);
}
std::string PractRand::Tests::Coup16::get_name() const {
	return "Coup16";
}
void PractRand::Tests::Coup16::test_blocks(TestBlock *data, int numblocks) {
	while (numblocks) {
		int blocks_to_use = 128 - (blocks_tested & 127);
		if (blocks_to_use > numblocks) blocks_to_use = numblocks;
		int max = blocks_to_use * (TestBlock::SIZE / sizeof(Uint16));
		for (int i = 0; i < max; i++) {
			Uint16 word = data[0].as16[i];
			flags[word >> 5] |= 1 << (word & 31);
		}
		blocks_tested += blocks_to_use;
		data += blocks_to_use;
		numblocks -= blocks_to_use;

		if (!(blocks_tested & 127)) {
			int sum = 0;
			for (int i = 0; i < S; i++) {
				sum += count_bits32(flags[i]);
				flags[i] = 0;
			}
			counts.increment(sum - 1);
		}
	}
}
void PractRand::Tests::Coup16::get_results(std::vector<TestResult> &results) {
	//static Uint64 print_at = 128 << 13;
	//if (blocks_tested < print_at) return;
	//print_at <<= 1;
	const Uint64 *count = counts.get_array();
	const double expected_mean = 41426.652943388356 - 1 + 0.185;// plus or minus about 0.001?... actually the value I got empirically was 0.184979, but it 0.185 was so close and so much prettier
	const double expected_deviation = 79.81665;// plus or minus about 0.001? - these valuse were obtained from a 1280 TB test run
	double eebar = 0.001;

	double total_error = 0;
	double weighted_error = 0;
	double inv_dev = 1.0 / expected_deviation;
	double total = blocks_tested / 128;
	if (total < 1) return;
	for (int i = 0; i < 65536; i++) {
		if (i > 40000 && i < 43000) continue;
		if (count[i]) {
			results.push_back(TestResult(get_name() + ":!", 1, 1, TestResult::TYPE_PASSFAIL, 0.0000001));
			return;
		}
	}

	std::vector<double> probs; probs.resize(3000);
	for (int i = 0; i < 3000; i++) {
		int ei = i + 40000;
		double c = count[ei];
		double f = c / total;
		double p = math_normaldist_pdf((ei - expected_mean) * inv_dev) * inv_dev;
		probs[i] = p;
		double error = std::fabs(f - p);
		double weight = -std::log(p);
		total_error += error;
		weighted_error -= error * std::log(p);
	}
	//results.push_back(TestResult(get_name() + ":A", weighted_error, weighted_error, TestResult::TYPE_RAW_NORMAL, 0.01));
	if (total > 1) {
		double norm = my_test(3000, &probs[0], &counts[40000]);
		results.push_back(TestResult(get_name() + ":A", norm, norm, TestResult::TYPE_RAW_NORMAL, 0.01));
	}
	if (total > 100) {
		Uint64 counts2[3000];
		for (int i = 0; i < 3000; i++) counts2[i] = counts[i+40000];
		int cat = simplify_prob_table(3000, total * 1.0, &probs[0], &counts2[0], true, false);
		double chisqr = g_test(cat, &probs[0], &counts2[0]);
		double norm = math_chisquared_to_normal(chisqr, cat - 1);
		results.push_back(TestResult(get_name() + ":B", norm, norm, TestResult::TYPE_RAW_NORMAL, 0.01));
	}


	/*
	std::vector<double> probs; probs.resize(65536);
	double total = blocks_tested / 128;
	double sum = 0;
	double sum_sqr = 0;
	for (int i = 41426 - 750; i < 41426 + 750; i++) {
		double c = count[i];
		double f = c / total;
		sum += i * c;
		sum_sqr += i * i * c;
	}
	double mean = sum / total;//should be ((65536 * (1 - exp(-1))) - 1) = 41425.652943388356, I think
	double mean_sqr = sum_sqr / total;
	double dev = std::sqrt(mean_sqr - mean * mean);//should be 79.8, I guess?
	double total_error = 0;
	double sum_p = 0;
	for (int i = 41426 - 750; i < 41426 + 750; i++) {
		double c = count[i];
		double f = c / total;
		double p = math_normaldist_pdf((i - avg) / dev) / dev;
		if (c) std::printf("%5d: %.15f    %.15f\n", i, f, p);
		total_error += std::fabs(f - p);
		sum_p += p;
	}
	std::printf("total: %.0f    mean: %.7f   dev: %.9f   err: %.9f\n", total, avg, dev, total_error);
	std::printf("sum_p: %.9f\n", sum_p);
	std::printf("blocks tested = %.0f GB, print_at = %.0f GB\n", double(blocks_tested >> 20), double(print_at >> 20));
	std::printf("\n");//*/
}
void PractRand::Tests::DistFreq4::init(PractRand::RNGs::vRNG *known_good) {
	counts.reset_counts();
	blocks_tested = 0;
	blocks_till_next = blocks_per - 1;
	TestBaseclass::init(known_good);
}
std::string PractRand::Tests::DistFreq4::get_name() const {
	std::ostringstream buf;
	buf << "DF4(/" << blocks_per << ")";
	return buf.str();
}
void PractRand::Tests::DistFreq4::get_results(std::vector<TestResult> &results) {
	enum { TSIZE = 1 << (SIZE1 + SIZE2) };
	int num_sweeps = blocks_tested / blocks_per;
	if (num_sweeps < TSIZE * 100) return;
	int DoF = ((1 << (SIZE1 + SIZE2)) - 1) << (POSITIONS1_L2 + POSITIONS2_L2);
	const Uint64 *counts_ = counts.get_array();
	double chisqr = g_test_flat(1 << TOTAL_INDEX_BITS, counts_);
	double norm = math_chisquared_to_normal(chisqr, DoF);
	results.push_back(TestResult(get_name() + ":all", norm, norm, TestResult::TYPE_RAW_NORMAL, 0.01));
	Uint64 counts2[TSIZE];
	double highest1 = -9999999;
	int highest_pos1 = 0;
	double highest2 = -9999999;
	int highest_pos2 = 0;
	for (int pos1 = 0; pos1 < 1 << POSITIONS1_L2; pos1++) {
		int base_index1 = pos1 << (TOTAL_INDEX_BITS - POSITIONS1_L2);
		for (int pos2 = 0; pos2 < 1 << POSITIONS2_L2; pos2++) {
			int base_index2 = base_index1 + (pos2 << SIZE2);
			int new_index = 0;
			for (int value1 = 0; value1 < (1 << SIZE1); value1++) {
				int old_index = base_index2 + (value1 << (TOTAL_INDEX_BITS - POSITIONS1_L2 - SIZE1));
				for (int value2 = 0; value2 < (1 << SIZE2); value2++) {
					counts2[new_index++] = counts_[old_index++];
				}
			}
			double chisqr2 = g_test_flat(TSIZE, &counts2[0]);
			double norm2 = math_chisquared_to_normal(chisqr2, TSIZE - 1);
			if (norm2 > highest1) {
				highest2 = highest1;
				highest_pos2 = highest_pos1;
				highest1 = norm2;
				highest_pos1 = (pos1 << POSITIONS2_L2) + pos2;
			}
			else if (norm2 > highest2) {
				highest2 = norm2;
				highest_pos2 = (pos1 << POSITIONS2_L2) + pos2;
			}
		}
	}
	if (true) {
		std::ostringstream buf;
		buf << get_name() << ":h1(" << std::hex << highest_pos1 << ")";
		results.push_back(TestResult(buf.str(), highest1, highest1, TestResult::TYPE_RAW_NORMAL, 0.01));
	}
	if (true) {
		std::ostringstream buf;
		buf << get_name() << ":h2(" << std::hex << highest_pos2 << ")";
		results.push_back(TestResult(buf.str(), highest2, highest2, TestResult::TYPE_RAW_NORMAL, 0.01));
	}
}
void PractRand::Tests::DistFreq4::test_blocks(TestBlock *data, int numblocks) {
	blocks_tested += numblocks;
	while (numblocks > blocks_till_next) {
		data += blocks_till_next;
		numblocks -= blocks_till_next;
		for (int pos1 = 0; pos1 < 1 << POSITIONS1_L2; pos1++) {
			int bits_used = pos1 * ALIGNMENT1;
			Uint32 first = data[0].as32[bits_used >> 5] >> (bits_used & 31);
			Uint32 base_index = (pos1 << (TOTAL_INDEX_BITS - POSITIONS1_L2)) + ((first & ((1 << SIZE1) - 1)) << (TOTAL_INDEX_BITS - POSITIONS1_L2 - SIZE1));
			bits_used += SIZE1;
			if (ALIGNMENT1 % ALIGNMENT2 || SIZE1 % ALIGNMENT2) { bits_used = bits_used + ALIGNMENT2 - 1; bits_used &= 65535 ^ (ALIGNMENT2 - 1); }
			enum { ALIGNMENTS_PER_WORD = 32 / ALIGNMENT2 };
			int end_index = base_index + (1 << (TOTAL_INDEX_BITS - POSITIONS1_L2 - SIZE1));
			if (bits_used & 31) {//partial word
				Uint32 second = data[0].as32[bits_used >> 5];
				second >>= bits_used & 31;
				while (bits_used & 31) {
					counts.increment(base_index + (second & ((1 << SIZE2) - 1)));
					base_index += 1 << SIZE2;
					second >>= ALIGNMENT2;
					bits_used += ALIGNMENT2;
				}
			}
			int words_used = bits_used >> 5;
			while (base_index <= end_index - (ALIGNMENTS_PER_WORD << SIZE2)) {
				Uint32 second = data[0].as32[words_used];
				for (int i = 0; i < ALIGNMENTS_PER_WORD; i++) {
					counts.increment(base_index + (second & ((1 << SIZE2) - 1)));
					second >>= ALIGNMENT2;
					base_index += 1 << SIZE2;
				}
				words_used++;
			}
			if (base_index < end_index) {//partial word
				Uint32 second = data[0].as32[bits_used >> 5];
				while (base_index < end_index) {
					counts.increment(base_index + (second & ((1 << SIZE2) - 1)));
					second >>= ALIGNMENT2;
					base_index += 1 << SIZE2;
				}
			}
		}
		data += 1;
		numblocks -= 1;
		blocks_till_next = blocks_per - 1;
	}
	blocks_till_next -= numblocks;
}







void PractRand::Tests::TripleFreq::init(PractRand::RNGs::vRNG *known_good) {
	counts.reset_counts();
	blocks_tested = 0;
	blocks_till_next_pass = blocks_per_pass - 1;
	passes_till_next_region = PASSES_PER_REGION;
	regions_tested = 0;
	TestBaseclass::init(known_good);
}
std::string PractRand::Tests::TripleFreq::get_name() const {
	std::ostringstream buf;
	buf << "TFreq(" << passes_at_once;
	if (blocks_per_pass != 1) buf << "/" << blocks_per_pass;
	buf << ")";
	return buf.str();
}
void PractRand::Tests::TripleFreq::get_results(std::vector<TestResult> &results) {
	const Uint64 *counts_ = counts.get_array();
	enum { 
		SECTOR_SIZE = 1 << SIZE3,
		PATTERN_SIZE = 1 << (SIZE3 + SIZE2 + SIZE1),
		REGION_SIZE = 1 << REGION_INDEX_BITS, 
		TOTAL_SIZE = 1 << TOTAL_INDEX_BITS
	};
	/*
					pass through to g_test		collapse		repeat across				notes
		subtest 1	SIZE3						--				SIZE1, SIZE2, POS2, POS3	minimum count on a per-sector basis
		subtest 2	SIZE1,SIZE2,SIZE3			--				POS2,POS3					--
		subtest 3	SIZE1,SIZE2,SIZE3,POS2,POS3	--				--							requires large dataset?

		subtest 1 can be done in place easily
		subtests 2 & 3 require reordering the bits.  It could be done in the desired order at test time, but that could reduce memory locality.
			maybe it's worthwhile anyway?
				NO.  tested it, big impact on performance
			so... we just reorder them here... slowing down results reporting and using twice as much memory during results reporting
	*/
	if (!regions_tested) return;
	std::vector<Uint64> counts2;//re-ordered for better testability
	counts2.resize(TOTAL_SIZE);
	Uint64 *counts2_ = &counts2[0];
	int num_regions = regions_tested;
	if (num_regions > NUMBER_OF_REGIONS) num_regions = NUMBER_OF_REGIONS;
	int max = num_regions * REGION_SIZE;
	for (int sector_base = 0; sector_base < max; sector_base += 1 << SIZE3) {
		int new_sector_base = (sector_base & (REGION_SIZE - (1 << (SIZE3 + POSITIONS3_L2)))) >> POSITIONS3_L2;//window 1 & 2
		new_sector_base |= sector_base & (TOTAL_SIZE - REGION_SIZE);//position 2
		new_sector_base |= (sector_base & (((1 << POSITIONS3_L2) - 1) << SIZE3)) << (REGION_INDEX_BITS - POSITIONS3_L2 - SIZE3);//position 3
		//for (int i = 0; i < (1 << SIZE3); i++) counts2_[new_sector_base + i] = counts_[sector_base];//window 3
		std::memcpy(counts2_ + new_sector_base, counts_ + sector_base, sizeof(Uint64) << SIZE3);
	}
	double worst_sector_n = 0;
	int worst_sector_index = -1;
	double worst_pattern_n = 0;
	int worst_pattern_index = -1;
	for (int x = 0; x < NUMBER_OF_REGIONS; x++) {
		if (x >= regions_tested) break;
		//subtest 1
		for (int y = 0; y < REGION_SIZE >> SIZE3; y++) {
			Uint64 sum = 0;
			Uint32 sector_index = y + (x << (REGION_INDEX_BITS - SIZE3));
			const Uint64 *sector = counts2_ + (sector_index << SIZE3);
			for (int z = 0; z < (1 << SIZE3); z++) sum += sector[z];
			if (sum < (10 << SIZE3)) continue;
			double chisquared = g_test_flat(1 << SIZE3, sector);
			double n = math_chisquared_to_normal(chisquared, (1 << SIZE3) - 1);
			if (n > worst_sector_n) {
				worst_sector_n = n;
				worst_sector_index = sector_index;
			}
		}
		if (regions_tested < NUMBER_OF_REGIONS * 16) continue;
		//subtest 2
		for (int y = 0; y < (1 << POSITIONS3_L2); y++) {
			int pattern_index = y + (x << POSITIONS3_L2);
			double chisquared = g_test_flat(PATTERN_SIZE, counts2_ + (pattern_index * PATTERN_SIZE));
			double n = math_chisquared_to_normal(chisquared, PATTERN_SIZE - 1);
			if (n > worst_pattern_n) {
				worst_pattern_n = n;
				worst_pattern_index = pattern_index;
			}
		}
	}
	if (worst_sector_index != -1) {
		std::ostringstream buf;
		buf << get_name() << ":sec(" << std::hex << worst_sector_index << ")";
		results.push_back(TestResult(buf.str(), worst_sector_n, worst_sector_n, TestResult::TYPE_RAW_NORMAL, 0.01));
	}
	if (worst_pattern_index != -1) {
		std::ostringstream buf;
		buf << get_name() << ":pat(" << std::hex << worst_pattern_index << ")";
		results.push_back(TestResult(buf.str(), worst_pattern_n, worst_pattern_n, TestResult::TYPE_RAW_NORMAL, 0.01));
	}
	if (regions_tested >= NUMBER_OF_REGIONS * 64) {
		//subtest 3
		double chisquared = g_test_flat(TOTAL_SIZE, counts2_);
		//double n = math_chisquared_to_normal(chisquared, TOTAL_SIZE - 1);
		double n = math_chisquared_to_normal(chisquared, TOTAL_SIZE - NUMBER_OF_REGIONS);
		std::ostringstream buf;
		buf << get_name() << ":all";
		results.push_back(TestResult(buf.str(), n, n, TestResult::TYPE_RAW_NORMAL, 0.01));
	}
}
static Uint64 read_64_misaligned(const Uint64 *source, int bit_pos) {
	int i = bit_pos >> 6;
	Uint64 rv = source[i];
	int b = bit_pos & 63;
	if (b) {
		rv >>= b;
		rv |= source[i + 1] << (64 - b);
	}
	return rv;
}
void PractRand::Tests::TripleFreq::test_blocks(TestBlock *data, int numblocks) {
	blocks_tested += numblocks;
	while (numblocks > blocks_till_next_pass) {
		data += blocks_till_next_pass;
		numblocks -= blocks_till_next_pass;
		for (int pos1 = 0; pos1 < passes_at_once; pos1++) {
			Uint64 window1 = read_64_misaligned(data[0].as64, pos1 * BASE_ALIGNMENT);
			
			int p2i = regions_tested & ((1 << POSITIONS2_L2) - 1);
			Uint64 window2 = read_64_misaligned(data[0].as64, pos1 * BASE_ALIGNMENT + SIZE1 + p2i * WINDOW_ALIGNMENT);
			
			Uint32 base_index = p2i;
			base_index <<= SIZE1; base_index |= window1 & ((1 << SIZE1) - 1);
			base_index <<= SIZE2; base_index |= window2 & ((1 << SIZE2) - 1);
			base_index <<= SIZE3 + POSITIONS3_L2;
			int position = pos1 * BASE_ALIGNMENT + SIZE1 + p2i * WINDOW_ALIGNMENT + SIZE2;
			enum { N = (64 + WINDOW_ALIGNMENT - SIZE3) / WINDOW_ALIGNMENT };
			for (int p3in = 0; p3in < (1 << POSITIONS3_L2) / N; p3in++) {
				Uint64 window3 = read_64_misaligned(data[0].as64, position);
				for (int x = 0; x < N; x++) {
					counts.increment(base_index + (window3 & ((1 << SIZE3) - 1)));
					base_index += 1 << SIZE3;
					window3 >>= WINDOW_ALIGNMENT;
				}
				position += WINDOW_ALIGNMENT * N;
			}
			if ((1 << POSITIONS3_L2) % N) {//the left-overs
				Uint64 window3 = read_64_misaligned(data[0].as64, position);
				for (int x = 0; x < ((1 << POSITIONS3_L2) % N); x++) {
					counts.increment(base_index + (window3 & ((1 << SIZE3) - 1)));
					base_index += 1 << SIZE3;
					window3 >>= WINDOW_ALIGNMENT;
				}
			}
			if (--passes_till_next_region <= 0) {
				regions_tested++;
				passes_till_next_region = PASSES_PER_REGION;
			}
		}

		data += 1;
		numblocks -= 1;
		blocks_till_next_pass = blocks_per_pass - 1;
	}
	blocks_till_next_pass -= numblocks;
}


void PractRand::Tests::TripleMirrorFreq::init(PractRand::RNGs::vRNG *known_good) {
	counts.reset_counts();
	blocks_tested = 0;
	blocks_till_next_pass = blocks_per_pass - 1;
	TestBaseclass::init(known_good);
}
std::string PractRand::Tests::TripleMirrorFreq::get_name() const {
	std::ostringstream buf;
	buf << "TMF(" << passes_at_once;
	if (blocks_per_pass != 1) buf << "/" << blocks_per_pass;
	buf << ")";
	return buf.str();
}
void PractRand::Tests::TripleMirrorFreq::get_results(std::vector<TestResult> &results) {
	const Uint64 *counts_ = counts.get_array();
	int repeat_blocks = get_blocks_to_repeat();
	if (blocks_tested < repeat_blocks) return;
	Sint64 passes = ((blocks_tested - repeat_blocks) / blocks_per_pass) * passes_at_once;
	double E = passes * std::pow(0.5, SIZE1 + SIZE2 + SIZE3);
	if (E < 10) return;
	int worst_position = -1;
	double worst_n = 0, overall_cs1 = 0, overall_n2 = 0;
	int cat = 1 << (SIZE1 + SIZE2 + SIZE3);
	for (int pos = 0; pos < (1 << POSITIONS_L2); pos++) {
		double chisquared = g_test_flat(cat, &counts_[pos << (SIZE1 + SIZE2 + SIZE3)]);
		double n = math_chisquared_to_normal(chisquared, cat);
		if (std::fabs(n) >= std::fabs(worst_n)) {
			worst_n = n;
			worst_position = pos;
		}
		overall_cs1 += chisquared;
		overall_n2 += n * n;
	}
	overall_n2 = (std::sqrt(overall_n2 / (1 << POSITIONS_L2)) - 1.46) * std::pow(2.0, 0.5 * POSITIONS_L2);
	std::ostringstream buf;
	buf << get_name() << ":w(" << worst_position << ")";
	results.push_back(TestResult(buf.str(), worst_n, worst_n, TestResult::TYPE_RAW_NORMAL, 0.01));
	if (E < 80) return;
	// none of these are working, and I don't know why
	double overall_n1 = math_chisquared_to_normal(overall_cs1, (cat - 1) << POSITIONS_L2);
	buf.str("");
	buf << get_name() << ":all1";
	results.push_back(TestResult(buf.str(), overall_n1, overall_n1, TestResult::TYPE_RAW_NORMAL, 0.01));
	buf.str("");
	buf << get_name() << ":all2";
	results.push_back(TestResult(buf.str(), overall_n2, overall_n2, TestResult::TYPE_RAW_NORMAL, 0.01));
}
int PractRand::Tests::TripleMirrorFreq::get_blocks_to_repeat() const {
	enum { POSITIONS = 1 << POSITIONS_L2 };
	//int bytes_needed = ((1 << POSITIONS_L2) + passes_at_once) * SAMPLE_ALIGN + TestBlock::SIZE * 2 * BLOCK_STEP;
	int bytes_needed = TestBlock::SIZE * 2 * BLOCK_STEP + (POSITIONS << POSITION_ALIGN_L2) + (passes_at_once << BASE_ALIGN_L2);// if BLOCK_STEP and 0-based positions are used
	return (bytes_needed + TestBlock::SIZE - 1) >> TestBlock::SIZE_L2;
}
void PractRand::Tests::TripleMirrorFreq::test_blocks(TestBlock *data, int numblocks) {
	while (blocks_tested < get_blocks_to_repeat()) {
		if (!numblocks) return;
		data += 1;
		numblocks -= 1;
		blocks_tested += 1;
	}
	blocks_tested += numblocks;
	while (numblocks > blocks_till_next_pass) {
		data += blocks_till_next_pass;
		numblocks -= blocks_till_next_pass;
		enum { BASE_ALIGN = 1 << BASE_ALIGN_L2, POSITION_ALIGN = 1 << POSITION_ALIGN_L2, POSITIONS = 1 << POSITIONS_L2 };
		for (long pos_code = 0; pos_code < POSITIONS; pos_code ++) {//0-based if BLOCK_STEP is used
			unsigned long base_index = pos_code << (SIZE1 + SIZE2 + SIZE3);//0-based if BLOCK_STEP is used
			long ofs = BLOCK_STEP * TestBlock::SIZE - pos_code * POSITION_ALIGN;
			for (long base_pos = -passes_at_once * BASE_ALIGN; base_pos < 0; base_pos += BASE_ALIGN) {
				unsigned long index = base_index;
				//Uint8 a = data[-BLOCK_STEP].as8[base_pos + 0], b = data[0].as8[base_pos + pos], c = data[-2 * BLOCK_STEP].as8[base_pos - pos];
				Uint8 a = data[0].as8[base_pos - 0], b = data[0].as8[base_pos - ofs], c = data[0].as8[base_pos - ofs - ofs];// if BLOCK_STEP is used
				//b -= a; a -= c; // nope.  these hurt more than they help, typically
				index |= ((unsigned long)(a & ((1 << SIZE1) - 1))) << (SIZE2 + SIZE3);
				index |= ((unsigned long)(b & ((1 << SIZE2) - 1))) << (SIZE3);
				index |= ((unsigned long)(c & ((1 << SIZE3) - 1))) << (0);
				counts.increment(index);
			}
		}

		data += 1;
		numblocks -= 1;
		blocks_till_next_pass = blocks_per_pass - 1;
	}
	blocks_till_next_pass -= numblocks;
}





void PractRand::Tests::TripleMirrorFreqN::init(PractRand::RNGs::vRNG *known_good) {
	counts.reset_counts();
	blocks_tested = 0;
	blocks_till_next_pass = 0;// blocks_per_pass - 1;
	for (int i = 0; i < MAX_LEVELS; i++) level_state[i] = 0;
	for (int i = 0; i < MAX_LEVELS; i++) level_polarity[i] = 0;
	if ((ALIGN << POSITIONS_L2) > 64) issue_error("TripleMirrorFreqN::init - bad configuration");
	TestBaseclass::init(known_good);
}
std::string PractRand::Tests::TripleMirrorFreqN::get_name() const {
	std::ostringstream buf;
	buf << "TMFn(";
	if (blocks_per_pass != 1) buf << minimum_level;
	buf << ")";
	return buf.str();
}
void PractRand::Tests::TripleMirrorFreqN::get_results(std::vector<TestResult> &results) {
	const Uint64 *counts_ = counts.get_array();
	for (int level = minimum_level; level < MAX_LEVELS; level++) {
		if ((blocks_tested >> level) < 12 << (SIZE1 + SIZE2 + SIZE3)) return;

		double all_cs = g_test_flat(1 << TOTAL_INDEX_BITS, &counts_[level << TOTAL_INDEX_BITS]);
		double all_n = math_chisquared_to_normal(all_cs, (1 << TOTAL_INDEX_BITS) - (1 << POSITIONS_L2));

		std::ostringstream buf;
		std::string level_name;
		buf << "TMFn(" << minimum_level << "+" << (level - minimum_level) << ")";
		level_name = buf.str();
		buf.str("");
		buf << level_name << ":wl";
		results.push_back(TestResult(buf.str(), all_n, all_n, TestResult::TYPE_RAW_NORMAL, 0.01));
	}
/*	Sint64 passes = ((blocks_tested - repeat_blocks) / blocks_per_pass) * passes_at_once;
	double E = passes * std::pow(0.5, SIZE1 + SIZE2 + SIZE3);
	if (E < 10) return;
	int worst_position = -1;
	double worst_n = 0, overall_cs1 = 0, overall_n2 = 0;
	int cat = 1 << (SIZE1 + SIZE2 + SIZE3);
	for (int pos = 0; pos < (1 << POSITIONS_L2); pos++) {
		double chisquared = g_test_flat(cat, &counts_[pos << (SIZE1 + SIZE2 + SIZE3)]);
		double n = math_chisquared_to_normal(chisquared, cat);
		if (std::fabs(n) >= std::fabs(worst_n)) {
			worst_n = n;
			worst_position = pos;
		}
		overall_cs1 += chisquared;
		overall_n2 += n * n;
	}
	overall_n2 = (std::sqrt(overall_n2 / (1 << POSITIONS_L2)) - 1.46) * std::pow(2.0, 0.5 * POSITIONS_L2);
	std::ostringstream buf;
	buf << get_name() << ":w(" << worst_position << ")";
	results.push_back(TestResult(buf.str(), worst_n, worst_n, TestResult::TYPE_RAW_NORMAL, 0.01));
	if (E < 80) return;
	// none of these are working, and I don't know why
	double overall_n1 = math_chisquared_to_normal(overall_cs1, (cat - 1) << POSITIONS_L2);
	buf.str("");
	buf << get_name() << ":all1";
	results.push_back(TestResult(buf.str(), overall_n1, overall_n1, TestResult::TYPE_RAW_NORMAL, 0.01));
	buf.str("");
	buf << get_name() << ":all2";
	results.push_back(TestResult(buf.str(), overall_n2, overall_n2, TestResult::TYPE_RAW_NORMAL, 0.01));
	*/
}
void PractRand::Tests::TripleMirrorFreqN::test_blocks(TestBlock *data, int numblocks) {
	while (numblocks) {
		int skip_blocks = blocks_till_next_pass;
		if (skip_blocks > numblocks) skip_blocks = numblocks;
		if (skip_blocks) {
			numblocks -= skip_blocks;
			data += skip_blocks;
			blocks_tested += skip_blocks;
			blocks_till_next_pass -= skip_blocks;
		}
		if (!numblocks) return;

		for (int level = minimum_level; level < MAX_LEVELS; level++) {
			int ostate = level_state[level]++;
			if (ostate == 0) {
				saved_blocks[level] = data[0].as64[0];
			}
			else if (ostate == 1) {
				saved_blocks[level + MAX_LEVELS] = data[0].as64[0];
			}
			else {
				Uint64 old0, old1;
				if (ostate == 2) {
					old0 = saved_blocks[level];
					old1 = saved_blocks[level + MAX_LEVELS];
					saved_blocks[level] = data[0].as64[0];
				}
				else if (ostate == 3) {
					old0 = saved_blocks[level + MAX_LEVELS];
					old1 = saved_blocks[level];
					saved_blocks[level + MAX_LEVELS] = data[0].as64[0];
					level_state[level] = 2;
				}
				else {
					issue_error();
					old0 = 0;
					old1 = 0;
				}
				int base_index = level << TOTAL_INDEX_BITS;
				base_index |= old0 & ((1 << SIZE1) - 1);
				for (int position = 0; position < (1 << POSITIONS_L2); position++) {
					int index = base_index;
					index |= position << (SIZE1 + SIZE2 + SIZE3);
					int shift1 = position << ALIGN_L2;
					index |= ((old1 >> shift1) & ((1 << SIZE2) - 1)) << SIZE1;
					// this next part REQUIRES that SIZE3 be less than or equal to ALIGN, and that ALIGN be a power of 2
					int shift2 = shift1 << 1;
					index |= ((data[0].as64[shift2 >> 6] >> (shift2 & 63)) & ((1 << SIZE3) - 1)) << (SIZE1+SIZE2);
					counts.increment(index);
				}
			}
			level_polarity[level] ^= 1;
			if (!level_polarity[level]) break;
		}
		blocks_till_next_pass = blocks_per_pass;
	}
}






void PractRand::Tests::TripleMirrorCoup::init(PractRand::RNGs::vRNG *known_good) {
	counts.reset_counts();
	blocks_tested = 0;
	blocks_till_next_pass = blocks_per_pass - 1;
	TestBaseclass::init(known_good);
	if (SIZE1 + SIZE2 + SIZE3 < 6) issue_error("TrippleMirrorCoup - we have a problem");
	for (int i = 0; i < 1 << (TOTAL_INDEX_BITS >> 6); i++) coup_masks[i] = 0;
	for (int i = 0; i < COUP_BUCKETS; i++) coup_counts[i] = 0;
	pass_number = 0;
	for (int i = 0; i < (1 << POSITIONS_L2); i++) coup_last[i] = 0;
	coup_collected = 0;
}
std::string PractRand::Tests::TripleMirrorCoup::get_name() const {
	std::ostringstream buf;
	buf << "TMC(" << passes_at_once;
	if (blocks_per_pass != 1) buf << "/" << blocks_per_pass;
	buf << ")";
	return buf.str();
}
void PractRand::Tests::TripleMirrorCoup::get_results(std::vector<TestResult> &results) {
	const Uint64 *counts_ = counts.get_array();
	int repeat_blocks = get_blocks_to_repeat();
	if (blocks_tested < repeat_blocks) return;
	Sint64 passes = ((blocks_tested - repeat_blocks) / blocks_per_pass) * passes_at_once;
	double E = passes * std::pow(0.5, SIZE1 + SIZE2 + SIZE3);
	if (E < 10) return;
	int worst_position = -1;
	double worst_n = 0, overall_cs1 = 0, overall_n2 = 0;
	int cat = 1 << (SIZE1 + SIZE2 + SIZE3);
	for (int pos = 0; pos < (1 << POSITIONS_L2); pos++) {
		double chisquared = g_test_flat(cat, &counts_[pos << (SIZE1 + SIZE2 + SIZE3)]);
		double n = math_chisquared_to_normal(chisquared, cat);
		if (std::fabs(n) >= std::fabs(worst_n)) {
			worst_n = n;
			worst_position = pos;
		}
		overall_cs1 += chisquared;
		overall_n2 += n * n;
	}
	overall_n2 = (std::sqrt(overall_n2 / (1 << POSITIONS_L2)) - 1.46) * std::pow(2.0, 0.5 * POSITIONS_L2);
	std::ostringstream buf;
	buf << get_name() << ":w(" << worst_position << ")";
	results.push_back(TestResult(buf.str(), worst_n, worst_n, TestResult::TYPE_RAW_NORMAL, 0.01));
	if (E < 80) return;
	// none of these are working, and I don't know why
	double overall_n1 = math_chisquared_to_normal(overall_cs1, (cat - 1) << POSITIONS_L2);
	buf.str("");
	buf << get_name() << ":all1";
	results.push_back(TestResult(buf.str(), overall_n1, overall_n1, TestResult::TYPE_RAW_NORMAL, 0.01));
	buf.str("");
	buf << get_name() << ":all2";
	results.push_back(TestResult(buf.str(), overall_n2, overall_n2, TestResult::TYPE_RAW_NORMAL, 0.01));
}
int PractRand::Tests::TripleMirrorCoup::get_blocks_to_repeat() const {
	enum { POSITIONS = 1 << POSITIONS_L2 };
	//int bytes_needed = ((1 << POSITIONS_L2) + passes_at_once) * SAMPLE_ALIGN + TestBlock::SIZE * 2 * BLOCK_STEP;
	int bytes_needed = TestBlock::SIZE * 2 * BLOCK_STEP + (POSITIONS << POSITION_ALIGN_L2) + (passes_at_once << BASE_ALIGN_L2);// if BLOCK_STEP and 0-based positions are used
	return (bytes_needed + TestBlock::SIZE - 1) >> TestBlock::SIZE_L2;
}
void PractRand::Tests::TripleMirrorCoup::test_blocks(TestBlock *data, int numblocks) {
	while (blocks_tested < get_blocks_to_repeat()) {
		if (!numblocks) return;
		data += 1;
		numblocks -= 1;
		blocks_tested += 1;
	}
	blocks_tested += numblocks;
	while (numblocks > blocks_till_next_pass) {
		data += blocks_till_next_pass;
		numblocks -= blocks_till_next_pass;
		pass_number++;
		enum { BASE_ALIGN = 1 << BASE_ALIGN_L2, POSITION_ALIGN = 1 << POSITION_ALIGN_L2, POSITIONS = 1 << POSITIONS_L2 };
		for (long pos_code = 0; pos_code < POSITIONS; pos_code++) {//0-based if BLOCK_STEP is used
			unsigned long base_index = pos_code << (SIZE1 + SIZE2 + SIZE3);//0-based if BLOCK_STEP is used
			long ofs = BLOCK_STEP * TestBlock::SIZE - pos_code * POSITION_ALIGN;
			for (long base_pos = -passes_at_once * BASE_ALIGN; base_pos < 0; base_pos += BASE_ALIGN) {
				unsigned long index = base_index;
				//Uint8 a = data[-BLOCK_STEP].as8[base_pos + 0], b = data[0].as8[base_pos + pos], c = data[-2 * BLOCK_STEP].as8[base_pos - pos];
				Uint8 a = data->as8[base_pos - 0], b = data->as8[base_pos - ofs], c = data->as8[base_pos - ofs - ofs];// if BLOCK_STEP is used
				//b -= a; a -= c; // nope.  these hurt more than they help, typically
				index |= ((unsigned long)(a & ((1 << SIZE1) - 1))) << (SIZE2 + SIZE3);
				index |= ((unsigned long)(b & ((1 << SIZE2) - 1))) << (SIZE3);
				index |= ((unsigned long)(c & ((1 << SIZE3) - 1))) << (0);
				counts.increment(index);
				if (0 == ~(coup_masks[index >> 6] |= (index & 63))) {
					//we *might* have completed a coupon set here
					bool completion = true;
					unsigned long region_end = (base_index + (1 << (SIZE1 + SIZE2 + SIZE3))) >> 6;
					for (unsigned long x = base_index >> 6; x < region_end; x++) if (~coup_masks[x]) completion = false;
					if (completion) {
						for (unsigned long x = base_index >> 6; x < region_end; x++) coup_masks[x] = 0;
					}
				}
			}
		}

		data += 1;
		numblocks -= 1;
		blocks_till_next_pass = blocks_per_pass - 1;
	}
	blocks_till_next_pass -= numblocks;
}




void PractRand::Tests::LPerm16::init(PractRand::RNGs::vRNG *known_good) {
	lperm_counts.reset_counts();
	blocks_tested = 0;
	blocks_till_next_pass = blocks_per_pass - 1;
	TestBaseclass::init(known_good);
}
std::string PractRand::Tests::LPerm16::get_name() const {
	std::ostringstream buf;
	buf << "LPerm16(" << word_bits;
	if (passes_at_once > 1 || blocks_per_pass > 1) buf << ",";
	if (passes_at_once > 1) buf << passes_at_once;
	if (blocks_per_pass > 1) buf << "/" << blocks_per_pass;
	buf << ")";
	return buf.str();
}
static int _lperm16_8(const Uint8 data[16]) {
	//single words
	int bit0 = (data[ 0] < data[ 1]), bit1 = (data[ 2] < data[ 3]), bit3 = (data[ 4] < data[ 5]), bit4 = (data[ 6] < data[ 7]);
	int bit7 = (data[ 8] < data[ 9]), bit8 = (data[10] < data[11]), bit10 = (data[12] < data[13]), bit11 = (data[14] < data[15]);
	//double words
	int bit2  = (data[ 1] < data[ 3]), bit5  = (data[ 5] < data[ 7]), bit9 = (data[ 9] < data[11]), bit12 = (data[13] < data[15]);
	//quadruple words & oct words
	int bit6 = (data[ 3] < data[ 7]), bit13 = (data[11] < data[15]), bit14 = (data[7] < data[15]);
	return bit0 | (bit1 << 1) | (bit2 << 2) | (bit3 << 3) | (bit4 << 4) | (bit5 << 5) | (bit6 << 6) | (bit7 << 7) | (bit8 << 8) | (bit9 << 9) | (bit10 << 10) | (bit11 << 11) | (bit12 << 12) | (bit13 << 13) | (bit14 << 14);
}
static int _lperm16_16(const Uint16 data[16]) {
	//single words
	int bit0 = (data[ 0] < data[ 1]), bit1 = (data[ 2] < data[ 3]), bit3 = (data[ 4] < data[ 5]), bit4 = (data[ 6] < data[ 7]);
	int bit7 = (data[ 8] < data[ 9]), bit8 = (data[10] < data[11]), bit10 = (data[12] < data[13]), bit11 = (data[14] < data[15]);
	//double words
	int bit2  = (data[ 1] < data[ 3]), bit5  = (data[ 5] < data[ 7]), bit9 = (data[ 9] < data[11]), bit12 = (data[13] < data[15]);
	//quadruple words & oct words
	int bit6 = (data[ 3] < data[ 7]), bit13 = (data[11] < data[15]), bit14 = (data[7] < data[15]);
	return bit0 | (bit1 << 1) | (bit2 << 2) | (bit3 << 3) | (bit4 << 4) | (bit5 << 5) | (bit6 << 6) | (bit7 << 7) | (bit8 << 8) | (bit9 << 9) | (bit10 << 10) | (bit11 << 11) | (bit12 << 12) | (bit13 << 13) | (bit14 << 14);
}
static int _lperm16_32(const Uint32 data[16]) {
	//single words
	int bit0 = (data[ 0] < data[ 1]), bit1 = (data[ 2] < data[ 3]), bit3 = (data[ 4] < data[ 5]), bit4 = (data[ 6] < data[ 7]);
	int bit7 = (data[ 8] < data[ 9]), bit8 = (data[10] < data[11]), bit10 = (data[12] < data[13]), bit11 = (data[14] < data[15]);
	//double words
	int bit2  = (data[ 1] < data[ 3]), bit5  = (data[ 5] < data[ 7]), bit9 = (data[ 9] < data[11]), bit12 = (data[13] < data[15]);
	//quadruple words & oct words
	int bit6 = (data[ 3] < data[ 7]), bit13 = (data[11] < data[15]), bit14 = (data[7] < data[15]);
	return bit0 | (bit1 << 1) | (bit2 << 2) | (bit3 << 3) | (bit4 << 4) | (bit5 << 5) | (bit6 << 6) | (bit7 << 7) | (bit8 << 8) | (bit9 << 9) | (bit10 << 10) | (bit11 << 11) | (bit12 << 12) | (bit13 << 13) | (bit14 << 14);
}
static int _lperm16_64(const Uint64 data[16]) {
	//single words
	int bit0 = (data[ 0] < data[ 1]), bit1 = (data[ 2] < data[ 3]), bit3 = (data[ 4] < data[ 5]), bit4 = (data[ 6] < data[ 7]);
	int bit7 = (data[ 8] < data[ 9]), bit8 = (data[10] < data[11]), bit10 = (data[12] < data[13]), bit11 = (data[14] < data[15]);
	//double words
	int bit2  = (data[ 1] < data[ 3]), bit5  = (data[ 5] < data[ 7]), bit9 = (data[ 9] < data[11]), bit12 = (data[13] < data[15]);
	//quadruple words & oct words
	int bit6 = (data[ 3] < data[ 7]), bit13 = (data[11] < data[15]), bit14 = (data[7] < data[15]);
	return bit0 | (bit1 << 1) | (bit2 << 2) | (bit3 << 3) | (bit4 << 4) | (bit5 << 5) | (bit6 << 6) | (bit7 << 7) | (bit8 << 8) | (bit9 << 9) | (bit10 << 10) | (bit11 << 11) | (bit12 << 12) | (bit13 << 13) | (bit14 << 14);
}
static int _lperm8_8(const Uint8 data[8]) {
	//single words
	int bit0 = (data[0] < data[1]), bit1 = (data[2] < data[3]), bit3 = (data[4] < data[5]), bit4 = (data[6] < data[7]);
	//double words
	int bit2 = (data[1] < data[3]), bit5 = (data[5] < data[7]);
	//quadruple words & oct words
	int bit6 = (data[3] < data[7]);
	return bit0 | (bit1 << 1) | (bit2 << 2) | (bit3 << 3) | (bit4 << 4) | (bit5 << 5) | (bit6 << 6);
}
void PractRand::Tests::LPerm16::get_results(std::vector<TestResult> &results) {
	int perms_per_block = !passes_at_once ? (8 * TestBlock::SIZE / word_bits / 16) : passes_at_once;
	if (blocks_tested * perms_per_block / (blocks_per_pass ? blocks_per_pass : 1) < LPERM_BUCKETS * 32) return;
	const int fact4 = 24;
	const int fact8 = 40320;
	//double lperm4_chances[8] = { 2 / 24., 4 / 24., 2 / 24., 4 / 24., 4 / 24., 2 / 24., 4 / 24., 2 / 24. };
	double lperm4_chances[8] = { 3 / 24., 5 / 24., 1 / 24., 3 / 24., 3 / 24., 1 / 24., 5 / 24., 3 / 24. };
	int lperm4_greaterthan[8] = { 0, 0, 1, 1, 1, 2, 2, 3 };
	int lperm4_lessthan[8] = { 3, 2, 2, 1, 1, 1, 0, 0 };
	int lperm4_incomparable[8] = { 0, 1, 0, 1, 1, 0, 1, 0 };
	double lperm8_chances[128];
	int lperm8_greaterthan[128];
	int lperm8_lessthan[128];
	int lperm8_incomparable[128];
	const double lperm16_ratio[LPERM_BUCKETS / 2] = {//from 1 petabyte of hc256 (seed=0x5de6fa19):
		0.50003673, 0.54964384, 0.59699571, 0.62975592, 0.61430835, 0.64362826, 0.65492433, 0.66203379, //    0-    7
		0.55929909, 0.61887826, 0.67023886, 0.71175169, 0.69277723, 0.72800420, 0.74475900, 0.75474994, //    8-   15
		0.76672578, 0.81303166, 0.84287851, 0.87317403, 0.86025155, 0.88318222, 0.89561472, 0.90238026, //   16-   23
		0.82005262, 0.86693340, 0.89244648, 0.92198983, 0.91027262, 0.93026958, 0.94323935, 0.94931757, //   24-   31
		0.78575513, 0.83364011, 0.86254753, 0.89400431, 0.88097009, 0.90371114, 0.91755396, 0.92457768, //   32-   39
		0.89999686, 0.93014751, 0.94344012, 0.96154733, 0.95486285, 0.96594631, 0.97374015, 0.97706186, //   40-   47
		0.91420083, 0.94357850, 0.95526494, 0.97237443, 0.96647448, 0.97602075, 0.98361379, 0.98632569, //   48-   55
		0.96150139, 0.97731262, 0.98208122, 0.99031430, 0.98783217, 0.99168431, 0.99507128, 0.99603861, //   56-   63
		0.83334451, 0.85309763, 0.92223448, 0.94000808, 0.92857594, 0.96666018, 0.97140476, 0.98718621, //   64-   71
		0.89198597, 0.90842706, 0.95456703, 0.96755369, 0.95951481, 0.98281718, 0.98609171, 0.99434811, //   72-   79
		0.94793381, 0.95611191, 0.97533466, 0.98252472, 0.97818226, 0.98991274, 0.99193717, 0.99650169, //   80-   87
		0.97617128, 0.98064967, 0.98946558, 0.99317484, 0.99104753, 0.99618083, 0.99720771, 0.99890210, //   88-   95
		0.96286684, 0.96942135, 0.98343535, 0.98894767, 0.98571369, 0.99386986, 0.99538793, 0.99818112, //   96-  103
		0.98811929, 0.99023229, 0.99412764, 0.99616173, 0.99501388, 0.99770212, 0.99832969, 0.99929862, //  104-  111
		0.99449678, 0.99558824, 0.99741608, 0.99844609, 0.99788984, 0.99910269, 0.99941783, 0.99978430, //  112-  119
		0.99850946, 0.99877696, 0.99920395, 0.99951407, 0.99935050, 0.99969648, 0.99980677, 0.99992227, //  120-  127
		0.45042098, 0.50003672, 0.54737718, 0.58179149, 0.56556635, 0.59635681, 0.60867794, 0.61641398, //  128-  135
		0.50966471, 0.57066189, 0.62322925, 0.66805727, 0.64755445, 0.68557419, 0.70438123, 0.71557236, //  136-  143
		0.71710123, 0.76876770, 0.80197115, 0.83785319, 0.82255770, 0.84969410, 0.86509920, 0.87347104, //  144-  151
		0.77651517, 0.83066211, 0.86009198, 0.89656594, 0.88210330, 0.90679705, 0.92362408, 0.93150642, //  152-  159
		0.73832448, 0.79238375, 0.82502396, 0.86291681, 0.84722780, 0.87459503, 0.89205645, 0.90092582, //  160-  167
		0.86570934, 0.90329440, 0.91989018, 0.94413015, 0.93518031, 0.95003958, 0.96109857, 0.96578759, //  168-  175
		0.88339076, 0.92075231, 0.93561855, 0.95910640, 0.95100429, 0.96412217, 0.97519880, 0.97915283, //  176-  183
		0.94249492, 0.96464491, 0.97129191, 0.98391897, 0.98013678, 0.98601989, 0.99156399, 0.99314594, //  184-  191
		0.79276320, 0.81518659, 0.89367194, 0.91608406, 0.90167802, 0.94967031, 0.95631669, 0.97852577, //  192-  199
		0.86146024, 0.88087069, 0.93532314, 0.95253078, 0.94189031, 0.97272656, 0.97762118, 0.98995057, //  200-  207
		0.92702145, 0.93748321, 0.96209300, 0.97233166, 0.96615185, 0.98288991, 0.98609592, 0.99338188, //  208-  215
		0.96498593, 0.97102239, 0.98290345, 0.98853307, 0.98530636, 0.99309076, 0.99484817, 0.99776037, //  216-  223
		0.94709375, 0.95568089, 0.97402457, 0.98211402, 0.97737347, 0.98931702, 0.99182946, 0.99644976, //  224-  231
		0.98104113, 0.98411856, 0.98977308, 0.99307369, 0.99121757, 0.99557046, 0.99671460, 0.99849351, //  232-  239
		0.99100250, 0.99263455, 0.99537231, 0.99710165, 0.99616817, 0.99820900, 0.99881379, 0.99951429, //  240-  247
		0.99725976, 0.99770484, 0.99841379, 0.99898948, 0.99868626, 0.99932811, 0.99956211, 0.99980616, //  248-  255
		0.40304063, 0.45267368, 0.50003576, 0.53599494, 0.51904020, 0.55123842, 0.56452091, 0.57286482, //  256-  263
		0.46230575, 0.52463506, 0.57836422, 0.62634158, 0.60440312, 0.64510124, 0.66582849, 0.67817056, //  264-  271
		0.66976199, 0.72648651, 0.76295480, 0.80414311, 0.78655104, 0.81771384, 0.83598522, 0.84588280, //  272-  279
		0.73495657, 0.79603408, 0.82921688, 0.87229334, 0.85519382, 0.88438483, 0.90488819, 0.91449282, //  280-  287
		0.69303328, 0.75301886, 0.78921061, 0.83323327, 0.81499712, 0.84679596, 0.86771576, 0.87833637, //  288-  295
		0.83292221, 0.87765661, 0.89734543, 0.92750557, 0.91640460, 0.93485273, 0.94901762, 0.95505593, //  296-  303
		0.85395152, 0.89892883, 0.91688554, 0.94646055, 0.93624098, 0.95275747, 0.96715966, 0.97230962, //  304-  311
		0.92422758, 0.95256590, 0.96103708, 0.97781066, 0.97278392, 0.98060568, 0.98821666, 0.99039291, //  312-  319
		0.75403442, 0.77900413, 0.86641155, 0.89325209, 0.87599554, 0.93345641, 0.94192817, 0.97025088, //  320-  327
		0.83231783, 0.85456515, 0.91695844, 0.93819089, 0.92506786, 0.96308781, 0.96954191, 0.98575743, //  328-  335
		0.90706720, 0.91970264, 0.94952202, 0.96262373, 0.95467999, 0.97617119, 0.98053072, 0.99039294, //  336-  343
		0.95430821, 0.96183089, 0.97664165, 0.98410139, 0.97983014, 0.99013953, 0.99260049, 0.99667512, //  344-  351
		0.93204526, 0.94256767, 0.96503594, 0.97558024, 0.96941486, 0.98497577, 0.98843809, 0.99478830, //  352-  359
		0.97430570, 0.97829031, 0.98561871, 0.99011938, 0.98758983, 0.99355520, 0.99516865, 0.99772259, //  360-  367
		0.98766700, 0.98981346, 0.99341868, 0.99582068, 0.99452555, 0.99735740, 0.99823653, 0.99925596, //  368-  375
		0.99606766, 0.99668136, 0.99765865, 0.99848625, 0.99805100, 0.99897592, 0.99932841, 0.99969590, //  376-  383
		0.37030652, 0.41825197, 0.46403611, 0.50002646, 0.48305459, 0.51524535, 0.52892453, 0.53752037, //  384-  391
		0.42758381, 0.48883944, 0.54163624, 0.59072484, 0.56827864, 0.60987759, 0.63181851, 0.64488201, //  392-  399
		0.62803966, 0.68681098, 0.72457648, 0.76921998, 0.75016376, 0.78399892, 0.80461558, 0.81583128, //  400-  407
		0.69562838, 0.76059481, 0.79592742, 0.84443978, 0.82519889, 0.85806393, 0.88229280, 0.89366389, //  408-  415
		0.65220955, 0.71497830, 0.75283372, 0.80133635, 0.78125027, 0.81630419, 0.84039802, 0.85263787, //  416-  423
		0.79691747, 0.84719461, 0.86936161, 0.90538984, 0.89205445, 0.91414862, 0.93206114, 0.93965673, //  424-  431
		0.82060421, 0.87204773, 0.89252256, 0.92875970, 0.91626046, 0.93647780, 0.95523589, 0.96192658, //  432-  439
		0.89955844, 0.93455980, 0.94505560, 0.96748951, 0.96076267, 0.97121987, 0.98213693, 0.98525455, //  440-  447
		0.71673803, 0.74300232, 0.83493262, 0.86532502, 0.84576999, 0.91088595, 0.92142264, 0.95642755, //  448-  455
		0.80145542, 0.82565652, 0.89350756, 0.91866560, 0.90310858, 0.94819350, 0.95663592, 0.97786777, //  456-  463
		0.88234891, 0.89689069, 0.93116266, 0.94766061, 0.93770668, 0.96462977, 0.97065637, 0.98431142, //  464-  471
		0.93943360, 0.94853341, 0.96644634, 0.97636675, 0.97067878, 0.98442113, 0.98807317, 0.99413458, //  472-  479
		0.91250998, 0.92491900, 0.95138599, 0.96498377, 0.95701717, 0.97712112, 0.98206576, 0.99118605, //  480-  487
		0.96359093, 0.96869494, 0.97808593, 0.98441546, 0.98085451, 0.98923070, 0.99178339, 0.99577354, //  488-  495
		0.98205190, 0.98488448, 0.98965028, 0.99316800, 0.99127068, 0.99542070, 0.99687162, 0.99855539, //  496-  503
		0.99364678, 0.99452850, 0.99593502, 0.99726362, 0.99656540, 0.99804813, 0.99868558, 0.99935095, //  504-  511
		0.38572943, 0.43446728, 0.48099915, 0.51699067, 0.50002299, 0.53220868, 0.54570505, 0.55417261, //  512-  519
		0.44394173, 0.50572131, 0.55894460, 0.60751323, 0.58530234, 0.62647175, 0.64785069, 0.66058114, //  520-  527
		0.64771086, 0.70553310, 0.74269033, 0.78569147, 0.76732509, 0.79992129, 0.81938967, 0.82998123, //  528-  535
		0.71419868, 0.77730110, 0.81160729, 0.85758145, 0.83934198, 0.87046692, 0.89295100, 0.90348852, //  536-  543
		0.67143595, 0.73290501, 0.77001292, 0.81637572, 0.79716470, 0.83070359, 0.85327705, 0.86475327, //  544-  551
		0.81388365, 0.86155256, 0.88257831, 0.91581639, 0.90354614, 0.92389683, 0.94005501, 0.94691838, //  552-  559
		0.83633088, 0.88472854, 0.90401520, 0.93710413, 0.92568098, 0.94416013, 0.96086255, 0.96681913, //  560-  567
		0.91122531, 0.94302207, 0.95256055, 0.97236156, 0.96642767, 0.97565225, 0.98500258, 0.98767158, //  568-  575
		0.73431485, 0.75996453, 0.84975234, 0.87848649, 0.86003261, 0.92156653, 0.93110184, 0.96296032, //  576-  583
		0.81601393, 0.83929301, 0.90456654, 0.92787267, 0.91346980, 0.95521036, 0.96272500, 0.98157524, //  584-  591
		0.89400315, 0.90764235, 0.93979446, 0.95471946, 0.94570975, 0.97008600, 0.97531527, 0.98719092, //  592-  599
		0.94645275, 0.95480222, 0.97125218, 0.98001642, 0.97498904, 0.98711457, 0.99021176, 0.99533535, //  600-  607
		0.92172023, 0.93323906, 0.95781839, 0.96997680, 0.96285722, 0.98082388, 0.98507027, 0.99288693, //  608-  615
		0.96863727, 0.97321258, 0.98163209, 0.98710684, 0.98402676, 0.99126110, 0.99338511, 0.99668809, //  616-  623
		0.98469956, 0.98721088, 0.99142953, 0.99441652, 0.99280545, 0.99633442, 0.99751486, 0.99888532, //  624-  631
		0.99478732, 0.99554366, 0.99674928, 0.99784104, 0.99726496, 0.99848725, 0.99898855, 0.99951322, //  632-  639
		0.35643015, 0.40370039, 0.44882427, 0.48478228, 0.46782277, 0.50004642, 0.51387695, 0.52257776, //  640-  647
		0.41288568, 0.47368356, 0.52609645, 0.57566330, 0.55300492, 0.59499453, 0.61742522, 0.63078668, //  648-  655
		0.61044582, 0.67003571, 0.70833263, 0.75446768, 0.73475947, 0.76971366, 0.79134267, 0.80308654, //  656-  663
		0.67896778, 0.74562785, 0.78183123, 0.83266424, 0.81250571, 0.84688711, 0.87274171, 0.88485780, //  664-  671
		0.63493489, 0.69888204, 0.73750656, 0.78783682, 0.76696659, 0.80338680, 0.82883513, 0.84175968, //  672-  679
		0.78154611, 0.83428340, 0.85744520, 0.89603023, 0.88182726, 0.90540180, 0.92488069, 0.93314936, //  680-  687
		0.80647655, 0.86065314, 0.88222982, 0.92128882, 0.90782194, 0.92960144, 0.95019242, 0.95753348, //  688-  695
		0.88907485, 0.92693947, 0.93832048, 0.96312339, 0.95567129, 0.96727025, 0.97956538, 0.98308752, //  696-  703
		0.70096751, 0.72776066, 0.82159780, 0.85350886, 0.83299145, 0.90137804, 0.91276674, 0.95061105, //  704-  711
		0.78841134, 0.81341522, 0.88355642, 0.91041637, 0.89380211, 0.94191498, 0.95118874, 0.97453567, //  712-  719
		0.87187764, 0.88723117, 0.92344609, 0.94132874, 0.93052579, 0.95979608, 0.96650018, 0.98171785, //  720-  727
		0.93314195, 0.94290749, 0.96210696, 0.97309345, 0.96680863, 0.98198993, 0.98615909, 0.99306556, //  728-  735
		0.90426527, 0.91745089, 0.94561218, 0.96050689, 0.95178281, 0.97376994, 0.97936828, 0.98966268, //  736-  743
		0.95904828, 0.96464602, 0.97488517, 0.98200737, 0.97800442, 0.98739338, 0.99034248, 0.99494282, //  744-  751
		0.97967405, 0.98280115, 0.98805373, 0.99204694, 0.98989506, 0.99460295, 0.99629385, 0.99825949, //  752-  759
		0.99262287, 0.99361856, 0.99520357, 0.99674694, 0.99593579, 0.99765887, 0.99841413, 0.99920516, //  760-  767
		0.34511680, 0.39136780, 0.43552998, 0.47111678, 0.45433378, 0.48617329, 0.50001457, 0.50871540, //  768-  775
		0.40036635, 0.46019997, 0.51175889, 0.56115297, 0.53856060, 0.58043377, 0.60312116, 0.61663974, //  776-  783
		0.59375246, 0.65322998, 0.69140574, 0.73836493, 0.71833966, 0.75386896, 0.77628490, 0.78847225, //  784-  791
		0.66212797, 0.72940973, 0.76598511, 0.81855394, 0.79770326, 0.83330300, 0.86067318, 0.87350164, //  792-  799
		0.61818456, 0.68229542, 0.72099221, 0.77258866, 0.75121476, 0.78851345, 0.81514950, 0.82868980, //  800-  807
		0.76466527, 0.81884976, 0.84270073, 0.88353645, 0.86845662, 0.89347136, 0.91472544, 0.92374668, //  808-  815
		0.79019450, 0.84647531, 0.86886494, 0.91078346, 0.89631649, 0.91969947, 0.94261596, 0.95078177, //  816-  823
		0.87523651, 0.91592507, 0.92813949, 0.95592287, 0.94757666, 0.96056464, 0.97498450, 0.97910689, //  824-  831
		0.68470366, 0.71164558, 0.80593306, 0.83897285, 0.81773938, 0.88849425, 0.90067493, 0.94135978, //  832-  839
		0.77371351, 0.79922095, 0.87074936, 0.89911242, 0.88157304, 0.93238325, 0.94269887, 0.96859605, //  840-  847
		0.85868368, 0.87469716, 0.91242256, 0.93180418, 0.92010955, 0.95177034, 0.95942822, 0.97677777, //  848-  855
		0.92423560, 0.93467140, 0.95521458, 0.96751697, 0.96046355, 0.97749207, 0.98245973, 0.99069765, //  856-  863
		0.89333792, 0.90724701, 0.93694821, 0.95335260, 0.94374360, 0.96797783, 0.97450732, 0.98652262, //  864-  871
		0.95196791, 0.95808307, 0.96934524, 0.97753288, 0.97290662, 0.98373716, 0.98736852, 0.99301464, //  872-  879
		0.97569039, 0.97919079, 0.98506847, 0.98979788, 0.98724609, 0.99282558, 0.99498739, 0.99749582, //  880-  887
		0.99058874, 0.99175729, 0.99361962, 0.99554445, 0.99452883, 0.99668046, 0.99770429, 0.99877681, //  888-  895
		0.33801418, 0.38363673, 0.42717028, 0.46251909, 0.44585950, 0.47746331, 0.49131619, 0.50002068, //  896-  903
		0.39250926, 0.45171358, 0.50274864, 0.55204526, 0.52949316, 0.57129158, 0.59414244, 0.60774624, //  904-  911
		0.58325938, 0.64266121, 0.68082954, 0.72824884, 0.70800784, 0.74390603, 0.76682237, 0.77927636, //  912-  919
		0.65157473, 0.71925437, 0.75605495, 0.80968397, 0.78840978, 0.82473189, 0.85308658, 0.86637527, //  920-  927
		0.60766792, 0.67189292, 0.71066419, 0.76300993, 0.74132756, 0.77916478, 0.80655605, 0.82046855, //  928-  935
		0.75402900, 0.80913546, 0.83344550, 0.87569528, 0.86006720, 0.88594590, 0.90833726, 0.91784917, //  936-  943
		0.77996867, 0.83757840, 0.86047536, 0.90419290, 0.88910715, 0.91349545, 0.93785363, 0.94654038, //  944-  951
		0.86655853, 0.90899328, 0.92178188, 0.95141003, 0.94249577, 0.95635638, 0.97210827, 0.97660280, //  952-  959
		0.67448263, 0.70151768, 0.79611388, 0.82981498, 0.80814373, 0.88032075, 0.89307768, 0.93552453, //  960-  967
		0.76450006, 0.79030501, 0.86269209, 0.89202256, 0.87388579, 0.92641431, 0.93735449, 0.96486974, //  968-  975
		0.85042071, 0.86681445, 0.90552481, 0.92583262, 0.91356801, 0.94674725, 0.95499221, 0.97366936, //  976-  983
		0.91864293, 0.92949890, 0.95086056, 0.96400824, 0.95647422, 0.97465852, 0.98013296, 0.98920597, //  984-  991
		0.88647588, 0.90084004, 0.93150136, 0.94886616, 0.93870208, 0.96434007, 0.97145362, 0.98454842, //  992-  999
		0.94751451, 0.95396881, 0.96584185, 0.97472455, 0.96970848, 0.98144511, 0.98549524, 0.99179668, // 1000- 1007
		0.97318491, 0.97692192, 0.98319196, 0.98838619, 0.98558462, 0.99171006, 0.99416642, 0.99701509, // 1008- 1015
		0.98931312, 0.99058744, 0.99262099, 0.99478748, 0.99364590, 0.99606709, 0.99725995, 0.99850780, // 1016- 1023
		0.44077059, 0.49036840, 0.53771801, 0.57245771, 0.55609709, 0.58716295, 0.59967818, 0.60754762, // 1024- 1031
		0.50003822, 0.56128380, 0.61408937, 0.65956261, 0.63876344, 0.67730835, 0.69652069, 0.70795922, // 1032- 1039
		0.70743273, 0.76015873, 0.79405686, 0.83099384, 0.81520966, 0.84318351, 0.85917358, 0.86785772, // 1040- 1047
		0.76803809, 0.82361338, 0.85382852, 0.89161982, 0.87661370, 0.90223304, 0.91980681, 0.92803059, // 1048- 1055
		0.72909890, 0.78436845, 0.81772309, 0.85687165, 0.84064015, 0.86893398, 0.88709492, 0.89632232, // 1056- 1063
		0.85900042, 0.89807931, 0.91531309, 0.94075794, 0.93133896, 0.94692329, 0.95863826, 0.96360101, // 1064- 1071
		0.87738866, 0.91631329, 0.93180596, 0.95653023, 0.94799063, 0.96181236, 0.97356190, 0.97775351, // 1072- 1079
		0.93873257, 0.96216816, 0.96921498, 0.98267845, 0.97862876, 0.98492836, 0.99088007, 0.99258496, // 1080- 1087
		0.78487835, 0.80782233, 0.88814255, 0.91143783, 0.89644349, 0.94636603, 0.95338292, 0.97683125, // 1088- 1095
		0.85552382, 0.87551218, 0.93157831, 0.94961081, 0.93846730, 0.97076123, 0.97597706, 0.98909046, // 1096- 1103
		0.92297873, 0.93385928, 0.95953165, 0.97036134, 0.96382406, 0.98150546, 0.98496710, 0.99277218, // 1104- 1111
		0.96281270, 0.96914897, 0.98162882, 0.98762822, 0.98419190, 0.99248804, 0.99439241, 0.99753994, // 1112- 1119
		0.94402540, 0.95301235, 0.97219120, 0.98077895, 0.97575338, 0.98843569, 0.99113590, 0.99610945, // 1120- 1127
		0.97967065, 0.98292977, 0.98893019, 0.99247376, 0.99047870, 0.99515786, 0.99639858, 0.99833583, // 1128- 1135
		0.99032365, 0.99205916, 0.99497504, 0.99684065, 0.99583482, 0.99803670, 0.99869534, 0.99946204, // 1136- 1143
		0.99701672, 0.99749567, 0.99825876, 0.99888585, 0.99855644, 0.99925590, 0.99951390, 0.99978412, // 1144- 1151
		0.38116189, 0.42938627, 0.47541008, 0.51119367, 0.49432563, 0.52633571, 0.53984462, 0.54832904, // 1152- 1159
		0.43875030, 0.50002093, 0.55281647, 0.60134463, 0.57915353, 0.62029613, 0.64179875, 0.65460919, // 1160- 1167
		0.64033817, 0.69812468, 0.73526821, 0.77876079, 0.76021471, 0.79312270, 0.81303089, 0.82385145, // 1168- 1175
		0.70680221, 0.77031563, 0.80483339, 0.85172160, 0.83313867, 0.86488794, 0.88809084, 0.89896668, // 1176- 1183
		0.66405621, 0.72568682, 0.76288202, 0.80991543, 0.79041356, 0.82441353, 0.84759908, 0.85937812, // 1184- 1191
		0.80650421, 0.85504584, 0.87643851, 0.91085567, 0.89813868, 0.91921714, 0.93616819, 0.94335523, // 1192- 1199
		0.82933948, 0.87887899, 0.89858428, 0.93304897, 0.92115434, 0.94039003, 0.95806563, 0.96437039, // 1200- 1207
		0.90561286, 0.93883174, 0.94878065, 0.96983271, 0.96352126, 0.97334167, 0.98348643, 0.98638480, // 1208- 1215
		0.72724089, 0.75299101, 0.84311968, 0.87244496, 0.85357657, 0.91641485, 0.92636155, 0.95961186, // 1216- 1223
		0.80980649, 0.83334734, 0.89938718, 0.92343988, 0.90856320, 0.95168281, 0.95963118, 0.97960696, // 1224- 1231
		0.88861673, 0.90259310, 0.93553015, 0.95116181, 0.94174077, 0.96725874, 0.97286697, 0.98560606, // 1232- 1239
		0.94304014, 0.95171346, 0.96878185, 0.97811056, 0.97276434, 0.98566332, 0.98905070, 0.99465703, // 1240- 1247
		0.91738153, 0.92925463, 0.95460365, 0.96742548, 0.95990668, 0.97885332, 0.98346595, 0.99194666, // 1248- 1255
		0.96606789, 0.97089160, 0.97976410, 0.98566654, 0.98233567, 0.99014046, 0.99249916, 0.99616961, // 1256- 1263
		0.98332673, 0.98599518, 0.99047093, 0.99373455, 0.99197562, 0.99582326, 0.99715340, 0.99869566, // 1264- 1271
		0.99416563, 0.99498730, 0.99629425, 0.99751450, 0.99687159, 0.99823553, 0.99881353, 0.99941805, // 1272- 1279
		0.32980702, 0.37681417, 0.42169809, 0.45841589, 0.44109171, 0.47391334, 0.48828566, 0.49730214, // 1280- 1287
		0.38595759, 0.44720922, 0.50003281, 0.55116870, 0.52778123, 0.57113127, 0.59463816, 0.60865489, // 1288- 1295
		0.58247061, 0.64465912, 0.68461079, 0.73377714, 0.71278197, 0.74994952, 0.77326504, 0.78594582, // 1296- 1303
		0.65401141, 0.72441558, 0.76268247, 0.81733980, 0.79563963, 0.83270824, 0.86075415, 0.87391377, // 1304- 1311
		0.60805563, 0.67511301, 0.71558177, 0.76945144, 0.74713691, 0.78605550, 0.81356202, 0.82754093, // 1312- 1319
		0.76116489, 0.81789178, 0.84296698, 0.88509856, 0.86952695, 0.89529350, 0.91677836, 0.92589970, // 1320- 1327
		0.78799051, 0.84663781, 0.86998134, 0.91280322, 0.89802685, 0.92192847, 0.94470239, 0.95282587, // 1328- 1335
		0.87698152, 0.91871807, 0.93121381, 0.95876885, 0.95049543, 0.96338626, 0.97710582, 0.98104132, // 1336- 1343
		0.67757221, 0.70576761, 0.80440917, 0.83884241, 0.81667588, 0.89055555, 0.90307699, 0.94471501, // 1344- 1351
		0.77039676, 0.79700357, 0.87163505, 0.90088537, 0.88280139, 0.93522937, 0.94553598, 0.97143765, // 1352- 1359
		0.85897834, 0.87563442, 0.91487407, 0.93461325, 0.92269505, 0.95499665, 0.96244552, 0.97943195, // 1360- 1367
		0.92600979, 0.93668114, 0.95770585, 0.96990007, 0.96291495, 0.97976825, 0.98444565, 0.99218466, // 1368- 1375
		0.89441181, 0.90878472, 0.93943441, 0.95591403, 0.94624028, 0.97061043, 0.97684905, 0.98835877, // 1376- 1383
		0.95435173, 0.96051930, 0.97186124, 0.97979521, 0.97531683, 0.98581366, 0.98913346, 0.99429460, // 1384- 1391
		0.97729862, 0.98076686, 0.98659142, 0.99105625, 0.98864796, 0.99391695, 0.99582411, 0.99803340, // 1392- 1399
		0.99170764, 0.99282636, 0.99459807, 0.99633342, 0.99541983, 0.99735419, 0.99820870, 0.99910314, // 1400- 1407
		0.28827429, 0.33196811, 0.37370413, 0.40931273, 0.39252379, 0.42437393, 0.43888500, 0.44798115, // 1408- 1415
		0.34047276, 0.39869495, 0.44886116, 0.50002210, 0.47662467, 0.51997989, 0.54459666, 0.55925343, // 1416- 1423
		0.52321634, 0.58579850, 0.62602021, 0.67854500, 0.65613193, 0.69588928, 0.72213002, 0.73641709, // 1424- 1431
		0.59519303, 0.66875217, 0.70871710, 0.77003426, 0.74572273, 0.78725007, 0.82081168, 0.83653520, // 1432- 1439
		0.54889886, 0.61747206, 0.65884310, 0.71760853, 0.69325065, 0.73571968, 0.76758037, 0.78375946, // 1440- 1447
		0.70315838, 0.76607610, 0.79386615, 0.84420957, 0.82559850, 0.85641475, 0.88400214, 0.89569777, // 1448- 1455
		0.73281708, 0.79945207, 0.82595723, 0.87884829, 0.86059155, 0.89013303, 0.92057682, 0.93143533, // 1456- 1463
		0.83165290, 0.88325822, 0.89877566, 0.93627142, 0.92502421, 0.94253647, 0.96301944, 0.96887709, // 1464- 1471
		0.62107508, 0.65007683, 0.75157935, 0.79030616, 0.76542814, 0.84840651, 0.86390274, 0.91552178, // 1472- 1479
		0.72044428, 0.74907176, 0.82936073, 0.86415225, 0.84264212, 0.90496358, 0.91866911, 0.95312886, // 1480- 1487
		0.81528645, 0.83438852, 0.87936814, 0.90426485, 0.88925129, 0.92993250, 0.94047124, 0.96442952, // 1488- 1495
		0.89727164, 0.91030903, 0.93597779, 0.95258012, 0.94306052, 0.96601792, 0.97323600, 0.98517370, // 1496- 1503
		0.85863094, 0.87559735, 0.91182525, 0.93342756, 0.92076431, 0.95267936, 0.96193332, 0.97894781, // 1504- 1511
		0.93195343, 0.93996052, 0.95467526, 0.96612979, 0.95967315, 0.97478947, 0.98021139, 0.98863274, // 1512- 1519
		0.96489360, 0.96959511, 0.97748992, 0.98429009, 0.98062139, 0.98864958, 0.99197341, 0.99583391, // 1520- 1527
		0.98558171, 0.98724676, 0.98989167, 0.99280397, 0.99126979, 0.99452501, 0.99616813, 0.99789040, // 1528- 1535
		0.30726858, 0.35248193, 0.39563183, 0.43175036, 0.41472989, 0.44703971, 0.46146202, 0.47053211, // 1536- 1543
		0.36126077, 0.42088122, 0.47224970, 0.52340656, 0.50001270, 0.54336177, 0.56748054, 0.58183478, // 1544- 1551
		0.55030981, 0.61271890, 0.65284937, 0.70378991, 0.68203267, 0.72057114, 0.74551683, 0.75906140, // 1552- 1559
		0.62208378, 0.69420302, 0.73339567, 0.79166528, 0.76855422, 0.80801473, 0.83907393, 0.85362816, // 1560- 1567
		0.57594600, 0.64381408, 0.68480357, 0.74130118, 0.71788099, 0.75873783, 0.78860367, 0.80377969, // 1568- 1575
		0.72969995, 0.78981666, 0.81631600, 0.86290178, 0.84566882, 0.87422462, 0.89899381, 0.90950729, // 1576- 1583
		0.75803967, 0.82101292, 0.84608488, 0.89438251, 0.87771180, 0.90467789, 0.93160914, 0.94121656, // 1584- 1591
		0.85240600, 0.89944837, 0.91357688, 0.94654739, 0.93667273, 0.95205156, 0.96946351, 0.97443872, // 1592- 1599
		0.64690781, 0.67553107, 0.77572317, 0.81249920, 0.78885035, 0.86768156, 0.88180348, 0.92886988, // 1600- 1607
		0.74328060, 0.77099326, 0.84869164, 0.88094621, 0.86099538, 0.91880345, 0.93095785, 0.96151265, // 1608- 1615
		0.83528906, 0.85324334, 0.89560449, 0.91814166, 0.90454096, 0.94137286, 0.95051504, 0.97129459, // 1616- 1623
		0.91040989, 0.92237210, 0.94591997, 0.96049661, 0.95214102, 0.97232436, 0.97836086, 0.98837869, // 1624- 1631
		0.87499021, 0.89077124, 0.92444508, 0.94371047, 0.93241978, 0.96087311, 0.96875716, 0.98325238, // 1632- 1639
		0.94219610, 0.94935516, 0.96254620, 0.97237065, 0.96682121, 0.97983249, 0.98429003, 0.99122591, // 1640- 1647
		0.97056605, 0.97470242, 0.98165189, 0.98738520, 0.98429318, 0.99105640, 0.99373401, 0.99683978, // 1648- 1655
		0.98838187, 0.98979625, 0.99204646, 0.99441798, 0.99316718, 0.99581962, 0.99710144, 0.99844425, // 1656- 1663
		0.27206214, 0.31446954, 0.35497880, 0.39014040, 0.37357639, 0.40504177, 0.41959903, 0.42875137, // 1664- 1671
		0.32270506, 0.37974206, 0.42890868, 0.48003658, 0.45665549, 0.50002433, 0.52506120, 0.53996533, // 1672- 1679
		0.50001276, 0.56279730, 0.60319991, 0.65697663, 0.63402844, 0.67476260, 0.70217012, 0.71708705, // 1680- 1687
		0.57221330, 0.64701289, 0.68769135, 0.75156769, 0.72624084, 0.76950901, 0.80521758, 0.82194327, // 1688- 1695
		0.52580623, 0.59495532, 0.63671689, 0.69734500, 0.67221781, 0.71605006, 0.74962707, 0.76668157, // 1696- 1703
		0.68049734, 0.74583614, 0.77470343, 0.82825555, 0.80841207, 0.84125605, 0.87120818, 0.88388765, // 1704- 1711
		0.71131963, 0.78103022, 0.80879984, 0.86560455, 0.84598289, 0.87768598, 0.91115491, 0.92308441, // 1712- 1719
		0.81401201, 0.86941071, 0.88603257, 0.92749070, 0.91506661, 0.93441214, 0.95751822, 0.96412544, // 1720- 1727
		0.59901736, 0.62833570, 0.73096876, 0.77136020, 0.74543245, 0.83189766, 0.84856002, 0.90416769, // 1728- 1735
		0.70093510, 0.73036491, 0.81288824, 0.84981020, 0.82695496, 0.89316734, 0.90819935, 0.94601876, // 1736- 1743
		0.79822160, 0.81828423, 0.86548142, 0.89242202, 0.87616503, 0.92017316, 0.93190318, 0.95854105, // 1744- 1751
		0.88605599, 0.90001741, 0.92748711, 0.94581833, 0.93531159, 0.96066746, 0.96885971, 0.98244124, // 1752- 1759
		0.84466364, 0.86264214, 0.90104091, 0.92464670, 0.91080671, 0.94568992, 0.95610369, 0.97528346, // 1760- 1767
		0.92320649, 0.93192893, 0.94795127, 0.96078865, 0.95355934, 0.97052327, 0.97673594, 0.98642534, // 1768- 1775
		0.96004985, 0.96523371, 0.97394249, 0.98165296, 0.97748876, 0.98659481, 0.99047337, 0.99497185, // 1776- 1783
		0.98319194, 0.98506784, 0.98805610, 0.99142677, 0.98964861, 0.99341850, 0.99537181, 0.99741819, // 1784- 1791
		0.25527671, 0.29565838, 0.33420737, 0.36821231, 0.35218500, 0.38261181, 0.39690807, 0.40589632, // 1792- 1799
		0.30351323, 0.35822824, 0.40538809, 0.45543050, 0.43255013, 0.47497241, 0.50001419, 0.51492747, // 1800- 1807
		0.47236557, 0.53371259, 0.57316546, 0.62708419, 0.60407839, 0.64489012, 0.67317165, 0.68855155, // 1808- 1815
		0.54293450, 0.61720911, 0.65758972, 0.72322044, 0.69719711, 0.74162351, 0.77968357, 0.79752081, // 1816- 1823
		0.49755208, 0.56559534, 0.60665811, 0.66812045, 0.64265167, 0.68710069, 0.72223051, 0.74008522, // 1824- 1831
		0.64879530, 0.71520719, 0.74449485, 0.80111746, 0.78019000, 0.81488582, 0.84790043, 0.86191772, // 1832- 1839
		0.68008580, 0.75187545, 0.78045262, 0.84171259, 0.82057324, 0.85475105, 0.89273407, 0.90627511, // 1840- 1847
		0.78439616, 0.84402967, 0.86192557, 0.90897057, 0.89486486, 0.91681495, 0.94476261, 0.95275533, // 1848- 1855
		0.57009657, 0.59906340, 0.70044947, 0.74176542, 0.71521185, 0.80377447, 0.82165191, 0.88133113, // 1856- 1863
		0.67276482, 0.70244395, 0.78567283, 0.82467538, 0.80055558, 0.87042651, 0.88731251, 0.92973035, // 1864- 1871
		0.77075043, 0.79151676, 0.84045241, 0.86972588, 0.85206014, 0.89984323, 0.91343412, 0.94424658, // 1872- 1879
		0.86543681, 0.88044566, 0.90995687, 0.93086237, 0.91888521, 0.94780212, 0.95790028, 0.97464557, // 1880- 1887
		0.82079621, 0.83978351, 0.88030062, 0.90661992, 0.89120046, 0.93007217, 0.94255807, 0.96551926, // 1888- 1895
		0.90549560, 0.91514821, 0.93291677, 0.94801107, 0.93950271, 0.95944540, 0.96737732, 0.97971157, // 1896- 1903
		0.94936497, 0.95528738, 0.96523417, 0.97470418, 0.96959553, 0.98076888, 0.98599463, 0.99205958, // 1904- 1911
		0.97692092, 0.97919052, 0.98280536, 0.98721005, 0.98488825, 0.98981203, 0.99263351, 0.99558788, // 1912- 1919
		0.24528362, 0.28446086, 0.32185488, 0.35514631, 0.33946117, 0.36924940, 0.38339546, 0.39228361, // 1920- 1927
		0.29207947, 0.34542314, 0.39139706, 0.44077839, 0.41819279, 0.46005289, 0.48510113, 0.50001553, // 1928- 1935
		0.45587048, 0.51639882, 0.55531926, 0.60930216, 0.58625084, 0.62713020, 0.65591408, 0.67155023, // 1936- 1943
		0.52546169, 0.59947209, 0.63969130, 0.70633205, 0.67991472, 0.72503397, 0.76448802, 0.78297770, // 1944- 1951
		0.48072988, 0.54809844, 0.58875230, 0.65071792, 0.62504980, 0.66983463, 0.70591767, 0.72425160, // 1952- 1959
		0.62986682, 0.69697745, 0.72654040, 0.78498724, 0.76336376, 0.79914517, 0.83403522, 0.84881752, // 1960- 1967
		0.66142930, 0.73452278, 0.76356353, 0.82748104, 0.80544151, 0.84111151, 0.88176669, 0.89626712, // 1968- 1975
		0.76679249, 0.82893116, 0.84755867, 0.89794180, 0.88282046, 0.90633048, 0.93716681, 0.94597908, // 1976- 1983
		0.55287841, 0.58163142, 0.68225554, 0.72414471, 0.69721063, 0.78701157, 0.80563361, 0.86776440, // 1984- 1991
		0.65598041, 0.68580935, 0.76946807, 0.80969505, 0.78481979, 0.85691104, 0.87487363, 0.92004802, // 1992- 1999
		0.75439983, 0.77558057, 0.82554742, 0.85621742, 0.83769573, 0.88772606, 0.90242877, 0.93572558, // 2000- 2007
		0.85315954, 0.86877979, 0.89952575, 0.92196362, 0.90910501, 0.94013917, 0.95137381, 0.97000232, // 2008- 2015
		0.80659591, 0.82616710, 0.86795750, 0.89588436, 0.87952134, 0.92077348, 0.93448925, 0.95972035, // 2016- 2023
		0.89495111, 0.90515893, 0.92396336, 0.94040222, 0.93112102, 0.95286189, 0.96180271, 0.97571359, // 2024- 2031
		0.94300073, 0.94936380, 0.96005140, 0.97056517, 0.96489545, 0.97730403, 0.98332882, 0.99032389, // 2032- 2039
		0.97318641, 0.97568944, 0.97967506, 0.98469751, 0.98205197, 0.98766568, 0.99100252, 0.99449622, // 2040- 2047
		0.23333298, 0.28296070, 0.33033737, 0.37195052, 0.35227657, 0.38956437, 0.40627133, 0.41673216, // 2048- 2055
		0.29258706, 0.35966437, 0.41750345, 0.47686042, 0.44975668, 0.49999622, 0.52767514, 0.54416931, // 2056- 2063
		0.49993396, 0.57491375, 0.62294217, 0.68334403, 0.65754246, 0.70321552, 0.73162768, 0.74699715, // 2064- 2071
		0.58617905, 0.67188132, 0.71850305, 0.78535319, 0.75888814, 0.80403723, 0.83776815, 0.85357369, // 2072- 2079
		0.53086006, 0.61196509, 0.66083720, 0.72685664, 0.69958831, 0.74724409, 0.78047871, 0.79738905, // 2080- 2087
		0.71529029, 0.78570846, 0.81675412, 0.86802275, 0.84907959, 0.88039710, 0.90580269, 0.91657266, // 2088- 2095
		0.74866653, 0.82087849, 0.84962791, 0.90106991, 0.88334154, 0.91201351, 0.93838594, 0.94778968, // 2096- 2103
		0.85881375, 0.90909923, 0.92426661, 0.95591286, 0.94642606, 0.96122820, 0.97621154, 0.98050778, // 2104- 2111
		0.61519108, 0.64924026, 0.76863454, 0.81133994, 0.78398228, 0.87535466, 0.89041551, 0.94040641, // 2112- 2119
		0.72791544, 0.76030545, 0.85114674, 0.88678769, 0.86480215, 0.92854519, 0.94057179, 0.97075354, // 2120- 2127
		0.83553970, 0.85595777, 0.90409116, 0.92775208, 0.91357246, 0.95208976, 0.96054510, 0.97974293, // 2128- 2135
		0.91606420, 0.92890869, 0.95427484, 0.96824081, 0.96017285, 0.97955254, 0.98454573, 0.99277351, // 2136- 2143
		0.87808997, 0.89556502, 0.93285928, 0.95218722, 0.94086522, 0.96942942, 0.97624285, 0.98886104, // 2144- 2151
		0.95011476, 0.95735497, 0.97073383, 0.97958130, 0.97458623, 0.98622187, 0.98964323, 0.99497079, // 2152- 2159
		0.97571311, 0.97971039, 0.98641534, 0.99122508, 0.98863619, 0.99430455, 0.99616863, 0.99833488, // 2160- 2167
		0.99179440, 0.99301223, 0.99495298, 0.99669304, 0.99577405, 0.99770911, 0.99849173, 0.99930018, // 2168- 2175
		0.18695654, 0.23124853, 0.27357357, 0.31321979, 0.29450671, 0.32999585, 0.34681525, 0.35739109, // 2176- 2183
		0.23988643, 0.30190234, 0.35535045, 0.41421600, 0.38731890, 0.43722722, 0.46631754, 0.48365126, // 2184- 2191
		0.42510642, 0.49999387, 0.54822308, 0.61302000, 0.58535060, 0.63443589, 0.66699050, 0.68468011, // 2192- 2199
		0.51125844, 0.60106931, 0.64992293, 0.72598105, 0.69581316, 0.74733588, 0.78843040, 0.80770197, // 2200- 2207
		0.45595570, 0.53858562, 0.58854424, 0.66127625, 0.63112430, 0.68371241, 0.72293213, 0.74288108, // 2208- 2215
		0.64058838, 0.71967255, 0.75463612, 0.81753143, 0.79425476, 0.83276334, 0.86623249, 0.88042693, // 2216- 2223
		0.67783856, 0.76146898, 0.79478214, 0.85994920, 0.83742054, 0.87383285, 0.91001135, 0.92291181, // 2224- 2231
		0.80223488, 0.86640037, 0.88575547, 0.93032480, 0.91692218, 0.93779971, 0.96082566, 0.96742705, // 2232- 2239
		0.54348163, 0.57856022, 0.70133218, 0.75007167, 0.71871676, 0.82309032, 0.84237327, 0.90644396, // 2240- 2247
		0.66492335, 0.70005458, 0.79853727, 0.84184920, 0.81509048, 0.89267525, 0.90916126, 0.95059604, // 2248- 2255
		0.78083050, 0.80477137, 0.86098391, 0.89176036, 0.87327338, 0.92340393, 0.93581050, 0.96379979, // 2256- 2263
		0.88148811, 0.89756688, 0.92917731, 0.94887661, 0.93758093, 0.96483959, 0.97277868, 0.98596595, // 2264- 2271
		0.83405753, 0.85514262, 0.90010269, 0.92623440, 0.91093519, 0.94952118, 0.96000355, 0.97932019, // 2272- 2279
		0.92406933, 0.93380633, 0.95167360, 0.96487824, 0.95744984, 0.97489245, 0.98067371, 0.98964819, // 2280- 2287
		0.96180382, 0.96736891, 0.97673403, 0.98429058, 0.98021400, 0.98912753, 0.99249815, 0.99639626, // 2288- 2295
		0.98549187, 0.98736567, 0.99034613, 0.99338156, 0.99178463, 0.99517681, 0.99671425, 0.99832809, // 2296- 2303
		0.15713360, 0.19801901, 0.23704120, 0.27549427, 0.25740227, 0.29175329, 0.30859080, 0.31921006, // 2304- 2311
		0.20595301, 0.26473925, 0.31542564, 0.37396589, 0.34713715, 0.39684199, 0.42684998, 0.44472666, // 2312- 2319
		0.37689579, 0.45176885, 0.50009905, 0.56777656, 0.53897453, 0.59032554, 0.62544228, 0.64460019, // 2320- 2327
		0.46310287, 0.55564370, 0.60586237, 0.68781364, 0.65526955, 0.71081614, 0.75674734, 0.77821247, // 2328- 2335
		0.40770957, 0.49141266, 0.54196999, 0.61906558, 0.58708625, 0.64288126, 0.68591192, 0.70779716, // 2336- 2343
		0.59224414, 0.67716313, 0.71473459, 0.78501423, 0.75900603, 0.80207385, 0.84075091, 0.85719675, // 2344- 2351
		0.63247301, 0.72327561, 0.75961250, 0.83352145, 0.80794668, 0.84931492, 0.89176360, 0.90690079, // 2352- 2359
		0.76595797, 0.83881096, 0.86085802, 0.91390296, 0.89804270, 0.92266509, 0.95092146, 0.95901191, // 2360- 2367
		0.49740548, 0.53309529, 0.65802996, 0.71060131, 0.67684059, 0.78953497, 0.81142730, 0.88471089, // 2368- 2375
		0.62443924, 0.66131884, 0.76474478, 0.81299896, 0.78313504, 0.86951798, 0.88893992, 0.93772542, // 2376- 2383
		0.74569997, 0.77180181, 0.83345695, 0.86856910, 0.84733583, 0.90489338, 0.91987252, 0.95352809, // 2384- 2391
		0.85925671, 0.87743035, 0.91304390, 0.93641985, 0.92307508, 0.95532692, 0.96522471, 0.98156476, // 2392- 2399
		0.80575923, 0.82912721, 0.87906148, 0.90953361, 0.89167996, 0.93666784, 0.94954143, 0.97324051, // 2400- 2407
		0.90736618, 0.91865667, 0.93941254, 0.95543950, 0.94642818, 0.96764552, 0.97490073, 0.98624026, // 2408- 2415
		0.95285059, 0.95945444, 0.97050395, 0.97983432, 0.97479794, 0.98580106, 0.99013720, 0.99516126, // 2416- 2423
		0.98143465, 0.98372569, 0.98739576, 0.99125708, 0.98921712, 0.99354527, 0.99557520, 0.99770184, // 2424- 2431
		0.12684809, 0.16217287, 0.19589835, 0.23077242, 0.21432509, 0.24558834, 0.26167399, 0.27180747, // 2432- 2439
		0.16902288, 0.22126385, 0.26625059, 0.32147906, 0.29624233, 0.34308330, 0.37291726, 0.39070985, // 2440- 2447
		0.31671118, 0.38696672, 0.43214805, 0.50002329, 0.47106931, 0.52247151, 0.55983603, 0.58012293, // 2448- 2455
		0.39751386, 0.48796751, 0.53714979, 0.62361616, 0.58932064, 0.64786020, 0.69976944, 0.72409359, // 2456- 2463
		0.34556217, 0.42553311, 0.47376036, 0.55276154, 0.52005683, 0.57714874, 0.62427764, 0.64822880, // 2464- 2471
		0.51874298, 0.60661378, 0.64525529, 0.72375427, 0.69471589, 0.74276293, 0.78941200, 0.80916197, // 2472- 2479
		0.56015115, 0.65652925, 0.69491929, 0.78059435, 0.75106071, 0.79885481, 0.85235271, 0.87142302, // 2480- 2487
		0.69814104, 0.78225687, 0.80759394, 0.87483994, 0.85468994, 0.88607811, 0.92540831, 0.93664917, // 2488- 2495
		0.43280954, 0.46719001, 0.58761258, 0.64269490, 0.60728466, 0.72535232, 0.75067909, 0.83512577, // 2496- 2503
		0.56098917, 0.59835893, 0.70314827, 0.75685919, 0.72365435, 0.81985837, 0.84392862, 0.90440010, // 2504- 2511
		0.68335124, 0.71137871, 0.77738727, 0.81890492, 0.79386810, 0.86153821, 0.88106223, 0.92531794, // 2512- 2519
		0.81427757, 0.83507966, 0.87599360, 0.90574749, 0.88870536, 0.92984166, 0.94401664, 0.96753567, // 2520- 2527
		0.75256754, 0.77852017, 0.83394494, 0.87129459, 0.84940962, 0.90459741, 0.92230358, 0.95489950, // 2528- 2535
		0.86968655, 0.88338624, 0.90859357, 0.93011754, 0.91796199, 0.94639005, 0.95743046, 0.97459286, // 2536- 2543
		0.93111712, 0.93949622, 0.95355479, 0.96682882, 0.95966775, 0.97532579, 0.98233722, 0.99047643, // 2544- 2551
		0.96971671, 0.97291080, 0.97799171, 0.98402578, 0.98085368, 0.98758812, 0.99121123, 0.99501892, // 2552- 2559
		0.13977901, 0.17746653, 0.21343598, 0.24987898, 0.23271136, 0.26526607, 0.28170664, 0.29200401, // 2560- 2567
		0.18482103, 0.23980607, 0.28722806, 0.34389010, 0.31801631, 0.36601472, 0.39595155, 0.41376081, // 2568- 2575
		0.34243088, 0.41467497, 0.46111267, 0.52900138, 0.50003292, 0.55137228, 0.58783911, 0.60764917, // 2576- 2583
		0.42543508, 0.51680628, 0.56644607, 0.65103813, 0.61750041, 0.67472648, 0.72407709, 0.74720871, // 2584- 2591
		0.37208374, 0.45366917, 0.50293858, 0.58108834, 0.54868385, 0.60519762, 0.65059840, 0.67365238, // 2592- 2599
		0.55033300, 0.63666198, 0.67495468, 0.74987155, 0.72217556, 0.76811302, 0.81132170, 0.82968917, // 2600- 2607
		0.59088978, 0.68505491, 0.72246659, 0.80317703, 0.77535653, 0.82038449, 0.86916716, 0.88658011, // 2608- 2615
		0.72683593, 0.80634495, 0.83026391, 0.89150318, 0.87321173, 0.90168834, 0.93630429, 0.94619468, // 2616- 2623
		0.46035085, 0.49531937, 0.61768481, 0.67173258, 0.63700803, 0.75264481, 0.77668885, 0.85626606, // 2624- 2631
		0.58806572, 0.62522444, 0.72942918, 0.78077808, 0.74904845, 0.84106592, 0.86314250, 0.91861815, // 2632- 2639
		0.70995286, 0.73716763, 0.80125925, 0.84013971, 0.81671268, 0.88002259, 0.89759743, 0.93739515, // 2640- 2647
		0.83350887, 0.85314197, 0.89185524, 0.91885424, 0.90336868, 0.94070627, 0.95308287, 0.97352070, // 2648- 2655
		0.77524440, 0.80010021, 0.85318067, 0.88764232, 0.86745738, 0.91835111, 0.93393243, 0.96268700, // 2656- 2663
		0.88576888, 0.89843095, 0.92171302, 0.94091685, 0.93011434, 0.95547702, 0.96491986, 0.97957699, // 2664- 2671
		0.94040784, 0.94800918, 0.96078186, 0.97238197, 0.96612005, 0.97979822, 0.98566583, 0.99246779, // 2672- 2679
		0.97471805, 0.97752862, 0.98201888, 0.98711017, 0.98442877, 0.99012423, 0.99307503, 0.99615939, // 2680- 2687
		0.11683770, 0.15031692, 0.18225923, 0.21601932, 0.20011276, 0.23032261, 0.24615451, 0.25609364, // 2688- 2695
		0.15682286, 0.20687498, 0.25005024, 0.30414054, 0.27941704, 0.32530932, 0.35513027, 0.37289033, // 2696- 2703
		0.29679921, 0.36560595, 0.40977061, 0.47753422, 0.44870387, 0.50011651, 0.53814290, 0.55882525, // 2704- 2711
		0.37590701, 0.46573986, 0.51451038, 0.60241134, 0.56750006, 0.62703839, 0.68095381, 0.70621354, // 2712- 2719
		0.32505075, 0.40378428, 0.45122937, 0.53084298, 0.49792543, 0.55540121, 0.60392138, 0.62856749, // 2720- 2727
		0.49447326, 0.58308964, 0.62231429, 0.70346424, 0.67348836, 0.72325571, 0.77247296, 0.79335393, // 2728- 2735
		0.53629178, 0.63447318, 0.67350096, 0.76314937, 0.73224263, 0.78217273, 0.83933283, 0.85970474, // 2736- 2743
		0.67540641, 0.76361427, 0.79005702, 0.86194408, 0.84043540, 0.87395694, 0.91693973, 0.92922893, // 2744- 2751
		0.41147341, 0.44543611, 0.56440517, 0.62030850, 0.58428310, 0.70404888, 0.73059792, 0.81843990, // 2752- 2759
		0.54003031, 0.57758095, 0.68280453, 0.73831150, 0.70397423, 0.80351997, 0.82912458, 0.89349087, // 2760- 2767
		0.66281732, 0.69137704, 0.75900762, 0.80244425, 0.77613837, 0.84716720, 0.86821992, 0.91590266, // 2768- 2775
		0.79943748, 0.82111300, 0.86381312, 0.89561125, 0.87736524, 0.92143872, 0.93703890, 0.96290182, // 2776- 2783
		0.73497820, 0.76179884, 0.81900601, 0.85867655, 0.83544111, 0.89396273, 0.91330633, 0.94879821, // 2784- 2791
		0.85728523, 0.87169529, 0.89842242, 0.92172403, 0.90860560, 0.93944083, 0.95167300, 0.97075542, // 2792- 2799
		0.92394847, 0.93290474, 0.94799052, 0.96252644, 0.95466859, 0.97186802, 0.97975132, 0.98893037, // 2800- 2807
		0.96584943, 0.96932833, 0.97490561, 0.98163631, 0.97808749, 0.98561699, 0.98978241, 0.99413111, // 2808- 2815
		0.10440294, 0.13491717, 0.16403697, 0.19540449, 0.18061392, 0.20868445, 0.22373597, 0.23320807, // 2816- 2823
		0.14085048, 0.18698699, 0.22675168, 0.27788994, 0.25449895, 0.29786751, 0.32684574, 0.34410595, // 2824- 2831
		0.26845208, 0.33300660, 0.37447526, 0.44023957, 0.41218213, 0.46185499, 0.50000667, 0.52071472, // 2832- 2839
		0.34271381, 0.42877198, 0.47555210, 0.56311425, 0.52839481, 0.58766580, 0.64366648, 0.66991255, // 2840- 2847
		0.29499140, 0.36957497, 0.41460523, 0.49269006, 0.46033833, 0.51674138, 0.56617075, 0.59128551, // 2848- 2855
		0.45418962, 0.54115135, 0.57953184, 0.66270472, 0.63197827, 0.68288356, 0.73567909, 0.75806939, // 2856- 2863
		0.49512734, 0.59300600, 0.63196301, 0.72570015, 0.69334336, 0.74568911, 0.80895583, 0.83152561, // 2864- 2871
		0.63181868, 0.72332382, 0.75078706, 0.83013446, 0.80630203, 0.84328021, 0.89401398, 0.90849900, // 2872- 2879
		0.37764783, 0.41000754, 0.52331609, 0.57856045, 0.54300414, 0.66149329, 0.68897176, 0.78060682, // 2880- 2887
		0.50321678, 0.53989270, 0.64277058, 0.69964821, 0.66447285, 0.76634350, 0.79426724, 0.86443266, // 2888- 2895
		0.62308283, 0.65182932, 0.71965801, 0.76544438, 0.73780149, 0.81262136, 0.83621251, 0.88956648, // 2896- 2903
		0.76667213, 0.78934496, 0.83397863, 0.86930459, 0.84905085, 0.89794617, 0.91665907, 0.94769223, // 2904- 2911
		0.69897418, 0.72646720, 0.78513113, 0.82810839, 0.80294892, 0.86638571, 0.88888950, 0.93027238, // 2912- 2919
		0.82742773, 0.84303722, 0.87178916, 0.89844698, 0.88338148, 0.91865769, 0.93380031, 0.95737650, // 2920- 2927
		0.90515459, 0.91514276, 0.93193752, 0.94935493, 0.93994879, 0.96052007, 0.97089235, 0.98293196, // 2928- 2935
		0.95396504, 0.95807982, 0.96464210, 0.97320796, 0.96869447, 0.97828068, 0.98411972, 0.99022980, // 2936- 2943
		0.09762694, 0.12654140, 0.15411240, 0.18418924, 0.17002291, 0.19689171, 0.21155159, 0.22073280, // 2944- 2951
		0.13216470, 0.17617176, 0.21407082, 0.26359022, 0.24096696, 0.28292395, 0.31147653, 0.32847976, // 2952- 2959
		0.25298065, 0.31534618, 0.35537886, 0.41992594, 0.39237796, 0.44120435, 0.47931694, 0.50002692, // 2960- 2967
		0.32468361, 0.40872200, 0.45433118, 0.54173487, 0.50713190, 0.56624916, 0.62340509, 0.65018114, // 2968- 2975
		0.27862873, 0.35098363, 0.39466365, 0.47192380, 0.43989753, 0.49573145, 0.54566503, 0.57103125, // 2976- 2983
		0.43223518, 0.51831557, 0.55623097, 0.64051275, 0.60937839, 0.66091377, 0.71569704, 0.73888530, // 2984- 2991
		0.47282643, 0.57045971, 0.60927774, 0.70532870, 0.67219536, 0.72582756, 0.79244773, 0.81621939, // 2992- 2999
		0.60794768, 0.70147764, 0.72946814, 0.81278695, 0.78779362, 0.82665675, 0.88153533, 0.89720555, // 3000- 3007
		0.35924543, 0.39072935, 0.50097283, 0.55596559, 0.52060003, 0.63830909, 0.66641954, 0.75992391, // 3008- 3015
		0.48319755, 0.51941836, 0.62102576, 0.67861884, 0.64299444, 0.74621026, 0.77537577, 0.84864523, // 3016- 3023
		0.60148698, 0.63033361, 0.69822277, 0.74527878, 0.71691560, 0.79376849, 0.81874232, 0.87532661, // 3024- 3031
		0.74887244, 0.77210164, 0.81777311, 0.85499287, 0.83365223, 0.88516089, 0.90556398, 0.93941892, // 3032- 3039
		0.67939320, 0.70725741, 0.76671360, 0.81150512, 0.78527322, 0.85134044, 0.87563126, 0.92017278, // 3040- 3047
		0.81122719, 0.82742876, 0.85727158, 0.88576955, 0.86967819, 0.90735642, 0.92409247, 0.95011461, // 3048- 3055
		0.89493368, 0.90548553, 0.92320544, 0.94219615, 0.93194851, 0.95435411, 0.96606848, 0.97966587, // 3056- 3063
		0.94751677, 0.95196421, 0.95906313, 0.96863219, 0.96358761, 0.97429185, 0.98104025, 0.98811172, // 3064- 3071
		0.18000626, 0.22353420, 0.26501267, 0.30440018, 0.28582506, 0.32110682, 0.33788523, 0.34844283, // 3072- 3079
		0.23197883, 0.29320109, 0.34601163, 0.40482474, 0.37795773, 0.42777302, 0.45710593, 0.47455633, // 3080- 3087
		0.41391033, 0.48875665, 0.53699902, 0.60249090, 0.57451792, 0.62410899, 0.65729359, 0.67533103, // 3088- 3095
		0.49997479, 0.59043699, 0.63963994, 0.71707519, 0.68639207, 0.73881736, 0.78102002, 0.80084895, // 3096- 3103
		0.44463691, 0.52764826, 0.57762890, 0.65136250, 0.62088798, 0.67416881, 0.71429668, 0.73468136, // 3104- 3111
		0.62920588, 0.70981052, 0.74527029, 0.80995869, 0.78606084, 0.82558603, 0.86030578, 0.87500483, // 3112- 3119
		0.66720400, 0.75253876, 0.78653393, 0.85380492, 0.83062157, 0.86809844, 0.90574250, 0.91918265, // 3120- 3127
		0.79369696, 0.86000683, 0.87994387, 0.92647800, 0.91250632, 0.93426895, 0.95851498, 0.96544877, // 3128- 3135
		0.53274182, 0.56794386, 0.69129988, 0.74083622, 0.70898790, 0.81532001, 0.83507671, 0.90144210, // 3136- 3143
		0.65545520, 0.69101475, 0.79064111, 0.83514335, 0.80763725, 0.88730635, 0.90451090, 0.94758589, // 3144- 3151
		0.77266760, 0.79707624, 0.85460852, 0.88635690, 0.86723273, 0.91914763, 0.93206290, 0.96143223, // 3152- 3159
		0.87630573, 0.89286094, 0.92540017, 0.94597107, 0.93418107, 0.96259235, 0.97101610, 0.98495214, // 3160- 3167
		0.82743580, 0.84905195, 0.89515004, 0.92234377, 0.90643261, 0.94648340, 0.95754857, 0.97789548, // 3168- 3175
		0.92017763, 0.93025872, 0.94883629, 0.96271121, 0.95486979, 0.97318815, 0.97933215, 0.98886734, // 3176- 3183
		0.95971464, 0.96551877, 0.97526463, 0.98324946, 0.97895527, 0.98835794, 0.99194578, 0.99610769, // 3184- 3191
		0.98454319, 0.98651939, 0.98965991, 0.99288612, 0.99118638, 0.99479073, 0.99644874, 0.99818123, // 3192- 3199
		0.13307854, 0.16937461, 0.20401292, 0.23942526, 0.22272646, 0.25444104, 0.27061465, 0.28078642, // 3200- 3207
		0.17641943, 0.22969801, 0.27565834, 0.33127452, 0.30582515, 0.35298268, 0.38280063, 0.40056660, // 3208- 3215
		0.32814190, 0.39895910, 0.44451089, 0.51203491, 0.48320857, 0.53438617, 0.57124253, 0.59133501, // 3216- 3223
		0.40953047, 0.49999823, 0.54915371, 0.63456818, 0.60068483, 0.65855934, 0.70931156, 0.73309507, // 3224- 3231
		0.35724367, 0.43751541, 0.48597418, 0.56436083, 0.53188254, 0.58854945, 0.63483244, 0.65835371, // 3232- 3239
		0.53172490, 0.61862155, 0.65691471, 0.73387798, 0.70545845, 0.75255350, 0.79773909, 0.81688885, // 3240- 3247
		0.57268492, 0.66779713, 0.70566672, 0.78920442, 0.76039113, 0.80697344, 0.85863238, 0.87702627, // 3248- 3255
		0.70915855, 0.79135643, 0.81611996, 0.88092995, 0.86146228, 0.89169651, 0.92928691, 0.94002235, // 3256- 3263
		0.44455218, 0.47902214, 0.59971239, 0.65422427, 0.61922480, 0.73578584, 0.76059164, 0.84284054, // 3264- 3271
		0.57209041, 0.60923593, 0.71344278, 0.76604753, 0.73350180, 0.82779811, 0.85105642, 0.90949017, // 3272- 3279
		0.69382790, 0.72142967, 0.78652069, 0.82680748, 0.80242471, 0.86833518, 0.88703455, 0.92952299, // 3280- 3287
		0.82157183, 0.84186663, 0.88181666, 0.91047028, 0.89402707, 0.93369559, 0.94720189, 0.96958462, // 3288- 3295
		0.76134095, 0.78679313, 0.84110948, 0.87730228, 0.85609939, 0.90955399, 0.92644285, 0.95757291, // 3296- 3303
		0.87559420, 0.88888547, 0.91329955, 0.93393590, 0.92229342, 0.94951402, 0.96000539, 0.97625424, // 3304- 3311
		0.93448667, 0.94255432, 0.95610731, 0.96875350, 0.96192708, 0.97686050, 0.98346441, 0.99113915, // 3312- 3319
		0.97145642, 0.97450995, 0.97937431, 0.98506433, 0.98206164, 0.98843155, 0.99182846, 0.99538846, // 3320- 3327
		0.10755300, 0.13994613, 0.17083812, 0.20409984, 0.18842452, 0.21821521, 0.23404920, 0.24399994, // 3328- 3335
		0.14626312, 0.19517451, 0.23739508, 0.29126887, 0.26664461, 0.31236113, 0.34243761, 0.36034218, // 3336- 3343
		0.28145320, 0.35005315, 0.39426470, 0.46296016, 0.43358150, 0.48552613, 0.52446343, 0.54564269, // 3344- 3351
		0.36041849, 0.45085055, 0.49998820, 0.58975276, 0.55412581, 0.61495624, 0.67032233, 0.69629434, // 3352- 3359
		0.30967196, 0.38852558, 0.43619943, 0.51702222, 0.48353685, 0.54194520, 0.59165410, 0.61688783, // 3360- 3367
		0.47874082, 0.56912090, 0.60883316, 0.69254134, 0.66168013, 0.71295128, 0.76374570, 0.78531066, // 3368- 3375
		0.52130355, 0.62181018, 0.66171951, 0.75410893, 0.72220788, 0.77379212, 0.83301584, 0.85413863, // 3376- 3383
		0.66323117, 0.75414478, 0.78126570, 0.85612012, 0.83367023, 0.86852926, 0.91340571, 0.92620733, // 3384- 3391
		0.39661325, 0.43074515, 0.54999371, 0.60709596, 0.57045985, 0.69260605, 0.72009073, 0.81106882, // 3392- 3399
		0.52674107, 0.56477267, 0.67138830, 0.72851337, 0.69317913, 0.79550557, 0.82202487, 0.88879417, // 3400- 3407
		0.65093574, 0.68030381, 0.74944915, 0.79441763, 0.76724178, 0.84083782, 0.86261959, 0.91217329, // 3408- 3415
		0.79181186, 0.81416111, 0.85814543, 0.89117036, 0.87221994, 0.91792285, 0.93424023, 0.96124890, // 3416- 3423
		0.72540266, 0.75293838, 0.81169647, 0.85280479, 0.82874132, 0.88941702, 0.90954799, 0.94652515, // 3424- 3431
		0.85134226, 0.86640020, 0.89398759, 0.91830687, 0.90460074, 0.93675879, 0.94947941, 0.96944586, // 3432- 3439
		0.92075466, 0.93006762, 0.94567929, 0.96086608, 0.95268318, 0.97060582, 0.97885054, 0.98843638, // 3440- 3447
		0.96434426, 0.96797720, 0.97377238, 0.98081769, 0.97711105, 0.98497877, 0.98931680, 0.99386887, // 3448- 3455
		0.07802708, 0.10344572, 0.12772850, 0.15556190, 0.14243059, 0.16735532, 0.18146204, 0.19032068, // 3456- 3463
		0.10839674, 0.14828489, 0.18266605, 0.22997044, 0.20834847, 0.24844257, 0.27680034, 0.29368763, // 3464- 3471
		0.21464975, 0.27401895, 0.31223595, 0.37643127, 0.34902441, 0.39763404, 0.43691818, 0.45826619, // 3472- 3479
		0.28293535, 0.36542547, 0.41024709, 0.50001089, 0.46442076, 0.52517084, 0.58585521, 0.61429272, // 3480- 3487
		0.23907241, 0.30893813, 0.35111085, 0.42915527, 0.39683457, 0.45327142, 0.50550701, 0.53206247, // 3488- 3495
		0.38545145, 0.47274994, 0.51123699, 0.60017336, 0.56734089, 0.62175887, 0.68126333, 0.70650279, // 3496- 3503
		0.42649226, 0.52702415, 0.56708629, 0.67000679, 0.63449827, 0.69193171, 0.76546904, 0.79169567, // 3504- 3511
		0.56382722, 0.66366740, 0.69359840, 0.78571935, 0.75807196, 0.80108900, 0.86319188, 0.88095431, // 3512- 3519
		0.31794535, 0.34854129, 0.45559525, 0.51187549, 0.47571678, 0.59620133, 0.62619336, 0.72604784, // 3520- 3527
		0.44215759, 0.47857189, 0.58063627, 0.64136258, 0.60380845, 0.71263892, 0.74465562, 0.82512546, // 3528- 3535
		0.56073379, 0.59060292, 0.66098050, 0.71173609, 0.68112864, 0.76399731, 0.79175920, 0.85484103, // 3536- 3543
		0.71852962, 0.74333987, 0.79213603, 0.83334068, 0.80972724, 0.86672252, 0.89000658, 0.92856937, // 3544- 3551
		0.64415029, 0.67350446, 0.73615025, 0.78512362, 0.75643440, 0.82877325, 0.85608418, 0.90643588, // 3552- 3559
		0.78528695, 0.80294031, 0.83544112, 0.86744951, 0.84939698, 0.89169699, 0.91093028, 0.94088192, // 3560- 3567
		0.87951396, 0.89119810, 0.91080589, 0.93241467, 0.92075628, 0.94625643, 0.95990679, 0.97575138, // 3568- 3575
		0.93868767, 0.94374064, 0.95177470, 0.96285790, 0.95701246, 0.96941360, 0.97737313, 0.98571537, // 3576- 3583
		0.08975132, 0.11792305, 0.14480421, 0.17481756, 0.16066204, 0.18755065, 0.20231828, 0.21161354, // 3584- 3591
		0.12340218, 0.16687944, 0.20436503, 0.25427967, 0.23146094, 0.27375253, 0.30282802, 0.32012194, // 3592- 3599
		0.24117306, 0.30419403, 0.34469109, 0.41071446, 0.38254036, 0.43251130, 0.47163045, 0.49293916, // 3600- 3607
		0.31366936, 0.39932161, 0.44588244, 0.53558597, 0.50002147, 0.56076363, 0.61936021, 0.64680759, // 3608- 3615
		0.26705924, 0.34050311, 0.38484923, 0.46401173, 0.43119558, 0.48841684, 0.53966906, 0.56569425, // 3616- 3623
		0.42246134, 0.51090599, 0.54997436, 0.63679474, 0.60469547, 0.65785966, 0.71397871, 0.73776900, // 3624- 3631
		0.46406961, 0.56460628, 0.60463968, 0.70337343, 0.66929496, 0.72437309, 0.79225439, 0.81645816, // 3632- 3639
		0.60327312, 0.69956854, 0.72848257, 0.81363657, 0.78809031, 0.82783942, 0.88310175, 0.89890295, // 3640- 3647
		0.34912323, 0.38111417, 0.49309400, 0.54964704, 0.51327223, 0.63450852, 0.66341391, 0.75981899, // 3648- 3655
		0.47571562, 0.51274417, 0.61661397, 0.67590919, 0.63924511, 0.74542933, 0.77531887, 0.85034138, // 3656- 3663
		0.59651192, 0.62618456, 0.69604338, 0.74454635, 0.71528777, 0.79441299, 0.81987115, 0.87750581, // 3664- 3671
		0.74758933, 0.77140930, 0.81832792, 0.85627880, 0.83450117, 0.88704185, 0.90753836, 0.94150434, // 3672- 3679
		0.67637289, 0.70501793, 0.76609487, 0.81197866, 0.78510431, 0.85283480, 0.87729856, 0.92232735, // 3680- 3687
		0.81148685, 0.82810922, 0.85866509, 0.88760026, 0.87132510, 0.90953361, 0.92624262, 0.95219803, // 3688- 3695
		0.89587519, 0.90661248, 0.92464823, 0.94370472, 0.93342052, 0.95590721, 0.96741986, 0.98077741, // 3696- 3703
		0.94886295, 0.95334844, 0.96049193, 0.96997822, 0.96498374, 0.97557130, 0.98210733, 0.98894570, // 3704- 3711
		0.06974016, 0.09320575, 0.11561485, 0.14195809, 0.12956669, 0.15308806, 0.16671208, 0.17528667, // 3712- 3719
		0.09779373, 0.13514079, 0.16734255, 0.21279101, 0.19200595, 0.23052094, 0.25839701, 0.27500132, // 3720- 3727
		0.19588728, 0.25270043, 0.28916704, 0.35217332, 0.32530530, 0.37292893, 0.41233776, 0.43374181, // 3728- 3735
		0.26122349, 0.34151658, 0.38511079, 0.47482843, 0.43926111, 0.50002901, 0.56215360, 0.59131537, // 3736- 3743
		0.21927124, 0.28659230, 0.32724500, 0.40451626, 0.37250324, 0.42837375, 0.48135767, 0.50826920, // 3744- 3751
		0.35926709, 0.44572559, 0.48392124, 0.57425423, 0.54090659, 0.59611898, 0.65811666, 0.68440522, // 3752- 3759
		0.39985215, 0.50046112, 0.54061011, 0.64638888, 0.60985044, 0.66899274, 0.74652482, 0.77419288, // 3760- 3767
		0.53577640, 0.63830591, 0.66910779, 0.76599547, 0.73691026, 0.78214320, 0.84913883, 0.86826148, // 3768- 3775
		0.29589583, 0.32549165, 0.42916792, 0.48511381, 0.44913427, 0.56915503, 0.59982556, 0.70209841, // 3776- 3783
		0.41845327, 0.45438280, 0.55520619, 0.61689113, 0.57871605, 0.68935668, 0.72293230, 0.80732995, // 3784- 3791
		0.53538580, 0.56541641, 0.63615533, 0.68850187, 0.65688323, 0.74252936, 0.77193516, 0.83858764, // 3792- 3799
		0.69795257, 0.72343962, 0.77362517, 0.81713089, 0.79219748, 0.85237793, 0.87759582, 0.91938610, // 3800- 3807
		0.62134330, 0.65121038, 0.71497044, 0.76607609, 0.73617056, 0.81171608, 0.84112417, 0.89521827, // 3808- 3815
		0.76673351, 0.78515008, 0.81899833, 0.85319412, 0.83392947, 0.87908475, 0.90009645, 0.93286439, // 3816- 3823
		0.86794860, 0.88029397, 0.90103521, 0.92443318, 0.91180247, 0.93941019, 0.95458609, 0.97218715, // 3824- 3831
		0.93149549, 0.93692887, 0.94559059, 0.95781797, 0.95138079, 0.96505667, 0.97401760, 0.98343028, // 3832- 3839
		0.05676625, 0.07639133, 0.09513291, 0.11770566, 0.10706508, 0.12727329, 0.13934482, 0.14692595, // 3840- 3847
		0.08019332, 0.11192317, 0.13923999, 0.17920962, 0.16093983, 0.19480260, 0.22032665, 0.23553040, // 3848- 3855
		0.16224501, 0.21158697, 0.24330035, 0.30025592, 0.27593129, 0.31905734, 0.35635732, 0.37661035, // 3856- 3863
		0.21897522, 0.29071733, 0.32970757, 0.41415323, 0.38066899, 0.43786178, 0.50001251, 0.52913126, // 3864- 3871
		0.18250472, 0.24177734, 0.27751898, 0.34886553, 0.31932792, 0.37088254, 0.42251623, 0.44875338, // 3872- 3879
		0.30410749, 0.38355168, 0.41863395, 0.50648290, 0.47402699, 0.52780265, 0.59201002, 0.61925697, // 3880- 3887
		0.34151750, 0.43595073, 0.47354419, 0.57991169, 0.54320298, 0.60256791, 0.68707754, 0.71721230, // 3888- 3895
		0.46633141, 0.56765166, 0.59804582, 0.70162655, 0.67052860, 0.71888125, 0.79740192, 0.81983874, // 3896- 3903
		0.25091675, 0.27719223, 0.36917157, 0.42120378, 0.38773275, 0.49931422, 0.52965468, 0.63090155, // 3904- 3911
		0.36386756, 0.39699255, 0.48985130, 0.55016664, 0.51288509, 0.62091883, 0.65622602, 0.74505752, // 3912- 3919
		0.47170660, 0.50024785, 0.56752529, 0.62025632, 0.58842106, 0.67458566, 0.70660669, 0.77930696, // 3920- 3927
		0.63723506, 0.66294642, 0.71356999, 0.76071616, 0.73369944, 0.79892314, 0.82905161, 0.87895865, // 3928- 3935
		0.55919393, 0.58855678, 0.65123295, 0.70502393, 0.67350777, 0.75295381, 0.78679364, 0.84908381, // 3936- 3943
		0.70726649, 0.72646425, 0.76180661, 0.80013166, 0.77851712, 0.82914171, 0.85513554, 0.89556356, // 3944- 3951
		0.82616319, 0.83977429, 0.86263326, 0.89076326, 0.87558901, 0.90878285, 0.92925117, 0.95301425, // 3952- 3959
		0.90083694, 0.90724190, 0.91745096, 0.93323375, 0.92491587, 0.94256455, 0.95567426, 0.96942394, // 3960- 3967
		0.05069201, 0.06850626, 0.08550800, 0.10634075, 0.09652092, 0.11516358, 0.12650671, 0.13363655, // 3968- 3975
		0.07196441, 0.10104658, 0.12610371, 0.16348169, 0.14638809, 0.17807425, 0.20249629, 0.21703344, // 3976- 3983
		0.14645469, 0.19230632, 0.22177158, 0.27593549, 0.25277693, 0.29379686, 0.33011226, 0.34984853, // 3984- 3991
		0.19918035, 0.26690128, 0.30374173, 0.38573505, 0.35320225, 0.40874316, 0.47088602, 0.50001782, // 3992- 3999
		0.16528671, 0.22077276, 0.25427696, 0.32279828, 0.29439697, 0.34392713, 0.39494408, 0.42085945, // 4000- 4007
		0.27829700, 0.35442679, 0.38811956, 0.47472575, 0.44272701, 0.49574849, 0.56105355, 0.58873938, // 4008- 4015
		0.31416299, 0.40570696, 0.44215195, 0.54875458, 0.51196917, 0.57143146, 0.65922097, 0.69053557, // 4016- 4023
		0.43383851, 0.53447699, 0.56477834, 0.67145878, 0.63942565, 0.68922263, 0.77317384, 0.79715720, // 4024- 4031
		0.22982988, 0.25454820, 0.34104081, 0.39127467, 0.35898958, 0.46655738, 0.49677694, 0.59755308, // 4032- 4039
		0.33829603, 0.37011105, 0.45927210, 0.51888706, 0.48203321, 0.58881980, 0.62498979, 0.71598206, // 4040- 4047
		0.44183084, 0.46967936, 0.53529844, 0.58823192, 0.55627730, 0.64275972, 0.67605366, 0.75148837, // 4048- 4055
		0.60878148, 0.63459746, 0.68542102, 0.73429410, 0.70628595, 0.77390513, 0.80631767, 0.86002310, // 4056- 4063
		0.53007655, 0.55919253, 0.62134125, 0.67638294, 0.64413573, 0.72542469, 0.76134190, 0.82744540, // 4064- 4071
		0.67941303, 0.69899158, 0.73498874, 0.77526295, 0.75255769, 0.80575316, 0.83405796, 0.87811295, // 4072- 4079
		0.80658077, 0.82079918, 0.84463954, 0.87498249, 0.85861833, 0.89441809, 0.91737469, 0.94402560, // 4080- 4087
		0.88646958, 0.89333069, 0.90425836, 0.92171146, 0.91250913, 0.93203369, 0.94709148, 0.96285765, // 4088- 4095
		0.21427695, 0.26172920, 0.30693298, 0.34780255, 0.32855834, 0.36510929, 0.38184716, 0.39236779, // 4096- 4103
		0.27094217, 0.33595257, 0.39197391, 0.45111295, 0.42409116, 0.47422783, 0.50247365, 0.51930123, // 4104- 4111
		0.46929729, 0.54417420, 0.59229433, 0.65444814, 0.62791949, 0.67492776, 0.70506211, 0.72139417, // 4112- 4119
		0.55538261, 0.64281047, 0.69041916, 0.76095507, 0.73296467, 0.78076787, 0.81751185, 0.83475455, // 4120- 4127
		0.50002099, 0.58186686, 0.63121167, 0.69990326, 0.67143326, 0.72113781, 0.75684210, 0.77500732, // 4128- 4135
		0.68458920, 0.75860925, 0.79116303, 0.84721213, 0.82660245, 0.86083169, 0.88953787, 0.90171647, // 4136- 4143
		0.71943150, 0.79644648, 0.82710243, 0.88420756, 0.86449214, 0.89637090, 0.92672643, 0.93757216, // 4144- 4151
		0.83569243, 0.89159591, 0.90842362, 0.94543434, 0.93431721, 0.95158795, 0.96989541, 0.97511601, // 4152- 4159
		0.58574610, 0.62024330, 0.74104434, 0.78618957, 0.75712811, 0.85390560, 0.87065329, 0.92660869, // 4160- 4167
		0.70202770, 0.73557389, 0.82956128, 0.86834939, 0.84436412, 0.91384168, 0.92764672, 0.96244179, // 4168- 4175
		0.81310077, 0.83495921, 0.88655189, 0.91297447, 0.89701752, 0.94030331, 0.95035728, 0.97322160, // 4176- 4183
		0.90184625, 0.91602258, 0.94393460, 0.96028193, 0.95091574, 0.97351832, 0.97971046, 0.98996987, // 4184- 4191
		0.86000623, 0.87895280, 0.91940529, 0.94152269, 0.92856926, 0.96125982, 0.96957688, 0.98496519, // 4192- 4199
		0.93940515, 0.94770047, 0.96290286, 0.97353914, 0.96755055, 0.98159302, 0.98597109, 0.99276897, // 4200- 4207
		0.96999755, 0.97463875, 0.98243380, 0.98837434, 0.98517596, 0.99218103, 0.99465999, 0.99753865, // 4208- 4215
		0.98920794, 0.99069085, 0.99306715, 0.99532978, 0.99413345, 0.99667138, 0.99776173, 0.99890240, // 4216- 4223
		0.16639107, 0.20763955, 0.24699586, 0.28506087, 0.26710504, 0.30115638, 0.31772092, 0.32813102, // 4224- 4231
		0.21565849, 0.27433931, 0.32490319, 0.38255958, 0.35620211, 0.40505656, 0.43444534, 0.45191833, // 4232- 4239
		0.38805281, 0.46141443, 0.50856730, 0.57447224, 0.54634987, 0.59622088, 0.63045548, 0.64901198, // 4240- 4247
		0.47241749, 0.56249231, 0.61144877, 0.69109541, 0.65952160, 0.71340992, 0.75823176, 0.77923222, // 4248- 4255
		0.41825641, 0.50003055, 0.54936787, 0.62426290, 0.59322758, 0.64735551, 0.68930037, 0.71061876, // 4256- 4263
		0.59904094, 0.68114669, 0.71743383, 0.78556034, 0.76035059, 0.80214379, 0.84008341, 0.85617952, // 4264- 4271
		0.63763541, 0.72569142, 0.76077876, 0.83295274, 0.80803861, 0.84833501, 0.89038835, 0.90538494, // 4272- 4279
		0.76668942, 0.83777361, 0.85911787, 0.91147908, 0.89578562, 0.92020048, 0.94879211, 0.95696426, // 4280- 4287
		0.50570744, 0.54059230, 0.66258638, 0.71345075, 0.68072108, 0.78981658, 0.81111371, 0.88221812, // 4288- 4295
		0.62950299, 0.66539267, 0.76606309, 0.81292536, 0.78395895, 0.86792519, 0.88696242, 0.93489311, // 4296- 4303
		0.74763675, 0.77293428, 0.83259730, 0.86696454, 0.84623124, 0.90234966, 0.91720430, 0.95075784, // 4304- 4311
		0.85862207, 0.87630085, 0.91112296, 0.93422613, 0.92096488, 0.95292608, 0.96301639, 0.97971284, // 4312- 4319
		0.80629990, 0.82904032, 0.87759610, 0.90753966, 0.88999388, 0.93426128, 0.94719697, 0.97102148, // 4320- 4327
		0.90558198, 0.91666230, 0.93702882, 0.95307209, 0.94402874, 0.96523769, 0.97277594, 0.98454538, // 4328- 4335
		0.95137478, 0.95789680, 0.96885672, 0.97835809, 0.97323114, 0.98444316, 0.98904790, 0.99439080, // 4336- 4343
		0.98013347, 0.98245861, 0.98616620, 0.99020601, 0.98807600, 0.99259860, 0.99484754, 0.99720468, // 4344- 4351
		0.13750027, 0.17498796, 0.21078244, 0.24714869, 0.23002151, 0.26255266, 0.27902999, 0.28935714, // 4352- 4359
		0.18228540, 0.23713662, 0.28446121, 0.34119082, 0.31523223, 0.36334736, 0.39338012, 0.41127023, // 4360- 4367
		0.33905578, 0.41153175, 0.45801541, 0.52624706, 0.49709250, 0.54876057, 0.58543140, 0.60537924, // 4368- 4375
		0.42233908, 0.51405745, 0.56391505, 0.64892581, 0.61519028, 0.67278787, 0.72246149, 0.74573045, // 4376- 4383
		0.36881692, 0.45068783, 0.50007946, 0.57858509, 0.54603720, 0.60279817, 0.64852897, 0.67175368, // 4384- 4391
		0.54721655, 0.63438099, 0.67278357, 0.74836579, 0.72046785, 0.76663094, 0.81022376, 0.82869740, // 4392- 4399
		0.58816833, 0.68301282, 0.72071559, 0.80204900, 0.77399937, 0.81936288, 0.86847059, 0.88598150, // 4400- 4407
		0.72516403, 0.80531763, 0.82928779, 0.89096474, 0.87248483, 0.90130789, 0.93605713, 0.94599499, // 4408- 4415
		0.45745849, 0.49248827, 0.61521604, 0.66961744, 0.63467846, 0.75125009, 0.77525523, 0.85546376, // 4416- 4423
		0.58570427, 0.62301716, 0.72772898, 0.77948495, 0.74750619, 0.84021936, 0.86240343, 0.91832804, // 4424- 4431
		0.70812642, 0.73552615, 0.80006669, 0.83914565, 0.81559423, 0.87941177, 0.89712647, 0.93717037, // 4432- 4439
		0.83251320, 0.85232485, 0.89130585, 0.91848032, 0.90290257, 0.94054176, 0.95293564, 0.97351519, // 4440- 4447
		0.77389014, 0.79892381, 0.85241056, 0.88702723, 0.86670021, 0.91794843, 0.93367886, 0.96258100, // 4448- 4455
		0.88516920, 0.89793456, 0.92140446, 0.94070845, 0.92984318, 0.95530771, 0.96483650, 0.97955412, // 4456- 4463
		0.94012311, 0.94779304, 0.96065502, 0.97230846, 0.96602396, 0.97978382, 0.98566424, 0.99249483, // 4464- 4471
		0.97465481, 0.97748826, 0.98197870, 0.98712366, 0.98441289, 0.99013844, 0.99309074, 0.99618033, // 4472- 4479
		0.10600972, 0.13709971, 0.16679068, 0.19866502, 0.18364250, 0.21218301, 0.22743247, 0.23701869, // 4480- 4487
		0.14315178, 0.19012763, 0.23059993, 0.28242050, 0.25873562, 0.30267896, 0.33189634, 0.34929129, // 4488- 4495
		0.27317909, 0.33878827, 0.38092485, 0.44724606, 0.41896686, 0.46913438, 0.50733083, 0.52811228, // 4496- 4503
		0.34863207, 0.43568102, 0.48295484, 0.57084251, 0.53602584, 0.59552181, 0.65115011, 0.67721942, // 4504- 4511
		0.30012264, 0.37577628, 0.42139642, 0.49999833, 0.46744350, 0.52426621, 0.57357713, 0.59864609, // 4512- 4519
		0.46178463, 0.54941785, 0.58804216, 0.67100013, 0.64035474, 0.69116940, 0.74325054, 0.76536016, // 4520- 4527
		0.50314315, 0.60125988, 0.64033965, 0.73339963, 0.70130754, 0.75322921, 0.81527247, 0.83739117, // 4528- 4535
		0.64063780, 0.73168425, 0.75896370, 0.83679945, 0.81347280, 0.84980049, 0.89884957, 0.91287653, // 4536- 4543
		0.38379580, 0.41656129, 0.53125827, 0.58688890, 0.55110855, 0.67031733, 0.69752657, 0.78853356, // 4544- 4551
		0.51027027, 0.54722302, 0.65088577, 0.70752899, 0.67250085, 0.77408964, 0.80156026, 0.87061476, // 4552- 4559
		0.63103155, 0.65982264, 0.72772797, 0.77312999, 0.74571552, 0.81993704, 0.84296167, 0.89518399, // 4560- 4567
		0.77340767, 0.79591918, 0.84022461, 0.87484041, 0.85500251, 0.90288091, 0.92096312, 0.95091051, // 4568- 4575
		0.70628756, 0.73369105, 0.79219350, 0.83452417, 0.80974067, 0.87220636, 0.89405349, 0.93418332, // 4576- 4583
		0.83366899, 0.84904866, 0.87736460, 0.90338092, 0.88871857, 0.92305716, 0.93758377, 0.96020429, // 4584- 4591
		0.90909900, 0.91888012, 0.93531221, 0.95213620, 0.94306206, 0.96291830, 0.97276161, 0.98419164, // 4592- 4599
		0.95646775, 0.96045857, 0.96681462, 0.97499409, 0.97067637, 0.97982367, 0.98530465, 0.99104487, // 4600- 4607
		0.11903848, 0.15279213, 0.18500248, 0.21877450, 0.20286096, 0.23304122, 0.24880831, 0.25870495, // 4608- 4615
		0.15936393, 0.20961123, 0.25291005, 0.30676805, 0.28214525, 0.32780645, 0.35737510, 0.37497252, // 4616- 4623
		0.30050689, 0.36889171, 0.41292834, 0.47994756, 0.45134437, 0.50212347, 0.53968403, 0.56011578, // 4624- 4631
		0.37915699, 0.46815319, 0.51651964, 0.60322353, 0.56880427, 0.62750410, 0.68069409, 0.70560999, // 4632- 4639
		0.32859829, 0.40679210, 0.45395964, 0.53257128, 0.50002534, 0.55681714, 0.60464331, 0.62892511, // 4640- 4647
		0.49722879, 0.58461821, 0.62314032, 0.70306107, 0.67353281, 0.72247311, 0.77099305, 0.79160732, // 4648- 4655
		0.53837090, 0.63513696, 0.67363338, 0.76183864, 0.73141072, 0.78061230, 0.83731046, 0.85752501, // 4656- 4663
		0.67562588, 0.76218770, 0.78815324, 0.85924448, 0.83792594, 0.87109023, 0.91426935, 0.92660323, // 4664- 4671
		0.41429836, 0.44800833, 0.56606999, 0.62113986, 0.58575044, 0.70376773, 0.72970907, 0.81622513, // 4672- 4679
		0.54154388, 0.57862460, 0.68269405, 0.73734415, 0.70356870, 0.80153187, 0.82676919, 0.89036153, // 4680- 4687
		0.66297417, 0.69118532, 0.75772607, 0.80051392, 0.77468364, 0.84457039, 0.86540805, 0.91253263, // 4688- 4695
		0.79790567, 0.81927813, 0.86138415, 0.89292555, 0.87484228, 0.91849554, 0.93421672, 0.96027219, // 4696- 4703
		0.73429336, 0.76072196, 0.81713342, 0.85627438, 0.83332574, 0.89119787, 0.91047447, 0.94598748, // 4704- 4711
		0.85501680, 0.86930390, 0.89562379, 0.91885980, 0.90575696, 0.93643534, 0.94887230, 0.96821714, // 4712- 4719
		0.92195230, 0.93085339, 0.94580684, 0.96050063, 0.95257687, 0.96990170, 0.97810617, 0.98763161, // 4720- 4727
		0.96400222, 0.96750934, 0.97309889, 0.98001390, 0.97637128, 0.98410623, 0.98852905, 0.99317239, // 4728- 4735
		0.09629197, 0.12541490, 0.15320163, 0.18371561, 0.16933422, 0.19664140, 0.21150989, 0.22085977, // 4736- 4743
		0.13107856, 0.17559763, 0.21394198, 0.26431168, 0.24128114, 0.28395781, 0.31293083, 0.33017583, // 4744- 4751
		0.25277615, 0.31637456, 0.35716040, 0.42289402, 0.39482960, 0.44463006, 0.48330373, 0.50428049, // 4752- 4759
		0.32591589, 0.41149306, 0.45803606, 0.54673578, 0.51158709, 0.57167968, 0.62914814, 0.65610314, // 4760- 4767
		0.27893263, 0.35265296, 0.39717488, 0.47576795, 0.44322265, 0.50003226, 0.55045835, 0.57607362, // 4768- 4775
		0.43538636, 0.52313816, 0.56194628, 0.64709847, 0.61561881, 0.66784926, 0.72257931, 0.74578785, // 4776- 4783
		0.47665930, 0.57605225, 0.61553032, 0.71222742, 0.67885127, 0.73278628, 0.79886197, 0.82239161, // 4784- 4791
		0.61469177, 0.70898901, 0.73726598, 0.82006019, 0.79527296, 0.83395856, 0.88739153, 0.90264042, // 4792- 4799
		0.36104426, 0.39312087, 0.50542120, 0.56128572, 0.52538263, 0.64534336, 0.67351352, 0.76780555, // 4800- 4807
		0.48701222, 0.52383468, 0.62715846, 0.68537935, 0.64937952, 0.75375966, 0.78280501, 0.85582604, // 4808- 4815
		0.60726179, 0.63647474, 0.70540568, 0.75278537, 0.72420336, 0.80154399, 0.82630265, 0.88218217, // 4816- 4823
		0.75517041, 0.77851831, 0.82445503, 0.86137231, 0.84023721, 0.89131723, 0.91109806, 0.94394998, // 4824- 4831
		0.68542137, 0.71356225, 0.77363921, 0.81828842, 0.79213815, 0.85813447, 0.88179912, 0.92541511, // 4832- 4839
		0.81776562, 0.83396903, 0.86376059, 0.89183609, 0.87599436, 0.91303750, 0.92918041, 0.95422446, // 4840- 4847
		0.89952713, 0.90995713, 0.92747922, 0.94591355, 0.93597906, 0.95771629, 0.96878161, 0.98162809, // 4848- 4855
		0.95086262, 0.95519794, 0.96211648, 0.97124456, 0.96643234, 0.97664754, 0.98290994, 0.98946572, // 4856- 4863
		0.08246536, 0.10795717, 0.13231432, 0.15962089, 0.14673861, 0.17118719, 0.18486828, 0.19346203, // 4864- 4871
		0.11292289, 0.15241169, 0.18645227, 0.23243898, 0.21140949, 0.25038709, 0.27778609, 0.29410166, // 4872- 4879
		0.21951086, 0.27709961, 0.31410452, 0.37573446, 0.34943157, 0.39609574, 0.43384665, 0.45436359, // 4880- 4887
		0.28570994, 0.36517001, 0.40838672, 0.49451488, 0.46034300, 0.51868773, 0.57750750, 0.60507997, // 4888- 4895
		0.24317230, 0.31072262, 0.35148021, 0.42644655, 0.39537826, 0.44956674, 0.50001198, 0.52564243, // 4896- 4903
		0.38506836, 0.46858853, 0.50544653, 0.59076726, 0.55921166, 0.61147953, 0.66951055, 0.69413451, // 4904- 4911
		0.42439217, 0.52066031, 0.55899854, 0.65856157, 0.62419468, 0.67978433, 0.75282858, 0.77888555, // 4912- 4919
		0.55558305, 0.65160389, 0.68042925, 0.77093357, 0.74376359, 0.78605005, 0.84951916, 0.86767096, // 4920- 4927
		0.31927822, 0.34883745, 0.45227932, 0.50609256, 0.47149484, 0.58679635, 0.61559386, 0.71162783, // 4928- 4935
		0.43903948, 0.47407753, 0.57233930, 0.63078855, 0.59466244, 0.69937430, 0.73071018, 0.80944341, // 4936- 4943
		0.55335510, 0.58201355, 0.64957149, 0.69857769, 0.66900076, 0.74904647, 0.77652700, 0.83882354, // 4944- 4951
		0.70705442, 0.73113685, 0.77852637, 0.81929522, 0.79593088, 0.85233674, 0.87630547, 0.91602293, // 4952- 4959
		0.63459263, 0.66295003, 0.72346125, 0.77142523, 0.74332692, 0.81414829, 0.84186147, 0.89286807, // 4960- 4967
		0.77208615, 0.78935320, 0.82109458, 0.85316562, 0.83509669, 0.87741530, 0.89756774, 0.92893021, // 4968- 4975
		0.86877299, 0.88043226, 0.90001066, 0.92236811, 0.91030832, 0.93669221, 0.95170887, 0.96914875, // 4976- 4983
		0.92949152, 0.93466919, 0.94290284, 0.95480069, 0.94853134, 0.96182991, 0.97102081, 0.98064935, // 4984- 4991
		0.07542771, 0.09909100, 0.12167318, 0.14737204, 0.13526381, 0.15826024, 0.17132938, 0.17954845, // 4992- 4999
		0.10369375, 0.14064059, 0.17248054, 0.21624836, 0.19623132, 0.23334150, 0.25992686, 0.27576293, // 5000- 5007
		0.20259370, 0.25715863, 0.29222357, 0.35180041, 0.32636155, 0.37147376, 0.40873237, 0.42900514, // 5008- 5015
		0.26534593, 0.34165615, 0.38313744, 0.46796041, 0.43431190, 0.49177480, 0.55125409, 0.57914420, // 5016- 5023
		0.22500435, 0.28939585, 0.32826683, 0.40138115, 0.37109491, 0.42393137, 0.47437732, 0.50000383, // 5024- 5031
		0.35945263, 0.44078598, 0.47684105, 0.56207788, 0.53052949, 0.58286392, 0.64254297, 0.66789454, // 5032- 5039
		0.39779444, 0.49250431, 0.53025935, 0.63129348, 0.59639881, 0.65281210, 0.72943369, 0.75676329, // 5040- 5047
		0.52567039, 0.62249916, 0.65155570, 0.74594303, 0.71762354, 0.76165912, 0.83028949, 0.84988344, // 5048- 5055
		0.29805308, 0.32632820, 0.42529512, 0.47801091, 0.44415125, 0.55707339, 0.58616151, 0.68299695, // 5056- 5063
		0.41466179, 0.44879611, 0.54452774, 0.60306994, 0.56687902, 0.67177678, 0.70424269, 0.78588528, // 5064- 5071
		0.52599165, 0.55432205, 0.62115298, 0.67102498, 0.64096566, 0.72239188, 0.75123358, 0.81673293, // 5072- 5079
		0.68260116, 0.70705497, 0.75517447, 0.79791642, 0.77342960, 0.83252618, 0.85862740, 0.90185416, // 5080- 5087
		0.60877756, 0.63723280, 0.69799721, 0.74759029, 0.71853135, 0.79182453, 0.82157823, 0.87633191, // 5088- 5095
		0.74888212, 0.76668528, 0.79941723, 0.83350242, 0.81428494, 0.85929634, 0.88151176, 0.91603648, // 5096- 5103
		0.85315249, 0.86543070, 0.88605050, 0.91040637, 0.89726659, 0.92599684, 0.94303223, 0.96280937, // 5104- 5111
		0.91863594, 0.92423368, 0.93313463, 0.94644422, 0.93943259, 0.95430388, 0.96498387, 0.97616518, // 5112- 5119
		0.10004651, 0.13433231, 0.16722257, 0.20314835, 0.18615823, 0.21827537, 0.23532245, 0.24604606, // 5120- 5127
		0.14103153, 0.19352974, 0.23878243, 0.29679286, 0.27033798, 0.31939118, 0.35121164, 0.37011350, // 5128- 5135
		0.28472216, 0.35946328, 0.40744530, 0.48140122, 0.44988746, 0.50546468, 0.54582093, 0.56773660, // 5136- 5143
		0.37077642, 0.46833966, 0.52139817, 0.61470596, 0.57753196, 0.64082126, 0.69590080, 0.72161791, // 5144- 5151
		0.31546422, 0.40106156, 0.45270855, 0.53824624, 0.50284969, 0.56455889, 0.61497338, 0.64062178, // 5152- 5159
		0.49989106, 0.59598505, 0.63802022, 0.72283597, 0.69164359, 0.74330656, 0.79207111, 0.81266730, // 5160- 5167
		0.54516871, 0.65015175, 0.69211733, 0.78283474, 0.75134549, 0.80216727, 0.85682650, 0.87627025, // 5168- 5175
		0.69595660, 0.78609414, 0.81316066, 0.88225317, 0.86162168, 0.89375693, 0.93196511, 0.94288135, // 5176- 5183
		0.40914651, 0.44599432, 0.57544608, 0.63510082, 0.59643630, 0.72517266, 0.75252806, 0.84217562, // 5184- 5191
		0.54682200, 0.58705628, 0.69995991, 0.75771017, 0.72202617, 0.82529924, 0.85029385, 0.91294495, // 5192- 5199
		0.67840978, 0.70863788, 0.78007489, 0.82419439, 0.79759510, 0.86940489, 0.88927179, 0.93411910, // 5200- 5207
		0.81675251, 0.83879640, 0.88229807, 0.91258068, 0.89517370, 0.93717090, 0.95080554, 0.97321439, // 5208- 5215
		0.75148391, 0.77932711, 0.83859334, 0.87746679, 0.85474690, 0.91221083, 0.92954140, 0.96143874, // 5216- 5223
		0.87530276, 0.88961031, 0.91598438, 0.93733546, 0.92528676, 0.95373649, 0.96379439, 0.97976196, // 5224- 5231
		0.93568887, 0.94421109, 0.95855278, 0.97128437, 0.96442094, 0.97945183, 0.98561772, 0.99278390, // 5232- 5239
		0.97365222, 0.97677854, 0.98170699, 0.98718535, 0.98430846, 0.99039459, 0.99338665, 0.99650190, // 5240- 5247
		0.06987354, 0.09674699, 0.12235176, 0.15282618, 0.13846434, 0.16573954, 0.18117896, 0.19089304, // 5248- 5255
		0.10194242, 0.14499206, 0.18206286, 0.23389725, 0.21020554, 0.25418648, 0.28480919, 0.30309362, // 5256- 5263
		0.21417915, 0.28032502, 0.32270980, 0.39347894, 0.36328479, 0.41691229, 0.45892435, 0.48170732, // 5264- 5271
		0.29029616, 0.38144199, 0.43102037, 0.52729687, 0.48912172, 0.55424784, 0.61645613, 0.64555482, // 5272- 5279
		0.24144588, 0.31889387, 0.36565894, 0.45058017, 0.41542155, 0.47684817, 0.53144089, 0.55920655, // 5280- 5287
		0.40408660, 0.50013160, 0.54232715, 0.63565175, 0.60124520, 0.65839608, 0.71738508, 0.74232369, // 5288- 5295
		0.44941056, 0.55789235, 0.60122968, 0.70620661, 0.66996517, 0.72847439, 0.79830633, 0.82319393, // 5296- 5303
		0.59964949, 0.70334153, 0.73434173, 0.82293937, 0.79642558, 0.83770919, 0.89229037, 0.90789306, // 5304- 5311
		0.32842888, 0.36228054, 0.48064443, 0.54172622, 0.50245900, 0.63336162, 0.66459675, 0.76790407, // 5312- 5319
		0.46310714, 0.50261841, 0.61346453, 0.67704469, 0.63770773, 0.75166829, 0.78282102, 0.86114964, // 5320- 5327
		0.59166636, 0.62361779, 0.69902669, 0.75056511, 0.71945530, 0.80370773, 0.82993288, 0.88915802, // 5328- 5335
		0.75125478, 0.77649611, 0.82621720, 0.86537762, 0.84295445, 0.89712155, 0.91716448, 0.95036042, // 5336- 5343
		0.67603377, 0.70659882, 0.77189425, 0.81988079, 0.79178999, 0.86261805, 0.88708612, 0.93198336, // 5344- 5351
		0.81871243, 0.83622406, 0.86827555, 0.89765105, 0.88107132, 0.91981914, 0.93578698, 0.96054670, // 5352- 5359
		0.90241389, 0.91342002, 0.93190827, 0.95050767, 0.94046996, 0.96245406, 0.97286155, 0.98495809, // 5360- 5367
		0.95497949, 0.95942235, 0.96646983, 0.97530015, 0.97065482, 0.98051444, 0.98608855, 0.99193822, // 5368- 5375
		0.05658387, 0.08014826, 0.10264639, 0.13063655, 0.11747096, 0.14251160, 0.15726757, 0.16655429, // 5376- 5383
		0.08475238, 0.12353618, 0.15708535, 0.20616652, 0.18370148, 0.22536313, 0.25552548, 0.27346593, // 5384- 5391
		0.18315913, 0.24536764, 0.28530706, 0.35478913, 0.32497107, 0.37767602, 0.42052230, 0.44380886, // 5392- 5399
		0.25469097, 0.34311059, 0.39109075, 0.48877665, 0.45000618, 0.51601694, 0.58138034, 0.61188275, // 5400- 5407
		0.20886771, 0.28262571, 0.32741516, 0.41198361, 0.37696265, 0.43825288, 0.49457763, 0.52326661, // 5408- 5415
		0.36152173, 0.45761844, 0.49974614, 0.59739248, 0.56122024, 0.62098064, 0.68444031, 0.71124015, // 5416- 5423
		0.40708011, 0.51716099, 0.56119354, 0.67234788, 0.63398765, 0.69601757, 0.77248147, 0.79973999, // 5424- 5431
		0.55710138, 0.66706720, 0.69933804, 0.79675009, 0.76765041, 0.81296742, 0.87472733, 0.89246941, // 5432- 5439
		0.29278978, 0.32523115, 0.43887798, 0.50031401, 0.46097270, 0.59307251, 0.62574718, 0.73462962, // 5440- 5447
		0.42622164, 0.46541914, 0.57536221, 0.64144219, 0.60054947, 0.71901709, 0.75307794, 0.83863967, // 5448- 5455
		0.55349308, 0.58620738, 0.66306011, 0.71817288, 0.68479660, 0.77473175, 0.80371602, 0.86954518, // 5456- 5463
		0.72234810, 0.74904007, 0.80147802, 0.84455378, 0.81991916, 0.87946245, 0.90229795, 0.94036690, // 5464- 5471
		0.64273467, 0.67453909, 0.74236950, 0.79438670, 0.76397691, 0.84065215, 0.86828121, 0.91910287, // 5472- 5479
		0.79381160, 0.81266180, 0.84722638, 0.87997283, 0.86156422, 0.90486454, 0.92340970, 0.95210891, // 5480- 5487
		0.88771712, 0.89982035, 0.92012350, 0.94136090, 0.92990094, 0.95494902, 0.96723378, 0.98152680, // 5488- 5495
		0.94672631, 0.95176590, 0.95977204, 0.97006365, 0.96463283, 0.97619369, 0.98288177, 0.98992995, // 5496- 5503
		0.03845933, 0.05587656, 0.07247755, 0.09464371, 0.08419856, 0.10398454, 0.11647636, 0.12432675, // 5504- 5511
		0.05925580, 0.08915292, 0.11493799, 0.15581028, 0.13709316, 0.17177603, 0.19890009, 0.21504301, // 5512- 5519
		0.13207389, 0.18251927, 0.21493386, 0.27627117, 0.25014251, 0.29645374, 0.33732550, 0.35950517, // 5520- 5527
		0.19009936, 0.26611823, 0.30748571, 0.39987847, 0.36322008, 0.42572721, 0.49355960, 0.52529681, // 5528- 5535
		0.15275301, 0.21446019, 0.25162085, 0.32901183, 0.29693947, 0.35287667, 0.40926516, 0.43791877, // 5536- 5543
		0.27719894, 0.36425660, 0.40267255, 0.49995797, 0.46410251, 0.52359360, 0.59361164, 0.62326944, // 5544- 5551
		0.31830198, 0.42210514, 0.46347252, 0.58040281, 0.54000597, 0.60522721, 0.69505048, 0.72708438, // 5552- 5559
		0.45494434, 0.56754134, 0.60116478, 0.71347996, 0.67986142, 0.73204779, 0.81280116, 0.83583745, // 5560- 5567
		0.22485983, 0.25238705, 0.34871172, 0.40583701, 0.36905537, 0.49165637, 0.52541479, 0.63793741, // 5568- 5575
		0.34585551, 0.38149538, 0.48130261, 0.54777617, 0.50666454, 0.62572757, 0.66411990, 0.76072280, // 5576- 5583
		0.46140792, 0.49275512, 0.56668682, 0.62492391, 0.58969178, 0.68475092, 0.71939496, 0.79765259, // 5584- 5591
		0.64089969, 0.66896382, 0.72413680, 0.77464730, 0.74571522, 0.81560532, 0.84619096, 0.89699983, // 5592- 5599
		0.55629843, 0.58840890, 0.65690854, 0.71528112, 0.68109464, 0.76724038, 0.80245263, 0.86720677, // 5600- 5607
		0.71690521, 0.73776166, 0.77617457, 0.81666261, 0.79384554, 0.84737440, 0.87320225, 0.91353741, // 5608- 5615
		0.83768455, 0.85205105, 0.87617973, 0.90452934, 0.88924278, 0.92271465, 0.94172742, 0.96380616, // 5616- 5623
		0.91354776, 0.92008835, 0.93054964, 0.94570138, 0.93770765, 0.95465658, 0.96616377, 0.97817069, // 5624- 5631
		0.04515107, 0.06482831, 0.08363463, 0.10793060, 0.09649251, 0.11820649, 0.13157087, 0.13992574, // 5632- 5639
		0.06863694, 0.10188113, 0.13047167, 0.17442694, 0.15432667, 0.19156925, 0.21982120, 0.23663362, // 5640- 5647
		0.15096538, 0.20573833, 0.24097092, 0.30527891, 0.27780438, 0.32650212, 0.36809969, 0.39066579, // 5648- 5655
		0.21390111, 0.29460085, 0.33835372, 0.43268363, 0.39531537, 0.45914717, 0.52602640, 0.55734591, // 5656- 5663
		0.17336031, 0.23962951, 0.27960918, 0.35968473, 0.32649293, 0.38439832, 0.44081964, 0.46947718, // 5664- 5671
		0.30840829, 0.39867456, 0.43854219, 0.53591893, 0.50003366, 0.55961114, 0.62716748, 0.65588100, // 5672- 5679
		0.35106365, 0.45734205, 0.49964557, 0.61430576, 0.57470572, 0.63887089, 0.72368682, 0.75393328, // 5680- 5687
		0.49297359, 0.60423386, 0.63771956, 0.74424926, 0.71225314, 0.76201333, 0.83568559, 0.85676895, // 5688- 5695
		0.24998948, 0.27930055, 0.38191237, 0.44089534, 0.40306312, 0.52906134, 0.56252523, 0.67360832, // 5696- 5703
		0.37554460, 0.41251186, 0.51613500, 0.58238963, 0.54136678, 0.66021481, 0.69706893, 0.78954937, // 5704- 5711
		0.49539103, 0.52727136, 0.60226226, 0.65926974, 0.62493832, 0.71816035, 0.75061342, 0.82421352, // 5712- 5719
		0.67101730, 0.69855256, 0.75277658, 0.80049655, 0.77314771, 0.83916193, 0.86696579, 0.91299808, // 5720- 5727
		0.58821875, 0.62023555, 0.68849491, 0.74450701, 0.71169519, 0.79442067, 0.82683980, 0.88636174, // 5728- 5735
		0.74525819, 0.76542932, 0.80249008, 0.84015962, 0.81892674, 0.86862932, 0.89172705, 0.92776244, // 5736- 5743
		0.85618480, 0.86971590, 0.89239236, 0.91812483, 0.90426820, 0.93461716, 0.95115407, 0.97034324, // 5744- 5751
		0.92581248, 0.93181187, 0.94131939, 0.95469493, 0.94764935, 0.96260562, 0.97233238, 0.98251141, // 5752- 5759
		0.03406239, 0.04994905, 0.06516113, 0.08583571, 0.07610321, 0.09461596, 0.10655647, 0.11406796, // 5760- 5767
		0.05305644, 0.08080100, 0.10469466, 0.14359386, 0.12581832, 0.15874489, 0.18514261, 0.20084251, // 5768- 5775
		0.11965277, 0.16721440, 0.19791095, 0.25721369, 0.23183205, 0.27676011, 0.31709417, 0.33903282, // 5776- 5783
		0.17440136, 0.24748913, 0.28714330, 0.37825466, 0.34210758, 0.40383900, 0.47222277, 0.50425869, // 5784- 5791
		0.13918283, 0.19789315, 0.23326731, 0.30889679, 0.27749257, 0.33215352, 0.38852151, 0.41719469, // 5792- 5799
		0.25663960, 0.34177225, 0.37923662, 0.47638823, 0.44048563, 0.50007943, 0.57152389, 0.60181014, // 5800- 5807
		0.29668665, 0.39901907, 0.43977338, 0.55802794, 0.51730472, 0.58307763, 0.67625559, 0.70939679, // 5808- 5815
		0.43036550, 0.54332102, 0.57730667, 0.69323762, 0.65857155, 0.71263096, 0.79773336, 0.82204919, // 5816- 5823
		0.20837084, 0.23466375, 0.32667771, 0.38282138, 0.34676076, 0.46682283, 0.50086688, 0.61423340, // 5824- 5831
		0.32635114, 0.36105048, 0.45847973, 0.52492920, 0.48386399, 0.60284624, 0.64251832, 0.74187384, // 5832- 5839
		0.43893776, 0.47001408, 0.54323019, 0.60218528, 0.56672912, 0.66281877, 0.69900414, 0.78046084, // 5840- 5847
		0.62113874, 0.64951923, 0.70539796, 0.75769808, 0.72767014, 0.80002725, 0.83255464, 0.88649216, // 5848- 5855
		0.53524587, 0.56750927, 0.63613031, 0.69607780, 0.66096799, 0.74954093, 0.78648953, 0.85458553, // 5856- 5863
		0.69817369, 0.71955541, 0.75891844, 0.80129567, 0.77741607, 0.83334504, 0.86109775, 0.90418777, // 5864- 5871
		0.82552114, 0.84043537, 0.86546427, 0.89559681, 0.87935474, 0.91484939, 0.93553507, 0.95952165, // 5872- 5879
		0.90548814, 0.91240077, 0.92341392, 0.93977952, 0.93116695, 0.94947135, 0.96209662, 0.97534002, // 5880- 5887
		0.02626150, 0.03890460, 0.05097719, 0.06793935, 0.05994624, 0.07513230, 0.08528852, 0.09166928, // 5888- 5895
		0.04135957, 0.06384122, 0.08321874, 0.11601443, 0.10101212, 0.12879193, 0.15211611, 0.16598615, // 5896- 5903
		0.09424063, 0.13380277, 0.15927723, 0.21061444, 0.18866072, 0.22755652, 0.26435944, 0.28433138, // 5904- 5911
		0.13971160, 0.20228576, 0.23627677, 0.31875056, 0.28607143, 0.34190565, 0.40800632, 0.43897210, // 5912- 5919
		0.11046066, 0.15993726, 0.18976065, 0.25677818, 0.22902804, 0.27745432, 0.33051753, 0.35747611, // 5920- 5927
		0.20788563, 0.28265740, 0.31555769, 0.40645309, 0.37286393, 0.42840244, 0.50001382, 0.53036104, // 5928- 5935
		0.24319018, 0.33541602, 0.37214268, 0.48655137, 0.44703731, 0.51089757, 0.60901643, 0.64401799, // 5936- 5943
		0.36059698, 0.46799881, 0.50025188, 0.61934766, 0.58350524, 0.63920481, 0.73552523, 0.76306509, // 5944- 5951
		0.16975955, 0.19212627, 0.27044323, 0.32041627, 0.28828901, 0.39543212, 0.42763170, 0.53493946, // 5952- 5959
		0.27464917, 0.30547706, 0.39194472, 0.45440369, 0.41578507, 0.52776419, 0.56780091, 0.66861965, // 5960- 5967
		0.37475850, 0.40314705, 0.47005468, 0.52725423, 0.49273305, 0.58622239, 0.62365019, 0.70864671, // 5968- 5975
		0.55433265, 0.58198987, 0.63645772, 0.69117615, 0.65981962, 0.73554475, 0.77293378, 0.83495013, // 5976- 5983
		0.46968576, 0.50023558, 0.56544997, 0.62616933, 0.59061475, 0.68032431, 0.72140965, 0.79707411, // 5984- 5991
		0.63031200, 0.65181656, 0.69139720, 0.73714215, 0.71137582, 0.77181272, 0.80475751, 0.85602537, // 5992- 5999
		0.77556345, 0.79150153, 0.81827066, 0.85324294, 0.83436625, 0.87562588, 0.90257772, 0.93385525, // 6000- 6007
		0.86680232, 0.87467640, 0.88722919, 0.90763484, 0.89687906, 0.91969454, 0.93746990, 0.95609326, // 6008- 6015
		0.02295212, 0.03420571, 0.04494551, 0.06033319, 0.05309309, 0.06685006, 0.07626511, 0.08216769, // 6016- 6023
		0.03639575, 0.05664905, 0.07410774, 0.10430204, 0.09050008, 0.11610007, 0.13809719, 0.15120365, // 6024- 6031
		0.08350503, 0.11960785, 0.14285986, 0.19083671, 0.17034675, 0.20668822, 0.24194657, 0.26113523, // 6032- 6039
		0.12499657, 0.18307354, 0.21472973, 0.29350711, 0.26225776, 0.31562969, 0.38075723, 0.41126770, // 6040- 6047
		0.09829595, 0.14385524, 0.17131851, 0.23465950, 0.20840672, 0.25421927, 0.30586757, 0.33214314, // 6048- 6055
		0.18728502, 0.25759267, 0.28875402, 0.37673013, 0.34417629, 0.39810469, 0.46967642, 0.50001297, // 6056- 6063
		0.22044160, 0.30843331, 0.34338366, 0.45622963, 0.41727451, 0.48023603, 0.58048810, 0.61625277, // 6064- 6071
		0.33096716, 0.43590762, 0.46724771, 0.58788688, 0.55173082, 0.60793091, 0.70910811, 0.73803829, // 6072- 6079
		0.15336543, 0.17408709, 0.24656275, 0.29397206, 0.26345117, 0.36509353, 0.39653996, 0.50145596, // 6080- 6087
		0.25269923, 0.28186698, 0.36373287, 0.42447297, 0.38690457, 0.49584964, 0.53610553, 0.63759550, // 6088- 6095
		0.34747499, 0.37474818, 0.43903914, 0.49545423, 0.46136263, 0.55354034, 0.59173156, 0.67819487, // 6096- 6103
		0.52595363, 0.55335436, 0.60723484, 0.66296964, 0.63100655, 0.70810106, 0.74762851, 0.81306761, // 6104- 6111
		0.44181457, 0.47169512, 0.53544403, 0.59652086, 0.56075209, 0.65096855, 0.69382501, 0.77264935, // 6112- 6119
		0.60148531, 0.62306734, 0.66271056, 0.70993203, 0.68333547, 0.74565871, 0.78085426, 0.83551746, // 6120- 6127
		0.75438632, 0.77074287, 0.79822141, 0.83527529, 0.81529218, 0.85899045, 0.88860275, 0.92296142, // 6128- 6135
		0.85038690, 0.85868412, 0.87188009, 0.89398944, 0.88233075, 0.90705804, 0.92702695, 0.94793245, // 6136- 6143
		0.08578533, 0.11662490, 0.14599485, 0.17941717, 0.16365393, 0.19354005, 0.20981730, 0.22004549, // 6144- 6151
		0.12259705, 0.17065812, 0.21207704, 0.26721212, 0.24201828, 0.28866940, 0.31996257, 0.33853501, // 6152- 6159
		0.25157422, 0.32220737, 0.36771891, 0.43995140, 0.40906514, 0.46370933, 0.50489631, 0.52719376, // 6160- 6167
		0.33281403, 0.42741840, 0.47877513, 0.57354834, 0.53590482, 0.60002731, 0.65847530, 0.68580857, // 6168- 6175
		0.28060609, 0.36235116, 0.41169081, 0.49694461, 0.46159323, 0.52322049, 0.57564505, 0.60224412, // 6176- 6183
		0.45460888, 0.55076399, 0.59297163, 0.68179629, 0.64891423, 0.70332817, 0.75682747, 0.77953905, // 6184- 6191
		0.50016087, 0.60660090, 0.64893095, 0.74673317, 0.71301350, 0.76748584, 0.82921705, 0.85127521, // 6192- 6199
		0.65083930, 0.74723754, 0.77601689, 0.85431193, 0.83089376, 0.86735713, 0.91326469, 0.92639012, // 6200- 6207
		0.37104144, 0.40649353, 0.53057594, 0.59103662, 0.55224565, 0.68206781, 0.71089713, 0.80754697, // 6208- 6215
		0.50738734, 0.54726642, 0.65914156, 0.71964754, 0.68227785, 0.79068252, 0.81856146, 0.88866981, // 6216- 6223
		0.63745065, 0.66862147, 0.74188063, 0.78955449, 0.76085355, 0.83860435, 0.86132757, 0.91300415, // 6224- 6231
		0.78585633, 0.80942979, 0.85580899, 0.89034238, 0.87059536, 0.91834398, 0.93493127, 0.96243227, // 6232- 6239
		0.71594722, 0.74502381, 0.80717959, 0.85035718, 0.82510544, 0.88889259, 0.90950363, 0.94761100, // 6240- 6247
		0.84858079, 0.86446341, 0.89355160, 0.91861879, 0.90444582, 0.93772675, 0.95061840, 0.97071694, // 6248- 6255
		0.92002280, 0.92970630, 0.94600742, 0.96150318, 0.95312279, 0.97142689, 0.97961022, 0.98909523, // 6256- 6263
		0.96486017, 0.96860303, 0.97454710, 0.98158442, 0.97787866, 0.98573186, 0.98994682, 0.99435101, // 6264- 6271
		0.05642486, 0.07925694, 0.10106622, 0.12797088, 0.11528307, 0.13934886, 0.15354482, 0.16244310, // 6272- 6279
		0.08369534, 0.12112912, 0.15339667, 0.20057669, 0.17900019, 0.21900736, 0.24814481, 0.26549558, // 6280- 6287
		0.17918784, 0.23846669, 0.27678950, 0.34347898, 0.31497538, 0.36549783, 0.40699081, 0.42959315, // 6288- 6295
		0.24746763, 0.33220123, 0.37827642, 0.47295049, 0.43543035, 0.49952702, 0.56405235, 0.59429630, // 6296- 6303
		0.20353635, 0.27429891, 0.31702524, 0.39875584, 0.36491350, 0.42394378, 0.47934125, 0.50749039, // 6304- 6311
		0.34992529, 0.44210024, 0.48282676, 0.57785904, 0.54270848, 0.60097000, 0.66460105, 0.69162159, // 6312- 6319
		0.39339125, 0.50002929, 0.54238207, 0.65256849, 0.61454464, 0.67600931, 0.75434200, 0.78226996, // 6320- 6327
		0.53813784, 0.64550073, 0.67783489, 0.77632164, 0.74671638, 0.79275222, 0.85843732, 0.87721756, // 6328- 6335
		0.28422226, 0.31533613, 0.42433145, 0.48381027, 0.44551561, 0.57305092, 0.60526771, 0.71259818, // 6336- 6343
		0.41310693, 0.45096142, 0.55717328, 0.62194879, 0.58186803, 0.69796017, 0.73228476, 0.81855526, // 6344- 6351
		0.53613097, 0.56783259, 0.64257433, 0.69701797, 0.66414786, 0.75308943, 0.78284067, 0.85025144, // 6352- 6359
		0.70423035, 0.73070194, 0.78278133, 0.82676736, 0.80155075, 0.86240373, 0.88698372, 0.92767714, // 6360- 6367
		0.62499178, 0.65624364, 0.72298849, 0.77533358, 0.74460298, 0.82205406, 0.85104735, 0.90447341, // 6368- 6375
		0.77536502, 0.79428914, 0.82907921, 0.86315573, 0.84393256, 0.88891631, 0.90915162, 0.94053501, // 6376- 6383
		0.87486350, 0.88729819, 0.90818460, 0.93094869, 0.91866586, 0.94552619, 0.95961759, 0.97598135, // 6384- 6391
		0.93735456, 0.94268942, 0.95119942, 0.96271885, 0.95663455, 0.96953053, 0.97762446, 0.98609021, // 6392- 6399
		0.04473912, 0.06438685, 0.08315749, 0.10747895, 0.09602685, 0.11776901, 0.13110579, 0.13954716, // 6400- 6407
		0.06820247, 0.10141472, 0.13002856, 0.17406078, 0.15393615, 0.19122972, 0.21955185, 0.23643825, // 6408- 6415
		0.15032029, 0.20527414, 0.24052314, 0.30506392, 0.27754338, 0.32645158, 0.36810372, 0.39071738, // 6416- 6423
		0.21347539, 0.29429713, 0.33822242, 0.43294360, 0.39538558, 0.45948839, 0.52646708, 0.55787686, // 6424- 6431
		0.17293711, 0.23928049, 0.27935320, 0.35963266, 0.32638187, 0.38441153, 0.44101473, 0.46977313, // 6432- 6439
		0.30815266, 0.39891435, 0.43891730, 0.53647495, 0.50038088, 0.56018570, 0.62791742, 0.65668643, // 6440- 6447
		0.35100207, 0.45752877, 0.50000908, 0.61507274, 0.57532967, 0.63961367, 0.72453210, 0.75480564, // 6448- 6455
		0.49314449, 0.60505684, 0.63838392, 0.74522125, 0.71325443, 0.76310091, 0.83661196, 0.85765499, // 6456- 6463
		0.24961727, 0.27906882, 0.38202874, 0.44107575, 0.40314413, 0.52980832, 0.56309206, 0.67516548, // 6464- 6471
		0.37558559, 0.41261646, 0.51656551, 0.58306995, 0.54188448, 0.66114205, 0.69794326, 0.79066188, // 6472- 6479
		0.49585110, 0.52771237, 0.60301997, 0.66012132, 0.62566008, 0.71909599, 0.75160773, 0.82537834, // 6480- 6487
		0.67179068, 0.69935226, 0.75367851, 0.80144203, 0.77409886, 0.84019280, 0.86789626, 0.91385877, // 6488- 6495
		0.58878031, 0.62087387, 0.68941636, 0.74542324, 0.71259109, 0.79544040, 0.82777592, 0.88727500, // 6496- 6503
		0.74619417, 0.76635385, 0.80352379, 0.84105864, 0.81980003, 0.86963435, 0.89266705, 0.92856368, // 6504- 6511
		0.85687778, 0.87040923, 0.89314752, 0.91879405, 0.90495233, 0.93522344, 0.95167794, 0.97074820, // 6512- 6519
		0.92640356, 0.93238637, 0.94191855, 0.95521144, 0.94820384, 0.96305063, 0.97271928, 0.98280911, // 6520- 6527
		0.02763403, 0.04089360, 0.05355046, 0.07124790, 0.06290725, 0.07873724, 0.08923385, 0.09582388, // 6528- 6535
		0.04347821, 0.06695780, 0.08719534, 0.12115983, 0.10563611, 0.13441622, 0.15830536, 0.17252735, // 6536- 6543
		0.09893833, 0.14005722, 0.16654167, 0.21940140, 0.19680985, 0.23687975, 0.27431305, 0.29466445, // 6544- 6551
		0.14620176, 0.21079785, 0.24590007, 0.33002260, 0.29666962, 0.35360785, 0.42011040, 0.45126302, // 6552- 6559
		0.11580811, 0.16706385, 0.19799907, 0.26661178, 0.23817710, 0.28777053, 0.34145885, 0.36872946, // 6560- 6567
		0.21716395, 0.29385408, 0.32762623, 0.41963892, 0.38565238, 0.44206302, 0.51347683, 0.54380174, // 6568- 6575
		0.25328351, 0.34749178, 0.38491848, 0.50001275, 0.46028747, 0.52453265, 0.62159426, 0.65618583, // 6576- 6583
		0.37376470, 0.48221134, 0.51482576, 0.63317504, 0.59759348, 0.65290210, 0.74705047, 0.77395002, // 6584- 6591
		0.17701069, 0.20013707, 0.28114577, 0.33222239, 0.29937723, 0.40903115, 0.44150705, 0.54993349, // 6592- 6599
		0.28439759, 0.31595984, 0.40455299, 0.46774060, 0.42868104, 0.54191803, 0.58184977, 0.68229921, // 6600- 6607
		0.38694105, 0.41579745, 0.48385054, 0.54138488, 0.50671086, 0.60058428, 0.63774524, 0.72200116, // 6608- 6615
		0.56686824, 0.59465326, 0.64932874, 0.70356085, 0.67248396, 0.74746473, 0.78394467, 0.84437220, // 6616- 6623
		0.48202473, 0.51287429, 0.57874710, 0.63926040, 0.60380156, 0.69317793, 0.73347774, 0.80765132, // 6624- 6631
		0.64298865, 0.66446338, 0.70396272, 0.74904322, 0.72363033, 0.78315887, 0.81510531, 0.86472133, // 6632- 6639
		0.78481013, 0.80054268, 0.82695821, 0.86098494, 0.84262221, 0.88278816, 0.90855319, 0.93845591, // 6640- 6647
		0.87387593, 0.88156839, 0.89379894, 0.91344562, 0.90309867, 0.92504553, 0.94187797, 0.95950641, // 6648- 6655
		0.03354048, 0.04899988, 0.06376051, 0.08374505, 0.07432955, 0.09217481, 0.10369317, 0.11091372, // 6656- 6663
		0.05201019, 0.07884759, 0.10198500, 0.13941277, 0.12229773, 0.15402570, 0.17944853, 0.19458523, // 6664- 6671
		0.11671305, 0.16254391, 0.19206982, 0.24895048, 0.22465956, 0.26776147, 0.30669427, 0.32784530, // 6672- 6679
		0.16940770, 0.23965808, 0.27776632, 0.36554237, 0.33073073, 0.39014875, 0.45682825, 0.48806383, // 6680- 6687
		0.13551541, 0.19198876, 0.22602942, 0.29871729, 0.26861706, 0.32111625, 0.37582311, 0.40359287, // 6688- 6695
		0.24866453, 0.33008884, 0.36603556, 0.45998747, 0.42520866, 0.48287035, 0.55297726, 0.58277497, // 6696- 6703
		0.28699675, 0.38547236, 0.42461729, 0.53971292, 0.50002617, 0.56426945, 0.65710399, 0.69022091, // 6704- 6711
		0.41502358, 0.52456835, 0.55746743, 0.67184614, 0.63755304, 0.69087399, 0.77796580, 0.80283903, // 6712- 6719
		0.20205456, 0.22734924, 0.31593843, 0.36980442, 0.33515263, 0.45056574, 0.48342774, 0.59315879, // 6720- 6727
		0.31586516, 0.34932998, 0.44318648, 0.50753289, 0.46772715, 0.58307545, 0.62194240, 0.71969241, // 6728- 6735
		0.42450590, 0.45444182, 0.52504049, 0.58240439, 0.54772641, 0.64150541, 0.67707485, 0.75750402, // 6736- 6743
		0.60305613, 0.63078605, 0.68534593, 0.73733194, 0.70753940, 0.77948001, 0.81292686, 0.86834618, // 6744- 6751
		0.51887008, 0.55015137, 0.61694852, 0.67592918, 0.64131941, 0.72846062, 0.76603288, 0.83515726, // 6752- 6759
		0.67860131, 0.69961488, 0.73833354, 0.78079153, 0.75683044, 0.81298499, 0.84187447, 0.88680894, // 6760- 6767
		0.80969086, 0.82465010, 0.84978571, 0.88094099, 0.86413628, 0.90087742, 0.92343679, 0.94960489, // 6768- 6775
		0.89200538, 0.89909680, 0.91039127, 0.92785941, 0.91865642, 0.93820861, 0.95251395, 0.96754308, // 6776- 6783
		0.02399378, 0.03589121, 0.04724317, 0.06352499, 0.05585437, 0.07042442, 0.08030250, 0.08651440, // 6784- 6791
		0.03820306, 0.05961414, 0.07808050, 0.10989201, 0.09534377, 0.12231415, 0.14525953, 0.15890760, // 6792- 6799
		0.08796608, 0.12614766, 0.15068601, 0.20112331, 0.17963147, 0.21781064, 0.25430505, 0.27421091, // 6800- 6807
		0.13192745, 0.19301452, 0.22627836, 0.30811253, 0.27565545, 0.33107637, 0.39744188, 0.42856995, // 6808- 6815
		0.10364484, 0.15166130, 0.18068636, 0.24677930, 0.21938957, 0.26721252, 0.32026132, 0.34721155, // 6816- 6823
		0.19773493, 0.27147354, 0.30393860, 0.39479482, 0.36122035, 0.41678121, 0.48914301, 0.51973746, // 6824- 6831
		0.23248704, 0.32396102, 0.36046587, 0.47547747, 0.43577953, 0.50005317, 0.59966689, 0.63521995, // 6832- 6839
		0.34816772, 0.45595852, 0.48830163, 0.60927290, 0.57305352, 0.62943517, 0.72797064, 0.75614995, // 6840- 6847
		0.16151604, 0.18332346, 0.25967079, 0.30903928, 0.27721880, 0.38323857, 0.41560485, 0.52346161, // 6848- 6855
		0.26495561, 0.29536638, 0.38065955, 0.44319674, 0.40454052, 0.51651632, 0.55715357, 0.65923069, // 6856- 6863
		0.36375217, 0.39196158, 0.45850121, 0.51605847, 0.48132685, 0.57532690, 0.61342695, 0.70010485, // 6864- 6871
		0.54450165, 0.57233982, 0.62711527, 0.68269358, 0.65084064, 0.72776928, 0.76605397, 0.82954200, // 6872- 6879
		0.45929944, 0.48985836, 0.55518509, 0.61662327, 0.58062171, 0.67145166, 0.71336036, 0.79061047, // 6880- 6887
		0.62098471, 0.64278905, 0.68279026, 0.72946904, 0.70311724, 0.76472181, 0.79855368, 0.85120117, // 6888- 6895
		0.76945559, 0.78565799, 0.81286070, 0.84867361, 0.82934078, 0.87162371, 0.89936737, 0.93157476, // 6896- 6903
		0.86269121, 0.87073524, 0.88356320, 0.90455786, 0.89350196, 0.91695330, 0.93531289, 0.95455572, // 6904- 6911
		0.01638881, 0.02480135, 0.03284078, 0.04476795, 0.03914365, 0.04981684, 0.05739190, 0.06215201, // 6912- 6919
		0.02644398, 0.04194031, 0.05529742, 0.07942808, 0.06839530, 0.08885232, 0.10727648, 0.11824490, // 6920- 6927
		0.06163555, 0.08999373, 0.10823755, 0.14764856, 0.13082538, 0.16065996, 0.19105220, 0.20756051, // 6928- 6935
		0.09426590, 0.14138676, 0.16701786, 0.23455060, 0.20776918, 0.25349538, 0.31293442, 0.34079003, // 6936- 6943
		0.07327445, 0.10961876, 0.13155598, 0.18473972, 0.16270070, 0.20114451, 0.24718689, 0.27058250, // 6944- 6951
		0.14321697, 0.20167510, 0.22749095, 0.30497861, 0.27634969, 0.32379635, 0.39100667, 0.41951697, // 6952- 6959
		0.17077312, 0.24566989, 0.27551676, 0.37844429, 0.34291453, 0.40036960, 0.50001050, 0.53554779, // 6960- 6967
		0.26261479, 0.35622968, 0.38437602, 0.50016739, 0.46540578, 0.51952374, 0.62651556, 0.65711485, // 6968- 6975
		0.11799281, 0.13469592, 0.19312767, 0.23311998, 0.20739888, 0.29304563, 0.32115875, 0.41470209, // 6976- 6983
		0.20183653, 0.22642351, 0.29539579, 0.34933256, 0.31598209, 0.41262946, 0.45097358, 0.54728937, // 6984- 6991
		0.28188446, 0.30547372, 0.36112579, 0.41251140, 0.38150032, 0.46541733, 0.50264767, 0.58710494, // 6992- 6999
		0.44879843, 0.47408141, 0.52383095, 0.57863261, 0.54722360, 0.62307480, 0.66538216, 0.73558699, // 7000- 7007
		0.37010376, 0.39698829, 0.45437156, 0.51275129, 0.47855467, 0.56477814, 0.60923073, 0.69102954, // 7008- 7015
		0.51944091, 0.53989914, 0.57757903, 0.62525987, 0.59836341, 0.66134873, 0.70006723, 0.76030721, // 7016- 7023
		0.68579791, 0.70243051, 0.73036042, 0.77098069, 0.74906994, 0.79699207, 0.83333693, 0.87550256, // 7024- 7031
		0.79030178, 0.79921094, 0.81340214, 0.83927480, 0.82564195, 0.85456252, 0.88086319, 0.90841673, // 7032- 7039
		0.01367899, 0.02084951, 0.02769853, 0.03807648, 0.03318409, 0.04247083, 0.04922133, 0.05346175, // 7040- 7047
		0.02224749, 0.03563930, 0.04718382, 0.06857076, 0.05878584, 0.07692359, 0.09373159, 0.10374075, // 7048- 7055
		0.05224291, 0.07709015, 0.09308583, 0.12857613, 0.11343711, 0.14030334, 0.16848710, 0.18380814, // 7056- 7063
		0.08085120, 0.12297168, 0.14586718, 0.20831864, 0.18356477, 0.22583527, 0.28280552, 0.30949191, // 7064- 7071
		0.06245371, 0.09461817, 0.11403428, 0.16262416, 0.14248689, 0.17761360, 0.22113633, 0.24325367, // 7072- 7079
		0.12372010, 0.17682267, 0.20022848, 0.27293913, 0.24603790, 0.29058559, 0.35599437, 0.38375933, // 7080- 7087
		0.14871425, 0.21775655, 0.24522500, 0.34380320, 0.30979843, 0.36480363, 0.46447780, 0.50000701, // 7088- 7095
		0.23213750, 0.32062983, 0.34715661, 0.46127773, 0.42702299, 0.48028827, 0.59034785, 0.62178616, // 7096- 7103
		0.10247282, 0.11734791, 0.16943451, 0.20601793, 0.18250769, 0.26090009, 0.28741455, 0.37596605, // 7104- 7111
		0.17932131, 0.20183414, 0.26496383, 0.31587826, 0.28439608, 0.37557857, 0.41308990, 0.50739333, // 7112- 7119
		0.25270193, 0.27462886, 0.32636010, 0.37556894, 0.34588837, 0.42621290, 0.46314450, 0.54682300, // 7120- 7127
		0.41464772, 0.43902661, 0.48700669, 0.54152639, 0.51027137, 0.58573722, 0.62949755, 0.70206875, // 7128- 7135
		0.33830331, 0.36387120, 0.41841421, 0.47570628, 0.44217045, 0.52676063, 0.57209856, 0.65547630, // 7136- 7143
		0.48319418, 0.50320748, 0.54003826, 0.58808012, 0.56101232, 0.62443145, 0.66493351, 0.72793581, // 7144- 7151
		0.65596680, 0.67275241, 0.70093006, 0.74326972, 0.72044146, 0.77039767, 0.80978921, 0.85550831, // 7152- 7159
		0.76448471, 0.77370344, 0.78838237, 0.81599281, 0.80144525, 0.83230949, 0.86144556, 0.89196079, // 7160- 7167
		0.03840149, 0.05757083, 0.07573690, 0.10044248, 0.08882592, 0.11095294, 0.12476647, 0.13350355, // 7168- 7175
		0.06127307, 0.09443317, 0.12290929, 0.16838768, 0.14761222, 0.18612941, 0.21565545, 0.23323432, // 7176- 7183
		0.14099626, 0.19781418, 0.23435613, 0.30233952, 0.27321032, 0.32449141, 0.36834043, 0.39208462, // 7184- 7191
		0.20628998, 0.29083155, 0.33675492, 0.43637296, 0.39687594, 0.46415346, 0.53369496, 0.56617164, // 7192- 7199
		0.16432387, 0.23326231, 0.27495410, 0.35940059, 0.32428115, 0.38530221, 0.44446916, 0.47446598, // 7200- 7207
		0.30385990, 0.40031923, 0.44228553, 0.54520634, 0.50706014, 0.56994321, 0.63952552, 0.66912638, // 7208- 7215
		0.34933642, 0.46173380, 0.50678548, 0.62627008, 0.58504440, 0.65174134, 0.73737583, 0.76789540, // 7216- 7223
		0.49998289, 0.61709786, 0.65255012, 0.76097239, 0.72855047, 0.77907312, 0.85092731, 0.87142084, // 7224- 7231
		0.24433061, 0.27498004, 0.38196120, 0.44434135, 0.40468256, 0.53778246, 0.57322266, 0.69097775, // 7232- 7239
		0.37598034, 0.41470060, 0.52345433, 0.59309159, 0.54998544, 0.67471099, 0.71266797, 0.80760813, // 7240- 7247
		0.50152918, 0.53512882, 0.61412936, 0.67372898, 0.63779022, 0.73460416, 0.76783779, 0.84294392, // 7248- 7255
		0.68306414, 0.71162250, 0.76784734, 0.81623115, 0.78848871, 0.85559694, 0.88219485, 0.92654901, // 7256- 7263
		0.59744048, 0.63089468, 0.70232099, 0.75976046, 0.72600537, 0.81101759, 0.84283318, 0.90147305, // 7264- 7271
		0.75977530, 0.78046902, 0.81864356, 0.85623788, 0.83506959, 0.88459805, 0.90629434, 0.94046613, // 7272- 7279
		0.86776217, 0.88135907, 0.90413458, 0.92885333, 0.91555042, 0.94474826, 0.95958763, 0.97682346, // 7280- 7287
		0.93549109, 0.94134166, 0.95059335, 0.96294908, 0.95642959, 0.97022953, 0.97848588, 0.98715617, // 7288- 7295
		0.02267603, 0.03536678, 0.04747788, 0.06544722, 0.05697755, 0.07302253, 0.08409957, 0.09099679, // 7296- 7303
		0.03781554, 0.06117345, 0.08130663, 0.11672465, 0.10056176, 0.13056813, 0.15596637, 0.17108360, // 7304- 7311
		0.09080302, 0.13361393, 0.16115452, 0.21774046, 0.19357498, 0.23640946, 0.27666070, 0.29855165, // 7312- 7319
		0.14009517, 0.20858074, 0.24585033, 0.33634228, 0.30050216, 0.36170818, 0.43240540, 0.46552195, // 7320- 7327
		0.10839936, 0.16218873, 0.19479683, 0.26834375, 0.23787228, 0.29103954, 0.34840109, 0.37754354, // 7328- 7335
		0.21393771, 0.29670645, 0.33307926, 0.43252972, 0.39575208, 0.45672312, 0.53205620, 0.56414195, // 7336- 7343
		0.25291404, 0.35446038, 0.39509082, 0.51784451, 0.47539168, 0.54406891, 0.64381259, 0.67941280, // 7344- 7351
		0.38292680, 0.50007420, 0.53523195, 0.65933557, 0.62205527, 0.67979174, 0.77342281, 0.80016489, // 7352- 7359
		0.17312311, 0.19748820, 0.28292612, 0.33800167, 0.30248154, 0.42089206, 0.45607119, 0.57313037, // 7360- 7367
		0.28744866, 0.32112728, 0.41556749, 0.48350719, 0.44146904, 0.56312292, 0.60522644, 0.71098688, // 7368- 7375
		0.39649686, 0.42763040, 0.50082325, 0.56247722, 0.52538903, 0.62599809, 0.66453020, 0.75253350, // 7376- 7383
		0.58615452, 0.61561610, 0.67362688, 0.72976269, 0.69754676, 0.77523151, 0.81111308, 0.87063487, // 7384- 7391
		0.49671304, 0.52966066, 0.59988386, 0.66336881, 0.62619303, 0.72003735, 0.76056585, 0.83512846, // 7392- 7399
		0.66635282, 0.68894809, 0.73059657, 0.77660433, 0.75065002, 0.81152978, 0.84238860, 0.89032260, // 7400- 7407
		0.80563551, 0.82164186, 0.84860491, 0.88180250, 0.86388633, 0.90305641, 0.92636005, 0.95338612, // 7408- 7415
		0.89307416, 0.90065779, 0.91273655, 0.93109347, 0.92141115, 0.94193320, 0.95631508, 0.97139289, // 7416- 7423
		0.01793914, 0.02868219, 0.03897451, 0.05494180, 0.04743246, 0.06169162, 0.07188694, 0.07827487, // 7424- 7431
		0.03081939, 0.05119847, 0.06883446, 0.10124773, 0.08643627, 0.11393318, 0.13806584, 0.15245680, // 7432- 7439
		0.07576511, 0.11435387, 0.13909342, 0.19233338, 0.16962305, 0.20993794, 0.24923473, 0.27059132, // 7440- 7447
		0.12017724, 0.18393540, 0.21860539, 0.30642308, 0.27153595, 0.33105595, 0.40200115, 0.43531198, // 7448- 7455
		0.09162813, 0.14091880, 0.17071996, 0.24103159, 0.21181594, 0.26281066, 0.31956375, 0.34846344, // 7456- 7463
		0.18639072, 0.26569607, 0.30031404, 0.39864477, 0.36240600, 0.42283397, 0.49988013, 0.53266578, // 7464- 7471
		0.22369208, 0.32230130, 0.36154845, 0.48532785, 0.44253103, 0.51163889, 0.61580018, 0.65287218, // 7472- 7479
		0.34776631, 0.46473168, 0.49981873, 0.62870338, 0.59014132, 0.64994769, 0.75021998, 0.77877299, // 7480- 7487
		0.15176528, 0.17421097, 0.25305713, 0.30616644, 0.27208007, 0.38567882, 0.42083151, 0.53778667, // 7488- 7495
		0.26087214, 0.29301528, 0.38314084, 0.45056162, 0.40891756, 0.52984247, 0.57289761, 0.68185917, // 7496- 7503
		0.36495926, 0.39542087, 0.46675047, 0.52931647, 0.49142204, 0.59348386, 0.63343179, 0.72555364, // 7504- 7511
		0.55703865, 0.58679424, 0.64524617, 0.70373056, 0.67024805, 0.75118484, 0.78976685, 0.85400175, // 7512- 7519
		0.46647609, 0.49928652, 0.56901665, 0.63443253, 0.59620705, 0.69294690, 0.73590227, 0.81525588, // 7520- 7527
		0.63826830, 0.66141908, 0.70406086, 0.75270860, 0.72532851, 0.78962103, 0.82310925, 0.87531131, // 7528- 7535
		0.78695487, 0.80374938, 0.83188596, 0.86763749, 0.84836120, 0.89056296, 0.91640179, 0.94633886, // 7536- 7543
		0.88034686, 0.88845174, 0.90135071, 0.92152732, 0.91089308, 0.93347449, 0.94967014, 0.96667007, // 7544- 7551
		0.00969011, 0.01608929, 0.02217987, 0.03250582, 0.02764864, 0.03688518, 0.04408309, 0.04859456, // 7552- 7559
		0.01733057, 0.03017115, 0.04123265, 0.06373566, 0.05344975, 0.07250852, 0.09104104, 0.10207120, // 7560- 7567
		0.04407033, 0.06968697, 0.08613737, 0.12515835, 0.10850435, 0.13806230, 0.16990191, 0.18722190, // 7568- 7575
		0.07353920, 0.11912580, 0.14388866, 0.21431003, 0.18637818, 0.23408067, 0.29840092, 0.32858241, // 7576- 7583
		0.05457035, 0.08854829, 0.10905738, 0.16319895, 0.14076859, 0.17990138, 0.22908866, 0.25409459, // 7584- 7591
		0.11773812, 0.17712454, 0.20331951, 0.28645299, 0.25575574, 0.30682299, 0.38072196, 0.41207232, // 7592- 7599
		0.14566671, 0.22371001, 0.25476719, 0.36685019, 0.32817640, 0.39076486, 0.49984341, 0.53874911, // 7600- 7607
		0.23889384, 0.34077427, 0.37120516, 0.50000616, 0.46140019, 0.52143094, 0.63810174, 0.67144935, // 7608- 7615
		0.09768306, 0.11354322, 0.16916617, 0.21028831, 0.18384315, 0.27206462, 0.30256842, 0.40428623, // 7616- 7623
		0.18249366, 0.20741258, 0.27724502, 0.33516210, 0.29933630, 0.40308138, 0.44556429, 0.55223329, // 7624- 7631
		0.26345357, 0.28827662, 0.34674013, 0.40298641, 0.36907551, 0.46093615, 0.50252670, 0.59651162, // 7632- 7639
		0.44409798, 0.47147001, 0.52530408, 0.58571019, 0.55111677, 0.63473156, 0.68076972, 0.75709235, // 7640- 7647
		0.35894315, 0.38775148, 0.44913534, 0.51323968, 0.47567400, 0.57044075, 0.61925296, 0.70896169, // 7648- 7655
		0.52056174, 0.54300927, 0.58429371, 0.63695011, 0.60728064, 0.67689377, 0.71876852, 0.78397753, // 7656- 7663
		0.69720030, 0.71517684, 0.74541471, 0.78882993, 0.76541371, 0.81663884, 0.85356869, 0.89643195, // 7664- 7671
		0.80815100, 0.81770015, 0.83297195, 0.85999985, 0.84574858, 0.87594378, 0.90166492, 0.92857850, // 7672- 7679
		0.01216638, 0.01986458, 0.02720607, 0.03924556, 0.03356936, 0.04434511, 0.05242240, 0.05749593, // 7680- 7687
		0.02136563, 0.03647973, 0.04951496, 0.07499787, 0.06333982, 0.08491262, 0.10514587, 0.11717906, // 7688- 7695
		0.05355870, 0.08306030, 0.10202481, 0.14533016, 0.12685669, 0.15958810, 0.19371246, 0.21219891, // 7696- 7703
		0.08748769, 0.13852208, 0.16629848, 0.24191552, 0.21189156, 0.26315958, 0.32948348, 0.36058962, // 7704- 7711
		0.06567806, 0.10425941, 0.12749131, 0.18655242, 0.16211140, 0.20473851, 0.25625470, 0.28238830, // 7712- 7719
		0.13846506, 0.20361111, 0.23244014, 0.32024567, 0.28768646, 0.34151763, 0.41647729, 0.44831343, // 7720- 7727
		0.16905598, 0.25328813, 0.28677117, 0.40239628, 0.36245582, 0.42700885, 0.53461651, 0.57298838, // 7728- 7735
		0.27158431, 0.37813253, 0.40990484, 0.53862733, 0.50000853, 0.56007041, 0.67172055, 0.70364698, // 7736- 7743
		0.11391332, 0.13176103, 0.19432501, 0.23903678, 0.21028970, 0.30603083, 0.33810752, 0.44467089, // 7744- 7751
		0.20602939, 0.23307450, 0.30903618, 0.36980452, 0.33226144, 0.44101486, 0.48379941, 0.59111244, // 7752- 7759
		0.29388639, 0.32036821, 0.38276588, 0.44088257, 0.40574326, 0.50049067, 0.54180190, 0.63487400, // 7760- 7767
		0.47804560, 0.50608869, 0.56131891, 0.62111176, 0.58682822, 0.66959197, 0.71344931, 0.78619217, // 7768- 7775
		0.39122295, 0.42116926, 0.48509591, 0.54962619, 0.51181252, 0.60712975, 0.65423012, 0.74081316, // 7776- 7783
		0.55587200, 0.57855481, 0.62024654, 0.67168936, 0.64267426, 0.71066970, 0.75007884, 0.81135062, // 7784- 7791
		0.72413375, 0.74175649, 0.77134398, 0.81246952, 0.79031415, 0.83883895, 0.87241782, 0.91141726, // 7792- 7799
		0.82980988, 0.83892722, 0.85347076, 0.87847031, 0.86531219, 0.89316879, 0.91605825, 0.93999712, // 7800- 7807
		0.00831127, 0.01398952, 0.01936942, 0.02878492, 0.02434520, 0.03272850, 0.03944666, 0.04363619, // 7808- 7815
		0.01507330, 0.02666209, 0.03664918, 0.05746836, 0.04794562, 0.06562424, 0.08319948, 0.09367963, // 7816- 7823
		0.03876539, 0.06227590, 0.07729274, 0.11390668, 0.09832360, 0.12604806, 0.15667496, 0.17331359, // 7824- 7831
		0.06577037, 0.10829263, 0.13145994, 0.19895224, 0.17218411, 0.21790214, 0.28113072, 0.31078676, // 7832- 7839
		0.04843907, 0.07981998, 0.09880759, 0.15020627, 0.12891756, 0.16614012, 0.21400106, 0.23832848, // 7840- 7847
		0.10630347, 0.16225861, 0.18724033, 0.26782512, 0.23808306, 0.28761875, 0.36088906, 0.39200376, // 7848- 7855
		0.13272176, 0.20728444, 0.23700051, 0.34714629, 0.30913068, 0.37059082, 0.48053294, 0.51971047, // 7856- 7863
		0.22096580, 0.31998295, 0.34986428, 0.47853243, 0.44000428, 0.49993770, 0.61944583, 0.65347598, // 7864- 7871
		0.08866052, 0.10345022, 0.15518590, 0.19434080, 0.16917081, 0.25321451, 0.28279662, 0.38245777, // 7872- 7879
		0.16944507, 0.19310269, 0.25958603, 0.31589486, 0.28113147, 0.38203377, 0.42431818, 0.53054289, // 7880- 7887
		0.24652152, 0.27044794, 0.32669897, 0.38205595, 0.34855968, 0.43899561, 0.48053056, 0.57524646, // 7888- 7895
		0.42529641, 0.45226347, 0.50530395, 0.56605786, 0.53127369, 0.61523127, 0.66259566, 0.74104799, // 7896- 7903
		0.34108601, 0.36911777, 0.42906274, 0.49304418, 0.45557226, 0.55001003, 0.59975968, 0.69124238, // 7904- 7911
		0.50095449, 0.52326881, 0.56426317, 0.61771834, 0.58763556, 0.65799695, 0.70133473, 0.76869126, // 7912- 7919
		0.68221914, 0.70042848, 0.73094664, 0.77566990, 0.75161390, 0.80432542, 0.84310848, 0.88810989, // 7920- 7927
		0.79606233, 0.80594091, 0.82155335, 0.84971854, 0.83487220, 0.86637782, 0.89366260, 0.92219971, // 7928- 7935
		0.00492711, 0.00843851, 0.01178472, 0.01786480, 0.01500108, 0.02043832, 0.02502195, 0.02790020, // 7936- 7943
		0.00911996, 0.01651737, 0.02288687, 0.03698194, 0.03054122, 0.04248277, 0.05523864, 0.06283857, // 7944- 7951
		0.02378410, 0.03917422, 0.04906679, 0.07460166, 0.06370966, 0.08304418, 0.10599366, 0.11847402, // 7952- 7959
		0.04148068, 0.07072257, 0.08663083, 0.13680951, 0.11689027, 0.15090593, 0.20261440, 0.22684163, // 7960- 7967
		0.03010415, 0.05121556, 0.06395923, 0.10115515, 0.08574649, 0.11262947, 0.15049664, 0.16972646, // 7968- 7975
		0.06800087, 0.10773278, 0.12524663, 0.18721385, 0.16431654, 0.20224218, 0.26449938, 0.29089606, // 7976- 7983
		0.08674936, 0.14154797, 0.16336586, 0.25297585, 0.22204655, 0.27203101, 0.37351259, 0.40967941, // 7984- 7991
		0.14908767, 0.22656716, 0.24988277, 0.36193496, 0.32828385, 0.38060145, 0.50000573, 0.53412702, // 7992- 7999
		0.05792783, 0.06803913, 0.10346201, 0.13177824, 0.11357859, 0.17430838, 0.19748537, 0.27498000, // 8000- 8007
		0.11735551, 0.13469058, 0.18330287, 0.22737154, 0.20013933, 0.27909388, 0.31535260, 0.40654998, // 8008- 8015
		0.17406788, 0.19213273, 0.23471563, 0.27934154, 0.25238390, 0.32533654, 0.36222418, 0.44601806, // 8016- 8023
		0.32633406, 0.34883020, 0.39314974, 0.44802706, 0.41657772, 0.49252873, 0.54058122, 0.62026490, // 8024- 8031
		0.25455254, 0.27718397, 0.32547879, 0.38112810, 0.34854670, 0.43076598, 0.47903051, 0.56795412, // 8032- 8039
		0.39075064, 0.40999149, 0.44550802, 0.49533268, 0.46721928, 0.53314460, 0.57856880, 0.64929190, // 8040- 8047
		0.58161213, 0.59905200, 0.62832153, 0.67551930, 0.65005962, 0.70573422, 0.75296517, 0.80779676, // 8048- 8055
		0.70149969, 0.71161988, 0.72776164, 0.75994024, 0.74298274, 0.77898187, 0.81517710, 0.85308126, // 8056- 8063
		0.00396354, 0.00685244, 0.00961526, 0.01475173, 0.01232623, 0.01691835, 0.02089967, 0.02339175, // 8064- 8071
		0.00741499, 0.01361739, 0.01896206, 0.03112246, 0.02556383, 0.03587828, 0.04725158, 0.05402494, // 8072- 8079
		0.01950425, 0.03258539, 0.04098769, 0.06336420, 0.05380739, 0.07075111, 0.09150874, 0.10281581, // 8080- 8087
		0.03455179, 0.05997369, 0.07381398, 0.11905031, 0.10111730, 0.13175000, 0.18017351, 0.20286510, // 8088- 8095
		0.02487197, 0.04303841, 0.05399330, 0.08713247, 0.07342267, 0.09735578, 0.13234652, 0.15012596, // 8096- 8103
		0.05713785, 0.09212721, 0.10757968, 0.16419127, 0.14325933, 0.17792730, 0.23696647, 0.26201296, // 8104- 8111
		0.07361401, 0.12278894, 0.14240836, 0.22605768, 0.19717298, 0.24389637, 0.34291601, 0.37823265, // 8112- 8119
		0.12859325, 0.19984503, 0.22117440, 0.32859922, 0.29636287, 0.34653321, 0.46592458, 0.50001736, // 8120- 8127
		0.04913852, 0.05792493, 0.08866565, 0.11387755, 0.09768470, 0.15175845, 0.17314114, 0.24444761, // 8128- 8135
		0.10246535, 0.11799392, 0.16155504, 0.20207269, 0.17699240, 0.24960282, 0.28419187, 0.37107437, // 8136- 8143
		0.15335835, 0.16975075, 0.20836965, 0.24999645, 0.22490232, 0.29279315, 0.32840921, 0.40906501, // 8144- 8151
		0.29804137, 0.31927755, 0.36107864, 0.41431798, 0.38378714, 0.45747193, 0.50572668, 0.58573920, // 8152- 8159
		0.22984507, 0.25091916, 0.29589295, 0.34914669, 0.31797310, 0.39662692, 0.44453470, 0.53273272, // 8160- 8167
		0.35925899, 0.37764272, 0.41147213, 0.46043701, 0.43283487, 0.49737170, 0.54350954, 0.61513492, // 8168- 8175
		0.55285912, 0.57008359, 0.59899932, 0.64689604, 0.62106223, 0.67755959, 0.72722521, 0.78485603, // 8176- 8183
		0.67446219, 0.68468558, 0.70094015, 0.73428448, 0.71671194, 0.75399380, 0.79274474, 0.83336518, // 8184- 8191
		0.16666982, 0.20725503, 0.24600736, 0.28328621, 0.26570982, 0.29906406, 0.31531607, 0.32553320, // 8192- 8199
		0.21514827, 0.27277875, 0.32242638, 0.37895259, 0.35312698, 0.40098713, 0.42992060, 0.44713646, // 8200- 8207
		0.38487914, 0.45654234, 0.50259318, 0.56725067, 0.53961213, 0.58856481, 0.62238131, 0.64076868, // 8208- 8215
		0.46722082, 0.55550406, 0.60341196, 0.68207581, 0.65088488, 0.70414585, 0.74910665, 0.77017667, // 8216- 8223
		0.41429176, 0.49429542, 0.54257562, 0.61624910, 0.58573360, 0.63897641, 0.68074048, 0.70196703, // 8224- 8231
		0.59085098, 0.67159331, 0.70726444, 0.77514291, 0.75001655, 0.79164759, 0.83026197, 0.84664286, // 8232- 8239
		0.62892715, 0.71580070, 0.75043942, 0.82300888, 0.79796316, 0.83847992, 0.88201912, 0.89753238, // 8240- 8247
		0.75570813, 0.82688660, 0.84824202, 0.90235074, 0.88611110, 0.91137719, 0.94209366, 0.95086939, // 8248- 8255
		0.50001603, 0.53412685, 0.65360528, 0.70365443, 0.67144101, 0.77882075, 0.80020128, 0.87136618, // 8256- 8263
		0.62178654, 0.65709364, 0.75615423, 0.80286160, 0.77396465, 0.85762968, 0.87722026, 0.92637460, // 8264- 8271
		0.73801486, 0.76305367, 0.82208759, 0.85672652, 0.83583027, 0.89243467, 0.90788249, 0.94290201, // 8272- 8279
		0.84988692, 0.86765558, 0.90265584, 0.92660850, 0.91286820, 0.94599873, 0.95696924, 0.97512784, // 8280- 8287
		0.79714333, 0.81982747, 0.86825196, 0.89890696, 0.88095092, 0.92618076, 0.94003378, 0.96546805, // 8288- 8295
		0.89721037, 0.90849903, 0.92925866, 0.94617697, 0.93665189, 0.95901346, 0.96743026, 0.98050056, // 8296- 8303
		0.94597734, 0.95275161, 0.96413076, 0.97443331, 0.96887621, 0.98104364, 0.98638433, 0.99258431, // 8304- 8311
		0.97660519, 0.97910183, 0.98308038, 0.98767109, 0.98525011, 0.99038393, 0.99314578, 0.99603639, // 8312- 8319
		0.14691325, 0.18483416, 0.22103248, 0.25702575, 0.24006710, 0.27225642, 0.28838484, 0.29850686, // 8320- 8327
		0.19220420, 0.24703203, 0.29428734, 0.34994229, 0.32449258, 0.37167646, 0.40095114, 0.41837692, // 8328- 8335
		0.35078630, 0.42144153, 0.46691730, 0.53280761, 0.50467108, 0.55460965, 0.59003115, 0.60927190, // 8336- 8343
		0.43210196, 0.52097749, 0.56928631, 0.65148494, 0.61889618, 0.67453624, 0.72282586, 0.74546069, // 8344- 8351
		0.37977152, 0.45943812, 0.50750132, 0.58347437, 0.55201140, 0.60689646, 0.65119046, 0.67369431, // 8352- 8359
		0.55407220, 0.63778833, 0.67474990, 0.74763083, 0.72069923, 0.76531718, 0.80788976, 0.82593457, // 8360- 8367
		0.59352044, 0.68467767, 0.72094035, 0.79987866, 0.77268626, 0.81670102, 0.86531911, 0.88266816, // 8368- 8375
		0.72497419, 0.80248923, 0.82577301, 0.88646360, 0.86824960, 0.89655388, 0.93196904, 0.94208227, // 8376- 8383
		0.46589421, 0.50001322, 0.61943902, 0.67174319, 0.63811993, 0.75023099, 0.77345711, 0.85095874, // 8384- 8391
		0.59033942, 0.62652199, 0.72802804, 0.77798180, 0.74705707, 0.83663628, 0.85846146, 0.91330509, // 8392- 8399
		0.70913805, 0.73550962, 0.79775343, 0.83573488, 0.81280484, 0.87478360, 0.89227376, 0.93198549, // 8400- 8407
		0.83027175, 0.84951419, 0.88737311, 0.91427085, 0.89886382, 0.93606851, 0.94878305, 0.96989602, // 8408- 8415
		0.77316978, 0.79739627, 0.84913062, 0.88310311, 0.86320590, 0.91339773, 0.92929288, 0.95851230, // 8416- 8423
		0.88153546, 0.89401129, 0.91697044, 0.93629431, 0.92539745, 0.95093755, 0.96082498, 0.97622490, // 8424- 8431
		0.93716492, 0.94476093, 0.95752082, 0.96946248, 0.96302102, 0.97711362, 0.98348416, 0.99088122, // 8432- 8439
		0.97210754, 0.97498350, 0.97956518, 0.98500240, 0.98213496, 0.98821627, 0.99156135, 0.99506981, // 8440- 8447
		0.07778071, 0.10633632, 0.13360443, 0.16509654, 0.15025858, 0.17845032, 0.19407395, 0.20393212, // 8448- 8455
		0.11187617, 0.15689085, 0.19565245, 0.24843890, 0.22431100, 0.26901146, 0.29955110, 0.31775059, // 8456- 8463
		0.23124788, 0.29866532, 0.34206872, 0.41239245, 0.38230046, 0.43558621, 0.47670729, 0.49903366, // 8464- 8471
		0.30870309, 0.40020857, 0.44987486, 0.54435773, 0.50695100, 0.57089261, 0.63088521, 0.65897140, // 8472- 8479
		0.25892855, 0.33746148, 0.38487458, 0.46875815, 0.43398284, 0.49459643, 0.54773836, 0.57469126, // 8480- 8487
		0.42495235, 0.51940374, 0.56122574, 0.65135200, 0.61799737, 0.67334696, 0.72961251, 0.75346823, // 8488- 8495
		0.46939910, 0.57573794, 0.61798231, 0.71893003, 0.68415221, 0.74044443, 0.80687379, 0.83059121, // 8496- 8503
		0.61785336, 0.71709209, 0.74687466, 0.83082951, 0.80567211, 0.84484063, 0.89654747, 0.91134177, // 8504- 8511
		0.34647554, 0.38059650, 0.50000259, 0.56010035, 0.52147973, 0.65002815, 0.68001892, 0.77938089, // 8512- 8519
		0.48026388, 0.51947651, 0.62941279, 0.69094221, 0.65289968, 0.76311639, 0.79274195, 0.86746870, // 8520- 8527
		0.60801074, 0.63917057, 0.71254878, 0.76206223, 0.73212305, 0.81285878, 0.83775316, 0.89362332, // 8528- 8535
		0.76167006, 0.78600059, 0.83388565, 0.87107339, 0.84978307, 0.90125182, 0.92016187, 0.95160816, // 8536- 8543
		0.68921526, 0.71884216, 0.78213866, 0.82785663, 0.80104452, 0.86862474, 0.89174595, 0.93425031, // 8544- 8551
		0.82665007, 0.84331281, 0.87395389, 0.90171452, 0.88607388, 0.92267098, 0.93780462, 0.96122177, // 8552- 8559
		0.90632067, 0.91679532, 0.93441323, 0.95205180, 0.94253365, 0.96336062, 0.97333058, 0.98493000, // 8560- 8567
		0.95635476, 0.96055229, 0.96727389, 0.97564368, 0.97122336, 0.98062368, 0.98601622, 0.99168815, // 8568- 8575
		0.06001193, 0.08392438, 0.10678998, 0.13469417, 0.12155577, 0.14646816, 0.16106029, 0.17020420, // 8576- 8583
		0.08859547, 0.12756713, 0.16120254, 0.20971589, 0.18752416, 0.22863184, 0.25823727, 0.27584663, // 8584- 8591
		0.18871231, 0.24996486, 0.28945161, 0.35732373, 0.32833111, 0.37982186, 0.42147684, 0.44414595, // 8592- 8599
		0.25918267, 0.34581459, 0.39284155, 0.48817864, 0.45038322, 0.51488366, 0.57882879, 0.60876005, // 8600- 8607
		0.21382242, 0.28654303, 0.33040501, 0.41313508, 0.37888074, 0.43873813, 0.49394098, 0.52201450, // 8608- 8615
		0.36484857, 0.45828883, 0.49955214, 0.59421405, 0.55917957, 0.61717901, 0.67962514, 0.70608611, // 8616- 8623
		0.40887771, 0.51628751, 0.55894188, 0.66776250, 0.63024324, 0.69097419, 0.76689830, 0.79399277, // 8624- 8631
		0.55547736, 0.66188484, 0.69391752, 0.78973377, 0.76098797, 0.80569387, 0.86824968, 0.88610631, // 8632- 8639
		0.29636411, 0.32830525, 0.43993792, 0.50001414, 0.46146634, 0.59019261, 0.62212054, 0.72851563, // 8640- 8647
		0.42701917, 0.46539282, 0.57298934, 0.63750610, 0.59758940, 0.71325100, 0.74666127, 0.83089923, // 8648- 8655
		0.55175193, 0.58351634, 0.65854558, 0.71226692, 0.67979036, 0.76746402, 0.79637889, 0.86159610, // 8656- 8663
		0.71759499, 0.74375848, 0.79529025, 0.83790687, 0.81344320, 0.87251936, 0.89574681, 0.93431573, // 8664- 8671
		0.63940966, 0.67051955, 0.73687660, 0.78804837, 0.75810163, 0.83378403, 0.86146893, 0.91252326, // 8672- 8679
		0.78780907, 0.80629787, 0.84040963, 0.87311066, 0.85470409, 0.89795240, 0.91693052, 0.94645956, // 8680- 8687
		0.88281932, 0.89485525, 0.91506079, 0.93666125, 0.92501963, 0.95049502, 0.96351477, 0.97863591, // 8688- 8695
		0.94250653, 0.94758266, 0.95568383, 0.96641473, 0.96076016, 0.97275030, 0.98014066, 0.98782971, // 8696- 8703
		0.07139873, 0.09834413, 0.12401696, 0.15422837, 0.13998919, 0.16701892, 0.18227011, 0.19186819, // 8704- 8711
		0.10357020, 0.14641210, 0.18334441, 0.23458699, 0.21116514, 0.25460427, 0.28481431, 0.30279876, // 8712- 8719
		0.21607035, 0.28129219, 0.32324506, 0.39275176, 0.36304418, 0.41577455, 0.45699068, 0.47941656, // 8720- 8727
		0.29104911, 0.38077487, 0.42963534, 0.52432881, 0.48677567, 0.55088317, 0.61227978, 0.64105578, // 8728- 8735
		0.24283924, 0.31929488, 0.36533804, 0.44888131, 0.41430476, 0.47464483, 0.52850824, 0.55588362, // 8736- 8743
		0.40361181, 0.49760956, 0.53915198, 0.63092414, 0.59702866, 0.65323894, 0.71175847, 0.73653527, // 8744- 8751
		0.44785685, 0.55448273, 0.59679480, 0.70067378, 0.66485048, 0.72278810, 0.79259932, 0.81748889, // 8752- 8759
		0.59563559, 0.69740729, 0.72783796, 0.81616925, 0.78970431, 0.83082134, 0.88644495, 0.90233306, // 8760- 8767
		0.32859624, 0.36191998, 0.47857258, 0.53860158, 0.49996374, 0.62862713, 0.65928235, 0.76134189, // 8768- 8775
		0.46124934, 0.50017065, 0.60923642, 0.67183535, 0.63315909, 0.74533365, 0.77631470, 0.85433915, // 8776- 8783
		0.58790187, 0.61926899, 0.69328132, 0.74424444, 0.71351336, 0.79667758, 0.82290740, 0.88222271, // 8784- 8791
		0.74594531, 0.77091103, 0.82009355, 0.85925076, 0.83678117, 0.89095239, 0.91146449, 0.94544242, // 8792- 8799
		0.67142169, 0.70160377, 0.76596602, 0.81365590, 0.78573698, 0.85616799, 0.88089824, 0.92653504, // 8800- 8807
		0.81280343, 0.83010514, 0.86199484, 0.89151538, 0.87488399, 0.91387666, 0.93032568, 0.95591373, // 8808- 8815
		0.89793020, 0.90896583, 0.92748928, 0.94655458, 0.93627233, 0.95876045, 0.96982327, 0.98267092, // 8816- 8823
		0.95139924, 0.95592023, 0.96312779, 0.97236348, 0.96748625, 0.97780966, 0.98391739, 0.99030500, // 8824- 8831
		0.03329746, 0.05032073, 0.06655091, 0.08904730, 0.07846208, 0.09863124, 0.11150952, 0.11964584, // 8832- 8839
		0.05366304, 0.08360287, 0.10943160, 0.15164281, 0.13232648, 0.16807970, 0.19625053, 0.21300869, // 8840- 8847
		0.12477347, 0.17691914, 0.21037481, 0.27460831, 0.24726364, 0.29577791, 0.33847525, 0.36167496, // 8848- 8855
		0.18482945, 0.26409175, 0.30733158, 0.40378242, 0.36550191, 0.43081531, 0.50072763, 0.53347011, // 8856- 8863
		0.14615600, 0.21020480, 0.24885906, 0.32984943, 0.29621963, 0.35464148, 0.41321445, 0.44291707, // 8864- 8871
		0.27481703, 0.36646263, 0.40667468, 0.50835600, 0.47096062, 0.53355475, 0.60471033, 0.63495645, // 8872- 8879
		0.31816676, 0.42700884, 0.47030595, 0.59104276, 0.54932375, 0.61675654, 0.70695342, 0.73916345, // 8880- 8887
		0.46185045, 0.57911267, 0.61453351, 0.72795574, 0.69394453, 0.74689331, 0.82578744, 0.84826339, // 8888- 8895
		0.22120963, 0.24977203, 0.34981251, 0.40988489, 0.37132738, 0.50007822, 0.53521148, 0.65202565, // 8896- 8903
		0.34713987, 0.38428378, 0.48843399, 0.55731616, 0.51477967, 0.63852500, 0.67775106, 0.77623944, // 8904- 8911
		0.46724023, 0.50017816, 0.57725655, 0.63765443, 0.60118819, 0.69980729, 0.73431325, 0.81340757, // 8912- 8919
		0.65151828, 0.68037377, 0.73731936, 0.78816113, 0.75902475, 0.82937021, 0.85909372, 0.90842604, // 8920- 8927
		0.56467752, 0.59797868, 0.66897283, 0.72846791, 0.69363071, 0.78157732, 0.81594593, 0.87989720, // 8928- 8935
		0.72953942, 0.75076135, 0.79018802, 0.83037205, 0.80770460, 0.86102384, 0.88572208, 0.92429462, // 8936- 8943
		0.84753829, 0.86190603, 0.88612045, 0.91358545, 0.89873784, 0.93123207, 0.94877568, 0.96919388, // 8944- 8951
		0.92173220, 0.92810722, 0.93833351, 0.95258789, 0.94507887, 0.96101398, 0.97127631, 0.98204534, // 8952- 8959
		0.02858469, 0.04367087, 0.05804743, 0.07857807, 0.06892597, 0.08727060, 0.09932750, 0.10693152, // 8960- 8967
		0.04661529, 0.07364565, 0.09693470, 0.13612204, 0.11821296, 0.15140379, 0.17835487, 0.19439797, // 8968- 8975
		0.10960538, 0.15763547, 0.18865819, 0.24941835, 0.22338480, 0.26954844, 0.31100418, 0.33362336, // 8976- 8983
		0.16497024, 0.23944162, 0.27997621, 0.37382304, 0.33668594, 0.40007732, 0.47034409, 0.50329570, // 8984- 8991
		0.12937031, 0.18889052, 0.22478026, 0.30244910, 0.27032080, 0.32647697, 0.38443488, 0.41386585, // 8992- 8999
		0.24777927, 0.33547485, 0.37406596, 0.47479178, 0.43745610, 0.49905040, 0.57232726, 0.60348887, // 9000- 9007
		0.28905527, 0.39473812, 0.43686826, 0.55851637, 0.51650392, 0.58446482, 0.67888971, 0.71260536, // 9008- 9015
		0.42675916, 0.54383038, 0.57918549, 0.69733442, 0.66189268, 0.71725006, 0.80249366, 0.82689134, // 9016- 9023
		0.19982523, 0.22654849, 0.32024050, 0.37791650, 0.34082191, 0.46472126, 0.50007992, 0.61709567, // 9024- 9031
		0.32061921, 0.35616903, 0.45599978, 0.52459255, 0.48220838, 0.60523861, 0.64555591, 0.74720506, // 9032- 9039
		0.43590041, 0.46787663, 0.54340629, 0.60423302, 0.56750905, 0.66686800, 0.70348274, 0.78622045, // 9040- 9047
		0.62246641, 0.65161315, 0.70896842, 0.76217145, 0.73162537, 0.80529943, 0.83785059, 0.89161953, // 9048- 9055
		0.53453202, 0.56762376, 0.63832414, 0.69953850, 0.66372956, 0.75409228, 0.79141901, 0.85999138, // 9056- 9063
		0.70135429, 0.72329655, 0.76357618, 0.80647327, 0.78227346, 0.83885274, 0.86633516, 0.90919475, // 9064- 9071
		0.82892678, 0.84400965, 0.86939070, 0.89946513, 0.88324190, 0.91868614, 0.93881280, 0.96217527, // 9072- 9079
		0.90901015, 0.91593747, 0.92692969, 0.94301509, 0.93453359, 0.95256225, 0.96463628, 0.97732379, // 9080- 9087
		0.01281220, 0.02150561, 0.02978601, 0.04353931, 0.03704974, 0.04944989, 0.05866084, 0.06449388, // 9088- 9095
		0.02318077, 0.04044929, 0.05530449, 0.08448894, 0.07112589, 0.09587235, 0.11870367, 0.13229393, // 9096- 9103
		0.05943479, 0.09340918, 0.11544350, 0.16491740, 0.14379367, 0.18118778, 0.21949885, 0.24015425, // 9104- 9111
		0.09849232, 0.15724544, 0.18889415, 0.27387020, 0.24026668, 0.29774694, 0.36907392, 0.40251806, // 9112- 9119
		0.07348639, 0.11791697, 0.14468375, 0.21149954, 0.18375488, 0.23215235, 0.28831752, 0.31697372, // 9120- 9127
		0.15735365, 0.23241813, 0.26480531, 0.36214290, 0.32641684, 0.38574497, 0.46499674, 0.49863098, // 9128- 9135
		0.19250053, 0.28753806, 0.32513696, 0.45006485, 0.40689835, 0.47667362, 0.58524849, 0.62413167, // 9136- 9143
		0.30985069, 0.42655220, 0.46197711, 0.59550469, 0.55541471, 0.61809931, 0.72497009, 0.75572332, // 9144- 9151
		0.12856077, 0.14908474, 0.22077163, 0.27145972, 0.23884881, 0.34741155, 0.38301136, 0.50009208, // 9152- 9159
		0.23206176, 0.26259597, 0.34833338, 0.41503313, 0.37376593, 0.49347711, 0.53816180, 0.65062366, // 9160- 9167
		0.33084795, 0.36032464, 0.43002381, 0.49318493, 0.45504067, 0.55795972, 0.60000444, 0.69567890, // 9168- 9175
		0.52555765, 0.55554019, 0.61449410, 0.67552130, 0.64067822, 0.72514330, 0.76663669, 0.83559083, // 9176- 9183
		0.43379885, 0.46634318, 0.53578272, 0.60307564, 0.56374536, 0.66310532, 0.70909635, 0.79362749, // 9184- 9191
		0.60799273, 0.63171923, 0.67543260, 0.72680847, 0.69793812, 0.76561848, 0.80228592, 0.85900250, // 9192- 9199
		0.76679906, 0.78435863, 0.81380932, 0.85236962, 0.83161326, 0.87702467, 0.90560216, 0.93873843, // 9200- 9207
		0.86656245, 0.87524908, 0.88909987, 0.91117962, 0.89949663, 0.92425749, 0.94245392, 0.96152171, // 9208- 9215
		0.10803499, 0.13856334, 0.16768962, 0.19856120, 0.18400506, 0.21161205, 0.22630075, 0.23553314, // 9216- 9223
		0.14449724, 0.19022103, 0.22960403, 0.27957589, 0.25673413, 0.29909897, 0.32726125, 0.34403117, // 9224- 9231
		0.27210781, 0.33508229, 0.37559208, 0.43904778, 0.41193450, 0.46002091, 0.49682550, 0.51683252, // 9232- 9239
		0.34455464, 0.42795557, 0.47328732, 0.55785991, 0.52430792, 0.58157639, 0.63614438, 0.66172152, // 9240- 9247
		0.29796021, 0.37053725, 0.41432409, 0.48974707, 0.45848515, 0.51302299, 0.56098326, 0.58535827, // 9248- 9255
		0.45317873, 0.53689553, 0.57388620, 0.65415276, 0.62448049, 0.67364892, 0.72537306, 0.74736209, // 9256- 9263
		0.49262682, 0.58689999, 0.62446800, 0.71563448, 0.68416445, 0.73506828, 0.79818283, 0.82069460, // 9264- 9271
		0.62416361, 0.71264044, 0.73915734, 0.81750609, 0.79399696, 0.83056473, 0.88266533, 0.89754804, // 9272- 9279
		0.37824850, 0.40968678, 0.51971069, 0.57299554, 0.53876244, 0.65283346, 0.67943664, 0.76793901, // 9280- 9287
		0.50000360, 0.53553946, 0.63519309, 0.69023441, 0.65621214, 0.75481739, 0.78227791, 0.85128528, // 9288- 9295
		0.61624383, 0.64400680, 0.70944626, 0.75394360, 0.72708291, 0.79984033, 0.82320300, 0.87627052, // 9296- 9303
		0.75676022, 0.77887383, 0.82240466, 0.85752347, 0.83740276, 0.88598049, 0.90540030, 0.93756628, // 9304- 9311
		0.69052092, 0.71721799, 0.77418110, 0.81645311, 0.79169760, 0.85413061, 0.87703883, 0.91917971, // 9312- 9319
		0.81621688, 0.83152527, 0.85971329, 0.88656535, 0.87141881, 0.90691548, 0.92290078, 0.94775959, // 9320- 9327
		0.89626690, 0.90627289, 0.92308661, 0.94121734, 0.93142904, 0.95282995, 0.96436440, 0.97775390, // 9328- 9335
		0.94653739, 0.95078133, 0.95753339, 0.96681860, 0.96192431, 0.97230398, 0.97914909, 0.98632355, // 9336- 9343
		0.09158698, 0.11913524, 0.14544393, 0.17436492, 0.16072761, 0.18660246, 0.20079910, 0.20970809, // 9344- 9351
		0.12450019, 0.16667300, 0.20299408, 0.25094568, 0.22903051, 0.26966569, 0.29757988, 0.31420667, // 9352- 9359
		0.23970606, 0.29995754, 0.33871827, 0.40166787, 0.37479800, 0.42247558, 0.46014105, 0.48059478, // 9360- 9367
		0.30899233, 0.39078716, 0.43525788, 0.52147430, 0.48727915, 0.54563807, 0.60302877, 0.62992152, // 9368- 9375
		0.26446670, 0.33462440, 0.37697884, 0.45280250, 0.42139014, 0.47618634, 0.52594371, 0.55121848, // 9376- 9383
		0.41293951, 0.49739608, 0.53461854, 0.61852918, 0.58753702, 0.63887936, 0.69455423, 0.71813740, // 9384- 9391
		0.45268719, 0.54905047, 0.58740224, 0.68403455, 0.65069452, 0.70464575, 0.77358463, 0.79817697, // 9392- 9399
		0.58528173, 0.67891695, 0.70699869, 0.79260678, 0.76692068, 0.80686402, 0.86532686, 0.88201618, // 9400- 9407
		0.34291620, 0.37350767, 0.48055765, 0.53462955, 0.49985843, 0.61577340, 0.64380921, 0.73741472, // 9408- 9415
		0.46447187, 0.50001244, 0.59966785, 0.65711326, 0.62159942, 0.72455222, 0.75435834, 0.82924489, // 9416- 9423
		0.58050394, 0.60902999, 0.67625155, 0.72367072, 0.69509444, 0.77249752, 0.79833177, 0.85679681, // 9424- 9431
		0.72944452, 0.75283084, 0.79885827, 0.83730929, 0.81526920, 0.86848058, 0.89040455, 0.92673333, // 9432- 9439
		0.65922490, 0.68707401, 0.74652163, 0.79226092, 0.76547198, 0.83301441, 0.85862327, 0.90575676, // 9440- 9447
		0.79245640, 0.80896245, 0.83933566, 0.86918425, 0.85236734, 0.89178120, 0.91000175, 0.93836266, // 9448- 9455
		0.88176050, 0.89273226, 0.91116052, 0.93160901, 0.92057216, 0.94470425, 0.95806287, 0.97355952, // 9456- 9463
		0.93785467, 0.94260991, 0.95018938, 0.96085652, 0.95523823, 0.96716380, 0.97519603, 0.98361458, // 9464- 9471
		0.04544268, 0.06468044, 0.08305986, 0.10651079, 0.09544074, 0.11643387, 0.12926226, 0.13731461, // 9472- 9479
		0.06841720, 0.10062495, 0.12838544, 0.17064422, 0.15131880, 0.18714263, 0.21433823, 0.23052718, // 9480- 9487
		0.14888241, 0.20144020, 0.23521575, 0.29687908, 0.27058174, 0.31728307, 0.35724558, 0.37902510, // 9488- 9495
		0.20932591, 0.28662201, 0.32858535, 0.41941553, 0.38336326, 0.44483261, 0.51013838, 0.54071444, // 9496- 9503
		0.17042219, 0.23394568, 0.27224856, 0.34919162, 0.31730480, 0.37286929, 0.42766019, 0.45549478, // 9504- 9511
		0.30012213, 0.38648272, 0.42465297, 0.51869032, 0.48396679, 0.54140541, 0.60809913, 0.63630943, // 9512- 9519
		0.34070917, 0.44288886, 0.48349818, 0.59548819, 0.55682912, 0.61930174, 0.70464065, 0.73504964, // 9520- 9527
		0.47670266, 0.58442575, 0.61673375, 0.72276989, 0.69097907, 0.74041048, 0.81670215, 0.83846914, // 9528- 9535
		0.24389021, 0.27203429, 0.37060679, 0.42707697, 0.39081232, 0.51152410, 0.54398487, 0.65175461, // 9536- 9543
		0.36480602, 0.40032701, 0.50002278, 0.56420551, 0.52451856, 0.63961165, 0.67600881, 0.76754169, // 9544- 9551
		0.48026991, 0.51086740, 0.58320258, 0.63882719, 0.60522091, 0.69621538, 0.72861362, 0.80232692, // 9552- 9559
		0.65279872, 0.67975105, 0.73281300, 0.78063785, 0.75323563, 0.81931298, 0.84832063, 0.89636723, // 9560- 9567
		0.57147501, 0.60255569, 0.66896787, 0.72440114, 0.69192921, 0.77383540, 0.80697717, 0.86811432, // 9568- 9575
		0.72581015, 0.74567886, 0.78229231, 0.82039010, 0.79888554, 0.84930749, 0.87384383, 0.91204063, // 9576- 9583
		0.84107223, 0.85473571, 0.87768842, 0.90466374, 0.89010454, 0.92193202, 0.94038478, 0.96179906, // 9584- 9591
		0.91350764, 0.91970384, 0.92958916, 0.94416157, 0.93647635, 0.95272753, 0.96410387, 0.97601000, // 9592- 9599
		0.03246251, 0.04747997, 0.06183517, 0.08132937, 0.07214430, 0.08960034, 0.10090739, 0.10800105, // 9600- 9607
		0.05040822, 0.07656031, 0.09912137, 0.13586456, 0.11906083, 0.15021642, 0.17534064, 0.19031140, // 9608- 9615
		0.11321161, 0.15815928, 0.18705048, 0.24319046, 0.21923320, 0.26174052, 0.30040352, 0.32138543, // 9616- 9623
		0.16489275, 0.23398699, 0.27151956, 0.35867623, 0.32410974, 0.38311723, 0.44986330, 0.48112905, // 9624- 9631
		0.13167187, 0.18711552, 0.22052168, 0.29247647, 0.26267550, 0.31467961, 0.36923580, 0.39695048, // 9632- 9639
		0.24250271, 0.32296715, 0.35853149, 0.45229460, 0.41765844, 0.47501087, 0.54561915, 0.57553479, // 9640- 9647
		0.28034467, 0.37807325, 0.41697906, 0.53229798, 0.49248440, 0.55684427, 0.65068190, 0.68416261, // 9648- 9655
		0.40698820, 0.51651814, 0.54949299, 0.66487521, 0.63020410, 0.68407761, 0.77265601, 0.79793571, // 9656- 9663
		0.19716629, 0.22202797, 0.30911581, 0.36253495, 0.32820991, 0.44256010, 0.47539597, 0.58500843, // 9664- 9671
		0.30979383, 0.34290614, 0.43577158, 0.50000422, 0.46030936, 0.57541364, 0.61457554, 0.71294060, // 9672- 9679
		0.41727078, 0.44702687, 0.51722698, 0.57470784, 0.54004510, 0.63395887, 0.66993349, 0.75142024, // 9680- 9687
		0.59639714, 0.62419461, 0.67887295, 0.73139360, 0.70128050, 0.77396945, 0.80803544, 0.86448956, // 9688- 9695
		0.51195254, 0.54319644, 0.60987279, 0.66930378, 0.63448774, 0.72224192, 0.76038993, 0.83054454, // 9696- 9703
		0.67220374, 0.69335043, 0.73230774, 0.77531298, 0.75104016, 0.80794716, 0.83747780, 0.88333742, // 9704- 9711
		0.80541942, 0.82056390, 0.84599126, 0.87770765, 0.86059386, 0.89803339, 0.92114988, 0.94799380, // 9712- 9719
		0.88908633, 0.89631266, 0.90778894, 0.92567516, 0.91624911, 0.93622546, 0.95099463, 0.96645926, // 9720- 9727
		0.04048620, 0.05811309, 0.07493819, 0.09690155, 0.08654439, 0.10617813, 0.11843490, 0.12612042, // 9728- 9735
		0.06153778, 0.09144274, 0.11721492, 0.15737234, 0.13900078, 0.17304199, 0.19945632, 0.21519130, // 9736- 9743
		0.13526410, 0.18491804, 0.21683516, 0.27636580, 0.25097148, 0.29606762, 0.33551732, 0.35700234, // 9744- 9751
		0.19237699, 0.26651084, 0.30684970, 0.39620754, 0.36077799, 0.42128092, 0.48714142, 0.51798280, // 9752- 9759
		0.15565535, 0.21607516, 0.25249986, 0.32754297, 0.29646240, 0.35068819, 0.40536565, 0.43315697, // 9760- 9767
		0.27809207, 0.36230043, 0.39939223, 0.49333555, 0.45863580, 0.51610111, 0.58421829, 0.61311129, // 9768- 9775
		0.31771461, 0.41813309, 0.45809566, 0.57135930, 0.53225242, 0.59543151, 0.68403976, 0.71561048, // 9776- 9783
		0.44999655, 0.55853925, 0.59103514, 0.70066020, 0.66779626, 0.71893089, 0.79988405, 0.82300267, // 9784- 9791
		0.22606431, 0.25296220, 0.34710928, 0.40238314, 0.36687193, 0.48524989, 0.51784791, 0.62636249, // 9792- 9799
		0.34381906, 0.37841160, 0.47549266, 0.53970514, 0.50001470, 0.61513394, 0.65259986, 0.74671220, // 9800- 9807
		0.45623386, 0.48656443, 0.55805820, 0.61440715, 0.58035193, 0.67241901, 0.70615715, 0.78286008, // 9808- 9815
		0.63127875, 0.65854643, 0.71223008, 0.76183335, 0.73340743, 0.80205163, 0.83294847, 0.88420320, // 9816- 9823
		0.54873947, 0.57989686, 0.64645973, 0.70335644, 0.67000157, 0.75410452, 0.78919404, 0.85381393, // 9824- 9831
		0.70532257, 0.72568624, 0.76315399, 0.80319490, 0.78061818, 0.83356935, 0.85997645, 0.90110124, // 9832- 9839
		0.82747008, 0.84169623, 0.86559794, 0.89437162, 0.87884854, 0.91281020, 0.93304083, 0.95652608, // 9840- 9847
		0.90417363, 0.91076769, 0.92126244, 0.93709586, 0.92875471, 0.94643304, 0.95910101, 0.97236436, // 9848- 9855
		0.01720952, 0.02729247, 0.03689175, 0.05179335, 0.04478184, 0.05811303, 0.06760427, 0.07357961, // 9856- 9863
		0.02925592, 0.04833229, 0.06475279, 0.09504710, 0.08120300, 0.10683932, 0.12957028, 0.14310055, // 9864- 9871
		0.07136198, 0.10732114, 0.13041455, 0.18016537, 0.15894386, 0.19649871, 0.23365567, 0.25374776, // 9872- 9879
		0.11265431, 0.17220633, 0.20452119, 0.28738458, 0.25458572, 0.31057537, 0.37910927, 0.41121167, // 9880- 9887
		0.08615607, 0.13210260, 0.15981121, 0.22593061, 0.19853029, 0.24630946, 0.30064587, 0.32827279, // 9888- 9895
		0.17459349, 0.24842856, 0.28113558, 0.37439744, 0.33981904, 0.39713363, 0.47232806, 0.50424065, // 9896- 9903
		0.20951443, 0.30202278, 0.33893124, 0.45817342, 0.41693198, 0.48345776, 0.58738394, 0.62441874, // 9904- 9911
		0.32557168, 0.43686588, 0.47047803, 0.59685613, 0.55897166, 0.61798976, 0.72095318, 0.75036365, // 9912- 9919
		0.14234017, 0.16335281, 0.23693565, 0.28671798, 0.25477115, 0.36144258, 0.39501567, 0.50687046, // 9920- 9927
		0.24522154, 0.27544229, 0.36046674, 0.42464443, 0.38492416, 0.50005082, 0.54247228, 0.64907805, // 9928- 9935
		0.34341327, 0.37216491, 0.43963310, 0.49958390, 0.46357094, 0.56105803, 0.60117400, 0.69165228, // 9936- 9943
		0.53023805, 0.55896960, 0.61557206, 0.67363474, 0.64037928, 0.72072422, 0.76072037, 0.82714211, // 9944- 9951
		0.44212856, 0.47355776, 0.54055414, 0.60459301, 0.56709337, 0.66173702, 0.70566926, 0.78650362, // 9952- 9959
		0.60928650, 0.63198946, 0.67346382, 0.72247016, 0.69489036, 0.75938412, 0.79478975, 0.84973066, // 9960- 9967
		0.76357132, 0.78043103, 0.80877509, 0.84608010, 0.82594749, 0.86997555, 0.89860183, 0.93179311, // 9968- 9975
		0.86049994, 0.86885049, 0.88222769, 0.90398907, 0.89251582, 0.91682868, 0.93561042, 0.95526392, // 9976- 9983
		0.01390635, 0.02237712, 0.03046648, 0.04335771, 0.03727163, 0.04880981, 0.05731498, 0.06264957, // 9984- 9991
		0.02403530, 0.04037304, 0.05447518, 0.08132654, 0.06904785, 0.09181897, 0.11270535, 0.12513928, // 9992- 9999
		0.05943939, 0.09086378, 0.11109817, 0.15607121, 0.13684612, 0.17094904, 0.20576672, 0.22466467, //10000-10007
		0.09556289, 0.14898722, 0.17799299, 0.25539734, 0.22468253, 0.27709695, 0.34377523, 0.37502836, //10008-10015
		0.07236583, 0.11303251, 0.13755005, 0.19846913, 0.17324140, 0.21724060, 0.26932021, 0.29577009, //10016-10023
		0.14969438, 0.21716631, 0.24694948, 0.33585085, 0.30300870, 0.35746233, 0.43217174, 0.46390287, //10024-10031
		0.18153612, 0.26772729, 0.30207917, 0.41813371, 0.37805392, 0.44290138, 0.54904931, 0.58691416, //10032-10039
		0.28748824, 0.39477357, 0.42704153, 0.55446768, 0.51622319, 0.57565402, 0.68469395, 0.71582769, //10040-10047
		0.12280830, 0.14156208, 0.20727650, 0.25327642, 0.22368652, 0.32242270, 0.35447258, 0.46191221, //10048-10055
		0.21773968, 0.24566644, 0.32399444, 0.38542838, 0.34742326, 0.45755686, 0.50002527, 0.60668446, //10056-10063
		0.30838364, 0.33541588, 0.39907853, 0.45726219, 0.42213309, 0.51732639, 0.55789774, 0.65006948, //10064-10071
		0.49255770, 0.52067710, 0.57607135, 0.63512683, 0.60128619, 0.68301491, 0.72568361, 0.79646076, //10072-10079
		0.40573521, 0.43596369, 0.50048411, 0.56459982, 0.52705107, 0.62177361, 0.66784736, 0.75263659, //10080-10087
		0.57043121, 0.59300268, 0.63458369, 0.68506179, 0.65653028, 0.72336214, 0.76149432, 0.82083085, //10088-10095
		0.73450390, 0.75186149, 0.78103783, 0.82101379, 0.79942315, 0.84658007, 0.87887355, 0.91630379, //10096-10103
		0.83754642, 0.84646603, 0.86067266, 0.88472632, 0.87203676, 0.89895331, 0.92074214, 0.94357155, //10104-10111
		0.00564533, 0.01005405, 0.01425498, 0.02212789, 0.01840152, 0.02545359, 0.03138820, 0.03513897, //10112-10119
		0.01090931, 0.02039236, 0.02857410, 0.04684552, 0.03851128, 0.05402595, 0.07028791, 0.07997901, //10120-10127
		0.02931748, 0.04938299, 0.06227490, 0.09556904, 0.08132939, 0.10651223, 0.13560183, 0.15135377, //10128-10135
		0.05241330, 0.09047142, 0.11115039, 0.17491364, 0.14965529, 0.19274282, 0.25494088, 0.28410949, //10136-10143
		0.03756295, 0.06508013, 0.08166473, 0.12940413, 0.10964602, 0.14417263, 0.19055339, 0.21416776, //10144-10151
		0.08703948, 0.13875087, 0.16152247, 0.23920179, 0.21052552, 0.25801175, 0.33137039, 0.36252654, //10152-10159
		0.11149647, 0.18154676, 0.20932566, 0.31772606, 0.28041718, 0.34084704, 0.45271661, 0.49265713, //10160-10167
		0.19236435, 0.28901741, 0.31815538, 0.44788414, 0.40886803, 0.46948432, 0.59347513, 0.62894871, //10168-10175
		0.07359873, 0.08673691, 0.13266714, 0.16917547, 0.14569531, 0.22372973, 0.25293589, 0.34932341, //10176-10183
		0.14872599, 0.17074499, 0.23247853, 0.28695668, 0.25331192, 0.35088136, 0.39345273, 0.50002162, //10184-10191
		0.22046617, 0.24318805, 0.29666203, 0.35110852, 0.31820235, 0.40694748, 0.44935766, 0.54524367, //10192-10199
		0.39771612, 0.42439638, 0.47678374, 0.53835634, 0.50308138, 0.58816975, 0.63770621, 0.71950081, //10200-10207
		0.31417175, 0.34151848, 0.39992979, 0.46410482, 0.42646414, 0.52119686, 0.57270425, 0.66719380, //10208-10215
		0.47271552, 0.49517381, 0.53612296, 0.59094977, 0.56000096, 0.63228851, 0.67787700, 0.74856459, //10216-10223
		0.66145157, 0.68003813, 0.71130123, 0.75801165, 0.73281320, 0.78800234, 0.82932298, 0.87738843, //10224-10231
		0.77999228, 0.79017251, 0.80641757, 0.83631825, 0.82058763, 0.85399037, 0.88337947, 0.91420535, //10232-10239
		0.05206400, 0.07297903, 0.09291348, 0.11766677, 0.10601221, 0.12811889, 0.14132785, 0.14961306, //10240-10247
		0.07705146, 0.11141036, 0.14099962, 0.18470923, 0.16473733, 0.20177721, 0.22925231, 0.24562217, //10248-10255
		0.16451249, 0.21916531, 0.25433660, 0.31668093, 0.29003195, 0.33721788, 0.37693626, 0.39857011, //10256-10263
		0.22736298, 0.30617684, 0.34899633, 0.43929129, 0.40349575, 0.46453424, 0.52830632, 0.55818384, //10264-10271
		0.18693162, 0.25237077, 0.29187876, 0.36898772, 0.33706162, 0.39282029, 0.44666540, 0.47402975, //10272-10279
		0.32174586, 0.40833134, 0.44654429, 0.53863745, 0.50459976, 0.56102189, 0.62526166, 0.65252692, //10280-10287
		0.36250095, 0.46390508, 0.50422767, 0.61310333, 0.57550988, 0.63626366, 0.71814622, 0.74733105, //10288-10295
		0.49846823, 0.60346191, 0.63502657, 0.73656311, 0.70604919, 0.75348952, 0.82593555, 0.84663922, //10296-10303
		0.26199462, 0.29090084, 0.39203034, 0.44827128, 0.41207670, 0.53255483, 0.56415050, 0.66892879, //10304-10311
		0.38377325, 0.41952295, 0.51978639, 0.58278205, 0.54381568, 0.65665317, 0.69162610, 0.77959297, //10312-10319
		0.50000966, 0.53036524, 0.60186944, 0.65584715, 0.62323993, 0.71145913, 0.74228780, 0.81273690, //10320-10327
		0.66788521, 0.69413209, 0.74582503, 0.79158145, 0.76533184, 0.82869030, 0.85617516, 0.90166359, //10328-10335
		0.58873012, 0.61925155, 0.68435675, 0.73775068, 0.70649242, 0.78530585, 0.81690577, 0.87499129, //10336-10343
		0.73888425, 0.75805293, 0.79334111, 0.82968576, 0.80916523, 0.85719666, 0.88042079, 0.91656421, //10344-10351
		0.84881503, 0.86190877, 0.88392098, 0.90949692, 0.89569211, 0.92591109, 0.94334278, 0.96359623, //10352-10359
		0.91782718, 0.92373103, 0.93313203, 0.94690375, 0.93965000, 0.95504100, 0.96578958, 0.97705720, //10360-10367
		0.04390842, 0.06253025, 0.08031399, 0.10313526, 0.09237736, 0.11276879, 0.12531734, 0.13320242, //10368-10375
		0.06615798, 0.09742937, 0.12437263, 0.16562542, 0.14676422, 0.18175958, 0.20849857, 0.22443491, //10376-10383
		0.14403079, 0.19527647, 0.22817050, 0.28864397, 0.26288599, 0.30867214, 0.34819546, 0.36972457, //10384-10391
		0.20295031, 0.27860596, 0.31975827, 0.40941144, 0.37383456, 0.43456194, 0.49979211, 0.53034682, //10392-10399
		0.16508870, 0.22708220, 0.26448391, 0.34020051, 0.30883399, 0.36356517, 0.41801379, 0.44568238, //10400-10407
		0.29135644, 0.37642568, 0.41386959, 0.50729223, 0.47281172, 0.52998108, 0.59688425, 0.62528569, //10408-10415
		0.33142460, 0.43219914, 0.47231425, 0.58421068, 0.54562313, 0.60806875, 0.69455606, 0.72537520, //10416-10423
		0.46489783, 0.57246354, 0.60461781, 0.71173309, 0.67960535, 0.72963891, 0.80788627, 0.83026071, //10424-10431
		0.23693742, 0.26447617, 0.36088661, 0.41644248, 0.38071245, 0.49997549, 0.53208225, 0.63951871, //10432-10439
		0.35601911, 0.39098468, 0.48911855, 0.55296814, 0.51348803, 0.62796220, 0.66464726, 0.75685976, //10440-10447
		0.46964487, 0.49998752, 0.57152903, 0.62713748, 0.59361964, 0.68441284, 0.71734897, 0.79202614, //10448-10455
		0.64253165, 0.66951381, 0.72259484, 0.77099846, 0.74323924, 0.81019667, 0.84006260, 0.88952356, //10456-10463
		0.56102911, 0.59201273, 0.65810339, 0.71395847, 0.68124286, 0.76374298, 0.79772464, 0.86027286, //10464-10471
		0.71568864, 0.73564260, 0.77245463, 0.81134496, 0.78940472, 0.84078313, 0.86622923, 0.90573389, //10472-10479
		0.83401055, 0.84789652, 0.87119732, 0.89898035, 0.88400386, 0.91678614, 0.93615505, 0.95862523, //10480-10487
		0.90832969, 0.91471129, 0.92487725, 0.94005258, 0.93206332, 0.94902715, 0.96109290, 0.97373431, //10488-10495
		0.02467419, 0.03790196, 0.05053780, 0.06885753, 0.06022161, 0.07656131, 0.08760684, 0.09448535, //10496-10503
		0.04046821, 0.06448051, 0.08513315, 0.12062961, 0.10440343, 0.13448703, 0.15955568, 0.17445943, //10504-10511
		0.09580515, 0.13892126, 0.16669265, 0.22267193, 0.19872307, 0.24108132, 0.28044666, 0.30180674, //10512-10519
		0.14540229, 0.21353389, 0.25054415, 0.33903316, 0.30398319, 0.36381900, 0.43255675, 0.46474416, //10520-10527
		0.11346813, 0.16738372, 0.19992619, 0.27231723, 0.24238193, 0.29458457, 0.35048510, 0.37884494, //10528-10535
		0.21986133, 0.30104712, 0.33693121, 0.43332320, 0.39768975, 0.45672215, 0.52999422, 0.56099731, //10536-10543
		0.25831455, 0.35746487, 0.39692716, 0.51608003, 0.47504883, 0.54145517, 0.63888511, 0.67364568, //10544-10551
		0.38568013, 0.49908192, 0.53305057, 0.65330113, 0.61727717, 0.67320733, 0.76537968, 0.79167357, //10552-10559
		0.17793825, 0.20229097, 0.28734745, 0.34143445, 0.30670974, 0.42248005, 0.45660677, 0.57002817, //10560-10567
		0.29056509, 0.32377909, 0.41679316, 0.48284421, 0.44201239, 0.56017291, 0.60099595, 0.70331613, //10568-10575
		0.39810498, 0.42847201, 0.50020000, 0.55956364, 0.52361951, 0.62107580, 0.65837362, 0.74338023, //10576-10583
		0.58284287, 0.61149443, 0.66789612, 0.72244869, 0.69115187, 0.76667877, 0.80218661, 0.86081888, //10584-10591
		0.49573103, 0.52778961, 0.59616707, 0.65787005, 0.62173473, 0.71292327, 0.75246252, 0.82558492, //10592-10599
		0.66097836, 0.68287416, 0.72329826, 0.76806273, 0.74280931, 0.80195581, 0.83278385, 0.88052425, //10600-10607
		0.79914660, 0.81483045, 0.84126518, 0.87421012, 0.85642216, 0.89530406, 0.91920949, 0.94692565, //10608-10615
		0.88591991, 0.89342510, 0.90538871, 0.92390512, 0.91414036, 0.93483122, 0.95003270, 0.96592351, //10616-10623
		0.01748633, 0.02765839, 0.03737681, 0.05234862, 0.04529869, 0.05868100, 0.06819253, 0.07418765, //10624-10631
		0.02964585, 0.04884130, 0.06538927, 0.09571076, 0.08185804, 0.10760157, 0.13029204, 0.14382677, //10632-10639
		0.07226274, 0.10823319, 0.13137534, 0.18112473, 0.15991800, 0.19759435, 0.23458131, 0.25463928, //10640-10647
		0.11365403, 0.17322680, 0.20558545, 0.28829304, 0.25544480, 0.31144250, 0.37979676, 0.41176616, //10648-10655
		0.08704771, 0.13301641, 0.16082225, 0.22686961, 0.19948713, 0.24725555, 0.30144849, 0.32896972, //10656-10663
		0.17592520, 0.24944559, 0.28184572, 0.37509189, 0.34062803, 0.39775988, 0.47273608, 0.50454419, //10664-10671
		0.21057717, 0.30307581, 0.33981710, 0.45864470, 0.41759067, 0.48392547, 0.58752023, 0.62445576, //10672-10679
		0.32631058, 0.43762171, 0.47080925, 0.59698472, 0.55918577, 0.61798554, 0.72067961, 0.75003149, //10680-10687
		0.14324751, 0.16428991, 0.23802116, 0.28776358, 0.25577946, 0.36230108, 0.39580645, 0.50718782, //10688-10695
		0.24604203, 0.27635726, 0.36119414, 0.42528584, 0.38565325, 0.50049059, 0.54267247, 0.64904359, //10696-10703
		0.34419699, 0.37285534, 0.44044815, 0.50005713, 0.46406046, 0.56139828, 0.60127837, 0.69130496, //10704-10711
		0.53053367, 0.55921522, 0.61563293, 0.67352340, 0.64037427, 0.72038776, 0.76037618, 0.82652751, //10712-10719
		0.44265709, 0.47400136, 0.54088313, 0.60472071, 0.56732671, 0.66167334, 0.70547282, 0.78605903, //10720-10727
		0.60936900, 0.63196009, 0.67352279, 0.72217709, 0.69475024, 0.75902956, 0.79423437, 0.84911044, //10728-10735
		0.76333872, 0.78017728, 0.80840823, 0.84567671, 0.82557769, 0.86949762, 0.89813380, 0.93132875, //10736-10743
		0.86006710, 0.86844926, 0.88180609, 0.90351325, 0.89205914, 0.91635170, 0.93515444, 0.95484384, //10744-10751
		0.02182705, 0.03384548, 0.04532257, 0.06231383, 0.05429920, 0.06950600, 0.07989968, 0.08645465, //10752-10759
		0.03618836, 0.05827215, 0.07731085, 0.11077429, 0.09546698, 0.12385487, 0.14795223, 0.16230996, //10760-10767
		0.08645523, 0.12680262, 0.15264985, 0.20611588, 0.18330527, 0.22381478, 0.26223524, 0.28310431, //10768-10775
		0.13281427, 0.19756071, 0.23273123, 0.31889487, 0.28473426, 0.34305130, 0.41162052, 0.44373261, //10776-10783
		0.10303423, 0.15381639, 0.18444394, 0.25426635, 0.22535631, 0.27584216, 0.33104777, 0.35909236, //10784-10791
		0.20233339, 0.28066104, 0.31505482, 0.41024923, 0.37507033, 0.43342266, 0.50723278, 0.53865662, //10792-10799
		0.23920447, 0.33588712, 0.37430691, 0.49333370, 0.45230002, 0.51871974, 0.61853319, 0.65412391, //10800-10807
		0.36205762, 0.47473762, 0.50839945, 0.63097107, 0.59415476, 0.65135645, 0.74763310, 0.77511955, //10808-10815
		0.16417716, 0.18721717, 0.26779281, 0.32014340, 0.28650897, 0.39863674, 0.43252491, 0.54500769, //10816-10823
		0.27294584, 0.30495037, 0.39481773, 0.45995118, 0.41965027, 0.53648738, 0.57785087, 0.68178308, //10824-10831
		0.37669002, 0.40640637, 0.47638671, 0.53605992, 0.49998546, 0.59733881, 0.63585924, 0.72274165, //10832-10839
		0.56209517, 0.59074144, 0.64719398, 0.70301999, 0.67100531, 0.74835370, 0.78554663, 0.84726175, //10840-10847
		0.47470114, 0.50644104, 0.57423639, 0.63681652, 0.60015133, 0.69258064, 0.73384255, 0.80991919, //10848-10855
		0.64048899, 0.66268416, 0.70352588, 0.74993923, 0.72374646, 0.78499878, 0.81748564, 0.86796079, //10856-10863
		0.78494935, 0.80110454, 0.82821600, 0.86287675, 0.84419328, 0.88507992, 0.91083862, 0.94073701, //10864-10871
		0.87566456, 0.88351289, 0.89603771, 0.91583272, 0.90537217, 0.92751657, 0.94412386, 0.96152982, //10872-10879
		0.01007951, 0.01712532, 0.02386178, 0.03537178, 0.02994207, 0.04023316, 0.04824013, 0.05325235, //10880-10887
		0.01848092, 0.03275599, 0.04507831, 0.07008218, 0.05862775, 0.07982267, 0.10017679, 0.11224604, //10888-10895
		0.04791773, 0.07663264, 0.09514220, 0.13842287, 0.11998256, 0.15269103, 0.18733964, 0.20630985, //10896-10903
		0.08097517, 0.13173032, 0.15927913, 0.23604491, 0.20562375, 0.25758057, 0.32549596, 0.35725922, //10904-10911
		0.05972404, 0.09761049, 0.12054978, 0.18011693, 0.15540802, 0.19841722, 0.25099203, 0.27766233, //10912-10919
		0.13055474, 0.19624399, 0.22537711, 0.31516392, 0.28209090, 0.33700218, 0.41387782, 0.44645538, //10920-10927
		0.16146615, 0.24680951, 0.28087468, 0.39941968, 0.35843627, 0.42465220, 0.53458472, 0.57379094, //10928-10935
		0.26502144, 0.37386297, 0.40713824, 0.53905431, 0.49926064, 0.56103417, 0.67469200, 0.70719890, //10936-10943
		0.10763342, 0.12523874, 0.18710531, 0.23241131, 0.20325997, 0.30067628, 0.33306575, 0.44207456, //10944-10951
		0.20025287, 0.22752698, 0.30392325, 0.36595250, 0.32766885, 0.43874171, 0.48269253, 0.59307084, //10952-10959
		0.28876025, 0.31553632, 0.37893839, 0.43867759, 0.40264556, 0.50034620, 0.54244138, 0.63776849, //10960-10967
		0.47678383, 0.50539966, 0.56184085, 0.62312332, 0.58803372, 0.67276607, 0.71735313, 0.79126497, //10968-10975
		0.38805565, 0.41861076, 0.48377747, 0.54993139, 0.51118130, 0.60920199, 0.65700551, 0.74529285, //10976-10983
		0.55622476, 0.57949642, 0.62221827, 0.67485964, 0.64515195, 0.71473516, 0.75474431, 0.81665460, //10984-10991
		0.72650923, 0.74445856, 0.77469449, 0.81630604, 0.79382292, 0.84295948, 0.87645414, 0.91531624, //10992-10999
		0.83343717, 0.84275725, 0.85753187, 0.88252372, 0.86936938, 0.89736581, 0.91983763, 0.94343650, //11000-11007
		0.00807107, 0.01390653, 0.01947894, 0.02933905, 0.02468785, 0.03353369, 0.04058065, 0.04501554, //11008-11015
		0.01504980, 0.02715129, 0.03757117, 0.05953121, 0.04948574, 0.06811016, 0.08657605, 0.09758860, //11016-11023
		0.03944992, 0.06421434, 0.08019895, 0.11890125, 0.10234803, 0.13172113, 0.16383920, 0.18129171, //11024-11031
		0.06791052, 0.11294531, 0.13732058, 0.20821120, 0.18007949, 0.22815994, 0.29341387, 0.32396182, //11032-11039
		0.04962626, 0.08285330, 0.10286413, 0.15702934, 0.13461863, 0.17383309, 0.22350168, 0.24875429, //11040-11047
		0.11067240, 0.17014216, 0.19637294, 0.28052664, 0.24941250, 0.30115129, 0.37638887, 0.40832357, //11048-11055
		0.13874245, 0.21721110, 0.24842152, 0.36227921, 0.32296532, 0.38650083, 0.49738255, 0.53685300, //11056-11063
		0.23176904, 0.33549724, 0.36627089, 0.49756623, 0.45826298, 0.51937777, 0.63773957, 0.67159691, //11064-11071
		0.09214721, 0.10774587, 0.16236328, 0.20371320, 0.17707048, 0.26564103, 0.29653372, 0.40008675, //11072-11079
		0.17682064, 0.20168729, 0.27143720, 0.33013176, 0.29382986, 0.39887167, 0.44210694, 0.55074631, //11080-11087
		0.25762039, 0.28262701, 0.34160306, 0.39877174, 0.36429047, 0.45768373, 0.50000700, 0.59572590, //11088-11095
		0.44080480, 0.46853165, 0.52315051, 0.58460001, 0.54940455, 0.63437177, 0.68106912, 0.75851936, //11096-11103
		0.35440876, 0.38355277, 0.44564328, 0.51088519, 0.47270782, 0.56906109, 0.61861690, 0.70976582, //11104-11111
		0.51830855, 0.54112919, 0.58307076, 0.63671317, 0.60645102, 0.67727282, 0.71963403, 0.78570541, //11112-11119
		0.69694629, 0.71517199, 0.74584613, 0.78978163, 0.76606964, 0.81794747, 0.85501755, 0.89805972, //11120-11127
		0.80910933, 0.81880948, 0.83429364, 0.86149610, 0.84713381, 0.87757235, 0.90326222, 0.93013853, //11128-11135
		0.00350407, 0.00662773, 0.00960632, 0.01570850, 0.01281411, 0.01827940, 0.02322625, 0.02632916, //11136-11143
		0.00723095, 0.01439139, 0.02056703, 0.03558170, 0.02871365, 0.04144719, 0.05573638, 0.06428119, //11144-11151
		0.02026676, 0.03609741, 0.04637844, 0.07473074, 0.06268290, 0.08405751, 0.11042948, 0.12473605, //11152-11159
		0.03858266, 0.07047691, 0.08781453, 0.14525400, 0.12248047, 0.16136305, 0.22070381, 0.24855096, //11160-11167
		0.02683244, 0.04925350, 0.06287270, 0.10482209, 0.08742274, 0.11776161, 0.16117958, 0.18326428, //11168-11175
		0.06594436, 0.11069862, 0.13034614, 0.20229600, 0.17578925, 0.21996520, 0.29126135, 0.32176828, //11176-11183
		0.08710367, 0.14970824, 0.17497829, 0.27807158, 0.24227599, 0.30003298, 0.41294903, 0.45313368, //11184-11191
		0.15716207, 0.24766899, 0.27472491, 0.40359284, 0.36489194, 0.42503038, 0.55401646, 0.59096199, //11192-11199
		0.05705944, 0.06800110, 0.10623337, 0.13847148, 0.11767953, 0.18658968, 0.21408047, 0.30418613, //11200-11207
		0.12371434, 0.14320833, 0.19780369, 0.24865832, 0.21723516, 0.30827885, 0.34990678, 0.45483733, //11208-11215
		0.18735693, 0.20791580, 0.25690486, 0.30857276, 0.27720863, 0.36188654, 0.40401815, 0.50027349, //11216-11223
		0.35946624, 0.38505055, 0.43555169, 0.49723522, 0.46181895, 0.54727378, 0.59903359, 0.68470084, //11224-11231
		0.27831250, 0.30408264, 0.35899331, 0.42229208, 0.38534970, 0.47863397, 0.53171966, 0.62914515, //11232-11239
		0.43230135, 0.45421877, 0.49445312, 0.55011036, 0.51874302, 0.59241394, 0.64034027, 0.71533073, //11240-11247
		0.62979664, 0.64877359, 0.68048698, 0.72974090, 0.70319718, 0.76122898, 0.80643756, 0.85904532, //11248-11255
		0.75398171, 0.76463873, 0.78164016, 0.81385388, 0.79688904, 0.83287512, 0.86561868, 0.89999960, //11256-11263
		0.02383334, 0.03502296, 0.04570322, 0.06057625, 0.05356197, 0.06685961, 0.07577319, 0.08136660, //11264-11271
		0.03719684, 0.05696823, 0.07400026, 0.10273467, 0.08960435, 0.11395806, 0.13458058, 0.14684884, //11272-11279
		0.08396003, 0.11851780, 0.14073189, 0.18572156, 0.16651969, 0.20058705, 0.23333516, 0.25115405, //11280-11287
		0.12370088, 0.17843362, 0.20820765, 0.28148342, 0.25242081, 0.30206745, 0.36277914, 0.39125049, //11288-11295
		0.09815705, 0.14138595, 0.16746213, 0.22660860, 0.20211440, 0.24485530, 0.29295273, 0.31740554, //11296-11303
		0.18332674, 0.24878328, 0.27769987, 0.35910295, 0.32899947, 0.37885771, 0.44569376, 0.47404321, //11304-11311
		0.21415681, 0.29578041, 0.32827118, 0.43315035, 0.39698828, 0.45551229, 0.55122229, 0.58534892, //11312-11319
		0.31704392, 0.41390553, 0.44300177, 0.55589502, 0.52202361, 0.57471456, 0.67369609, 0.70198030, //11320-11327
		0.15013544, 0.16973488, 0.23836677, 0.28242668, 0.25411433, 0.34846981, 0.37754335, 0.47449993, //11328-11335
		0.24326271, 0.27058399, 0.34721970, 0.40360408, 0.36875635, 0.46979413, 0.50748015, 0.60231276, //11336-11343
		0.33212585, 0.35749271, 0.41723867, 0.46949496, 0.43795271, 0.52329094, 0.55919920, 0.64060294, //11344-11351
		0.50001306, 0.52564087, 0.57607789, 0.62893227, 0.59864881, 0.67176782, 0.71061788, 0.77500222, //11352-11359
		0.42088205, 0.44876089, 0.50828392, 0.56569834, 0.53206498, 0.61688603, 0.65838484, 0.73470962, //11360-11367
		0.57102827, 0.59130137, 0.62854958, 0.67366023, 0.64822715, 0.70779293, 0.74287251, 0.79747307, //11368-11375
		0.72424019, 0.74007896, 0.76667093, 0.80378105, 0.78375334, 0.82754674, 0.85937490, 0.89631433, //11376-11383
		0.82046740, 0.82868213, 0.84176264, 0.86475445, 0.85262831, 0.87833761, 0.90091606, 0.92456760, //11384-11391
		0.01935643, 0.02897793, 0.03816981, 0.05147660, 0.04519830, 0.05709880, 0.06533571, 0.07051446, //11392-11399
		0.03085299, 0.04829263, 0.06331777, 0.08969719, 0.07763563, 0.09998686, 0.11957262, 0.13123086, //11400-11407
		0.07109377, 0.10244877, 0.12258185, 0.16492182, 0.14685287, 0.17890021, 0.21066435, 0.22792763, //11408-11415
		0.10714682, 0.15814030, 0.18587499, 0.25668638, 0.22860471, 0.27656617, 0.33706981, 0.36542437, //11416-11423
		0.08398143, 0.12370514, 0.14768863, 0.20409194, 0.18071545, 0.22148693, 0.26887729, 0.29295918, //11424-11431
		0.16118973, 0.22351254, 0.25099285, 0.33105753, 0.30145351, 0.35047152, 0.41803352, 0.44665961, //11432-11439
		0.19057723, 0.26931146, 0.30065308, 0.40536293, 0.36923846, 0.42768136, 0.52594429, 0.56099193, //11440-11447
		0.28842285, 0.38443012, 0.41332764, 0.52853029, 0.49394493, 0.54775191, 0.65119622, 0.68076123, //11448-11455
		0.13234873, 0.15049032, 0.21402320, 0.25623334, 0.22910417, 0.31962724, 0.34843887, 0.44452185, //11456-11463
		0.22114379, 0.24718858, 0.32027309, 0.37584160, 0.34147820, 0.44105794, 0.47935570, 0.57563527, //11464-11471
		0.30588626, 0.33050623, 0.38854927, 0.44081221, 0.40929059, 0.49456883, 0.53146322, 0.61503757, //11472-11479
		0.47437862, 0.50001908, 0.55046484, 0.60464334, 0.57358069, 0.64853838, 0.68931744, 0.75684546, //11480-11487
		0.39494162, 0.42251849, 0.48135904, 0.53967697, 0.50551205, 0.59168479, 0.63483925, 0.71429576, //11488-11495
		0.54566568, 0.56617200, 0.60393889, 0.65057880, 0.62427643, 0.68592764, 0.72292366, 0.78049103, //11496-11503
		0.70591058, 0.72221920, 0.74962369, 0.78859899, 0.76757140, 0.81355706, 0.84759444, 0.88708981, //11504-11511
		0.80653977, 0.81513730, 0.82881767, 0.85326612, 0.84038508, 0.86771132, 0.89204028, 0.91754229, //11512-11519
		0.01053928, 0.01709378, 0.02335719, 0.03355869, 0.02875559, 0.03788367, 0.04480349, 0.04914137, //11520-11527
		0.01837504, 0.03122194, 0.04228135, 0.06402563, 0.05408681, 0.07251853, 0.09004051, 0.10048119, //11528-11535
		0.04577540, 0.07083302, 0.08694128, 0.12400561, 0.10817831, 0.13620827, 0.16604549, 0.18225387, //11536-11543
		0.07458248, 0.11821772, 0.14192498, 0.20786353, 0.18172369, 0.22633601, 0.28645140, 0.31457519, //11544-11551
		0.05607410, 0.08891282, 0.10871622, 0.15977484, 0.13864887, 0.17550264, 0.22148787, 0.24486916, //11552-11559
		0.11773282, 0.17382459, 0.19846268, 0.27586107, 0.24727712, 0.29464816, 0.36354516, 0.39280893, //11560-11567
		0.14414118, 0.21724106, 0.24622283, 0.35071061, 0.31469784, 0.37288004, 0.47618799, 0.51302216, //11568-11575
		0.23207162, 0.32653869, 0.35481332, 0.47473120, 0.43872270, 0.49461512, 0.60688405, 0.63894765, //11576-11583
		0.09735326, 0.11263519, 0.16610870, 0.20481523, 0.17992458, 0.26287952, 0.29110471, 0.38548002, //11584-11591
		0.17760020, 0.20114308, 0.26714902, 0.32114327, 0.28779246, 0.38443805, 0.42391588, 0.52329873, //11592-11599
		0.25420404, 0.27742346, 0.33214880, 0.38436185, 0.35281826, 0.43802226, 0.47686608, 0.56461671, //11600-11607
		0.42392081, 0.44957328, 0.50002919, 0.55681783, 0.52424809, 0.60282464, 0.64735959, 0.72111891, //11608-11615
		0.34390097, 0.37088379, 0.42842699, 0.48845515, 0.45325891, 0.54194047, 0.58848095, 0.67413878, //11616-11623
		0.49574299, 0.51675151, 0.55537942, 0.60518796, 0.57712214, 0.64283517, 0.68367583, 0.74720041, //11624-11631
		0.66980212, 0.68707551, 0.71604522, 0.75872250, 0.73572575, 0.78605711, 0.82439757, 0.86890799, //11632-11639
		0.77914290, 0.78849246, 0.80335619, 0.83068162, 0.81629449, 0.84680636, 0.87459742, 0.90370941, //11640-11647
		0.00682822, 0.01147016, 0.01590342, 0.02363273, 0.01998809, 0.02689782, 0.03248908, 0.03600015, //11648-11655
		0.01237047, 0.02189353, 0.03009891, 0.04742229, 0.03950836, 0.05419823, 0.06914347, 0.07804686, //11656-11663
		0.03177307, 0.05113485, 0.06359078, 0.09426606, 0.08115967, 0.10440314, 0.13069387, 0.14502962, //11664-11671
		0.05404816, 0.08954698, 0.10885822, 0.16667381, 0.14375562, 0.18291123, 0.23928736, 0.26571592, //11672-11679
		0.03972595, 0.06579697, 0.08152130, 0.12516533, 0.10707804, 0.13864691, 0.18071930, 0.20210688, //11680-11687
		0.08739429, 0.13462260, 0.15545167, 0.22532944, 0.19953482, 0.24229932, 0.30884950, 0.33703630, //11688-11695
		0.10967653, 0.17324845, 0.19855239, 0.29647876, 0.26269061, 0.31732372, 0.42139553, 0.45848861, //11696-11703
		0.18378288, 0.27031358, 0.29625088, 0.41430241, 0.37889837, 0.43392535, 0.55201153, 0.58571311, //11704-11711
		0.07340076, 0.08573597, 0.12890168, 0.16210513, 0.14076315, 0.21188584, 0.23788855, 0.32442603, //11712-11719
		0.14248689, 0.16270660, 0.21939595, 0.26862357, 0.23819200, 0.32637620, 0.36488001, 0.46162053, //11720-11727
		0.20841399, 0.22902013, 0.27754465, 0.32650774, 0.29696870, 0.37679485, 0.41536647, 0.50278898, //11728-11735
		0.37109048, 0.39538680, 0.44324007, 0.50002558, 0.46744602, 0.54605805, 0.59323374, 0.67142940, //11736-11743
		0.29439874, 0.31931563, 0.37247750, 0.43121138, 0.39682369, 0.48353437, 0.53188464, 0.62085056, //11744-11751
		0.43989169, 0.46034095, 0.49793177, 0.54867075, 0.52006092, 0.58713971, 0.63108463, 0.69953001, //11752-11759
		0.62503742, 0.64263644, 0.67220191, 0.71786634, 0.69323101, 0.74711031, 0.79040150, 0.84064835, //11760-11767
		0.74130189, 0.75119976, 0.76695659, 0.79715403, 0.78123711, 0.81498200, 0.84720360, 0.88096470, //11768-11775
		0.00895468, 0.01469525, 0.02017800, 0.02932432, 0.02500899, 0.03319402, 0.03954666, 0.04353056, //11776-11783
		0.01581277, 0.02724171, 0.03709115, 0.05693406, 0.04786286, 0.06469491, 0.08112248, 0.09090527, //11784-11791
		0.03982387, 0.06242283, 0.07696472, 0.11130777, 0.09663479, 0.12262587, 0.15095997, 0.16633367, //11792-11799
		0.06579655, 0.10595471, 0.12774977, 0.19030385, 0.16549727, 0.20781103, 0.26632422, 0.29373803, //11800-11807
		0.04909609, 0.07903898, 0.09710854, 0.14500663, 0.12517132, 0.15979782, 0.20409305, 0.22659410, //11808-11815
		0.10482771, 0.15703886, 0.18012395, 0.25427073, 0.22687281, 0.27230663, 0.34020849, 0.36899016, //11816-11823
		0.12944002, 0.19844707, 0.22594005, 0.32754124, 0.29247140, 0.34917597, 0.45280439, 0.48974415, //11824-11831
		0.21145022, 0.30250176, 0.32989856, 0.44892858, 0.41320436, 0.46874612, 0.58347068, 0.61624587, //11832-11839
		0.08712455, 0.10115620, 0.15024431, 0.18656966, 0.16319548, 0.24107565, 0.26837501, 0.35927567, //11840-11847
		0.16261366, 0.18475116, 0.24680018, 0.29873633, 0.26661948, 0.35968610, 0.39873841, 0.49691492, //11848-11855
		0.23468643, 0.25676647, 0.30893269, 0.35971223, 0.32903335, 0.41207706, 0.45063504, 0.53824882, //11856-11863
		0.40138359, 0.42643539, 0.47577402, 0.53256383, 0.50001424, 0.57862110, 0.62425133, 0.69991312, //11864-11871
		0.32277789, 0.34885694, 0.40454347, 0.46402517, 0.42917424, 0.51704556, 0.56435092, 0.65143259, //11872-11879
		0.47191397, 0.49267014, 0.53085714, 0.58105469, 0.55274145, 0.61902430, 0.66122184, 0.72685248, //11880-11887
		0.65070288, 0.66811023, 0.69732854, 0.74128275, 0.71757855, 0.76942038, 0.80988789, 0.85685317, //11888-11895
		0.76298974, 0.77257398, 0.78783720, 0.81636556, 0.80131979, 0.83321742, 0.86290843, 0.89398631, //11896-11903
		0.00381450, 0.00690738, 0.00986073, 0.01558814, 0.01288737, 0.01801185, 0.02250956, 0.02533969, //11904-11911
		0.00750909, 0.01433618, 0.02022964, 0.03397236, 0.02768501, 0.03935197, 0.05220311, 0.05985866, //11912-11919
		0.02045736, 0.03516759, 0.04468379, 0.07016006, 0.05927802, 0.07858268, 0.10209051, 0.11487527, //11920-11927
		0.03740304, 0.06632005, 0.08208253, 0.13328682, 0.11298144, 0.14769568, 0.20106853, 0.22613986, //11928-11935
		0.02649789, 0.04705555, 0.05951452, 0.09711145, 0.08153109, 0.10873275, 0.14768867, 0.16747982, //11936-11943
		0.06287175, 0.10293101, 0.12059954, 0.18447926, 0.16083353, 0.19988219, 0.26449346, 0.29188069, //11944-11951
		0.08164374, 0.13759187, 0.15981099, 0.25253318, 0.22053647, 0.27230859, 0.37698148, 0.41432156, //11952-11959
		0.14456639, 0.22477025, 0.24905242, 0.36542680, 0.33045838, 0.38482030, 0.50753817, 0.54258885, //11960-11967
		0.05398609, 0.06397335, 0.09871688, 0.12753611, 0.10906586, 0.17054971, 0.19463934, 0.27480748, //11968-11975
		0.11402993, 0.13154598, 0.18067378, 0.22600646, 0.19799069, 0.27936135, 0.31705207, 0.41179336, //11976-11983
		0.17133617, 0.18978372, 0.23327947, 0.27955318, 0.25168903, 0.32724557, 0.36562647, 0.45270767, //11984-11991
		0.32827897, 0.35146581, 0.39715713, 0.45397451, 0.42140148, 0.50002526, 0.54937344, 0.63120386, //11992-11999
		0.25428916, 0.27753176, 0.32722188, 0.38485705, 0.35110066, 0.43621296, 0.48597001, 0.57773396, //12000-12007
		0.39465615, 0.41463792, 0.45136256, 0.50286947, 0.47382453, 0.54194403, 0.58851198, 0.66094077, //12008-12015
		0.58875350, 0.60661662, 0.63667165, 0.68474873, 0.65882425, 0.71552798, 0.76285388, 0.81773006, //12016-12023
		0.71062585, 0.72097664, 0.73742258, 0.76998320, 0.75283283, 0.78919969, 0.82501826, 0.86248121, //12024-12031
		0.00279449, 0.00515262, 0.00740015, 0.01193077, 0.00979329, 0.01384307, 0.01754369, 0.01986762, //12032-12039
		0.00561042, 0.01095053, 0.01555640, 0.02677169, 0.02164283, 0.03114611, 0.04210435, 0.04863030, //12040-12047
		0.01546713, 0.02721762, 0.03477888, 0.05598564, 0.04692331, 0.06299784, 0.08334431, 0.09441744, //12048-12055
		0.02898732, 0.05281318, 0.06578825, 0.11001140, 0.09246945, 0.12242420, 0.17096147, 0.19372489, //12056-12063
		0.02030097, 0.03699072, 0.04705935, 0.07904766, 0.06579713, 0.08888783, 0.12371325, 0.14138005, //12064-12071
		0.04924481, 0.08282015, 0.09765554, 0.15381933, 0.13301883, 0.16741439, 0.22710714, 0.25240668, //12072-12079
		0.06508658, 0.11303701, 0.13212249, 0.21607765, 0.18711889, 0.23394515, 0.33462722, 0.37052574, //12080-12087
		0.11778244, 0.18891737, 0.21026955, 0.31927921, 0.28655935, 0.33746169, 0.45944795, 0.49430113, //12088-12095
		0.04303961, 0.05121418, 0.07981493, 0.10425369, 0.08853571, 0.14098697, 0.16227648, 0.23333422, //12096-12103
		0.09461236, 0.10960500, 0.15168606, 0.19198187, 0.16707974, 0.23927316, 0.27430537, 0.36243543, //12104-12111
		0.14386219, 0.15993722, 0.19786910, 0.23970875, 0.21444325, 0.28266532, 0.31888731, 0.40109750, //12112-12119
		0.28940920, 0.31072266, 0.35266800, 0.40678600, 0.37577479, 0.45063183, 0.50002505, 0.58184560, //12120-12127
		0.22079028, 0.24178013, 0.28661692, 0.34051200, 0.30894439, 0.38855381, 0.43749427, 0.52758226, //12128-12135
		0.35097035, 0.36957486, 0.40378821, 0.45367524, 0.42554200, 0.49145779, 0.53860300, 0.61193686, //12136-12143
		0.54808331, 0.56557020, 0.59494401, 0.64380891, 0.61745254, 0.67509153, 0.72566676, 0.78435183, //12144-12151
		0.67187467, 0.68227193, 0.69886267, 0.73288489, 0.71497009, 0.75301063, 0.79236558, 0.83360772, //12152-12159
		0.00109823, 0.00224081, 0.00333097, 0.00586569, 0.00466736, 0.00694772, 0.00930741, 0.01079101, //12160-12167
		0.00246366, 0.00534040, 0.00781435, 0.01482514, 0.01162440, 0.01755584, 0.02535875, 0.02999980, //12168-12175
		0.00723546, 0.01404224, 0.01841876, 0.03246279, 0.02646757, 0.03708577, 0.05231482, 0.06059176, //12176-12183
		0.01508130, 0.03041842, 0.03874756, 0.07144300, 0.05847603, 0.08059861, 0.12106008, 0.14001594, //12184-12191
		0.01003160, 0.02029823, 0.02647603, 0.04910626, 0.03972334, 0.05602322, 0.08398327, 0.09815270, //12192-12199
		0.02681551, 0.04963044, 0.05968298, 0.10302554, 0.08702141, 0.11349815, 0.16508109, 0.18691645, //12200-12207
		0.03757308, 0.07235596, 0.08619440, 0.15563811, 0.13166756, 0.17048594, 0.26445712, 0.29799169, //12208-12215
		0.07356628, 0.12948256, 0.14617683, 0.24285685, 0.21385934, 0.25899452, 0.37976746, 0.41427192, //12216-12223
		0.02488265, 0.03009609, 0.04840658, 0.06570739, 0.05457723, 0.09159137, 0.10843568, 0.16441951, //12224-12231
		0.06243906, 0.07328284, 0.10363246, 0.13551548, 0.11580665, 0.17297360, 0.20355722, 0.28045839, //12232-12239
		0.09830867, 0.11050754, 0.13918676, 0.17348541, 0.15274687, 0.20887585, 0.24143132, 0.31532984, //12240-12247
		0.22500375, 0.24316376, 0.27891591, 0.32859673, 0.30011247, 0.36881758, 0.41820971, 0.50001981, //12248-12255
		0.16528147, 0.18251652, 0.21922835, 0.26707729, 0.23903016, 0.30968422, 0.35717691, 0.44459282, //12256-12263
		0.27860319, 0.29492493, 0.32500053, 0.37205890, 0.34553893, 0.40775578, 0.45586871, 0.53082328, //12264-12271
		0.48071157, 0.49753311, 0.52577140, 0.57593844, 0.54888067, 0.60805182, 0.66404288, 0.72906232, //12272-12279
		0.60762528, 0.61817058, 0.63492123, 0.67144086, 0.65217459, 0.69298606, 0.73828083, 0.78572575, //12280-12287
		0.03714499, 0.05291766, 0.06797486, 0.08749045, 0.07829022, 0.09574898, 0.10667961, 0.11354027, //12288-12295
		0.05597707, 0.08262639, 0.10559673, 0.14138381, 0.12502391, 0.15536225, 0.17921301, 0.19341650, //12296-12303
		0.12190620, 0.16596274, 0.19425783, 0.24746847, 0.22474325, 0.26502226, 0.30104344, 0.32062231, //12304-12311
		0.17256790, 0.23866267, 0.27458719, 0.35588217, 0.32363333, 0.37868020, 0.44082610, 0.46994090, //12312-12319
		0.14001096, 0.19372471, 0.22612218, 0.29372998, 0.26573140, 0.31458719, 0.36542868, 0.39125696, //12320-12327
		0.24851838, 0.32398317, 0.35726979, 0.44373801, 0.41179553, 0.46473461, 0.53034408, 0.55818382, //12328-12335
		0.28407251, 0.37501565, 0.41120488, 0.51799667, 0.48117475, 0.54073092, 0.62991250, 0.66171571, //12336-12343
		0.40259786, 0.50329960, 0.53347437, 0.64107413, 0.60879185, 0.65899992, 0.74546557, 0.77019664, //12344-12351
		0.20286252, 0.22685371, 0.31081170, 0.36059342, 0.32860491, 0.43525539, 0.46550936, 0.56615534, //12352-12359
		0.30948428, 0.34079174, 0.42855975, 0.48805839, 0.45128602, 0.55789389, 0.59430167, 0.68583463, //12360-12367
		0.41127985, 0.43897634, 0.50429558, 0.55733911, 0.52532094, 0.61192293, 0.64555615, 0.72177828, //12368-12375
		0.57914161, 0.60507283, 0.65608639, 0.70561566, 0.67723246, 0.74573755, 0.77923694, 0.83475501, //12376-12383
		0.50000979, 0.52913123, 0.59128020, 0.64681423, 0.61428728, 0.69629985, 0.73312853, 0.80082369, //12384-12391
		0.65017753, 0.66989983, 0.70621041, 0.74722105, 0.72412583, 0.77823277, 0.80770028, 0.85355492, //12392-12399
		0.78296258, 0.79751291, 0.82192780, 0.85361944, 0.83653071, 0.87391246, 0.89896008, 0.92803842, //12400-12407
		0.86636426, 0.87349771, 0.88483892, 0.90349172, 0.89365029, 0.91451482, 0.93150059, 0.94930939, //12408-12415
		0.03057879, 0.04432095, 0.05743420, 0.07509286, 0.06676992, 0.08254708, 0.09276212, 0.09917338, //12416-12423
		0.04699019, 0.07075574, 0.09123487, 0.12441476, 0.10924497, 0.13736979, 0.16023157, 0.17384361, //12424-12431
		0.10443913, 0.14488249, 0.17090182, 0.22148882, 0.19989478, 0.23821178, 0.27355580, 0.29275491, //12432-12439
		0.15095619, 0.21321736, 0.24708055, 0.32653459, 0.29500164, 0.34880628, 0.41146463, 0.44082756, //12440-12447
		0.12105489, 0.17096846, 0.20109718, 0.26632574, 0.23929386, 0.28645732, 0.33706512, 0.36278615, //12448-12455
		0.22069851, 0.29343168, 0.32547999, 0.41163033, 0.37977483, 0.43252058, 0.49979649, 0.52832972, //12456-12463
		0.25496484, 0.34378068, 0.37913979, 0.48714307, 0.44987736, 0.51015136, 0.60302845, 0.63614252, //12464-12471
		0.36911770, 0.47037030, 0.50073309, 0.61229151, 0.57883400, 0.63087356, 0.72283737, 0.74910845, //12472-12479
		0.18017310, 0.20260666, 0.28116689, 0.32948340, 0.29841730, 0.40207687, 0.43243211, 0.53367891, //12480-12487
		0.28280526, 0.31293505, 0.39745237, 0.45682239, 0.42011839, 0.52651440, 0.56408143, 0.65848680, //12488-12495
		0.38077873, 0.40800586, 0.47226216, 0.52601386, 0.49357669, 0.58142414, 0.61647326, 0.69597752, //12496-12503
		0.55126445, 0.57749919, 0.62915860, 0.68069494, 0.65115673, 0.72247546, 0.75823863, 0.81751804, //12504-12511
		0.47087872, 0.50000449, 0.56218271, 0.61937129, 0.58586545, 0.67034387, 0.70931172, 0.78105006, //12512-12519
		0.62340165, 0.64367471, 0.68096344, 0.72410484, 0.69978732, 0.75673728, 0.78843717, 0.83777295, //12520-12527
		0.76447495, 0.77967747, 0.80520542, 0.83906390, 0.82080489, 0.86076046, 0.88808357, 0.91980572, //12528-12535
		0.85307840, 0.86066509, 0.87273730, 0.89294539, 0.88229732, 0.90488804, 0.92361374, 0.94324356, //12536-12543
		0.01657423, 0.02598370, 0.03496842, 0.04862228, 0.04218597, 0.05439348, 0.06306321, 0.06849348, //12544-12551
		0.02780169, 0.04540107, 0.06057031, 0.08819524, 0.07556806, 0.09898611, 0.11971451, 0.13205551, //12552-12559
		0.06717394, 0.09989087, 0.12099011, 0.16604264, 0.14682746, 0.18100652, 0.21489610, 0.23327260, //12560-12567
		0.10485590, 0.15887186, 0.18827971, 0.26386712, 0.23388967, 0.28506843, 0.34879575, 0.37868830, //12568-12575
		0.08057954, 0.12241680, 0.14770820, 0.20782126, 0.18289085, 0.22639500, 0.27653591, 0.30203119, //12576-12583
		0.16133373, 0.22811064, 0.25762563, 0.34307755, 0.31151848, 0.36389913, 0.43459050, 0.46461272, //12584-12591
		0.19282122, 0.27709986, 0.31069607, 0.42132763, 0.38307388, 0.44488519, 0.54563904, 0.58157331, //12592-12599
		0.29797450, 0.40020737, 0.43097678, 0.55090106, 0.51495846, 0.57086299, 0.67451841, 0.70413552, //12600-12607
		0.13176414, 0.15089048, 0.21790209, 0.26309339, 0.23404369, 0.33092722, 0.36173378, 0.46441461, //12608-12615
		0.22581567, 0.25350542, 0.33104693, 0.39014112, 0.35361507, 0.45950581, 0.49950297, 0.60008828, //12616-12623
		0.31558864, 0.34189802, 0.40384656, 0.45921632, 0.42582979, 0.51604255, 0.55434681, 0.64085161, //12624-12631
		0.49173953, 0.51866738, 0.57163429, 0.62748531, 0.59551314, 0.67271408, 0.71342509, 0.78077565, //12632-12639
		0.40872310, 0.43784287, 0.50000706, 0.56075641, 0.52519511, 0.61493019, 0.65854194, 0.73879369, //12640-12647
		0.56625554, 0.58766556, 0.62700239, 0.67473406, 0.64787183, 0.71082337, 0.74730341, 0.80408075, //12648-12655
		0.72500322, 0.74161755, 0.76951518, 0.80800697, 0.78722562, 0.83269440, 0.86487345, 0.90222229, //12656-12663
		0.82471763, 0.83329305, 0.84689564, 0.87046783, 0.85804668, 0.88439154, 0.90679564, 0.93026675, //12664-12671
		0.01105198, 0.01789083, 0.02442252, 0.03501941, 0.03002192, 0.03949564, 0.04666012, 0.05114017, //12672-12679
		0.01922387, 0.03258131, 0.04409324, 0.06658896, 0.05629837, 0.07536946, 0.09339542, 0.10412643, //12680-12687
		0.04781132, 0.07377263, 0.09046931, 0.12869931, 0.11237867, 0.14134399, 0.17190072, 0.18851168, //12688-12695
		0.07767105, 0.12273351, 0.14718719, 0.21489642, 0.18805328, 0.23389375, 0.29499496, 0.32363350, //12696-12703
		0.05847676, 0.09247201, 0.11297973, 0.16550851, 0.14372813, 0.18171624, 0.22858818, 0.25242355, //12704-12711
		0.12246765, 0.18015228, 0.20565055, 0.28478195, 0.25553431, 0.30395616, 0.37383763, 0.40349593, //12712-12719
		0.14964573, 0.22470703, 0.25457695, 0.36077954, 0.32412287, 0.38341935, 0.48727396, 0.52429952, //12720-12727
		0.24032905, 0.33661407, 0.36561139, 0.48678059, 0.45036309, 0.50698627, 0.61889743, 0.65087828, //12728-12735
		0.10110636, 0.11690243, 0.17214925, 0.21194409, 0.18638117, 0.27157537, 0.30045784, 0.39683395, //12736-12743
		0.18355938, 0.20776678, 0.27565423, 0.33072741, 0.29667052, 0.39540586, 0.43542463, 0.53596789, //12744-12751
		0.26223614, 0.28605860, 0.34215936, 0.39529759, 0.36320312, 0.45001425, 0.48917266, 0.57761361, //12752-12759
		0.43431345, 0.46034375, 0.51159414, 0.56879779, 0.53602686, 0.61522934, 0.65950606, 0.73296180, //12760-12767
		0.35319677, 0.38065415, 0.43926994, 0.50000792, 0.46444151, 0.55415250, 0.60070581, 0.68634690, //12768-12775
		0.50710264, 0.52837268, 0.56752492, 0.61748214, 0.58934193, 0.65531412, 0.69580424, 0.75882004, //12776-12783
		0.67988305, 0.69718206, 0.72623554, 0.76854978, 0.74571519, 0.79564798, 0.83312814, 0.87661049, //12784-12791
		0.78840185, 0.79768978, 0.81251373, 0.83933841, 0.82519115, 0.85519057, 0.88207916, 0.91024623, //12792-12799
		0.01428335, 0.02263347, 0.03059208, 0.04298605, 0.03714370, 0.04824137, 0.05627055, 0.06131239, //12800-12807
		0.02424942, 0.04009362, 0.05375253, 0.07924996, 0.06758804, 0.08919186, 0.10880738, 0.12048364, //12808-12815
		0.05914635, 0.08906623, 0.10831666, 0.15063183, 0.13257810, 0.16456189, 0.19705919, 0.21471530, //12816-12823
		0.09356352, 0.14389812, 0.17126833, 0.24358747, 0.21491115, 0.26386632, 0.32650912, 0.35588946, //12824-12831
		0.07142846, 0.11000857, 0.13329211, 0.19030147, 0.16668383, 0.20788393, 0.25668514, 0.28148555, //12832-12839
		0.14525960, 0.20825383, 0.23606746, 0.31893368, 0.28829573, 0.33904485, 0.40940507, 0.43929860, //12840-12847
		0.17487981, 0.25538898, 0.28743838, 0.39621970, 0.35867477, 0.41941018, 0.52145564, 0.55785718, //12848-12855
		0.27389547, 0.37378830, 0.40377244, 0.52435512, 0.48816845, 0.54440342, 0.65148057, 0.68207633, //12856-12863
		0.11905207, 0.13679899, 0.19893303, 0.24193607, 0.21426772, 0.30636493, 0.33640373, 0.43626485, //12864-12871
		0.20831368, 0.23454076, 0.30808817, 0.36554612, 0.33000519, 0.43292579, 0.47295335, 0.57349125, //12872-12879
		0.29350874, 0.31875122, 0.37820884, 0.43267749, 0.39990005, 0.48871033, 0.52734332, 0.61470750, //12880-12887
		0.46795690, 0.49451196, 0.54674052, 0.60320485, 0.57086079, 0.64889654, 0.69108010, 0.76095054, //12888-12895
		0.38570741, 0.41415789, 0.47484586, 0.53560294, 0.50000172, 0.58974403, 0.63457869, 0.71705307, //12896-12903
		0.54176622, 0.56311095, 0.60243113, 0.65104427, 0.62360841, 0.68781198, 0.72599177, 0.78527754, //12904-12911
		0.70631686, 0.72320246, 0.75156496, 0.79165577, 0.77002986, 0.81734680, 0.85171564, 0.89160790, //12912-12919
		0.80967603, 0.81854603, 0.83266665, 0.85756463, 0.84443650, 0.87228723, 0.89654811, 0.92198074, //12920-12927
		0.00613216, 0.01068867, 0.01501701, 0.02289353, 0.01917509, 0.02622384, 0.03202041, 0.03566318, //12928-12935
		0.01155999, 0.02114515, 0.02939168, 0.04733409, 0.03913596, 0.05432211, 0.06992964, 0.07924210, //12936-12943
		0.03058823, 0.05048875, 0.06324829, 0.09538050, 0.08168702, 0.10604221, 0.13359327, 0.14860185, //12944-12951
		0.05352494, 0.09047527, 0.11055493, 0.17125523, 0.14720690, 0.18829906, 0.24704517, 0.27459248, //12952-12959
		0.03881168, 0.06575481, 0.08201707, 0.12777605, 0.10882501, 0.14187698, 0.18585943, 0.20820930, //12960-12967
		0.08770604, 0.13738659, 0.15933769, 0.23275713, 0.20556643, 0.25072091, 0.31969882, 0.34902526, //12968-12975
		0.11119860, 0.17797431, 0.20460399, 0.30683840, 0.27150389, 0.32852777, 0.43524447, 0.47326514, //12976-12983
		0.18889701, 0.27992374, 0.30736777, 0.42967926, 0.39290649, 0.44996121, 0.56930623, 0.60343045, //12984-12991
		0.07381347, 0.08658721, 0.13139992, 0.16628064, 0.14390273, 0.21857215, 0.24590369, 0.33685412, //12992-12999
		0.14588535, 0.16700365, 0.22623120, 0.27776926, 0.24594306, 0.33829845, 0.37826412, 0.47873102, //13000-13007
		0.21466741, 0.23624859, 0.28718262, 0.33850958, 0.30754022, 0.39115883, 0.43094177, 0.52134929, //13008-13015
		0.38312256, 0.40835406, 0.45803565, 0.51647646, 0.48302518, 0.56376547, 0.61145246, 0.69030084, //13016-13023
		0.30372571, 0.32969015, 0.38511212, 0.44585066, 0.41025153, 0.49999296, 0.54920403, 0.63961519, //13024-13031
		0.45437361, 0.47553458, 0.51436669, 0.56639089, 0.53707100, 0.60582399, 0.64995291, 0.71857564, //13032-13039
		0.63966474, 0.65758478, 0.68766735, 0.73336983, 0.70871814, 0.76265893, 0.80482581, 0.85375796, //13040-13047
		0.75601100, 0.76595959, 0.78182068, 0.81157518, 0.79591879, 0.82919332, 0.86004617, 0.89241554, //13048-13055
		0.00461388, 0.00817250, 0.01156883, 0.01794005, 0.01493631, 0.02063622, 0.02549401, 0.02854620, //13056-13063
		0.00886678, 0.01653835, 0.02315571, 0.03807465, 0.03125273, 0.04389185, 0.05745240, 0.06552307, //13064-13071
		0.02375086, 0.03999946, 0.05048358, 0.07770983, 0.06605722, 0.08671075, 0.11113502, 0.12436752, //13072-13079
		0.04243710, 0.07357277, 0.09045687, 0.14392128, 0.12271014, 0.15889093, 0.21321838, 0.23865624, //13080-13087
		0.03041547, 0.05279921, 0.06634799, 0.10594270, 0.08954893, 0.11819531, 0.15813679, 0.17844161, //13088-13095
		0.07044133, 0.11294894, 0.13164487, 0.19757986, 0.17320195, 0.21349523, 0.27859574, 0.30618152, //13096-13103
		0.09044149, 0.14894251, 0.17227315, 0.26651557, 0.23399948, 0.28661857, 0.39078629, 0.42795818, //13104-13111
		0.15710508, 0.23947519, 0.26424589, 0.38076557, 0.34580775, 0.40030438, 0.52099360, 0.55548044, //13112-13119
		0.05997723, 0.07071759, 0.10828868, 0.13855319, 0.11908353, 0.18398296, 0.20858227, 0.29091234, //13120-13127
		0.12296646, 0.14138634, 0.19301794, 0.23964158, 0.21082100, 0.29439101, 0.33222534, 0.42727497, //13128-13135
		0.18309724, 0.20226661, 0.24748236, 0.29453681, 0.26614306, 0.34309171, 0.38137367, 0.46836006, //13136-13143
		0.34165078, 0.36519091, 0.41150297, 0.46811978, 0.43568312, 0.51405591, 0.56254174, 0.64287782, //13144-13151
		0.26690229, 0.29070241, 0.34150400, 0.39931767, 0.36544106, 0.45085625, 0.50002486, 0.59048293, //13152-13159
		0.40868676, 0.42878787, 0.46560955, 0.51683445, 0.48798071, 0.55551096, 0.60110160, 0.67190530, //13160-13167
		0.59943210, 0.61719485, 0.64701886, 0.69418785, 0.66873155, 0.72439150, 0.77029389, 0.82359875, //13168-13175
		0.71922082, 0.72939198, 0.74557393, 0.77729080, 0.76058659, 0.79601232, 0.83065043, 0.86691939, //13176-13183
		0.00181564, 0.00355301, 0.00520571, 0.00881092, 0.00711105, 0.01034566, 0.01347607, 0.01545646, //13184-13191
		0.00389122, 0.00805904, 0.01164388, 0.02105150, 0.01675410, 0.02473441, 0.03448114, 0.04028208, //13192-13199
		0.01114463, 0.02066368, 0.02681253, 0.04515892, 0.03732828, 0.05121610, 0.06974507, 0.07982904, //13200-13207
		0.02211605, 0.04243685, 0.05347308, 0.09356073, 0.07767246, 0.10485265, 0.15094703, 0.17257708, //13208-13215
		0.01506119, 0.02898137, 0.03739812, 0.06581118, 0.05403590, 0.07458998, 0.10714171, 0.12368912, //13216-13223
		0.03857884, 0.06799740, 0.08102928, 0.13283466, 0.11363459, 0.14539133, 0.20301456, 0.22737477, //13224-13231
		0.05240255, 0.09555837, 0.11279853, 0.19238444, 0.16489278, 0.20932450, 0.30898831, 0.34452956, //13232-13239
		0.09866688, 0.16482676, 0.18476143, 0.29113374, 0.25920150, 0.30887982, 0.43202051, 0.46731250, //13240-13247
		0.03453661, 0.04149238, 0.06581884, 0.08747501, 0.07351212, 0.12021101, 0.14009086, 0.20650808, //13248-13255
		0.08082777, 0.09425325, 0.13188176, 0.16944379, 0.14625500, 0.21350435, 0.24750511, 0.33280231, //13256-13263
		0.12498550, 0.13973649, 0.17434799, 0.21397731, 0.19010110, 0.25469522, 0.29015129, 0.37072915, //13264-13271
		0.26533948, 0.28572733, 0.32589604, 0.37921173, 0.34861691, 0.42240511, 0.47239281, 0.55534726, //13272-13279
		0.19917454, 0.21893978, 0.26125018, 0.31365651, 0.28296103, 0.36039202, 0.40951476, 0.49999878, //13280-13287
		0.32469125, 0.34273263, 0.37590808, 0.42555677, 0.39761563, 0.46320314, 0.51121610, 0.58624062, //13288-13295
		0.52547296, 0.54291059, 0.57221469, 0.62206512, 0.59516420, 0.65398036, 0.70676251, 0.76803918, //13296-13303
		0.65154352, 0.66210961, 0.67890832, 0.71417839, 0.69559099, 0.73495425, 0.77649494, 0.82001533, //13304-13311
		0.01188617, 0.01896438, 0.02570803, 0.03641717, 0.03137516, 0.04094761, 0.04803631, 0.05249528, //13312-13319
		0.02034104, 0.03393811, 0.04564269, 0.06805196, 0.05780965, 0.07678664, 0.09451189, 0.10506090, //13320-13327
		0.04987006, 0.07592713, 0.09265279, 0.13031786, 0.11422623, 0.14271551, 0.17256920, 0.18878659, //13328-13335
		0.07985013, 0.12439848, 0.14864841, 0.21472157, 0.18851320, 0.23324041, 0.29275401, 0.32059483, //13336-13343
		0.06058804, 0.09443229, 0.11484883, 0.16635880, 0.14501202, 0.18220781, 0.22792922, 0.25112554, //13344-13351
		0.12474560, 0.18126654, 0.20630100, 0.28311309, 0.25474803, 0.30174002, 0.36971037, 0.39853518, //13352-13359
		0.15140496, 0.22466003, 0.25385009, 0.35702667, 0.32142046, 0.37898930, 0.48060497, 0.51683791, //13360-13367
		0.24008126, 0.33364980, 0.36167431, 0.47949861, 0.44407974, 0.49911402, 0.60928051, 0.64076533, //13368-13375
		0.10280179, 0.11847858, 0.17333781, 0.21222885, 0.18720503, 0.27068185, 0.29863041, 0.39191489, //13376-13383
		0.18378135, 0.20756761, 0.27424993, 0.32780504, 0.29468330, 0.39074881, 0.42960919, 0.52726652, //13384-13391
		0.26111616, 0.28437102, 0.33911506, 0.39068164, 0.35947198, 0.44368046, 0.48175552, 0.56787943, //13392-13399
		0.42900448, 0.45436182, 0.50430810, 0.56013065, 0.52810987, 0.60535720, 0.64903772, 0.72143134, //13400-13407
		0.34985055, 0.37660955, 0.43374432, 0.49295740, 0.45828804, 0.54558350, 0.59132024, 0.67536035, //13408-13415
		0.50002056, 0.52072872, 0.55886087, 0.60766562, 0.58016674, 0.64458882, 0.68470095, 0.74709451, //13416-13423
		0.67152097, 0.68854063, 0.71708424, 0.75904425, 0.73639374, 0.78593836, 0.82385098, 0.86784912, //13424-13431
		0.77925563, 0.78844664, 0.80309579, 0.82998369, 0.81580563, 0.84588359, 0.87347253, 0.90234961, //13432-13439
		0.00976951, 0.01588523, 0.02172515, 0.03130713, 0.02679032, 0.03535900, 0.04191719, 0.04603763, //13440-13447
		0.01707218, 0.02911200, 0.03948223, 0.06005147, 0.05064546, 0.06808223, 0.08485831, 0.09484819, //13448-13455
		0.04263691, 0.06620762, 0.08137729, 0.11660852, 0.10157635, 0.12826811, 0.15699149, 0.17256846, //13456-13463
		0.06975213, 0.11112730, 0.13360977, 0.19707969, 0.17189784, 0.21485120, 0.27352895, 0.30104178, //13464-13471
		0.05232249, 0.08334769, 0.10207964, 0.15096525, 0.13071326, 0.16603716, 0.21066031, 0.23333674, //13472-13479
		0.11038265, 0.16381580, 0.18742014, 0.26222471, 0.23457514, 0.28046944, 0.34818753, 0.37694381, //13480-13487
		0.13562178, 0.20573369, 0.23365902, 0.33555420, 0.30038580, 0.35724167, 0.46011806, 0.49681272, //13488-13495
		0.21940102, 0.31105775, 0.33847462, 0.45701339, 0.42147877, 0.47674538, 0.59001735, 0.62238061, //13496-13503
		0.09151462, 0.10600410, 0.15667409, 0.19368399, 0.16989608, 0.24928524, 0.27668765, 0.36830739, //13504-13511
		0.16847585, 0.19105812, 0.25432945, 0.30667369, 0.27432857, 0.36809801, 0.40703072, 0.50492182, //13512-13519
		0.24196723, 0.26433160, 0.31708278, 0.36809657, 0.33733116, 0.42051775, 0.45894313, 0.54598373, //13520-13527
		0.40873421, 0.43384911, 0.48326437, 0.53969105, 0.50734910, 0.58542796, 0.63043068, 0.70503848, //13528-13535
		0.33009780, 0.35634751, 0.41234904, 0.47165538, 0.43691779, 0.52447871, 0.57124353, 0.65726620, //13536-13543
		0.47928503, 0.50000036, 0.53812810, 0.58785367, 0.55981492, 0.62541939, 0.66698565, 0.73159043, //13544-13551
		0.65589562, 0.67316045, 0.70213692, 0.74550002, 0.72211755, 0.77327400, 0.81301819, 0.85914833, //13552-13559
		0.76680489, 0.77626843, 0.79134022, 0.81937241, 0.80461283, 0.83595074, 0.86509310, 0.89560575, //13560-13567
		0.00587243, 0.01022350, 0.01437313, 0.02191303, 0.01835830, 0.02509677, 0.03067261, 0.03414770, //13568-13575
		0.01107312, 0.02024086, 0.02815504, 0.04532551, 0.03745536, 0.05204461, 0.06710272, 0.07604934, //13576-13583
		0.02929044, 0.04834152, 0.06057578, 0.09139756, 0.07828499, 0.10156902, 0.12827174, 0.14277124, //13584-13591
		0.05113767, 0.08672571, 0.10606862, 0.16451961, 0.14134202, 0.18098963, 0.23820789, 0.26502582, //13592-13599
		0.03708230, 0.06296553, 0.07858022, 0.12264239, 0.10439530, 0.13626710, 0.17887109, 0.20057537, //13600-13607
		0.08410210, 0.13175359, 0.15259670, 0.22389346, 0.19750213, 0.24109777, 0.30863227, 0.33724938, //13608-13615
		0.10647973, 0.17092048, 0.19651962, 0.29602977, 0.26172593, 0.31722924, 0.42244970, 0.45995212, //13616-13623
		0.18142000, 0.26950869, 0.29589126, 0.41565483, 0.37978981, 0.43570852, 0.55460171, 0.58855518, //13624-13631
		0.07073741, 0.08303001, 0.12614261, 0.15961674, 0.13802073, 0.20997677, 0.23639215, 0.32445283, //13632-13639
		0.14029218, 0.16067346, 0.21785943, 0.26771664, 0.23685714, 0.32641527, 0.36549626, 0.46385206, //13640-13647
		0.20668208, 0.22754534, 0.27677022, 0.32645786, 0.29653240, 0.37763175, 0.41695114, 0.50557353, //13648-13655
		0.37148660, 0.39608917, 0.44463380, 0.50217023, 0.46916804, 0.54883613, 0.59621001, 0.67502115, //13656-13663
		0.29377651, 0.31903799, 0.37299632, 0.43250102, 0.39766610, 0.48564332, 0.53443322, 0.62413336, //13664-13671
		0.44116975, 0.46191596, 0.49996756, 0.55134284, 0.52236269, 0.59027345, 0.63445766, 0.70318214, //13672-13679
		0.62711327, 0.64487729, 0.67472503, 0.72057632, 0.69584855, 0.75001870, 0.79310927, 0.84315285, //13680-13687
		0.74387608, 0.75383377, 0.76968556, 0.79986634, 0.78398911, 0.81772720, 0.84967745, 0.88317173, //13688-13695
		0.00383857, 0.00693094, 0.00986561, 0.01557845, 0.01288884, 0.01798502, 0.02247175, 0.02528366, //13696-13703
		0.00752614, 0.01433512, 0.02019777, 0.03387660, 0.02761576, 0.03922177, 0.05199409, 0.05959998, //13704-13711
		0.02044775, 0.03512332, 0.04452355, 0.06990970, 0.05906101, 0.07825864, 0.10158975, 0.11427618, //13712-13719
		0.03731993, 0.06607111, 0.08168548, 0.13256945, 0.11239537, 0.14679252, 0.19988304, 0.22475706, //13720-13727
		0.02647217, 0.04693081, 0.05927340, 0.09663250, 0.08116600, 0.10816206, 0.14685876, 0.16649772, //13728-13735
		0.06262555, 0.10237705, 0.11994297, 0.18335974, 0.15994768, 0.19875584, 0.26286133, 0.29004855, //13736-13743
		0.08137091, 0.13681609, 0.15892245, 0.25097980, 0.21923434, 0.27056026, 0.37479391, 0.41193788, //13744-13751
		0.14388287, 0.22342799, 0.24733237, 0.36310999, 0.32830761, 0.38235989, 0.50469689, 0.53965393, //13752-13759
		0.05381513, 0.06371317, 0.09830947, 0.12685408, 0.10848508, 0.16973795, 0.19352876, 0.27312190, //13760-13767
		0.11342243, 0.13082634, 0.17961191, 0.22465821, 0.19681662, 0.27749607, 0.31497137, 0.40906900, //13768-13775
		0.17036319, 0.18868569, 0.23187491, 0.27782962, 0.25011712, 0.32513840, 0.36331663, 0.44997606, //13776-13783
		0.32638842, 0.34942695, 0.39483426, 0.45133564, 0.41897171, 0.49713766, 0.54634722, 0.62791507, //13784-13791
		0.25280441, 0.27593097, 0.32531201, 0.38255618, 0.34900813, 0.43359359, 0.48316992, 0.57449457, //13792-13799
		0.39234994, 0.41215820, 0.44865340, 0.50002026, 0.47104775, 0.53899082, 0.58536536, 0.65760084, //13800-13807
		0.58622613, 0.60405071, 0.63400104, 0.68201159, 0.65612102, 0.71279925, 0.76019212, 0.81518890, //13808-13815
		0.70800253, 0.71831438, 0.73475500, 0.76729994, 0.75015584, 0.78654643, 0.82252339, 0.86022386, //13816-13823
		0.00498860, 0.00878663, 0.01241139, 0.01914704, 0.01597628, 0.02199290, 0.02709364, 0.03028628, //13824-13831
		0.00952485, 0.01766645, 0.02466390, 0.04033404, 0.03317393, 0.04644307, 0.06050531, 0.06886893, //13832-13839
		0.02540554, 0.04258087, 0.05360706, 0.08204256, 0.06991984, 0.09141002, 0.11664955, 0.13033701, //13840-13847
		0.04513583, 0.07769471, 0.09538238, 0.15060022, 0.12871876, 0.16610643, 0.22148729, 0.24744169, //13848-13855
		0.03246214, 0.05597326, 0.07018535, 0.11129839, 0.09425159, 0.12399276, 0.16492429, 0.18572848, //13856-13863
		0.07479803, 0.11894900, 0.13837282, 0.20619069, 0.18112358, 0.22260486, 0.28867129, 0.31663377, //13864-13871
		0.09557443, 0.15608416, 0.18013698, 0.27638359, 0.24318832, 0.29696786, 0.40165787, 0.43902496, //13872-13879
		0.16495286, 0.24932578, 0.27483433, 0.39279912, 0.35737622, 0.41233924, 0.53284862, 0.56720565, //13880-13887
		0.06335838, 0.07459665, 0.11395151, 0.14529002, 0.12515261, 0.19235722, 0.21772031, 0.30219645, //13888-13895
		0.12858470, 0.14765088, 0.20114081, 0.24894239, 0.21940656, 0.30512332, 0.34346050, 0.43983320, //13896-13903
		0.19084161, 0.21059570, 0.25718961, 0.30534983, 0.27628869, 0.35471704, 0.39360707, 0.48124244, //13904-13911
		0.35179224, 0.37574580, 0.42291538, 0.48001643, 0.44726704, 0.52624270, 0.57446990, 0.65443905, //13912-13919
		0.27593140, 0.30024582, 0.35217721, 0.41071554, 0.37640576, 0.46285149, 0.51204917, 0.60248889, //13920-13927
		0.41991088, 0.44019841, 0.47761840, 0.52895921, 0.49996585, 0.56784905, 0.61304405, 0.68330362, //13928-13935
		0.60929972, 0.62707267, 0.65696118, 0.70377840, 0.67852415, 0.73375642, 0.77872357, 0.83099072, //13936-13943
		0.72822290, 0.73833992, 0.75446781, 0.78566370, 0.76921959, 0.80409480, 0.83783548, 0.87315708, //13944-13951
		0.00229534, 0.00443227, 0.00645562, 0.01078575, 0.00875312, 0.01260053, 0.01627314, 0.01856314, //13952-13959
		0.00484210, 0.00986382, 0.01419429, 0.02519681, 0.02016303, 0.02949019, 0.04055790, 0.04713407, //13960-13967
		0.01375619, 0.02509122, 0.03242807, 0.05361083, 0.04453691, 0.06057513, 0.08137088, 0.09265523, //13968-13975
		0.02681888, 0.05043187, 0.06328705, 0.10833840, 0.09046918, 0.12095753, 0.17087065, 0.19428534, //13976-13983
		0.01843176, 0.03479210, 0.04463690, 0.07695782, 0.06357436, 0.08689491, 0.12258631, 0.14071926, //13984-13991
		0.04644736, 0.08018907, 0.09511921, 0.15262324, 0.13142082, 0.16673301, 0.22825921, 0.25429443, //13992-13999
		0.06223667, 0.11105085, 0.13042324, 0.21685581, 0.18708871, 0.23516933, 0.33870081, 0.37555646, //14000-14007
		0.11539124, 0.18863951, 0.21041067, 0.32318433, 0.28937356, 0.34203328, 0.46692330, 0.50256792, //14008-14015
		0.04098190, 0.04906346, 0.07734918, 0.10197118, 0.08614955, 0.13911150, 0.16119447, 0.23448482, //14016-14023
		0.09308477, 0.10823829, 0.15068551, 0.19209039, 0.16646914, 0.24053177, 0.27671745, 0.36776243, //14024-14031
		0.14280430, 0.15919383, 0.19799178, 0.24090130, 0.21495910, 0.28537423, 0.32268827, 0.40753912, //14032-14039
		0.29217049, 0.31409337, 0.35723853, 0.41285424, 0.38093805, 0.45807304, 0.50858216, 0.59224421, //14040-14047
		0.22173556, 0.24325791, 0.28914782, 0.34481861, 0.31221746, 0.39428164, 0.44444766, 0.53692098, //14048-14055
		0.35540181, 0.37455851, 0.40983820, 0.46109314, 0.43208504, 0.49997565, 0.54818705, 0.62306459, //14056-14063
		0.55528133, 0.57314154, 0.60318868, 0.65279740, 0.62603077, 0.68463808, 0.73525370, 0.79405022, //14064-14071
		0.68081593, 0.69140772, 0.70829149, 0.74262687, 0.72453012, 0.76297356, 0.80198538, 0.84287139, //14072-14079
		0.00167417, 0.00328445, 0.00483094, 0.00821898, 0.00661903, 0.00965013, 0.01263909, 0.01451052, //14080-14087
		0.00359931, 0.00749989, 0.01086672, 0.01978972, 0.01571264, 0.02326785, 0.03263138, 0.03820596, //14088-14095
		0.01035486, 0.01934120, 0.02508082, 0.04257088, 0.03512027, 0.04833604, 0.06621752, 0.07591774, //14096-14103
		0.02069114, 0.03998847, 0.05048506, 0.08908656, 0.07377089, 0.09990368, 0.14488069, 0.16595679, //14104-14111
		0.01403040, 0.02721991, 0.03517730, 0.06240495, 0.05113036, 0.07082179, 0.10245855, 0.11850374, //14112-14119
		0.03613932, 0.06424568, 0.07662723, 0.12676228, 0.10827435, 0.13895842, 0.19527176, 0.21919495, //14120-14127
		0.04939987, 0.09084769, 0.10732015, 0.18491448, 0.15817736, 0.20145395, 0.29994819, 0.33508225, //14128-14135
		0.09355999, 0.15764295, 0.17695167, 0.28130334, 0.24995424, 0.29866597, 0.42144642, 0.45655527, //14136-14143
		0.03257966, 0.03917182, 0.06224998, 0.08308093, 0.06965453, 0.11434074, 0.13359983, 0.19782572, //14144-14151
		0.07710753, 0.08998948, 0.12614291, 0.16252596, 0.14004084, 0.20526631, 0.23858582, 0.32225020, //14152-14159
		0.11962204, 0.13377852, 0.16730096, 0.20575826, 0.18245657, 0.24544656, 0.28035612, 0.35957261, //14160-14167
		0.25714207, 0.27707423, 0.31636331, 0.36891659, 0.33875611, 0.41151882, 0.46141962, 0.54419390, //14168-14175
		0.19229656, 0.21156063, 0.25273841, 0.30419470, 0.27405383, 0.35007941, 0.39894630, 0.48877093, //14176-14183
		0.31537168, 0.33298866, 0.36555846, 0.41467631, 0.38701140, 0.45181532, 0.50000332, 0.57487699, //14184-14191
		0.51637016, 0.53368838, 0.56281688, 0.61270737, 0.58576903, 0.64462321, 0.69810743, 0.76014038, //14192-14199
		0.64264046, 0.65318318, 0.66997996, 0.70549698, 0.68679754, 0.72648069, 0.76874695, 0.81302053, //14200-14207
		0.00069958, 0.00151100, 0.00228062, 0.00422630, 0.00330971, 0.00504953, 0.00699109, 0.00820632, //14208-14215
		0.00166928, 0.00383138, 0.00569674, 0.01136837, 0.00877627, 0.01358020, 0.02029229, 0.02428707, //14216-14223
		0.00505942, 0.01033734, 0.01373685, 0.02540949, 0.02044631, 0.02929270, 0.04264300, 0.04988388, //14224-14231
		0.01114334, 0.02374227, 0.03055461, 0.05910537, 0.04780719, 0.06714719, 0.10443831, 0.12191769, //14232-14239
		0.00722714, 0.01546037, 0.02041908, 0.03980717, 0.03178027, 0.04578252, 0.07109891, 0.08396628, //14240-14247
		0.02026555, 0.03949007, 0.04788466, 0.08647436, 0.07216982, 0.09584396, 0.14397433, 0.16443867, //14248-14255
		0.02928253, 0.05946826, 0.07138690, 0.13523938, 0.11319592, 0.14882141, 0.23968252, 0.27213260, //14256-14263
		0.05941960, 0.10962981, 0.12477740, 0.21609302, 0.18862507, 0.23129943, 0.35071977, 0.38484769, //14264-14271
		0.01949938, 0.02377401, 0.03877617, 0.05361069, 0.04405473, 0.07573045, 0.09081388, 0.14113723, //14272-14279
		0.05223782, 0.06162988, 0.08793653, 0.11669504, 0.09892934, 0.15036067, 0.17910617, 0.25147569, //14280-14287
		0.08348301, 0.09424284, 0.11950225, 0.15100732, 0.13203542, 0.18329206, 0.21436897, 0.28469120, //14288-14295
		0.20255510, 0.21953182, 0.25281887, 0.30048753, 0.27316432, 0.33904775, 0.38812013, 0.46931705, //14296-14303
		0.14645188, 0.16225367, 0.19595502, 0.24118221, 0.21468509, 0.28143468, 0.32806431, 0.41388242, //14304-14311
		0.25297351, 0.26834274, 0.29681835, 0.34244286, 0.31673378, 0.37697664, 0.42517081, 0.49998517, //14312-14319
		0.45587052, 0.47230367, 0.49999315, 0.55029250, 0.52316794, 0.58251638, 0.64029470, 0.70734546, //14320-14327
		0.58323330, 0.59373552, 0.61045047, 0.64768697, 0.62805315, 0.66972810, 0.71707300, 0.76664685, //14328-14335
		0.00550297, 0.00899773, 0.01233437, 0.01795258, 0.01530340, 0.02032895, 0.02431240, 0.02681673, //14336-14343
		0.00967719, 0.01667317, 0.02270380, 0.03511250, 0.02943613, 0.03995077, 0.05063967, 0.05700475, //14344-14351
		0.02429161, 0.03820627, 0.04714239, 0.06888379, 0.05960940, 0.07605561, 0.09485262, 0.10507624, //14352-14359
		0.04029366, 0.06552752, 0.07923550, 0.12050371, 0.10413584, 0.13207637, 0.17384601, 0.19342951, //14360-14367
		0.03000349, 0.04863528, 0.05988908, 0.09091236, 0.07805451, 0.10047863, 0.13123570, 0.14686111, //14368-14375
		0.06427035, 0.09759471, 0.11229179, 0.16233680, 0.14382889, 0.17447672, 0.22443824, 0.24563266, //14376-14383
		0.07998289, 0.12514661, 0.14311961, 0.21520153, 0.19033613, 0.23055150, 0.31422097, 0.34405332, //14384-14391
		0.13228793, 0.19438177, 0.21304527, 0.30285098, 0.27590964, 0.31779052, 0.41841035, 0.44716459, //14392-14399
		0.05402948, 0.06283822, 0.09366823, 0.11720295, 0.10207601, 0.15246019, 0.17107480, 0.23324583, //14400-14407
		0.10375142, 0.11824992, 0.15892462, 0.19459815, 0.17254584, 0.23645162, 0.26548975, 0.33856150, //14408-14415
		0.15120010, 0.16600190, 0.20087393, 0.23668099, 0.21506975, 0.27347176, 0.30311517, 0.37017273, //14416-14423
		0.27577339, 0.29412304, 0.33019334, 0.37499257, 0.34931195, 0.41128796, 0.45194321, 0.51931919, //14424-14431
		0.21704757, 0.23553583, 0.27500574, 0.32013233, 0.29370992, 0.36036110, 0.40056530, 0.47457632, //14432-14439
		0.32846602, 0.34412585, 0.37291689, 0.41378858, 0.39074022, 0.44474017, 0.48365488, 0.54418188, //14440-14447
		0.50001130, 0.51492576, 0.53997011, 0.58183531, 0.55925845, 0.60864751, 0.65461150, 0.70795910, //14448-14455
		0.60773970, 0.61663310, 0.63079354, 0.66058231, 0.64487748, 0.67819891, 0.71557716, 0.75475992, //14456-14463
		0.00441271, 0.00736733, 0.01018700, 0.01511312, 0.01279266, 0.01720037, 0.02081371, 0.02308204, //14464-14471
		0.00794244, 0.01400836, 0.01923715, 0.03040822, 0.02529897, 0.03477018, 0.04471636, 0.05063755, //14472-14479
		0.02028847, 0.03263268, 0.04057365, 0.06050183, 0.05199921, 0.06710355, 0.08486243, 0.09451957, //14480-14487
		0.03448468, 0.05745202, 0.06993689, 0.10881940, 0.09340572, 0.11972064, 0.16023443, 0.17922342, //14488-14495
		0.02536100, 0.04210790, 0.05221923, 0.08112960, 0.06914653, 0.09005581, 0.11957897, 0.13458389, //14496-14503
		0.05577482, 0.08658480, 0.10018644, 0.14796494, 0.13031746, 0.15957722, 0.20850375, 0.22926668, //14504-14511
		0.07028994, 0.11271672, 0.12959528, 0.19947390, 0.17535700, 0.21436516, 0.29759086, 0.32726590, //14512-14519
		0.11868057, 0.17838874, 0.19626420, 0.28484688, 0.25826353, 0.29960441, 0.40097104, 0.42993797, //14520-14527
		0.04725354, 0.05524324, 0.08321757, 0.10516073, 0.09104105, 0.13807322, 0.15597658, 0.21563485, //14528-14535
		0.09373802, 0.10728013, 0.14525989, 0.17946490, 0.15830799, 0.21959317, 0.24814997, 0.31998018, //14536-14543
		0.13810264, 0.15212100, 0.18515311, 0.21982978, 0.19891040, 0.25554563, 0.28482139, 0.35124371, //14544-14551
		0.25993787, 0.27779286, 0.31294138, 0.35738401, 0.33191833, 0.39340216, 0.43444697, 0.50248479, //14552-14559
		0.20250421, 0.22033640, 0.25841038, 0.30283334, 0.27680996, 0.34243777, 0.38283366, 0.45711496, //14560-14567
		0.31148758, 0.32686138, 0.35513830, 0.39596822, 0.37295109, 0.42688584, 0.46632528, 0.52769084, //14568-14575
		0.48510279, 0.50001526, 0.52505611, 0.56747991, 0.54460228, 0.59464473, 0.64180269, 0.69652116, //14576-14583
		0.59413998, 0.60312436, 0.61742769, 0.64785024, 0.63182190, 0.66582489, 0.70437511, 0.74475745, //14584-14591
		0.00258510, 0.00462901, 0.00658063, 0.01035243, 0.00857496, 0.01194532, 0.01493337, 0.01681076, //14592-14599
		0.00502607, 0.00952987, 0.01341332, 0.02251512, 0.01835026, 0.02606314, 0.03476815, 0.03995055, //14600-14607
		0.01358656, 0.02327168, 0.02952350, 0.04645643, 0.03922307, 0.05203888, 0.06808107, 0.07680214, //14608-14615
		0.02472266, 0.04388909, 0.05432490, 0.08919209, 0.07536558, 0.09899038, 0.13736816, 0.15536049, //14616-14623
		0.01757016, 0.03114285, 0.03935235, 0.06469361, 0.05419528, 0.07250390, 0.09998863, 0.11396311, //14624-14631
		0.04143961, 0.06810432, 0.07986790, 0.12385079, 0.10761712, 0.13455815, 0.18174940, 0.20180667, //14632-14639
		0.05398931, 0.09181110, 0.10686957, 0.17305464, 0.15021185, 0.18713931, 0.26966550, 0.29909539, //14640-14647
		0.09586834, 0.15140396, 0.16804053, 0.25461528, 0.22864192, 0.26898273, 0.37167313, 0.40101799, //14648-14655
		0.03588064, 0.04248444, 0.06558945, 0.08492033, 0.07248941, 0.11390328, 0.13057634, 0.18620171, //14656-14663
		0.07692933, 0.08885550, 0.12229118, 0.15403535, 0.13442481, 0.19123998, 0.21899383, 0.28876990, //14664-14671
		0.11608887, 0.12879673, 0.15879517, 0.19157762, 0.17178143, 0.22535087, 0.25420528, 0.31957152, //14672-14679
		0.23333936, 0.25039821, 0.28393342, 0.32781775, 0.30266697, 0.36332297, 0.40507522, 0.47425093, //14680-14687
		0.17806693, 0.19482404, 0.23054565, 0.27379951, 0.24845787, 0.31232276, 0.35300752, 0.42778932, //14688-14695
		0.28293294, 0.29787228, 0.32530842, 0.36601813, 0.34306499, 0.39682877, 0.43722886, 0.50003476, //14696-14703
		0.46005596, 0.47497095, 0.49999685, 0.54337868, 0.51999739, 0.57114078, 0.62030632, 0.67731069, //14704-14711
		0.57127869, 0.58042865, 0.59497023, 0.62647499, 0.60987255, 0.64508943, 0.68555164, 0.72798766, //14712-14719
		0.00155562, 0.00289849, 0.00418042, 0.00683278, 0.00558250, 0.00795853, 0.01020470, 0.01161794, //14720-14727
		0.00316029, 0.00626703, 0.00894520, 0.01571121, 0.01261694, 0.01835201, 0.02530014, 0.02943550, //14728-14735
		0.00877450, 0.01571340, 0.02018166, 0.03317324, 0.02762747, 0.03747202, 0.05065043, 0.05780955, //14736-14743
		0.01675093, 0.03125223, 0.03913096, 0.06759319, 0.05630610, 0.07556446, 0.10924627, 0.12502970, //14744-14751
		0.01162426, 0.02164570, 0.02768084, 0.04786943, 0.03950531, 0.05409092, 0.07763739, 0.08959787, //14752-14759
		0.02870689, 0.04948998, 0.05867383, 0.09548211, 0.08185868, 0.10442146, 0.14676927, 0.16474358, //14760-14767
		0.03849223, 0.06905047, 0.08122574, 0.13901880, 0.11906746, 0.15134027, 0.22903541, 0.25674672, //14768-14775
		0.07113777, 0.11822157, 0.13236139, 0.21118675, 0.18754458, 0.22432881, 0.32450384, 0.35312541, //14776-14783
		0.02556194, 0.03053829, 0.04795644, 0.06334433, 0.05345280, 0.08642160, 0.10055581, 0.14759315, //14784-14791
		0.05879258, 0.06840056, 0.09535257, 0.12229752, 0.10563573, 0.15393717, 0.17899664, 0.24200526, //14792-14799
		0.09050546, 0.10102030, 0.12582662, 0.15435665, 0.13712980, 0.18372584, 0.21023110, 0.27034854, //14800-14807
		0.19623367, 0.21142590, 0.24129493, 0.28214840, 0.25874642, 0.31523309, 0.35623229, 0.42410026, //14808-14815
		0.14639028, 0.16095016, 0.19201296, 0.23148293, 0.20836357, 0.26664419, 0.30584907, 0.37795546, //14816-14823
		0.24097189, 0.25451754, 0.27944067, 0.31801906, 0.29626567, 0.34719043, 0.38733006, 0.44975817, //14824-14831
		0.41819407, 0.43255508, 0.45665839, 0.50001369, 0.47661933, 0.52778200, 0.57915240, 0.63875364, //14832-14839
		0.52949765, 0.53856157, 0.55300391, 0.58530263, 0.56828308, 0.60438502, 0.64754971, 0.69278051, //14840-14847
		0.00210957, 0.00383333, 0.00547766, 0.00873101, 0.00719593, 0.01010893, 0.01275533, 0.01441822, //14848-14855
		0.00416680, 0.00802583, 0.01135417, 0.01938227, 0.01571033, 0.02251411, 0.03040805, 0.03510755, //14856-14863
		0.01136988, 0.01979604, 0.02520666, 0.04034137, 0.03388406, 0.04534041, 0.06005792, 0.06805015, //14864-14871
		0.02105660, 0.03807706, 0.04732509, 0.07925132, 0.06658474, 0.08820168, 0.12441815, 0.14139221, //14872-14879
		0.01483161, 0.02676866, 0.03397671, 0.05694590, 0.04743184, 0.06403580, 0.08969867, 0.10274603, //14880-14887
		0.03556463, 0.05952131, 0.07011726, 0.11077181, 0.09573992, 0.12065849, 0.16563186, 0.18472305, //14888-14895
		0.04687642, 0.08133474, 0.09505115, 0.15737411, 0.13588210, 0.17065095, 0.25095578, 0.27957973, //14896-14903
		0.08448684, 0.13615259, 0.15166289, 0.23460767, 0.20971172, 0.24844898, 0.34995851, 0.37896783, //14904-14911
		0.03112900, 0.03698744, 0.05746592, 0.07499957, 0.06373408, 0.10124396, 0.11675638, 0.16844367, //14912-14919
		0.06857267, 0.07943171, 0.10989924, 0.13941952, 0.12116387, 0.17406360, 0.20058022, 0.26721156, //14920-14927
		0.10431783, 0.11601143, 0.14358626, 0.17444710, 0.15582437, 0.20616918, 0.23395398, 0.29687367, //14928-14935
		0.21625798, 0.23244864, 0.26430348, 0.30678013, 0.28244078, 0.34120159, 0.38257659, 0.45117231, //14936-14943
		0.16348141, 0.17921002, 0.21278052, 0.25430413, 0.22998938, 0.29131979, 0.33128126, 0.40486807, //14944-14951
		0.26360878, 0.27789104, 0.30417423, 0.34391631, 0.32149852, 0.37403315, 0.41423925, 0.47687738, //14952-14959
		0.44077060, 0.45543408, 0.48003848, 0.52340642, 0.50001093, 0.55118284, 0.60133472, 0.65956128, //14960-14967
		0.55204120, 0.56114458, 0.57564823, 0.60750768, 0.59071581, 0.62634975, 0.66805833, 0.71175932, //14968-14975
		0.00089843, 0.00179047, 0.00264471, 0.00458121, 0.00366936, 0.00539921, 0.00717477, 0.00829166, //14976-14983
		0.00196551, 0.00417864, 0.00608359, 0.01135364, 0.00894208, 0.01341344, 0.01923382, 0.02270070, //14984-14991
		0.00569891, 0.01087144, 0.01417979, 0.02468959, 0.02020501, 0.02814788, 0.03948105, 0.04564862, //14992-14999
		0.01164445, 0.02314352, 0.02940720, 0.05374814, 0.04409823, 0.06058127, 0.09123366, 0.10559283, //15000-15007
		0.00782059, 0.01555770, 0.02022859, 0.03709187, 0.03010390, 0.04229149, 0.06332168, 0.07400687, //15008-15015
		0.02056302, 0.03756626, 0.04502963, 0.07731709, 0.06539250, 0.08513926, 0.12436334, 0.14102082, //15016-15023
		0.02858867, 0.05446766, 0.06474968, 0.11722135, 0.09912010, 0.12840993, 0.20301736, 0.22961438, //15024-15031
		0.05528170, 0.09694634, 0.10948028, 0.18336316, 0.16118871, 0.19569457, 0.29429431, 0.32245518, //15032-15039
		0.01896754, 0.02289815, 0.03663571, 0.04951181, 0.04124094, 0.06884753, 0.08131210, 0.12287065, //15040-15047
		0.04717195, 0.05529286, 0.07809887, 0.10197271, 0.08719650, 0.13000672, 0.15340074, 0.21206058, //15048-15055
		0.07410312, 0.08321859, 0.10474044, 0.13046400, 0.11494178, 0.15699815, 0.18211397, 0.23879562, //15056-15063
		0.17247607, 0.18645233, 0.21394806, 0.25291066, 0.23057630, 0.28446474, 0.32493251, 0.39197629, //15064-15071
		0.12610872, 0.13925045, 0.16733937, 0.20435721, 0.18266412, 0.23733358, 0.27562495, 0.34605556, //15072-15079
		0.21408124, 0.22676123, 0.25003183, 0.28725734, 0.26628766, 0.31538548, 0.35535815, 0.41752489, //15080-15087
		0.39139225, 0.40538563, 0.42886673, 0.47224396, 0.44886307, 0.50001734, 0.55280329, 0.61407307, //15088-15095
		0.50272765, 0.51174785, 0.52611376, 0.55894143, 0.54164231, 0.57834549, 0.62322529, 0.67021327, //15096-15103
		0.00058250, 0.00118654, 0.00176350, 0.00312897, 0.00248562, 0.00370666, 0.00501267, 0.00583527, //15104-15111
		0.00130461, 0.00284795, 0.00417767, 0.00802723, 0.00626695, 0.00953141, 0.01400735, 0.01667447, //15112-15119
		0.00383029, 0.00750320, 0.00986294, 0.01766489, 0.01433738, 0.02024816, 0.02911480, 0.03393667, //15120-15127
		0.00805608, 0.01653936, 0.02115108, 0.04010169, 0.03258696, 0.04540674, 0.07075640, 0.08263701, //15128-15135
		0.00534012, 0.01095249, 0.01434190, 0.02724369, 0.02189988, 0.03121728, 0.04829420, 0.05696926, //15136-15143
		0.01438951, 0.02714982, 0.03278013, 0.05828802, 0.04885109, 0.06448683, 0.09742925, 0.11140661, //15144-15151
		0.02039963, 0.04038123, 0.04833386, 0.09145738, 0.07657336, 0.10064044, 0.16667948, 0.19022692, //15152-15159
		0.04043007, 0.07364767, 0.08361310, 0.14644501, 0.12760106, 0.15691669, 0.24704901, 0.27279974, //15160-15167
		0.01361820, 0.01651572, 0.02666054, 0.03648716, 0.03017172, 0.05121695, 0.06118790, 0.09443100, //15168-15175
		0.03563972, 0.04194251, 0.05962351, 0.07885291, 0.06695996, 0.10142893, 0.12114129, 0.17070222, //15176-15183
		0.05665975, 0.06384603, 0.08079877, 0.10188561, 0.08916269, 0.12358017, 0.14497686, 0.19358799, //15184-15191
		0.14063824, 0.15242292, 0.17562549, 0.20962342, 0.19013592, 0.23717641, 0.27435946, 0.33598223, //15192-15199
		0.10105243, 0.11192832, 0.13515485, 0.16690470, 0.14830423, 0.19520482, 0.22972908, 0.29327452, //15200-15207
		0.17617127, 0.18700544, 0.20692071, 0.23983569, 0.22127342, 0.26478820, 0.30191263, 0.35971995, //15208-15215
		0.34542088, 0.35823328, 0.37975071, 0.42088817, 0.39868918, 0.44723417, 0.50001836, 0.56129803, //15216-15223
		0.45171123, 0.46019411, 0.47369565, 0.50571491, 0.48884029, 0.52464657, 0.57067024, 0.61887727, //15224-15231
		0.00021555, 0.00048594, 0.00074385, 0.00144498, 0.00111404, 0.00173921, 0.00250497, 0.00298351, //15232-15239
		0.00053811, 0.00130387, 0.00196514, 0.00416852, 0.00316037, 0.00502782, 0.00794142, 0.00967800, //15240-15247
		0.00166868, 0.00359858, 0.00484505, 0.00953071, 0.00752745, 0.01107280, 0.01707367, 0.02034200, //15248-15255
		0.00388668, 0.00886592, 0.01157081, 0.02425185, 0.01922220, 0.02781244, 0.04699687, 0.05598679, //15256-15263
		0.00246150, 0.00560883, 0.00751514, 0.01581323, 0.01237394, 0.01838068, 0.03085488, 0.03720086, //15264-15271
		0.00722574, 0.01504000, 0.01849653, 0.03619794, 0.02964766, 0.04047326, 0.06616878, 0.07704820, //15272-15279
		0.01091129, 0.02403274, 0.02923994, 0.06155668, 0.05041070, 0.06844886, 0.12450939, 0.14451018, //15280-15287
		0.02319410, 0.04665184, 0.05363738, 0.10358827, 0.08859740, 0.11190825, 0.19222566, 0.21516934, //15288-15295
		0.00741602, 0.00912084, 0.01508542, 0.02136714, 0.01733579, 0.03079486, 0.03780908, 0.06128841, //15296-15303
		0.02225043, 0.02643978, 0.03819793, 0.05201277, 0.04347937, 0.06822539, 0.08370474, 0.12260199, //15304-15311
		0.03639961, 0.04137227, 0.05308069, 0.06866502, 0.05925864, 0.08474221, 0.10196876, 0.14102269, //15312-15319
		0.10369992, 0.11292991, 0.13107721, 0.15937975, 0.14317109, 0.18229030, 0.21567744, 0.27096526, //15320-15327
		0.07196959, 0.08020646, 0.09780147, 0.12340618, 0.10840672, 0.14625587, 0.17644244, 0.23198789, //15328-15335
		0.13217568, 0.14085808, 0.15684706, 0.18481111, 0.16906322, 0.20599478, 0.23987835, 0.29260303, //15336-15343
		0.29206624, 0.30351188, 0.32271214, 0.36128727, 0.34047910, 0.38594515, 0.43875462, 0.50003493, //15344-15351
		0.39250733, 0.40036334, 0.41288853, 0.44395384, 0.42757583, 0.46230218, 0.50967123, 0.55930435, //15352-15359
		0.00149105, 0.00274226, 0.00393145, 0.00635454, 0.00521234, 0.00737998, 0.00941433, 0.01068964, //15360-15367
		0.00298250, 0.00583416, 0.00829119, 0.01441993, 0.01161811, 0.01681129, 0.02308315, 0.02681821, //15368-15375
		0.00820517, 0.01451142, 0.01856022, 0.03029224, 0.02528038, 0.03414430, 0.04603487, 0.05250392, //15376-15383
		0.01545920, 0.02855404, 0.03567017, 0.06131397, 0.05114414, 0.06851095, 0.09917718, 0.11354270, //15384-15391
		0.01079181, 0.01987228, 0.02534532, 0.04353236, 0.03600023, 0.04914770, 0.07051292, 0.08137213, //15392-15399
		0.02634540, 0.04502280, 0.05326397, 0.08645929, 0.07419816, 0.09449244, 0.13321597, 0.14962700, //15400-15407
		0.03514501, 0.06265448, 0.07362407, 0.12614291, 0.10801790, 0.13733358, 0.20972341, 0.23554095, //15408-15415
		0.06447624, 0.10695581, 0.11970061, 0.19189861, 0.17022908, 0.20392864, 0.29852805, 0.32555836, //15416-15423
		0.02339827, 0.02789871, 0.04365111, 0.05751151, 0.04860414, 0.07830149, 0.09103314, 0.13347427, //15424-15431
		0.05346670, 0.06215863, 0.08652138, 0.11092614, 0.09584402, 0.13955268, 0.16247582, 0.22007892, //15432-15439
		0.08217457, 0.09167410, 0.11406342, 0.13993621, 0.12433903, 0.16656682, 0.19092804, 0.24606343, //15440-15447
		0.17954469, 0.19347516, 0.22085120, 0.25872045, 0.23702208, 0.28939541, 0.32816769, 0.39240096, //15448-15455
		0.13364572, 0.14692664, 0.17529930, 0.21161561, 0.19035336, 0.24398859, 0.28079718, 0.34849464, //15456-15463
		0.22074570, 0.23320585, 0.25612908, 0.29202915, 0.27180054, 0.31923121, 0.35737949, 0.41678636, //15464-15471
		0.39228718, 0.40589308, 0.42874759, 0.47054322, 0.44799069, 0.49731113, 0.54832867, 0.60753679, //15472-15479
		0.50002630, 0.50871991, 0.52256948, 0.55418569, 0.53752727, 0.57284637, 0.61641815, 0.66204026, //15480-15487
		0.00122346, 0.00229532, 0.00332111, 0.00547212, 0.00445749, 0.00638051, 0.00824418, 0.00941264, //15488-15495
		0.00250488, 0.00501466, 0.00717656, 0.01275449, 0.01020507, 0.01493473, 0.02081311, 0.02431276, //15496-15503
		0.00698874, 0.01263226, 0.01626980, 0.02709683, 0.02247382, 0.03067544, 0.04192442, 0.04803814, //15504-15511
		0.01348028, 0.02549558, 0.03202770, 0.05626271, 0.04665251, 0.06307165, 0.09276815, 0.10667965, //15512-15519
		0.00930947, 0.01754614, 0.02252119, 0.03954572, 0.03249247, 0.04479879, 0.06533908, 0.07577731, //15520-15527
		0.02323014, 0.04059125, 0.04825283, 0.07990396, 0.06822109, 0.08760569, 0.12532369, 0.14133953, //15528-15535
		0.03139867, 0.05731490, 0.06761925, 0.11844438, 0.10090973, 0.12927407, 0.20080306, 0.22631225, //15536-15543
		0.05865559, 0.09935829, 0.11153609, 0.18229342, 0.16106867, 0.19408077, 0.28840155, 0.31534622, //15544-15551
		0.02090033, 0.02502129, 0.03945250, 0.05241817, 0.04409055, 0.07188353, 0.08409158, 0.12474655, //15552-15559
		0.04922546, 0.05739508, 0.08030332, 0.10370177, 0.08924062, 0.13116370, 0.15355556, 0.20983626, //15560-15567
		0.07627016, 0.08530031, 0.10657630, 0.13157464, 0.11649530, 0.15730674, 0.18118747, 0.23536009, //15568-15575
		0.17133820, 0.18487943, 0.21153815, 0.24882993, 0.22744119, 0.27906178, 0.31775829, 0.38188415, //15576-15583
		0.12652351, 0.13934482, 0.16671986, 0.20233124, 0.18146847, 0.23405273, 0.27061633, 0.33794351, //15584-15591
		0.21156645, 0.22375158, 0.24618563, 0.28171295, 0.26166909, 0.30861579, 0.34685155, 0.40628973, //15592-15599
		0.38339230, 0.39690598, 0.41960243, 0.46147590, 0.43888124, 0.48830102, 0.53984876, 0.59967051, //15600-15607
		0.49130885, 0.50001227, 0.51387442, 0.54569621, 0.52892747, 0.56451286, 0.60867360, 0.65493373, //15608-15615
		0.00079483, 0.00158675, 0.00234086, 0.00406420, 0.00325122, 0.00479214, 0.00637996, 0.00737664, //15616-15623
		0.00174229, 0.00370537, 0.00539751, 0.01010836, 0.00795594, 0.01194696, 0.01719782, 0.02033006, //15624-15631
		0.00504894, 0.00964192, 0.01261279, 0.02200329, 0.01798451, 0.02509710, 0.03536863, 0.04095295, //15632-15639
		0.01033753, 0.02063740, 0.02622168, 0.04823186, 0.03950529, 0.05439651, 0.08256159, 0.09575299, //15640-15647
		0.00694456, 0.01383704, 0.01800967, 0.03319805, 0.02690163, 0.03787170, 0.05710589, 0.06687133, //15648-15655
		0.01827753, 0.03351343, 0.04027313, 0.06950229, 0.05865818, 0.07658274, 0.11278678, 0.12814029, //15656-15663
		0.02547030, 0.04881890, 0.05814819, 0.10620210, 0.08960535, 0.11645893, 0.18660643, 0.21161770, //15664-15671
		0.04940395, 0.08722276, 0.09861758, 0.16704045, 0.14649958, 0.17844979, 0.27230921, 0.29909183, //15672-15679
		0.01692053, 0.02043539, 0.03277871, 0.04432747, 0.03690138, 0.06171849, 0.07306895, 0.11090154, //15680-15687
		0.04247482, 0.04982331, 0.07039874, 0.09221107, 0.07874409, 0.11782841, 0.13938425, 0.19354836, //15688-15695
		0.06686971, 0.07513903, 0.09460044, 0.11825072, 0.10400593, 0.14251199, 0.16570461, 0.21837526, //15696-15703
		0.15825973, 0.17119140, 0.19663512, 0.23307215, 0.21218172, 0.26260965, 0.30117782, 0.36509292, //15704-15711
		0.11516643, 0.12726377, 0.15309396, 0.18753175, 0.16735067, 0.21821573, 0.25445073, 0.32109377, //15712-15719
		0.19694424, 0.20868917, 0.23032391, 0.26526343, 0.24556958, 0.29178142, 0.33004299, 0.38957562, //15720-15727
		0.36922192, 0.38260931, 0.40504082, 0.44702951, 0.42438838, 0.47391817, 0.52634114, 0.58714805, //15728-15735
		0.47747206, 0.48616987, 0.50004503, 0.53222574, 0.51524873, 0.55124618, 0.59634712, 0.64360078, //15736-15743
		0.00048579, 0.00101152, 0.00151108, 0.00273748, 0.00216057, 0.00325315, 0.00445728, 0.00521295, //15744-15751
		0.00111393, 0.00248444, 0.00366872, 0.00719481, 0.00558255, 0.00857503, 0.01279185, 0.01530342, //15752-15759
		0.00331234, 0.00662042, 0.00874894, 0.01597203, 0.01288596, 0.01836653, 0.02678728, 0.03137511, //15760-15767
		0.00711237, 0.01493625, 0.01917932, 0.03714736, 0.03002456, 0.04218679, 0.06677223, 0.07828793, //15768-15775
		0.00467127, 0.00979440, 0.01289089, 0.02501338, 0.01999088, 0.02874919, 0.04520425, 0.05356078, //15776-15783
		0.01283092, 0.02469145, 0.02993791, 0.05431684, 0.04530013, 0.06023333, 0.09236360, 0.10601864, //15784-15791
		0.01842068, 0.03727848, 0.04480542, 0.08656761, 0.07214935, 0.09546898, 0.16073849, 0.18402237, //15792-15799
		0.03710308, 0.06892629, 0.07847258, 0.14001500, 0.12154694, 0.15029089, 0.24009038, 0.26572353, //15800-15807
		0.01232838, 0.01500007, 0.02435797, 0.03358026, 0.02764395, 0.04742578, 0.05696514, 0.08885740, //15808-15815
		0.03318640, 0.03914751, 0.05586460, 0.07432644, 0.06291185, 0.09601710, 0.11528429, 0.16373197, //15816-15823
		0.05310523, 0.05994856, 0.07610977, 0.09648819, 0.08418722, 0.11745585, 0.13846944, 0.18620779, //15824-15831
		0.13526480, 0.14674505, 0.16935853, 0.20287582, 0.18366391, 0.23004877, 0.26712885, 0.32859165, //15832-15839
		0.09653408, 0.10707083, 0.12955048, 0.16068441, 0.14245725, 0.18845624, 0.22275737, 0.28587924, //15840-15847
		0.17003990, 0.18062232, 0.20016386, 0.23271535, 0.21433365, 0.25736631, 0.29454741, 0.35235855, //15848-15855
		0.33945186, 0.35217866, 0.37357093, 0.41472393, 0.39250529, 0.44111938, 0.49432839, 0.55609699, //15856-15863
		0.44585783, 0.45433481, 0.46784875, 0.50003100, 0.48305330, 0.51902947, 0.56556996, 0.61431601, //15864-15871
		0.00064937, 0.00131333, 0.00195044, 0.00343786, 0.00273655, 0.00406604, 0.00547280, 0.00635426, //15872-15879
		0.00144331, 0.00312914, 0.00458085, 0.00872979, 0.00683228, 0.01035257, 0.01511399, 0.01795236, //15880-15887
		0.00422750, 0.00821588, 0.01077807, 0.01915171, 0.01557823, 0.02191991, 0.03130837, 0.03641736, //15888-15895
		0.00881782, 0.01793979, 0.02289686, 0.04298060, 0.03502043, 0.04862351, 0.07508887, 0.08749943, //15896-15903
		0.00586578, 0.01192639, 0.01558529, 0.02932916, 0.02363177, 0.03356000, 0.05147726, 0.06057437, //15904-15911
		0.01570212, 0.02935109, 0.03539096, 0.06229973, 0.05233796, 0.06884486, 0.10312907, 0.11768452, //15912-15919
		0.02212649, 0.04336578, 0.05180780, 0.09691282, 0.08134833, 0.10651311, 0.17437641, 0.19856628, //15920-15927
		0.04358510, 0.07857956, 0.08910551, 0.15426177, 0.13469715, 0.16512667, 0.25704817, 0.28331551, //15928-15935
		0.01475200, 0.01786499, 0.02877136, 0.03923818, 0.03251949, 0.05495239, 0.06545878, 0.10045222, //15936-15943
		0.03808113, 0.04476768, 0.06353013, 0.08375622, 0.07124206, 0.10747749, 0.12796669, 0.17944992, //15944-15951
		0.06035893, 0.06795564, 0.08586654, 0.10793692, 0.09462343, 0.13067627, 0.15286750, 0.20312849, //15952-15959
		0.14737323, 0.15963470, 0.18372779, 0.21879168, 0.19869836, 0.24718955, 0.28507274, 0.34782962, //15960-15967
		0.10635119, 0.11771496, 0.14195283, 0.17482529, 0.15558171, 0.20412899, 0.23943981, 0.30442255, //15968-15975
		0.18420928, 0.19540725, 0.21606934, 0.24987501, 0.23078905, 0.27541509, 0.31324505, 0.37199358, //15976-15983
		0.35514808, 0.36821214, 0.39016071, 0.43175865, 0.40932144, 0.45839925, 0.51118815, 0.57245477, //15984-15991
		0.46252345, 0.47110430, 0.48480178, 0.51699297, 0.50001689, 0.53600693, 0.58179461, 0.62974100, //15992-15999
		0.00030270, 0.00067204, 0.00102374, 0.00195015, 0.00151303, 0.00234239, 0.00331907, 0.00393152, //16000-16007
		0.00074453, 0.00176497, 0.00264440, 0.00547609, 0.00418040, 0.00657755, 0.01018831, 0.01233416, //16008-16015
		0.00228054, 0.00482897, 0.00646463, 0.01240918, 0.00988094, 0.01436673, 0.02172123, 0.02571624, //16016-16023
		0.00521269, 0.01156936, 0.01501599, 0.03058955, 0.02441965, 0.03497539, 0.05743818, 0.06797023, //16024-16031
		0.00333295, 0.00740032, 0.00986573, 0.02018406, 0.01589618, 0.02335521, 0.03817487, 0.04570427, //16032-16039
		0.00960843, 0.01948808, 0.02386359, 0.04532358, 0.03737162, 0.05051827, 0.08032257, 0.09295290, //16040-16047
		0.01426815, 0.03045411, 0.03693702, 0.07495911, 0.06183271, 0.08305816, 0.14545526, 0.16770640, //16048-16055
		0.02976654, 0.05809053, 0.06650624, 0.12405118, 0.10679197, 0.13362534, 0.22104099, 0.24602369, //16056-16063
		0.00961279, 0.01179053, 0.01940774, 0.02719808, 0.02218888, 0.03898881, 0.04747806, 0.07577256, //16064-16071
		0.02770266, 0.03283688, 0.04725151, 0.06377513, 0.05356778, 0.08313176, 0.10103305, 0.14606425, //16072-16079
		0.04496374, 0.05098560, 0.06515756, 0.08365974, 0.07250086, 0.10267532, 0.12241935, 0.16719042, //16080-16087
		0.12168615, 0.13229767, 0.15322866, 0.18503109, 0.16677826, 0.21083298, 0.24699943, 0.30703160, //16088-16095
		0.08552719, 0.09511681, 0.11563455, 0.14481945, 0.12772808, 0.17088319, 0.20399724, 0.26504429, //16096-16103
		0.15412184, 0.16405130, 0.18227827, 0.21347742, 0.19587038, 0.23713395, 0.27358996, 0.33039433, //16104-16111
		0.32185423, 0.33420017, 0.35494371, 0.39564121, 0.37369282, 0.42167136, 0.47540022, 0.53772671, //16112-16119
		0.42718231, 0.43552089, 0.44881663, 0.48100010, 0.46403288, 0.49999813, 0.54738378, 0.59697490, //16120-16127
		0.00019357, 0.00043833, 0.00067195, 0.00131502, 0.00101152, 0.00158754, 0.00229573, 0.00274040, //16128-16135
		0.00048563, 0.00118679, 0.00179223, 0.00383127, 0.00289874, 0.00462595, 0.00736816, 0.00899728, //16136-16143
		0.00150881, 0.00328835, 0.00442977, 0.00878264, 0.00692596, 0.01022736, 0.01588698, 0.01895688, //16144-16151
		0.00355275, 0.00817399, 0.01068374, 0.02263288, 0.01789156, 0.02599099, 0.04432807, 0.05291671, //16152-16159
		0.00223950, 0.00515284, 0.00691122, 0.01469787, 0.01147208, 0.01710133, 0.02898352, 0.03502661, //16160-16167
		0.00661439, 0.01390265, 0.01711902, 0.03384989, 0.02767126, 0.03792225, 0.06255095, 0.07298602, //16168-16175
		0.01005092, 0.02238609, 0.02729781, 0.05812524, 0.04748644, 0.06469190, 0.11915317, 0.13857142, //16176-16183
		0.02148823, 0.04369335, 0.05033598, 0.09835480, 0.08395673, 0.10638032, 0.18485495, 0.20726984, //16184-16191
		0.00685482, 0.00843910, 0.01397969, 0.01987680, 0.01608580, 0.02868679, 0.03536250, 0.05752936, //16192-16199
		0.02085255, 0.02480709, 0.03589270, 0.04901011, 0.04089908, 0.06441121, 0.07927065, 0.11663929, //16200-16207
		0.03420964, 0.03891565, 0.04997103, 0.06484259, 0.05587856, 0.08015529, 0.09674542, 0.13437591, //16208-16215
		0.09910208, 0.10796450, 0.12541245, 0.15281635, 0.13711767, 0.17502473, 0.20765089, 0.26174013, //16216-16223
		0.06850943, 0.07639382, 0.09322540, 0.11792325, 0.10345891, 0.13996839, 0.16937572, 0.22353904, //16224-16231
		0.12655425, 0.13492835, 0.15036267, 0.17748514, 0.16217682, 0.19804721, 0.23129778, 0.28299066, //16232-16239
		0.28445488, 0.29565781, 0.31448106, 0.35249322, 0.33197875, 0.37682984, 0.42937308, 0.49038178, //16240-16247
		0.38362260, 0.39136787, 0.40368513, 0.43447672, 0.41825626, 0.45267332, 0.50003661, 0.54963562, //16248-16255
		0.00007766, 0.00019350, 0.00030434, 0.00064946, 0.00048620, 0.00079358, 0.00122355, 0.00149240, //16256-16263
		0.00021562, 0.00058208, 0.00089726, 0.00210930, 0.00155641, 0.00258292, 0.00441331, 0.00550436, //16264-16271
		0.00070380, 0.00167207, 0.00229437, 0.00498693, 0.00384057, 0.00586591, 0.00977435, 0.01189345, //16272-16279
		0.00181971, 0.00461433, 0.00613004, 0.01429055, 0.01105312, 0.01657389, 0.03058304, 0.03714654, //16280-16287
		0.00109867, 0.00279428, 0.00382049, 0.00895456, 0.00682831, 0.01054172, 0.01935864, 0.02383741, //16288-16295
		0.00349876, 0.00806835, 0.01008075, 0.02182055, 0.01749066, 0.02468272, 0.04391715, 0.05207114, //16296-16303
		0.00565131, 0.01391101, 0.01718943, 0.04049849, 0.03246029, 0.04545949, 0.09159145, 0.10804569, //16304-16311
		0.01285735, 0.02860206, 0.03334933, 0.07143677, 0.06000038, 0.07778636, 0.14693055, 0.16668406, //16312-16319
		0.00396457, 0.00492919, 0.00832035, 0.01216567, 0.00969043, 0.01792375, 0.02268372, 0.03846689, //16320-16327
		0.01368039, 0.01638936, 0.02399369, 0.03353428, 0.02763990, 0.04476199, 0.05643250, 0.08579554, //16328-16335
		0.02295712, 0.02627046, 0.03406013, 0.04515450, 0.03848243, 0.05659449, 0.06982756, 0.10003365, //16336-16343
		0.07544299, 0.08246717, 0.09630659, 0.11905799, 0.10601317, 0.13752746, 0.16641405, 0.21431445, //16344-16351
		0.05069852, 0.05677310, 0.06974080, 0.08975334, 0.07802557, 0.10762843, 0.13310640, 0.18005529, //16352-16359
		0.09765874, 0.10440666, 0.11680282, 0.13979971, 0.12685280, 0.15719355, 0.18696297, 0.23337312, //16360-16367
		0.24528088, 0.25527148, 0.27205481, 0.30726141, 0.28827943, 0.32981264, 0.38117138, 0.44076495, //16368-16375
		0.33798840, 0.34510993, 0.35643682, 0.38575104, 0.37029208, 0.40305350, 0.45040664, 0.50002851, //16376-16383
	};
	for (int i = 0; i < 128; i++) lperm8_chances[i] = 0;
	for (int i = 0; i < fact8; i++) {
		Uint8 rawperm[8];
		Uint8 used = 0;
		if (i == 1736) {
			std::printf("");
		}
		int u = i;
		int d;
		for (int x = 0; x < 8; x++) {
			d = u % (8 - x);
			u /= 8 - x;
			int td = 0;
			int d2 = d;
			for (int y = 0; true; y++) {
				if ((used>>y) & 1) continue;
				if (!d2--) {
					td = y;
					break;
				}
			}
			used |= 1 << td;
			rawperm[x] = td;
		}
		if (used != 255) std::printf("duplicated values\n");
		int limited = _lperm8_8(rawperm);
		lperm8_chances[limited] += 1.0 / fact8;
	}
	for (int i = 0; i < 128; i++) {
		int low = i & 7;
		int high = (i >> 3) & 7;
		int which = i >> 6;
		double low_chance = lperm4_chances[low];
		double high_chance = lperm4_chances[high];
		double chance = low_chance * high_chance;
		double actual_chance = lperm8_chances[i] + lperm8_chances[i ^ 64];
		if (actual_chance - chance > 0.0000001) {
			issue_error("chances don't add up");
		}
		double observed_ratio = lperm8_chances[i] / chance;
		int low_odds = lperm4_greaterthan[low] - lperm4_lessthan[low];
		int high_odds = lperm4_greaterthan[high] - lperm4_lessthan[high];
		lperm8_greaterthan[i] = which ? lperm4_greaterthan[high] : lperm4_greaterthan[high] + lperm4_greaterthan[low] + 1;
		lperm8_lessthan[i] = which ? lperm4_lessthan[high] + lperm4_lessthan[low] + 1 : lperm4_lessthan[high];
		//if (!which) std::printf("%3d (%d:%d): %.5f %d\n", i, low, high, observed_ratio, high_odds - low_odds);
	}
	/*for (int i = 0; i < LPERM_BUCKETS; i++) {
		int low = i & 127;
		int high = (i >> 7) & 127;
		int meta = (((i >> 2) & 1) << 0) | (((i >> 5) & 1) << 1) | (((i >> 6) & 1) << 2) | (((i >> 9) & 1) << 3) | (((i >> 12) & 1) << 4) | (((i >> 13) & 1) << 5) | (((i >> 14) & 1) << 6);
		int which = i >> 14;
		lperm16_chances[i] = lperm8_chances[low] * lperm8_chances[high];
		double ratio = (lperm8_chances[meta] / (lperm8_chances[meta] + lperm8_chances[meta ^ 64]));
		lperm16_chances[i] *= ratio;// 
	}
	double sum = 0;
	for (int i = 0; i < 128; i++) sum += lperm8_chances[i];
	//std::printf("%f, ", sum);
	sum = 0;
	for (int i = 0; i < LPERM_BUCKETS; i++) sum += lperm16_chances[i];*/
	//std::printf("%f\n", sum);
	//double lowest = 1.0;
	//for (int i = 0; i < 128; i++) if (lowest > lperm8_chances[i]) lowest = lperm8_chances[i];
	//std::printf("%f\n", lowest);
	/*
		lperm8 chances are exact, but lperm16 chances are a crude approximation
	*/
	/*const Uint64 *counts_ = lperm_counts.get_array();
	double odds_sum[60] = { 0 };
	double odds_sum2[60] = { 0 };
	Uint64 odds_count[60] = { 0 };
	for (int i = 0; i < LPERM_BUCKETS / 2; i++) {
		int low = i & 127;
		int high = (i >> 7) & 127;
		int meta = (((i >> 2) & 1) << 0) | (((i >> 5) & 1) << 1) | (((i >> 6) & 1) << 2) | (((i >> 9) & 1) << 3) | (((i >> 12) & 1) << 4) | (((i >> 13) & 1) << 5) | (((i >> 14) & 1) << 6);
		int which = i >> 14;
		double base_chance = lperm8_chances[low] * lperm8_chances[high];
		double observed_ratio = counts_[i] / double(counts_[i] + counts_[i ^ 16384]);
		if (!double(counts_[i] + counts_[i ^ 16384])) continue;
		int low_odds = lperm8_greaterthan[low] - lperm8_lessthan[low];
		int high_odds = lperm8_greaterthan[high] - lperm8_lessthan[high];
		int odds = high_odds - low_odds;
		//if (odds < 0) { continue; odds = -odds; observed_ratio = 1 - observed_ratio; }
		//std::printf("%f\n", observed_ratio);
		if (std::fabs(observed_ratio - 0.5) > 0.2) {
			std::printf("");
		}
		odds += 30;
		if (odds < 0 || odds >= 60) continue;
		odds_count[odds]++;
		odds_sum[odds] += observed_ratio;
		odds_sum2[odds] += observed_ratio * observed_ratio;
		//if (!which) std::printf("%5d (%2x:%2x): %.6f %d\n", i, low, high, observed_ratio, high_odds - low_odds)
	}
	for (int i = 0; i < 60; i++) {
		if (odds_count[i]) {
			double mean = odds_sum[i] / odds_count[i];
			double meansqr = odds_sum2[i] / odds_count[i];
			std::printf("odds %+d: ratio %.8f +/- %.8f\n", i - 30, mean, std::sqrt(meansqr - mean * mean));
		}
	}
	for (int i = 0; i < LPERM_BUCKETS / 2; i++) {
		double observed_ratio = counts_[i] / double(counts_[i] + counts_[i ^ 16384]);
		std::printf("%.8f, ", observed_ratio);
		if ((i % 8) == 7) {
			std::printf("//%5d-%5d\n", i - 7, i);
		}
	}
	std::printf("\n");*/

	std::vector<double> lperm16_chances;
	lperm16_chances.resize(LPERM_BUCKETS);
	for (int i = 0; i < LPERM_BUCKETS / 2; i++) {
		int low = i & 127;
		int high = (i >> 7) & 127;
		double base_chance = lperm8_chances[low] * lperm8_chances[high];
		lperm16_chances[i] = base_chance * lperm16_ratio[i];
		lperm16_chances[i + LPERM_BUCKETS/2] = base_chance * (1 - lperm16_ratio[i]);
	}

	const Uint64 *counts_ = lperm_counts.get_array();
	double chisqr = g_test(LPERM_BUCKETS, &lperm16_chances[0], counts_);
	//double chisqr = g_test_flat(LPERM_BUCKETS, counts_);
	double n = math_chisquared_to_normal(chisqr, LPERM_BUCKETS - 1);
	//double n = g_test_flat_merge_normal(LPERM_BUCKETS, counts_);
	results.push_back(TestResult(get_name(), n, n, TestResult::TYPE_RAW_NORMAL, 0.01));
}
void PractRand::Tests::LPerm16::test_blocks(TestBlock *data, int numblocks) {
	blocks_tested += numblocks;
	while (numblocks > blocks_till_next_pass) {
		data += blocks_till_next_pass;
		numblocks -= blocks_till_next_pass;

		int perms_per_block = !passes_at_once ? (8 * TestBlock::SIZE / word_bits / 16) : passes_at_once;
		if (word_bits == 8) {
			for (int pos = 0; pos < perms_per_block; pos++) {
				int code = _lperm16_8(&data[0].as8[pos * 16]);
				lperm_counts.increment(code);
			}
		}
		if (word_bits == 16) {
			for (int pos = 0; pos < perms_per_block; pos++) {
				int code = _lperm16_16(&data[0].as16[pos * 16]);
				lperm_counts.increment(code);
			}
		}
		if (word_bits == 32) {
			for (int pos = 0; pos < perms_per_block; pos++) {
				int code = _lperm16_32(&data[0].as32[pos * 16]);
				lperm_counts.increment(code);
			}
		}
		if (word_bits == 64) {
			for (int pos = 0; pos < perms_per_block; pos++) {
				int code = _lperm16_64(&data[0].as64[pos * 16]);
				lperm_counts.increment(code);
			}
		}

		data += 1;
		numblocks -= 1;
		blocks_till_next_pass = blocks_per_pass - 1;
	}
	blocks_till_next_pass -= numblocks;
}










PractRand::Tests::Transforms::multiplex::multiplex(const char *name_, const ListOfTests &testlist)
:
	subtests(testlist)
{
//	for (unsigned int i = 0; i < testlist.tests.size(); i++) subtests.push_back(testlist.tests[i]);
	if (name_) name = name_;
	//else if (subtests.tests.size() == 1) name = subtests.tests[0]->get_name();
	else {
		//std::ostringstream str;
		//str << "{" << int(subtests.size()) << "}";
		//name = str.str();
		name = "";
	}
//	else name = make_string("");
}
bool PractRand::Tests::Transforms::multiplex::recommend_subtest_tree_descent() const {
	return true;
}
void PractRand::Tests::Transforms::multiplex::deinit() {
	for (std::vector<Tests::TestBaseclass*>::iterator it = subtests.tests.begin(); it != subtests.tests.end(); it++)
		(*it)->deinit();
}
void PractRand::Tests::Transforms::multiplex::init( RNGs::vRNG *known_good ) {
	blocks_already = 0;
	for (std::vector<Tests::TestBaseclass*>::iterator it = subtests.tests.begin(); it != subtests.tests.end(); it++)
		(*it)->init(known_good);
}
PractRand::Tests::Transforms::multiplex::~multiplex ( ) {
	for (std::vector<Tests::TestBaseclass*>::iterator it = subtests.tests.begin(); it != subtests.tests.end(); it++)
		delete (*it);
	subtests.tests.clear();
}
std::string PractRand::Tests::Transforms::multiplex::get_name() const {
	return name.c_str();
}
void PractRand::Tests::Transforms::multiplex::test_blocks(TestBlock *data, int numblocks) {
	for (std::vector<Tests::TestBaseclass*>::iterator it = subtests.tests.begin(); it != subtests.tests.end(); it++)
		(*it)->test_blocks(data, numblocks);
	blocks_already += numblocks;
}
static std::pair<int,std::pair<int,int> > extract_low_transform_params(const std::string name) {
	std::pair<int,std::pair<int,int> > fail(0, std::pair<int,int>(0,0));
	int first, last;
	char termination;
	const char *c = name.c_str();
	int r = std::sscanf(c, "[Low%d/%d%c", &first, &last, &termination);
	if (r != 3 || termination != ']') return fail;
	return std::pair<int,std::pair<int,int> >(int(strchr(c, ']') - c + 1), std::pair<int,int>(first,last));
}
static std::string combine_transform_names(const std::string &prefix, const std::string &name) {
	std::string fail = prefix + name;
	std::pair<int,std::pair<int,int> > a = extract_low_transform_params(prefix);
	std::pair<int,std::pair<int,int> > b = extract_low_transform_params(name);
	if (a.second.first != b.second.second) return fail;
	if (!a.second.second || !b.second.first) return fail;
	if (a.first != prefix.length()) return fail;
	if (b.first > name.length()) return fail;
	std::ostringstream buf;
	buf << "[Low" << b.second.first << "/" << a.second.second << "]" << name.substr(b.first);
	return buf.str();
}
void PractRand::Tests::Transforms::multiplex::get_results(std::vector<TestResult> &results) {
	size_t old_size = results.size();
	for (std::vector<Tests::TestBaseclass*>::iterator it = subtests.tests.begin(); it != subtests.tests.end(); it++) {
		(*it)->get_results(results);
	}
	for (size_t i = old_size; i < results.size(); i++) {
		results[i].name = combine_transform_names(get_name(), results[i].name);
		//results[i].name = get_name() + results[i].name;
	}
}
int PractRand::Tests::Transforms::multiplex::get_blocks_to_repeat() const {
	int rv = 0;
	for (std::vector<Tests::TestBaseclass*>::const_iterator it = subtests.tests.begin(); it != subtests.tests.end(); it++) {
		int x = (*it)->get_blocks_to_repeat();
		if (rv < x) rv = x;
	}
	return rv;
}
int PractRand::Tests::Transforms::multiplex::get_num_children() const { return subtests.tests.size(); }
Tests::TestBaseclass *PractRand::Tests::Transforms::multiplex::get_child  (int index) const {return subtests.tests[index];}
//std::string PractRand::Tests::Transforms::multiplex::get_child_name  (int index) const {return subtests[index]->get_name();}
//double      PractRand::Tests::Transforms::multiplex::get_child_result(int index) {return subtests[index]->get_result();}

Uint64 PractRand::Tests::Transforms::multiplex::get_blocks_passed_through(int index) const {
	return blocks_already;
}
Uint64 PractRand::Tests::Transforms::switching::get_blocks_passed_through(int index) const {
	return blocks_already_per[index];
}


PractRand::Tests::Transforms::switching::switching(
	const char *name_, 
	const ListOfTests &testlist, 
	std::vector<Uint64> lengths_)
:
	multiplex(name_, testlist),
	lengths(lengths_),
	phase(0),
	which(0)
{
	if (lengths.size() != testlist.tests.size()) issue_error();
	blocks_already_per.resize(lengths.size());
	for (unsigned long i = 0; i < blocks_already_per.size(); i++)
		blocks_already_per[i] = 0;
	total_length = 0;
	for (unsigned long i = 0; i < blocks_already_per.size(); i++) total_length += lengths[i];
}
PractRand::Tests::Transforms::switching::switching(
	const char *name_, 
	const ListOfTests &testlist, 
	Uint64 length)
:
	multiplex(name_, testlist)
{
	lengths.resize(testlist.tests.size());
	blocks_already_per.resize(lengths.size());
	for (unsigned long i = 0; i < blocks_already_per.size(); i++)
		lengths[i] = length;
	total_length = length * blocks_already_per.size();
}
void PractRand::Tests::Transforms::switching::init( RNGs::vRNG *known_good ) {
	for (unsigned long i = 0; i < blocks_already_per.size(); i++)
		blocks_already_per[i] = 0;
	phase = 0;
	which = 0;
	multiplex::init(known_good);
}
void PractRand::Tests::Transforms::switching::test_blocks( TestBlock *data, int numblocks_ ) {
	Uint64 numblocks = numblocks_;
	if (phase + numblocks < lengths[which]) {
		phase += numblocks;
		subtests.tests[which]->test_blocks(data, numblocks_);
		return;
	}
	Uint64 part = lengths[which] - phase;
	subtests.tests[which]->test_blocks(data, Uint32(part));
	phase = 0;
	if (++which == subtests.tests.size()) which = 0;
	data += part;
	numblocks_ -= part;
	test_blocks(data, numblocks_);
}
//double PractRand::Tests::Transforms::switching::get_result() {
//}
	
void PractRand::Tests::Transforms::Transform_Baseclass::init( RNGs::vRNG *known_good ) {
	Transforms::multiplex::init(known_good);
	leftovers = 0;
//	buffered.reserve( flush_size * TESTBLOCK_SIZE );
	buffered.clear();
}
void PractRand::Tests::Transforms::Transform_Baseclass::flush(bool aggressive) {
	int blocks_to_repeat = get_blocks_to_repeat();
	int minblocks = aggressive ? 1 : flush_size;
	int numblocks = buffered.size() - (leftovers?1:0);
	int old = (blocks_already > blocks_to_repeat) ? blocks_to_repeat : (int)blocks_already;
	numblocks -= old;
	if (numblocks < minblocks) return;
	Transforms::multiplex::test_blocks((TestBlock*)&buffered[old], numblocks);
//	int newold = blocks_already;
//	if (blocks_already > TestBaseclass::REPEATED_BLOCKS) newold = TestBaseclass::REPEATED_BLOCKS;
	int newold = (blocks_already > blocks_to_repeat) ? blocks_to_repeat : (int)blocks_already;
	int blocks_to_move = newold + (leftovers?1:0);
	if (!blocks_to_move) return;
	int how_far = buffered.size() - blocks_to_move;
	if (!how_far) return;
	std::memmove(&buffered[0], &buffered[how_far], blocks_to_move * TestBlock::SIZE);
	buffered.resize(blocks_to_move);
}


std::string PractRand::Tests::Transforms::FirstNofM::get_name() const {
	std::ostringstream str;
	str << "[1st";
	if (bytes_used & 1023) str << bytes_used;
	else if (bytes_used & ((1 << 20) - 1)) str << (bytes_used >> 10) << "K";
	else str << (bytes_used >> 20) << "M";
	str << "/";
	if (bytes_stride & 1023) str << bytes_stride << "B";
	else if (bytes_stride & ((1 << 20) - 1)) str << (bytes_stride >> 10) << "K";
	else str << (bytes_stride >> 20) << "M";
	str << "]" << Transform_Baseclass::get_name().c_str();
	return str.str();
//	return make_string("[1st%d/%dB]%s", bytes_used, bytes_stride, Transform_Baseclass::get_name().c_str());
}
void PractRand::Tests::Transforms::FirstNofM::init( RNGs::vRNG *known_good ) {
	Transform_Baseclass::init(known_good);
	input_phase = 0;
	if (bytes_stride < bytes_used) issue_error();
}
void PractRand::Tests::Transforms::FirstNofM::test_blocks(TestBlock *data, int numblocks) {
	int max = numblocks * TestBlock::SIZE;
	Uint8 *inptr = &data->as8[0];

	int inv_input_phase = bytes_stride - input_phase;
	if (!input_phase) inv_input_phase = 0;
	//int begin_length = bytes_stride - input_phase;
	int begin_length = input_phase;
	if (begin_length == bytes_stride) begin_length = 0;
	if (begin_length > max) begin_length = max;
	//int begin_out = begin_length > bytes_used ? bytes_used : begin_length;
	int begin_out = bytes_used - inv_input_phase;
	if (begin_out > begin_length) begin_out = begin_length;
	if (begin_out < 0) begin_out = 0;
	int full_sets = (max - begin_length) / bytes_stride;
	int main_length = full_sets * bytes_stride;
	int main_out = full_sets * bytes_used;
	int end_length = max - begin_length - main_length;
	int end_out = end_length > bytes_used ? bytes_used : end_length;
	int total_out = begin_out + main_out + end_out;
	int total_length = begin_length + main_length + end_length;
	if (total_length != max) issue_error();

	int leftover_blocks = leftovers ? 1 : 0;
	int alloc_already = leftover_blocks * TestBlock::SIZE - leftovers;
	int alloc_more = total_out - alloc_already;
	int old_blocks = buffered.size();
	if (alloc_more > 0) {
		int blocks_more = (alloc_more + TestBlock::SIZE - 1) / TestBlock::SIZE;
		buffered.resize(old_blocks + blocks_more);
	}
	Uint8 *outptr = total_out ? (&buffered[old_blocks].as8[0] - leftovers) : NULL;

	if (begin_out) std::memcpy(outptr, inptr, begin_out);
	outptr += begin_out;
	inptr += begin_length;
	max -= begin_length;
	if (main_out) {
		if (bytes_used == 1) {
			while (max > bytes_stride) {
				*outptr = *inptr;
				outptr += 1;
				inptr += bytes_stride;
				max -= bytes_stride;
			}
		}
		else if (bytes_used == 2) {
			while (max > bytes_stride) {
				outptr[0] = inptr[0];
				outptr[1] = inptr[1];
				outptr += 2;
				inptr += bytes_stride;
				max -= bytes_stride;
			}
		}
		else {
			while (max >= bytes_stride) {
				std::memcpy(outptr, inptr, bytes_used);
				outptr += bytes_used;
				inptr += bytes_stride;
				max -= bytes_stride;
			}
		}
	}
	if (end_out) std::memcpy(outptr, inptr, end_out);
	outptr += end_out;
	inptr += end_length;
	max -= end_length;
	if (main_length + end_length) {
		input_phase = bytes_stride - end_length;
		if (!end_length) input_phase = 0;
	}
	else {
		input_phase -= begin_length;
	}
	flush(false);
}
std::string PractRand::Tests::Transforms::lowbits::get_name() const {
	std::ostringstream str;
	str << "[Low" << (1 << lowbitsL) << "/" << (1<<(3+unitsL)) << "]";// << Transform_Baseclass::get_name().c_str();
	return str.str();
	//return make_string("[Low%d/%d]%s", 1 << lowbitsL, 1<<(3+unitsL),TestTransform_Base::get_name().c_str());
}
void PractRand::Tests::Transforms::lowbits::init( RNGs::vRNG *known_good ) {
	Transform_Baseclass::init(known_good);
	if ((lowbitsL > 5) || (lowbitsL > unitsL+3)) {
		issue_error();
	}
}
void PractRand::Tests::Transforms::lowbits::test_blocks(TestBlock *data, int numblocks) {
	enum {MAX_BLOCKS_AT_ONCE = 16384};
	while (numblocks > MAX_BLOCKS_AT_ONCE) {
		test_blocks(data, MAX_BLOCKS_AT_ONCE);
		data += MAX_BLOCKS_AT_ONCE;
		numblocks -= MAX_BLOCKS_AT_ONCE;
	}
	int max, lowbits;
	if (unitsL != -1) {
		max = numblocks * (TestBlock::SIZE >> unitsL);
		lowbits = 1 << lowbitsL;
	}
	else {
		max = numblocks * TestBlock::SIZE;
		lowbits = 2 << lowbitsL;
	}
	Uint32 *dest_ptr;
	if (1) {//allocate space in vector:
		int spare_words = (TestBlock::SIZE/4 - leftovers) & (TestBlock::SIZE/4-1);
		int words_to_use = (max * lowbits) / 32;
		int needed_words = words_to_use - spare_words;
		if (needed_words < 0) needed_words = 0;
		int needed_blocks = (needed_words + TestBlock::SIZE/4 - 1) / (TestBlock::SIZE/4);
		int oldblocks = buffered.size();
		buffered.resize(buffered.size() + needed_blocks);
		dest_ptr = &(buffered[oldblocks-(leftovers?1:0)].as32[leftovers]);
		leftovers = (leftovers + words_to_use) & (TestBlock::SIZE/4-1);
	}
	switch (unitsL) {
		case -1: {//4 bit words
			static const Uint8 table0[256] = {
				0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,
				0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,
				0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,
				0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3
			};
			static const Uint8 table1[256] = {
				0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,8,9,10,11,8,9,10,11,8,9,10,11,8,9,10,11,12,13,14,15,12,13,14,15,12,13,14,15,12,13,14,15,
				0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,8,9,10,11,8,9,10,11,8,9,10,11,8,9,10,11,12,13,14,15,12,13,14,15,12,13,14,15,12,13,14,15,
				0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,8,9,10,11,8,9,10,11,8,9,10,11,8,9,10,11,12,13,14,15,12,13,14,15,12,13,14,15,12,13,14,15,
				0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,8,9,10,11,8,9,10,11,8,9,10,11,8,9,10,11,12,13,14,15,12,13,14,15,12,13,14,15,12,13,14,15
			};
			const Uint8 *table = lowbitsL ? table1 : table0;
			int i = 0;
			while (i < max) {
				Uint32 word = table[data->as8[i++]];
				for (int j = lowbits; j < 32; j+=lowbits) {
					word |= Uint32(table[data->as8[i++]]) << j;
				}
				*dest_ptr = word;
				dest_ptr++;
			}
		}
		break;
		case 0: {//8 bit words
			Uint32 mask = (1 << lowbits) - 1;
			int i = 0;
			while (i < max) {
				Uint32 word = data->as8[i++] & mask;
				for (int j = lowbits; j < 32; j+=lowbits) {
					word |= Uint32(data->as8[i++] & mask) << j;
				}
				*dest_ptr = word;
				dest_ptr++;
			}
		}
		break;
		case 1: {//16 bit words
			Uint32 mask = (1 << lowbits) - 1;
			int i = 0;
			while (i < max) {
				Uint32 word = data->as16[i++] & mask;
				for (int j = lowbits; j < 32; j+=lowbits) {
					word |= Uint32(data->as16[i++] & mask) << j;
				}
				*dest_ptr = word;
				dest_ptr++;
			}
		}
		break;
		case 2: {//32 bit words
			Uint32 mask = (1 << lowbits) - 1;
			int i = 0;
			while (i < max) {
				Uint32 word = data->as32[i++] & mask;
				for (int j = lowbits; j < 32; j+=lowbits) {
					word |= Uint32(data->as32[i++] & mask) << j;
				}
				*dest_ptr = word;
				dest_ptr++;
			}
		}
		break;
		case 3: {//64 bit words
			Uint32 mask = Uint32((Uint64(1) << lowbits) - 1);
			int i = 0;
			while (i < max) {
				Uint32 word = Uint32(data->as64[i++]) & mask;
				for (int j = lowbits; j < 32; j+=lowbits) {
					word |= (Uint32(data->as64[i++]) & mask) << j;
				}
				*dest_ptr = word;
				dest_ptr++;
			}
		}
		break;
		default:{
			issue_error();
		}
		break;
	}
	flush(false);
}

